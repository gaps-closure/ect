; ModuleID = './examples/secdesk/c/orange/fio.mod.c'
source_filename = "./examples/secdesk/c/orange/fio.mod.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.fio_data_s = type { %struct.timespec, i32, i32, %struct.fio_ls_s, i16, i16, i8, i8, i8, i8, i32, i32, [0 x %struct.fio_fd_data_s] }
%struct.timespec = type { i64, i64 }
%struct.fio_ls_s = type { %struct.fio_ls_s*, %struct.fio_ls_s*, i8* }
%struct.fio_fd_data_s = type { %struct.fio_packet_s*, %struct.fio_packet_s**, i64, %struct.fio_protocol_s*, i64, i16, i8, i8, i8, i8, i8, i8, i8, i8, [48 x i8], %struct.fio_rw_hook_s*, i8*, %struct.fio_uuid_links_s }
%struct.fio_packet_s = type { %struct.fio_packet_s*, i32 (i32, %struct.fio_packet_s*)*, void (i8*)*, %union.anon, i64, i64 }
%union.anon = type { i8* }
%struct.fio_protocol_s = type { void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)*, i8 (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)*, i64 }
%struct.fio_rw_hook_s = type { i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*)*, i64 (i64, i8*)*, void (i8*)* }
%struct.fio_uuid_links_s = type { i64, i64, i64, %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__map_s_*, i8, i8, i8 }
%struct.fio_uuid_links__ordered_s_ = type { i64, void (i8*)* }
%struct.fio_uuid_links__map_s_ = type { i64, %struct.fio_uuid_links__ordered_s_* }
%struct.fio_ls_embd_s = type { %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s* }
%struct.fio_task_queue_s = type { i8, %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s }
%struct.fio_defer_queue_block_s = type { [168 x %struct.fio_defer_task_s], %struct.fio_defer_queue_block_s*, i64, i64, i8 }
%struct.fio_defer_task_s = type { void (i8*, i8*)*, i8*, i8* }
%struct.sigaction = type { %union.anon.0, %struct.__sigset_t, i32, void ()* }
%union.anon.0 = type { void (i32)* }
%struct.__sigset_t = type { [16 x i64] }
%struct.callback_collection_s = type { i8, %struct.fio_ls_embd_s }
%struct.fio_pubsub_engine_s = type { void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* }
%struct.fio_str_info_s = type { i64, i64, i8* }
%struct.anon.13 = type { %struct.fio_collection_s, %struct.fio_collection_s, %struct.fio_collection_s, %struct.anon.14, %struct.anon.15 }
%struct.fio_collection_s = type { %struct.fio_ch_set_s, i8 }
%struct.fio_ch_set_s = type { i64, i64, i64, %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__map_s_*, i8, i8, i8 }
%struct.fio_ch_set__ordered_s_ = type { i64, %struct.channel_s* }
%struct.channel_s = type { i64, i8*, i64, %struct.fio_ls_embd_s, %struct.fio_collection_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i8 }
%struct.fio_ch_set__map_s_ = type { i64, %struct.fio_ch_set__ordered_s_* }
%struct.anon.14 = type { %struct.fio_engine_set_s, i8 }
%struct.fio_engine_set_s = type { i64, i64, i64, %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__map_s_*, i8, i8, i8 }
%struct.fio_engine_set__ordered_s_ = type { i64, %struct.fio_pubsub_engine_s* }
%struct.fio_engine_set__map_s_ = type { i64, %struct.fio_engine_set__ordered_s_* }
%struct.anon.15 = type { %struct.fio_meta_ary_s, i8 }
%struct.fio_meta_ary_s = type { i64, i64, i64, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** }
%struct.fio_msg_metadata_s = type { i64, void (%struct.fio_msg_s*, i8*)*, i8* }
%struct.fio_msg_s = type { i32, %struct.fio_str_info_s, %struct.fio_str_info_s, i8*, i8*, i8 }
%struct.arena_s = type { %struct.block_s*, i8 }
%struct.block_s = type { %struct.block_s*, i16, i16, i16, i16 }
%struct.anon.16 = type { %struct.fio_ls_embd_s, i64, i8, i8 }
%struct.cluster_data_s = type { i64, %struct.fio_ls_s, i8, [256 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%union.protocol_metadata_union_u = type { i64 }
%struct.protocol_metadata_s = type { [3 x i8], i8 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.fio_timer_s = type { %struct.fio_ls_embd_s, %struct.timespec, i64, i64, void (i8*)*, i8*, void (i8*)* }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.in6_addr = type { %union.anon.10 }
%union.anon.10 = type { [4 x i32] }
%union.__SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.sockaddr_un = type { i16, [108 x i8] }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.fio_write_args_s = type { %union.anon.11, %union.anon.12, i64, i64, i8 }
%union.anon.11 = type { i8* }
%union.anon.12 = type { void (i8*)* }
%struct.callback_data_s = type { %struct.fio_ls_embd_s, void (i8*)*, i8* }
%struct.fio_defer_iotask_args_s = type { i32, void (i64, %struct.fio_protocol_s*, i8*)*, i8*, void (i64, i8*)* }
%struct.rlimit = type { i64, i64 }
%struct.epoll_event = type <{ i32, %union.epoll_data }>
%union.epoll_data = type { i8* }
%struct.fio_start_args = type { i16, i16 }
%struct.fio_defer_thread_pool_s = type { i64, [0 x i8*] }
%struct.fio_listen_args = type { void (i64, i8*)*, i8*, i8*, i8*, i8*, void (i64, i8*)*, void (i64, i8*)* }
%struct.fio_listen_protocol_s = type { %struct.fio_protocol_s, i64, i8*, void (i64, i8*)*, void (i64, i8*)*, void (i64, i8*)*, i8*, i8*, i64, i64, i8* }
%struct.fio_connect_args = type { i8*, i8*, void (i64, i8*)*, void (i64, i8*)*, i8*, i8*, i8 }
%struct.fio_connect_protocol_s = type { %struct.fio_protocol_s, i64, i8*, i8*, void (i64, i8*)*, void (i64, i8*)* }
%struct.fio_url_s = type { %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s, %struct.fio_str_info_s }
%struct.subscription_s = type { %struct.fio_ls_embd_s, %struct.channel_s*, void (%struct.fio_msg_s*)*, void (i8*, i8*)*, i8*, i8*, i64, i8, i8 }
%struct.subscribe_args_s = type { i32, %struct.fio_str_info_s, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, void (%struct.fio_msg_s*)*, void (i8*, i8*)*, i8*, i8* }
%struct.fio_msg_client_s = type { %struct.fio_msg_s, i64, i64, %struct.fio_msg_metadata_s* }
%struct.fio_publish_args_s = type { %struct.fio_pubsub_engine_s*, i32, %struct.fio_str_info_s, %struct.fio_str_info_s, i8 }
%struct.fio_msg_internal_s = type { %struct.fio_str_info_s, %struct.fio_str_info_s, i64, i32, i8, i64, [0 x %struct.fio_msg_metadata_s] }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon.17, %union.anon.18, %union.anon.19, %union.anon.20, %union.anon.21, %union.anon.22, %union.anon.23, %union.anon.24, %union.anon.25, %union.anon.26, %union.anon.27, %union.anon.28, %union.anon.29, %union.anon.30 }
%struct.timeval = type { i64, i64 }
%union.anon.17 = type { i64 }
%union.anon.18 = type { i64 }
%union.anon.19 = type { i64 }
%union.anon.20 = type { i64 }
%union.anon.21 = type { i64 }
%union.anon.22 = type { i64 }
%union.anon.23 = type { i64 }
%union.anon.24 = type { i64 }
%union.anon.25 = type { i64 }
%union.anon.26 = type { i64 }
%union.anon.27 = type { i64 }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.30 = type { i64 }
%union.anon.34 = type { i64 }
%struct.fio_sha1_s = type { i64, [64 x i8], %union.anon.31 }
%union.anon.31 = type { [5 x i32], [4 x i8] }
%struct.fio_sha2_s = type { %union.anon.32, [128 x i8], %union.anon.33, i32 }
%union.anon.32 = type { [2 x i64] }
%union.anon.33 = type { [8 x i64], [8 x i8] }
%struct.cluster_pr_s = type { %struct.fio_protocol_s, %struct.fio_msg_internal_s*, {}*, void (i8*, i64)*, %struct.fio_sub_hash_s, %struct.fio_sub_hash_s, i64, i32, i32, i32, i32, i32, i8, [16384 x i8] }
%struct.fio_sub_hash_s = type { i64, i64, i64, %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__map_s_*, i8, i8, i8 }
%struct.fio_sub_hash__ordered_s_ = type { i64, %struct.fio_sub_hash_couplet_s }
%struct.fio_sub_hash_couplet_s = type { %struct.fio_str_s, %struct.subscription_s* }
%struct.fio_str_s = type { i32, i8, i8, [10 x i8], i64, i64, void (i8*)*, i8* }
%struct.fio_sub_hash__map_s_ = type { i64, %struct.fio_sub_hash__ordered_s_* }
%struct.block_node_s = type { %struct.block_s, %struct.fio_ls_embd_s }

@.str = private unnamed_addr constant [26 x i8] c"... (warning: truncated).\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"ERROR: log output error (can't write).\0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@FIO_LOG_LEVEL = weak dso_local global i32 4, align 4
@fio_data = internal global %struct.fio_data_s* null, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.3 = private unnamed_addr constant [73 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:598\00", align 1
@fio_thread_queue = dso_local global %struct.fio_ls_embd_s { %struct.fio_ls_embd_s* @fio_thread_queue, %struct.fio_ls_embd_s* @fio_thread_queue }, align 8
@fio_thread_lock = dso_local global i8 0, align 1
@task_queue_normal = internal global %struct.fio_task_queue_s { i8 0, %struct.fio_defer_queue_block_s* bitcast (i8* getelementptr (i8, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 0), i64 24) to %struct.fio_defer_queue_block_s*), %struct.fio_defer_queue_block_s* bitcast (i8* getelementptr (i8, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 0), i64 24) to %struct.fio_defer_queue_block_s*), %struct.fio_defer_queue_block_s zeroinitializer }, align 8
@task_queue_urgent = internal global %struct.fio_task_queue_s { i8 0, %struct.fio_defer_queue_block_s* bitcast (i8* getelementptr (i8, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 0), i64 24) to %struct.fio_defer_queue_block_s*), %struct.fio_defer_queue_block_s* bitcast (i8* getelementptr (i8, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 0), i64 24) to %struct.fio_defer_queue_block_s*), %struct.fio_defer_queue_block_s zeroinitializer }, align 8
@.str.4 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:1307\00", align 1
@fio_signal_children_flag = dso_local global i8 0, align 1
@fio_signal_set_flag = dso_local global i8 0, align 1
@fio_old_sig_chld = internal global %struct.sigaction zeroinitializer, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"Child reaping initialization failed\00", align 1
@fio_old_sig_int = internal global %struct.sigaction zeroinitializer, align 8
@fio_old_sig_term = internal global %struct.sigaction zeroinitializer, align 8
@fio_old_sig_pipe = internal global %struct.sigaction zeroinitializer, align 8
@fio_old_sig_usr1 = internal global %struct.sigaction zeroinitializer, align 8
@fio_expected_concurrency.print_cores_warning = internal global i32 1, align 4
@.str.6 = private unnamed_addr constant [228 x i8] c"WARNING: Detected %zu cores. Capping auto-detection of cores to %zu.\0A      Avoid this message by setting threads / workers manually.\0A      To increase auto-detection limit, recompile with:\0A             -DFIO_CPU_CORES_LIMIT=%zu\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"epoll\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"ERROR: (fio_socket) port %s is not a number.\00", align 1
@.str.9 = private unnamed_addr constant [58 x i8] c"WARNING: (fio_socket) negative port number %s is ignored.\00", align 1
@.str.10 = private unnamed_addr constant [66 x i8] c"ERROR: (fio_socket) both address and port are missing or invalid.\00", align 1
@FIO_DEFAULT_RW_HOOKS = dso_local constant %struct.fio_rw_hook_s { i64 (i64, i8*, i8*, i64)* @fio_hooks_default_read, i64 (i64, i8*, i8*, i64)* @fio_hooks_default_write, i64 (i64, i8*)* @fio_hooks_default_flush, i64 (i64, i8*)* @fio_hooks_default_before_close, void (i8*)* @fio_hooks_default_cleanup }, align 8
@.str.11 = private unnamed_addr constant [77 x i8] c"ERROR: fio_flush EFAULT - possible memory address error sent to Unix socket.\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"UUID error: %p (%d)\0A\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"No errno handler\00", align 1
@.str.14 = private unnamed_addr constant [56 x i8] c"WARNING: (facil.io) possible Slowloris attack from %.*s\00", align 1
@.str.15 = private unnamed_addr constant [95 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:3288): Called fio_timeout_set for invalid uuid %p\00", align 1
@callback_collection = internal global [14 x %struct.callback_collection_s] zeroinitializer, align 16
@.str.16 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:3334\00", align 1
@.str.17 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:3379\00", align 1
@.str.18 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:3402\00", align 1
@.str.19 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:3493\00", align 1
@.str.20 = private unnamed_addr constant [101 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:3548): (%d) facil.io resources released, exit complete.\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.22 = private unnamed_addr constant [47 x i8] c"WARNING: `getrlimit` failed in `fio_lib_init`.\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"\09errno:\00", align 1
@.str.24 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:3623\00", align 1
@.str.25 = private unnamed_addr constant [138 x i8] c"INFO: Server is running %u %s X %u %s with facil.io 0.7.4 (%s)\0A* Detected capacity: %d open file limit\0A* Root pid: %d\0A* Press ^C to stop\0A\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"workers\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"worker\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"threads\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"thread\00", align 1
@__const.fio_ltoa.notation = private unnamed_addr constant [16 x i8] c"0123456789ABCDEF", align 16
@.str.30 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.31 = private unnamed_addr constant [47 x i8] c"FATAL: No supported SSL/TLS library available.\00", align 1
@.str.32 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:4594\00", align 1
@.str.33 = private unnamed_addr constant [27 x i8] c"INFO: Listening on port %s\00", align 1
@.str.34 = private unnamed_addr constant [37 x i8] c"INFO: Listening on Unix Socket at %s\00", align 1
@.str.35 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:4754\00", align 1
@FIO_PUBSUB_DEFAULT = dso_local global %struct.fio_pubsub_engine_s* inttoptr (i64 1 to %struct.fio_pubsub_engine_s*), align 8
@.str.36 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:5457\00", align 1
@fio_postoffice = internal global %struct.anon.13 zeroinitializer, align 8
@.str.37 = private unnamed_addr constant [84 x i8] c"ERROR: (pub/sub) pub/sub engines can only be used for pub/sub messages (no filter).\00", align 1
@FIO_MATCH_GLOB = dso_local global i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* @fio_glob_match, align 8
@arena_last_used = internal thread_local global %struct.arena_s* null, align 8
@arenas = internal global %struct.arena_s* null, align 8
@memory = internal global %struct.anon.16 { %struct.fio_ls_embd_s { %struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0), %struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0) }, i64 1, i8 0, i8 0 }, align 8
@on_malloc_zero = internal global x86_fp80 0xK00000000000000000000, align 16
@fio_rand64.s = internal thread_local global [2 x i64] zeroinitializer, align 16
@fio_rand64.c = internal thread_local global i16 0, align 2
@__const.fio_rand64.P = private unnamed_addr constant [2 x i64] [i64 3994713081282041543, i64 8524676065933344269], align 16
@constinit = private global [5 x i32] [i32 1732584193, i32 -271733879, i32 -1732584194, i32 271733878, i32 -1009589776], align 4
@constinit.38 = private global <{ [8 x i32], [8 x i32] }> <{ [8 x i32] [i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534, i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225], [8 x i32] zeroinitializer }>, align 4
@constinit.39 = private global [8 x i64] [i64 -3766243637369397544, i64 7105036623409894663, i64 -7973340178411365097, i64 1526699215303891257, i64 7436329637833083697, i64 -8163818279084223215, i64 -2662702644619276377, i64 5167115440072839076], align 8
@constinit.40 = private global [8 x i64] [i64 7640891576956012808, i64 -4942790177534073029, i64 4354685564936845355, i64 -6534734903238641935, i64 5840696475078001361, i64 -7276294671716946913, i64 2270897969802886507, i64 6620516959819538809], align 8
@constinit.41 = private global <{ [8 x i32], [8 x i32] }> <{ [8 x i32] [i32 -1056596264, i32 914150663, i32 812702999, i32 -150054599, i32 -4191439, i32 1750603025, i32 1694076839, i32 -1090891868], [8 x i32] zeroinitializer }>, align 4
@constinit.42 = private global [8 x i64] [i64 -8341449602262348382, i64 8350123849800275158, i64 2160240930085379202, i64 7466358040605728719, i64 1111592415079452072, i64 8638871050018654530, i64 4583966954114332360, i64 1230299281376055969], align 8
@constinit.43 = private global [8 x i64] [i64 2463787394917988140, i64 -6965556091613846334, i64 2563595384472711505, i64 -7622211418569250115, i64 -7626776825740460061, i64 -4729309413028513390, i64 3098927326965381290, i64 1060366662362279074], align 8
@.str.44 = private unnamed_addr constant [37 x i8] c"FATAL: SHA-2 ERROR - variant unknown\00", align 1
@base64_encodes_original = internal constant [66 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\00", align 16
@base64_encodes_url = internal constant [66 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\00", align 16
@fio_hash_secret_marker1 = weak dso_local global i8 0, align 1
@fio_hash_secret_marker2 = weak dso_local global i8 0, align 1
@__const.fio_reschedule_thread.tm = private unnamed_addr constant %struct.timespec { i64 0, i64 1 }, align 8
@.str.45 = private unnamed_addr constant [274 x i8] c"FATAL: facil.io Set / Hash Map has too many collisions (%zu/%zu).\0A\09\09this is a fatal implementation error,please report this issue at facio.io's open source project\0A\09\09Note: hash maps and sets should never reach this point.\0A\09\09They should be guarded against collision attacks.\00", align 1
@.str.46 = private unnamed_addr constant [51 x i8] c"FATAL ERROR: couldn't allocate memory for Set data\00", align 1
@.str.47 = private unnamed_addr constant [65 x i8] c"WARNING: (fio hash map) too many full collisions - under attack?\00", align 1
@.str.48 = private unnamed_addr constant [73 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:920\00", align 1
@fio_timer_lock = internal global i8 0, align 1
@fio_timers = internal global %struct.fio_ls_embd_s { %struct.fio_ls_embd_s* @fio_timers, %struct.fio_ls_embd_s* @fio_timers }, align 8
@.str.49 = private unnamed_addr constant [47 x i8] c"WARNING: CPU core count auto-detection failed.\00", align 1
@evio_fd = internal global [3 x i32] [i32 -1, i32 -1, i32 -1], align 4
@.str.50 = private unnamed_addr constant [67 x i8] c"ERROR: (fio_unix_socket) address too long (%zu bytes > %zu bytes).\00", align 1
@.str.51 = private unnamed_addr constant [73 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:272\00", align 1
@cluster_data = internal global %struct.cluster_data_s { i64 0, %struct.fio_ls_s { %struct.fio_ls_s* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.cluster_data_s* @cluster_data to i8*), i64 8) to %struct.fio_ls_s*), %struct.fio_ls_s* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.cluster_data_s* @cluster_data to i8*), i64 8) to %struct.fio_ls_s*), i8* null }, i8 0, [256 x i8] zeroinitializer }, align 8
@.str.52 = private unnamed_addr constant [34 x i8] c"FATAL: couldn't initialize epoll.\00", align 1
@.str.53 = private unnamed_addr constant [28 x i8] c"couldn't set signal handler\00", align 1
@fio_fork_lock = internal global i8 0, align 1
@.str.54 = private unnamed_addr constant [30 x i8] c"FATAL: couldn't spawn worker.\00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c"\0A           errno\00", align 1
@.str.56 = private unnamed_addr constant [53 x i8] c"ERROR: Child worker (%d) crashed. Respawning worker.\00", align 1
@.str.57 = private unnamed_addr constant [56 x i8] c"WARNING: Child worker (%d) shutdown. Respawning worker.\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"INFO: %d is running.\00", align 1
@fio_cycle_schedule_events.idle = internal global i32 0, align 4
@fio_cycle_schedule_events.last_to_review = internal global i64 0, align 8
@.str.59 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:1118\00", align 1
@.str.60 = private unnamed_addr constant [68 x i8] c"FATAL: couldn't spawn threads for thread pool, attempting shutdown.\00", align 1
@fio_defer_thread_wait.static_throttle = internal thread_local global i64 262143, align 8
@.str.61 = private unnamed_addr constant [33 x i8] c"INFO: (%d) detected exit signal.\00", align 1
@.str.62 = private unnamed_addr constant [35 x i8] c"INFO: Server Detected exit signal.\00", align 1
@.str.63 = private unnamed_addr constant [38 x i8] c"INFO:    ---  Shutdown Complete  ---\0A\00", align 1
@.str.64 = private unnamed_addr constant [29 x i8] c"INFO: (%d) cleanup complete.\00", align 1
@.str.65 = private unnamed_addr constant [86 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:4514): (%d) started listening on port %s\00", align 1
@.str.66 = private unnamed_addr constant [96 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:4517): (%d) started listening on Unix Socket at %s\00", align 1
@.str.67 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:5144\00", align 1
@.str.68 = private unnamed_addr constant [70 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.h:4920\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@.str.70 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"facil-io-sock-\00", align 1
@.str.72 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.73 = private unnamed_addr constant [57 x i8] c"FATAL: (facil.io cluster) failed to open cluster socket.\00", align 1
@.str.74 = private unnamed_addr constant [44 x i8] c"             check file permissions. errno:\00", align 1
@.str.75 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:6226\00", align 1
@.str.76 = private unnamed_addr constant [82 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:6234): (%d) Listening to cluster: %s\00", align 1
@.str.77 = private unnamed_addr constant [43 x i8] c"FATAL: Cluster protocol allocation failed.\00", align 1
@.str.78 = private unnamed_addr constant [60 x i8] c"FATAL: (%d) cluster message name too long (16Mb limit): %u\0A\00", align 1
@.str.79 = private unnamed_addr constant [60 x i8] c"FATAL: (%d) cluster message data too long (64Mb limit): %u\0A\00", align 1
@.str.80 = private unnamed_addr constant [43 x i8] c"FATAL: (%d) Parent Process crash detected!\00", align 1
@.str.81 = private unnamed_addr constant [70 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.h:4024\00", align 1
@.str.82 = private unnamed_addr constant [70 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.h:4027\00", align 1
@.str.83 = private unnamed_addr constant [70 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.h:4042\00", align 1
@.str.84 = private unnamed_addr constant [70 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.h:3313\00", align 1
@.str.85 = private unnamed_addr constant [51 x i8] c"FATAL: (facil.io) unknown cluster connection error\00", align 1
@.str.86 = private unnamed_addr constant [13 x i8] c"       errno\00", align 1
@.str.87 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:5289\00", align 1
@.str.88 = private unnamed_addr constant [54 x i8] c"ERROR: facio.io cluster inactive, can't send message.\00", align 1
@.str.89 = private unnamed_addr constant [74 x i8] c"FATAL: memory allocation error ./examples/secdesk/c/orange/fio.mod.c:7305\00", align 1
@.str.90 = private unnamed_addr constant [95 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:7146): memory allocator returned %p to the system\00", align 1
@.str.91 = private unnamed_addr constant [96 x i8] c"FATAL: (./examples/secdesk/c/orange/fio.mod.c:7159) Memory allocator error! double `fio_free`?\0A\00", align 1
@.str.92 = private unnamed_addr constant [11 x i8] c"     errno\00", align 1
@.str.93 = private unnamed_addr constant [98 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:7170): memory allocator allocated %p from the system\00", align 1
@sys_alloc.next_alloc = internal global i8* null, align 8
@.str.94 = private unnamed_addr constant [80 x i8] c"WARNING: facil.io detected memory traces remaining after cleanup - memory leak?\00", align 1
@.str.95 = private unnamed_addr constant [108 x i8] c"DEBUG (./examples/secdesk/c/orange/fio.mod.c:7328): Memory blocks in pool: %zu (%zu blocks per allocation).\00", align 1
@sha1_padding = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16
@sha2_512_words = internal global [80 x i64] [i64 4794697086780616226, i64 8158064640168781261, i64 -5349999486874862801, i64 -1606136188198331460, i64 4131703408338449720, i64 6480981068601479193, i64 -7908458776815382629, i64 -6116909921290321640, i64 -2880145864133508542, i64 1334009975649890238, i64 2608012711638119052, i64 6128411473006802146, i64 8268148722764581231, i64 -9160688886553864527, i64 -7215885187991268811, i64 -4495734319001033068, i64 -1973867731355612462, i64 -1171420211273849373, i64 1135362057144423861, i64 2597628984639134821, i64 3308224258029322869, i64 5365058923640841347, i64 6679025012923562964, i64 8573033837759648693, i64 -7476448914759557205, i64 -6327057829258317296, i64 -5763719355590565569, i64 -4658551843659510044, i64 -4116276920077217854, i64 -3051310485924567259, i64 489312712824947311, i64 1452737877330783856, i64 2861767655752347644, i64 3322285676063803686, i64 5560940570517711597, i64 5996557281743188959, i64 7280758554555802590, i64 8532644243296465576, i64 -9096487096722542874, i64 -7894198246740708037, i64 -6719396339535248540, i64 -6333637450476146687, i64 -4446306890439682159, i64 -4076793802049405392, i64 -3345356375505022440, i64 -2983346525034927856, i64 -860691631967231958, i64 1182934255886127544, i64 1847814050463011016, i64 2177327727835720531, i64 2830643537854262169, i64 3796741975233480872, i64 4115178125766777443, i64 5681478168544905931, i64 6601373596472566643, i64 7507060721942968483, i64 8399075790359081724, i64 8693463985226723168, i64 -8878714635349349518, i64 -8302665154208450068, i64 -8016688836872298968, i64 -6606660893046293015, i64 -4685533653050689259, i64 -4147400797238176981, i64 -3880063495543823972, i64 -3348786107499101689, i64 -1523767162380948706, i64 -757361751448694408, i64 500013540394364858, i64 748580250866718886, i64 1242879168328830382, i64 1977374033974150939, i64 2944078676154940804, i64 3659926193048069267, i64 4368137639120453308, i64 4836135668995329356, i64 5532061633213252278, i64 6448918945643986474, i64 6902733635092675308, i64 7801388544844847127], align 16
@sha2_256_words = internal global [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 607225278, i32 1426881987, i32 1925078388, i32 -2132889090, i32 -1680079193, i32 -1046744716, i32 -459576895, i32 -272742522, i32 264347078, i32 604807628, i32 770255983, i32 1249150122, i32 1555081692, i32 1996064986, i32 -1740746414, i32 -1473132947, i32 -1341970488, i32 -1084653625, i32 -958395405, i32 -710438585, i32 113926993, i32 338241895, i32 666307205, i32 773529912, i32 1294757372, i32 1396182291, i32 1695183700, i32 1986661051, i32 -2117940946, i32 -1838011259, i32 -1564481375, i32 -1474664885, i32 -1035236496, i32 -949202525, i32 -778901479, i32 -694614492, i32 -200395387, i32 275423344, i32 430227734, i32 506948616, i32 659060556, i32 883997877, i32 958139571, i32 1322822218, i32 1537002063, i32 1747873779, i32 1955562222, i32 2024104815, i32 -2067236844, i32 -1933114872, i32 -1866530822, i32 -1538233109, i32 -1090935817, i32 -965641998], align 16
@sha2_padding = internal constant <{ i8, [127 x i8] }> <{ i8 -128, [127 x i8] zeroinitializer }>, align 16
@base64_decodes = internal global <{ [123 x i32], [133 x i32] }> <{ [123 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 62, i32 63, i32 62, i32 0, i32 63, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 0, i32 0, i32 0, i32 0, i32 63, i32 0, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51], [133 x i32] zeroinitializer }>, align 16
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @fio_lib_init, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @fio_lib_destroy, i8* null }]

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @FIO_LOG2STDERR(i8*, ...) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [2048 x i8], align 16
  %4 = alloca [1 x %struct.__va_list_tag], align 16
  %5 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  %7 = bitcast %struct.__va_list_tag* %6 to i8*
  call void @llvm.va_start(i8* %7)
  %8 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  %11 = call i32 @vsnprintf(i8* %8, i64 2046, i8* %9, %struct.__va_list_tag* %10) #1
  store i32 %11, i32* %5, align 4
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  %13 = bitcast %struct.__va_list_tag* %12 to i8*
  call void @llvm.va_end(i8* %13)
  %14 = load i32, i32* %5, align 4
  %15 = icmp sle i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %1
  %17 = load i32, i32* %5, align 4
  %18 = icmp sge i32 %17, 2046
  br i1 %18, label %19, label %29

19:                                               ; preds = %16, %1
  %20 = load i32, i32* %5, align 4
  %21 = icmp sge i32 %20, 2046
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %24 = getelementptr inbounds i8, i8* %23, i64 2016
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i64 25, i1 false)
  store i32 2041, i32* %5, align 4
  br label %28

25:                                               ; preds = %19
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %27 = call i64 @fwrite(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i64 39, i64 1, %struct._IO_FILE* %26)
  br label %42

28:                                               ; preds = %22
  br label %29

29:                                               ; preds = %28, %16
  %30 = load i32, i32* %5, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %5, align 4
  %32 = sext i32 %30 to i64
  %33 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 %32
  store i8 10, i8* %33, align 1
  %34 = load i32, i32* %5, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 %35
  store i8 48, i8* %36, align 1
  %37 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %38 = load i32, i32* %5, align 4
  %39 = sext i32 %38 to i64
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %41 = call i64 @fwrite(i8* %37, i64 %39, i64 1, %struct._IO_FILE* %40)
  br label %42

42:                                               ; preds = %29, %25
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @vsnprintf(i8*, i64, i8*, %struct.__va_list_tag*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_capa() #0 {
  %1 = alloca i64, align 8
  %2 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %3 = icmp ne %struct.fio_data_s* %2, null
  br i1 %3, label %4, label %9

4:                                                ; preds = %0
  %5 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %6 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %5, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %1, align 8
  br label %10

9:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  br label %10

10:                                               ; preds = %9, %4
  %11 = load i64, i64* %1, align 8
  ret i64 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.fio_protocol_s* @fio_protocol_try_lock(i64, i32) #0 {
  %3 = alloca %struct.fio_protocol_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load i64, i64* %4, align 8
  %7 = icmp sge i64 %6, 0
  br i1 %7, label %8, label %30

8:                                                ; preds = %2
  %9 = load i64, i64* %4, align 8
  %10 = lshr i64 %9, 8
  %11 = trunc i64 %10 to i32
  %12 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %13 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %11, %14
  br i1 %15, label %16, label %30

16:                                               ; preds = %8
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %17, 255
  %19 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %20 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %19, i32 0, i32 12
  %21 = load i64, i64* %4, align 8
  %22 = lshr i64 %21, 8
  %23 = trunc i64 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %20, i64 0, i64 %24
  %26 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %25, i32 0, i32 9
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = icmp eq i64 %18, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %16, %8, %2
  %31 = call i32* @__errno_location() #9
  store i32 9, i32* %31, align 4
  store %struct.fio_protocol_s* null, %struct.fio_protocol_s** %3, align 8
  br label %39

32:                                               ; preds = %16
  %33 = load i64, i64* %4, align 8
  %34 = lshr i64 %33, 8
  %35 = trunc i64 %34 to i32
  %36 = sext i32 %35 to i64
  %37 = load i32, i32* %5, align 4
  %38 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %36, i32 %37)
  store %struct.fio_protocol_s* %38, %struct.fio_protocol_s** %3, align 8
  br label %39

39:                                               ; preds = %32, %30
  %40 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  ret %struct.fio_protocol_s* %40
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #5

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_protocol_s* @protocol_try_lock(i64, i32) #0 {
  %3 = alloca %struct.fio_protocol_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %4, align 8
  store i32 %1, i32* %5, align 4
  %7 = call i32* @__errno_location() #9
  store i32 0, i32* %7, align 4
  %8 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %9 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %8, i32 0, i32 12
  %10 = load i64, i64* %4, align 8
  %11 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %9, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %11, i32 0, i32 8
  %13 = call i32 @fio_trylock(i8* %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  br label %58

16:                                               ; preds = %2
  %17 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %18 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %17, i32 0, i32 12
  %19 = load i64, i64* %4, align 8
  %20 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %18, i64 0, i64 %19
  %21 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %20, i32 0, i32 3
  %22 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %21, align 8
  store %struct.fio_protocol_s* %22, %struct.fio_protocol_s** %6, align 8
  %23 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  %24 = icmp ne %struct.fio_protocol_s* %23, null
  br i1 %24, label %32, label %25

25:                                               ; preds = %16
  %26 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %27 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %26, i32 0, i32 12
  %28 = load i64, i64* %4, align 8
  %29 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %27, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %29, i32 0, i32 8
  %31 = call i32 @fio_unlock(i8* %30)
  br label %60

32:                                               ; preds = %16
  %33 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  %34 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %33, i32 0, i32 5
  %35 = bitcast i64* %34 to %union.protocol_metadata_union_u*
  %36 = bitcast %union.protocol_metadata_union_u* %35 to %struct.protocol_metadata_s*
  %37 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %36, i32 0, i32 0
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [3 x i8], [3 x i8]* %37, i64 0, i64 %39
  %41 = call i32 @fio_trylock(i8* %40)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %50

43:                                               ; preds = %32
  %44 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %45 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %44, i32 0, i32 12
  %46 = load i64, i64* %4, align 8
  %47 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %45, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %47, i32 0, i32 8
  %49 = call i32 @fio_unlock(i8* %48)
  br label %58

50:                                               ; preds = %32
  %51 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %52 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %51, i32 0, i32 12
  %53 = load i64, i64* %4, align 8
  %54 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %52, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %54, i32 0, i32 8
  %56 = call i32 @fio_unlock(i8* %55)
  %57 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  store %struct.fio_protocol_s* %57, %struct.fio_protocol_s** %3, align 8
  br label %62

58:                                               ; preds = %43, %15
  %59 = call i32* @__errno_location() #9
  store i32 11, i32* %59, align 4
  store %struct.fio_protocol_s* null, %struct.fio_protocol_s** %3, align 8
  br label %62

60:                                               ; preds = %25
  %61 = call i32* @__errno_location() #9
  store i32 9, i32* %61, align 4
  store %struct.fio_protocol_s* null, %struct.fio_protocol_s** %3, align 8
  br label %62

62:                                               ; preds = %60, %58, %50
  %63 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  ret %struct.fio_protocol_s* %63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_protocol_unlock(%struct.fio_protocol_s*, i32) #0 {
  %3 = alloca %struct.fio_protocol_s*, align 8
  %4 = alloca i32, align 4
  store %struct.fio_protocol_s* %0, %struct.fio_protocol_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  %6 = load i32, i32* %4, align 4
  call void @protocol_unlock(%struct.fio_protocol_s* %5, i32 %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @protocol_unlock(%struct.fio_protocol_s*, i32) #0 {
  %3 = alloca %struct.fio_protocol_s*, align 8
  %4 = alloca i32, align 4
  store %struct.fio_protocol_s* %0, %struct.fio_protocol_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  %6 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %5, i32 0, i32 5
  %7 = bitcast i64* %6 to %union.protocol_metadata_union_u*
  %8 = bitcast %union.protocol_metadata_union_u* %7 to %struct.protocol_metadata_s*
  %9 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %8, i32 0, i32 0
  %10 = load i32, i32* %4, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 %11
  %13 = call i32 @fio_unlock(i8* %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_fd2uuid(i32) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 4
  %8 = sext i32 %7 to i64
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = icmp uge i64 %8, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %6, %1
  store i64 -1, i64* %2, align 8
  br label %54

15:                                               ; preds = %6
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i32, i32* %3, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %19
  %21 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %20, i32 0, i32 11
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %41, label %24

24:                                               ; preds = %15
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i32, i32* %3, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %29, i32 0, i32 8
  call void @fio_lock(i8* %30)
  %31 = load i32, i32* %3, align 4
  %32 = sext i32 %31 to i64
  %33 = call i32 @fio_clear_fd(i64 %32, i8 zeroext 1)
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 12
  %36 = load i32, i32* %3, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %35, i64 0, i64 %37
  %39 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %38, i32 0, i32 8
  %40 = call i32 @fio_unlock(i8* %39)
  br label %41

41:                                               ; preds = %24, %15
  %42 = load i32, i32* %3, align 4
  %43 = sext i32 %42 to i64
  %44 = shl i64 %43, 8
  %45 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %46 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %45, i32 0, i32 12
  %47 = load i32, i32* %3, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %46, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %49, i32 0, i32 9
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = or i64 %44, %52
  store i64 %53, i64* %2, align 8
  br label %54

54:                                               ; preds = %41, %14
  %55 = load i64, i64* %2, align 8
  ret i64 %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_lock(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  br label %3

3:                                                ; preds = %7, %1
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 @fio_trylock(i8* %4)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call void @fio_reschedule_thread()
  br label %3

8:                                                ; preds = %3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_clear_fd(i64, i8 zeroext) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca %struct.fio_packet_s*, align 8
  %6 = alloca %struct.fio_protocol_s*, align 8
  %7 = alloca %struct.fio_rw_hook_s*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.fio_uuid_links_s, align 8
  %10 = alloca %struct.fio_fd_data_s, align 8
  %11 = alloca %struct.fio_packet_s*, align 8
  %12 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  store i64 %0, i64* %3, align 8
  store i8 %1, i8* %4, align 1
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 12
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %14, i64 0, i64 %15
  %17 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %16, i32 0, i32 10
  call void @fio_lock(i8* %17)
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 12
  %20 = load i64, i64* %3, align 8
  %21 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %19, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %21, i32 0, i32 17
  %23 = bitcast %struct.fio_uuid_links_s* %9 to i8*
  %24 = bitcast %struct.fio_uuid_links_s* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 48, i1 false)
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i64, i64* %3, align 8
  %28 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %28, i32 0, i32 0
  %30 = load %struct.fio_packet_s*, %struct.fio_packet_s** %29, align 8
  store %struct.fio_packet_s* %30, %struct.fio_packet_s** %5, align 8
  %31 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %32 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %31, i32 0, i32 12
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %34, i32 0, i32 3
  %36 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %35, align 8
  store %struct.fio_protocol_s* %36, %struct.fio_protocol_s** %6, align 8
  %37 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %38 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %37, i32 0, i32 12
  %39 = load i64, i64* %3, align 8
  %40 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %38, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %40, i32 0, i32 15
  %42 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %41, align 8
  store %struct.fio_rw_hook_s* %42, %struct.fio_rw_hook_s** %7, align 8
  %43 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %44 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %43, i32 0, i32 12
  %45 = load i64, i64* %3, align 8
  %46 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %44, i64 0, i64 %45
  %47 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %46, i32 0, i32 16
  %48 = load i8*, i8** %47, align 8
  store i8* %48, i8** %8, align 8
  %49 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %50 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %49, i32 0, i32 12
  %51 = load i64, i64* %3, align 8
  %52 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %50, i64 0, i64 %51
  %53 = bitcast %struct.fio_fd_data_s* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 168, i1 false)
  %54 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 1
  %55 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %56 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %55, i32 0, i32 12
  %57 = load i64, i64* %3, align 8
  %58 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %56, i64 0, i64 %57
  %59 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %58, i32 0, i32 0
  store %struct.fio_packet_s** %59, %struct.fio_packet_s*** %54, align 8
  %60 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 8
  %61 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %62 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %61, i32 0, i32 12
  %63 = load i64, i64* %3, align 8
  %64 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %62, i64 0, i64 %63
  %65 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %64, i32 0, i32 8
  %66 = load volatile i8, i8* %65, align 4
  store volatile i8 %66, i8* %60, align 4
  %67 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 9
  %68 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %69 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %68, i32 0, i32 12
  %70 = load i64, i64* %3, align 8
  %71 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %69, i64 0, i64 %70
  %72 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %71, i32 0, i32 9
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = add nsw i32 %74, 1
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %67, align 1
  %77 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 10
  %78 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %79 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %78, i32 0, i32 12
  %80 = load i64, i64* %3, align 8
  %81 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %79, i64 0, i64 %80
  %82 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %81, i32 0, i32 10
  %83 = load volatile i8, i8* %82, align 2
  store volatile i8 %83, i8* %77, align 2
  %84 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 11
  %85 = load i8, i8* %4, align 1
  store i8 %85, i8* %84, align 1
  %86 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 15
  store %struct.fio_rw_hook_s* @FIO_DEFAULT_RW_HOOKS, %struct.fio_rw_hook_s** %86, align 8
  %87 = bitcast %struct.fio_fd_data_s* %52 to i8*
  %88 = bitcast %struct.fio_fd_data_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 168, i1 true)
  %89 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %90 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %89, i32 0, i32 12
  %91 = load i64, i64* %3, align 8
  %92 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %90, i64 0, i64 %91
  %93 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %92, i32 0, i32 10
  %94 = call i32 @fio_unlock(i8* %93)
  %95 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %7, align 8
  %96 = icmp ne %struct.fio_rw_hook_s* %95, null
  br i1 %96, label %97, label %107

97:                                               ; preds = %2
  %98 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %7, align 8
  %99 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %98, i32 0, i32 4
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  %101 = icmp ne void (i8*)* %100, null
  br i1 %101, label %102, label %107

102:                                              ; preds = %97
  %103 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %7, align 8
  %104 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %103, i32 0, i32 4
  %105 = load void (i8*)*, void (i8*)** %104, align 8
  %106 = load i8*, i8** %8, align 8
  call void %105(i8* %106)
  br label %107

107:                                              ; preds = %102, %97, %2
  br label %108

108:                                              ; preds = %111, %107
  %109 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %110 = icmp ne %struct.fio_packet_s* %109, null
  br i1 %110, label %111, label %117

111:                                              ; preds = %108
  %112 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  store %struct.fio_packet_s* %112, %struct.fio_packet_s** %11, align 8
  %113 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %114 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %113, i32 0, i32 0
  %115 = load %struct.fio_packet_s*, %struct.fio_packet_s** %114, align 8
  store %struct.fio_packet_s* %115, %struct.fio_packet_s** %5, align 8
  %116 = load %struct.fio_packet_s*, %struct.fio_packet_s** %11, align 8
  call void @fio_packet_free(%struct.fio_packet_s* %116)
  br label %108

117:                                              ; preds = %108
  %118 = call i64 @fio_uuid_links_count(%struct.fio_uuid_links_s* %9)
  %119 = icmp ne i64 %118, 0
  br i1 %119, label %120, label %154

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %9, i32 0, i32 3
  %122 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %121, align 8
  store %struct.fio_uuid_links__ordered_s_* %122, %struct.fio_uuid_links__ordered_s_** %12, align 8
  br label %123

123:                                              ; preds = %150, %120
  %124 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %125 = icmp ne %struct.fio_uuid_links__ordered_s_* %124, null
  br i1 %125, label %126, label %134

126:                                              ; preds = %123
  %127 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %128 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %9, i32 0, i32 3
  %129 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %128, align 8
  %130 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %9, i32 0, i32 2
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %129, i64 %131
  %133 = icmp ult %struct.fio_uuid_links__ordered_s_* %127, %132
  br label %134

134:                                              ; preds = %126, %123
  %135 = phi i1 [ false, %123 ], [ %133, %126 ]
  br i1 %135, label %136, label %153

136:                                              ; preds = %134
  %137 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %138 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %137, i32 0, i32 0
  %139 = load i64, i64* %138, align 8
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %149

141:                                              ; preds = %136
  %142 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %143 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %142, i32 0, i32 1
  %144 = load void (i8*)*, void (i8*)** %143, align 8
  %145 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %146 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %145, i32 0, i32 0
  %147 = load i64, i64* %146, align 8
  %148 = inttoptr i64 %147 to i8*
  call void %144(i8* %148)
  br label %149

149:                                              ; preds = %141, %136
  br label %150

150:                                              ; preds = %149
  %151 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %12, align 8
  %152 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %151, i32 1
  store %struct.fio_uuid_links__ordered_s_* %152, %struct.fio_uuid_links__ordered_s_** %12, align 8
  br label %123

153:                                              ; preds = %134
  br label %154

154:                                              ; preds = %153, %117
  call void @fio_uuid_links_free(%struct.fio_uuid_links_s* %9)
  %155 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  %156 = icmp ne %struct.fio_protocol_s* %155, null
  br i1 %156, label %157, label %177

157:                                              ; preds = %154
  %158 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  %159 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %158, i32 0, i32 3
  %160 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %159, align 8
  %161 = icmp ne void (i64, %struct.fio_protocol_s*)* %160, null
  br i1 %161, label %162, label %177

162:                                              ; preds = %157
  %163 = load i64, i64* %3, align 8
  %164 = shl i64 %163, 8
  %165 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %166 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %165, i32 0, i32 12
  %167 = load i64, i64* %3, align 8
  %168 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %166, i64 0, i64 %167
  %169 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %168, i32 0, i32 9
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i64
  %172 = or i64 %164, %171
  %173 = inttoptr i64 %172 to i8*
  %174 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %6, align 8
  %175 = bitcast %struct.fio_protocol_s* %174 to i8*
  %176 = call i32 @fio_defer(void (i8*, i8*)* @deferred_on_close, i8* %173, i8* %175)
  br label %177

177:                                              ; preds = %162, %157, %154
  %178 = load i8, i8* %4, align 1
  %179 = icmp ne i8 %178, 0
  br i1 %179, label %180, label %183

180:                                              ; preds = %177
  %181 = load i64, i64* %3, align 8
  %182 = trunc i64 %181 to i32
  call void @fio_max_fd_min(i32 %182)
  br label %183

183:                                              ; preds = %180, %177
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_unlock(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #1, !srcloc !2
  %6 = load i8*, i8** %2, align 8
  store i8 0, i8* %4, align 1
  %7 = load i8, i8* %4, align 1
  %8 = atomicrmw volatile xchg i8* %6, i8 %7 seq_cst
  store i8 %8, i8* %5, align 1
  %9 = load i8, i8* %5, align 1
  store volatile i8 %9, i8* %3, align 1
  %10 = load volatile i8, i8* %3, align 1
  %11 = zext i8 %10 to i32
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_is_valid(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sge i64 %3, 0
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = lshr i64 %6, 8
  %8 = trunc i64 %7 to i32
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %27

13:                                               ; preds = %5
  %14 = load i64, i64* %2, align 8
  %15 = and i64 %14, 255
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %2, align 8
  %19 = lshr i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = icmp eq i64 %15, %25
  br label %27

27:                                               ; preds = %13, %5, %1
  %28 = phi i1 [ false, %5 ], [ false, %1 ], [ %26, %13 ]
  %29 = zext i1 %28 to i32
  ret i32 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_is_closed(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sge i64 %3, 0
  br i1 %4, label %5, label %50

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = lshr i64 %6, 8
  %8 = trunc i64 %7 to i32
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %50

13:                                               ; preds = %5
  %14 = load i64, i64* %2, align 8
  %15 = and i64 %14, 255
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %2, align 8
  %19 = lshr i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = icmp eq i64 %15, %25
  br i1 %26, label %27, label %50

27:                                               ; preds = %13
  %28 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %29 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %28, i32 0, i32 12
  %30 = load i64, i64* %2, align 8
  %31 = lshr i64 %30, 8
  %32 = trunc i64 %31 to i32
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %29, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %34, i32 0, i32 11
  %36 = load i8, i8* %35, align 1
  %37 = icmp ne i8 %36, 0
  br i1 %37, label %38, label %50

38:                                               ; preds = %27
  %39 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %40 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %39, i32 0, i32 12
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 8
  %43 = trunc i64 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %40, i64 0, i64 %44
  %46 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %45, i32 0, i32 12
  %47 = load i8, i8* %46, align 8
  %48 = zext i8 %47 to i32
  %49 = icmp ne i32 %48, 0
  br label %50

50:                                               ; preds = %38, %27, %13, %5, %1
  %51 = phi i1 [ true, %27 ], [ true, %13 ], [ true, %5 ], [ true, %1 ], [ %49, %38 ]
  %52 = zext i1 %51 to i32
  ret i32 %52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_stop() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = icmp ne %struct.fio_data_s* %1, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %0
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %4, i32 0, i32 7
  store volatile i8 0, i8* %5, align 1
  br label %6

6:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i16 @fio_is_running() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = icmp ne %struct.fio_data_s* %1, null
  br i1 %2, label %3, label %9

3:                                                ; preds = %0
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %4, i32 0, i32 7
  %6 = load volatile i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br label %9

9:                                                ; preds = %3, %0
  %10 = phi i1 [ false, %0 ], [ %8, %3 ]
  %11 = zext i1 %10 to i32
  %12 = trunc i32 %11 to i16
  ret i16 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local { i64, i64 } @fio_last_tick() #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %3 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %2, i32 0, i32 0
  %4 = bitcast %struct.timespec* %1 to i8*
  %5 = bitcast %struct.timespec* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false)
  %6 = bitcast %struct.timespec* %1 to { i64, i64 }*
  %7 = load { i64, i64 }, { i64, i64 }* %6, align 8
  ret { i64, i64 } %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_touch(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sge i64 %3, 0
  br i1 %4, label %5, label %40

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = lshr i64 %6, 8
  %8 = trunc i64 %7 to i32
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %40

13:                                               ; preds = %5
  %14 = load i64, i64* %2, align 8
  %15 = and i64 %14, 255
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %2, align 8
  %19 = lshr i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = icmp eq i64 %15, %25
  br i1 %26, label %27, label %40

27:                                               ; preds = %13
  %28 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %29 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %28, i32 0, i32 0
  %30 = getelementptr inbounds %struct.timespec, %struct.timespec* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %33 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %32, i32 0, i32 12
  %34 = load i64, i64* %2, align 8
  %35 = lshr i64 %34, 8
  %36 = trunc i64 %35 to i32
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %33, i64 0, i64 %37
  %39 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %38, i32 0, i32 4
  store i64 %31, i64* %39, align 8
  br label %40

40:                                               ; preds = %27, %13, %5, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_peer_addr(%struct.fio_str_info_s* noalias sret, i64) #0 {
  %3 = alloca i64, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = call i32 @fio_is_closed(i64 %4)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %9 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %8, i32 0, i32 12
  %10 = load i64, i64* %3, align 8
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %9, i64 0, i64 %13
  %15 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %14, i32 0, i32 13
  %16 = load i8, i8* %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %7, %2
  %19 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  store i8* null, i8** %21, align 8
  br label %45

22:                                               ; preds = %7
  %23 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 0, i64* %23, align 8
  %24 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i64, i64* %3, align 8
  %28 = lshr i64 %27, 8
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %31, i32 0, i32 13
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  store i64 %34, i64* %24, align 8
  %35 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %36 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %37 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %36, i32 0, i32 12
  %38 = load i64, i64* %3, align 8
  %39 = lshr i64 %38, 8
  %40 = trunc i64 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %37, i64 0, i64 %41
  %43 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %42, i32 0, i32 14
  %44 = getelementptr inbounds [48 x i8], [48 x i8]* %43, i64 0, i64 0
  store i8* %44, i8** %35, align 8
  br label %45

45:                                               ; preds = %22, %18
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_local_addr(i8*, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.addrinfo, align 8
  %7 = alloca %struct.addrinfo*, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = load i64, i64* %5, align 8
  %12 = call i32 @gethostname(i8* %10, i64 %11) #1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  store i64 0, i64* %3, align 8
  br label %63

15:                                               ; preds = %2
  %16 = bitcast %struct.addrinfo* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 48, i1 false)
  %17 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 1
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 2
  store i32 1, i32* %18, align 8
  %19 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 0
  store i32 2, i32* %19, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = call i32 @getaddrinfo(i8* %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), %struct.addrinfo* %6, %struct.addrinfo** %7)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %15
  store i64 0, i64* %3, align 8
  br label %63

24:                                               ; preds = %15
  %25 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  store %struct.addrinfo* %25, %struct.addrinfo** %8, align 8
  br label %26

26:                                               ; preds = %57, %24
  %27 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %28 = icmp ne %struct.addrinfo* %27, null
  br i1 %28, label %29, label %61

29:                                               ; preds = %26
  %30 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %31 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %30, i32 0, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %32, null
  br i1 %33, label %34, label %56

34:                                               ; preds = %29
  %35 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %36 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %35, i32 0, i32 6
  %37 = load i8*, i8** %36, align 8
  %38 = call i64 @strlen(i8* %37) #10
  store i64 %38, i64* %9, align 8
  %39 = load i64, i64* %9, align 8
  %40 = load i64, i64* %5, align 8
  %41 = icmp uge i64 %39, %40
  br i1 %41, label %42, label %45

42:                                               ; preds = %34
  %43 = load i64, i64* %5, align 8
  %44 = sub i64 %43, 1
  store i64 %44, i64* %9, align 8
  br label %45

45:                                               ; preds = %42, %34
  %46 = load i8*, i8** %4, align 8
  %47 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %48 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %47, i32 0, i32 6
  %49 = load i8*, i8** %48, align 8
  %50 = load i64, i64* %9, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %49, i64 %50, i1 false)
  %51 = load i8*, i8** %4, align 8
  %52 = load i64, i64* %9, align 8
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  store i8 0, i8* %53, align 1
  %54 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  call void @freeaddrinfo(%struct.addrinfo* %54) #1
  %55 = load i64, i64* %9, align 8
  store i64 %55, i64* %3, align 8
  br label %63

56:                                               ; preds = %29
  br label %57

57:                                               ; preds = %56
  %58 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %59 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %58, i32 0, i32 7
  %60 = load %struct.addrinfo*, %struct.addrinfo** %59, align 8
  store %struct.addrinfo* %60, %struct.addrinfo** %8, align 8
  br label %26

61:                                               ; preds = %26
  %62 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  call void @freeaddrinfo(%struct.addrinfo* %62) #1
  store i64 0, i64* %3, align 8
  br label %63

63:                                               ; preds = %61, %45, %23, %14
  %64 = load i64, i64* %3, align 8
  ret i64 %64
}

; Function Attrs: nounwind
declare dso_local i32 @gethostname(i8*, i64) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #4

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #6

; Function Attrs: nounwind
declare dso_local void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_uuid_link(i64, i8*, void (i8*)*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca void (i8*)*, align 8
  store i64 %0, i64* %4, align 8
  store i8* %1, i8** %5, align 8
  store void (i8*)* %2, void (i8*)** %6, align 8
  %7 = load i64, i64* %4, align 8
  %8 = icmp sge i64 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %3
  %10 = load i64, i64* %4, align 8
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %31

17:                                               ; preds = %9
  %18 = load i64, i64* %4, align 8
  %19 = and i64 %18, 255
  %20 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %21 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %20, i32 0, i32 12
  %22 = load i64, i64* %4, align 8
  %23 = lshr i64 %22, 8
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %21, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %26, i32 0, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = icmp eq i64 %19, %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %17, %9, %3
  br label %98

32:                                               ; preds = %17
  %33 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %34 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %33, i32 0, i32 12
  %35 = load i64, i64* %4, align 8
  %36 = lshr i64 %35, 8
  %37 = trunc i64 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %34, i64 0, i64 %38
  %40 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %39, i32 0, i32 10
  call void @fio_lock(i8* %40)
  %41 = load i64, i64* %4, align 8
  %42 = icmp sge i64 %41, 0
  br i1 %42, label %43, label %65

43:                                               ; preds = %32
  %44 = load i64, i64* %4, align 8
  %45 = lshr i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %48 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %47, i32 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp ult i32 %46, %49
  br i1 %50, label %51, label %65

51:                                               ; preds = %43
  %52 = load i64, i64* %4, align 8
  %53 = and i64 %52, 255
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 12
  %56 = load i64, i64* %4, align 8
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %55, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %60, i32 0, i32 9
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = icmp eq i64 %53, %63
  br i1 %64, label %66, label %65

65:                                               ; preds = %51, %43, %32
  br label %88

66:                                               ; preds = %51
  %67 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %68 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %67, i32 0, i32 12
  %69 = load i64, i64* %4, align 8
  %70 = lshr i64 %69, 8
  %71 = trunc i64 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %68, i64 0, i64 %72
  %74 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %73, i32 0, i32 17
  %75 = load i8*, i8** %5, align 8
  %76 = ptrtoint i8* %75 to i64
  %77 = load void (i8*)*, void (i8*)** %6, align 8
  %78 = call void (i8*)* @fio_uuid_links_overwrite(%struct.fio_uuid_links_s* %74, i64 %76, void (i8*)* %77, void (i8*)** null)
  %79 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %80 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %79, i32 0, i32 12
  %81 = load i64, i64* %4, align 8
  %82 = lshr i64 %81, 8
  %83 = trunc i64 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %80, i64 0, i64 %84
  %86 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %85, i32 0, i32 10
  %87 = call i32 @fio_unlock(i8* %86)
  br label %102

88:                                               ; preds = %65
  %89 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %90 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %89, i32 0, i32 12
  %91 = load i64, i64* %4, align 8
  %92 = lshr i64 %91, 8
  %93 = trunc i64 %92 to i32
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %90, i64 0, i64 %94
  %96 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %95, i32 0, i32 10
  %97 = call i32 @fio_unlock(i8* %96)
  br label %98

98:                                               ; preds = %88, %31
  %99 = call i32* @__errno_location() #9
  store i32 9, i32* %99, align 4
  %100 = load void (i8*)*, void (i8*)** %6, align 8
  %101 = load i8*, i8** %5, align 8
  call void %100(i8* %101)
  br label %102

102:                                              ; preds = %98, %66
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void (i8*)* @fio_uuid_links_overwrite(%struct.fio_uuid_links_s*, i64, void (i8*)*, void (i8*)**) #0 {
  %5 = alloca %struct.fio_uuid_links_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca void (i8*)*, align 8
  %8 = alloca void (i8*)**, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store void (i8*)* %2, void (i8*)** %7, align 8
  store void (i8*)** %3, void (i8*)*** %8, align 8
  %9 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load void (i8*)*, void (i8*)** %7, align 8
  %12 = load void (i8*)**, void (i8*)*** %8, align 8
  %13 = call void (i8*)* @fio_uuid_links__insert_or_overwrite_(%struct.fio_uuid_links_s* %9, i64 %10, void (i8*)* %11, i32 1, void (i8*)** %12)
  ret void (i8*)* %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_uuid_unlink(i64, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i8* %1, i8** %5, align 8
  %7 = load i64, i64* %4, align 8
  %8 = icmp sge i64 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %2
  %10 = load i64, i64* %4, align 8
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %31

17:                                               ; preds = %9
  %18 = load i64, i64* %4, align 8
  %19 = and i64 %18, 255
  %20 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %21 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %20, i32 0, i32 12
  %22 = load i64, i64* %4, align 8
  %23 = lshr i64 %22, 8
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %21, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %26, i32 0, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = icmp eq i64 %19, %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %17, %9, %2
  br label %103

32:                                               ; preds = %17
  %33 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %34 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %33, i32 0, i32 12
  %35 = load i64, i64* %4, align 8
  %36 = lshr i64 %35, 8
  %37 = trunc i64 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %34, i64 0, i64 %38
  %40 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %39, i32 0, i32 10
  call void @fio_lock(i8* %40)
  %41 = load i64, i64* %4, align 8
  %42 = icmp sge i64 %41, 0
  br i1 %42, label %43, label %65

43:                                               ; preds = %32
  %44 = load i64, i64* %4, align 8
  %45 = lshr i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %48 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %47, i32 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp ult i32 %46, %49
  br i1 %50, label %51, label %65

51:                                               ; preds = %43
  %52 = load i64, i64* %4, align 8
  %53 = and i64 %52, 255
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 12
  %56 = load i64, i64* %4, align 8
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %55, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %60, i32 0, i32 9
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = icmp eq i64 %53, %63
  br i1 %64, label %66, label %65

65:                                               ; preds = %51, %43, %32
  br label %93

66:                                               ; preds = %51
  %67 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %68 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %67, i32 0, i32 12
  %69 = load i64, i64* %4, align 8
  %70 = lshr i64 %69, 8
  %71 = trunc i64 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %68, i64 0, i64 %72
  %74 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %73, i32 0, i32 17
  %75 = load i8*, i8** %5, align 8
  %76 = ptrtoint i8* %75 to i64
  %77 = call i32 @fio_uuid_links_remove(%struct.fio_uuid_links_s* %74, i64 %76, void (i8*)* null, void (i8*)** null)
  store i32 %77, i32* %6, align 4
  %78 = load i32, i32* %6, align 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %66
  %81 = call i32* @__errno_location() #9
  store i32 107, i32* %81, align 4
  br label %82

82:                                               ; preds = %80, %66
  %83 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %84 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %83, i32 0, i32 12
  %85 = load i64, i64* %4, align 8
  %86 = lshr i64 %85, 8
  %87 = trunc i64 %86 to i32
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %84, i64 0, i64 %88
  %90 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %89, i32 0, i32 10
  %91 = call i32 @fio_unlock(i8* %90)
  %92 = load i32, i32* %6, align 4
  store i32 %92, i32* %3, align 4
  br label %105

93:                                               ; preds = %65
  %94 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %95 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %94, i32 0, i32 12
  %96 = load i64, i64* %4, align 8
  %97 = lshr i64 %96, 8
  %98 = trunc i64 %97 to i32
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %95, i64 0, i64 %99
  %101 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %100, i32 0, i32 10
  %102 = call i32 @fio_unlock(i8* %101)
  br label %103

103:                                              ; preds = %93, %31
  %104 = call i32* @__errno_location() #9
  store i32 9, i32* %104, align 4
  store i32 -1, i32* %3, align 4
  br label %105

105:                                              ; preds = %103, %82
  %106 = load i32, i32* %3, align 4
  ret i32 %106
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_uuid_links_remove(%struct.fio_uuid_links_s*, i64, void (i8*)*, void (i8*)**) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_uuid_links_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca void (i8*)*, align 8
  %9 = alloca void (i8*)**, align 8
  %10 = alloca %struct.fio_uuid_links__map_s_*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store void (i8*)* %2, void (i8*)** %8, align 8
  store void (i8*)** %3, void (i8*)*** %9, align 8
  %11 = load i64, i64* %7, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  store i32 -1, i32* %5, align 4
  br label %89

14:                                               ; preds = %4
  %15 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %16 = load i64, i64* %7, align 8
  %17 = load void (i8*)*, void (i8*)** %8, align 8
  %18 = call %struct.fio_uuid_links__map_s_* @fio_uuid_links__find_map_pos_(%struct.fio_uuid_links_s* %15, i64 %16, void (i8*)* %17)
  store %struct.fio_uuid_links__map_s_* %18, %struct.fio_uuid_links__map_s_** %10, align 8
  %19 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %20 = icmp ne %struct.fio_uuid_links__map_s_* %19, null
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %23 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %22, i32 0, i32 1
  %24 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %23, align 8
  %25 = icmp ne %struct.fio_uuid_links__ordered_s_* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %21, %14
  store i32 -1, i32* %5, align 4
  br label %89

27:                                               ; preds = %21
  %28 = load void (i8*)**, void (i8*)*** %9, align 8
  %29 = icmp ne void (i8*)** %28, null
  br i1 %29, label %30, label %37

30:                                               ; preds = %27
  %31 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %32 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %31, i32 0, i32 1
  %33 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %32, align 8
  %34 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %33, i32 0, i32 1
  %35 = load void (i8*)*, void (i8*)** %34, align 8
  %36 = load void (i8*)**, void (i8*)*** %9, align 8
  store void (i8*)* %35, void (i8*)** %36, align 8
  br label %37

37:                                               ; preds = %30, %27
  %38 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %39 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, -1
  store i64 %41, i64* %39, align 8
  %42 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %43 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %42, i32 0, i32 1
  %44 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %43, align 8
  %45 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %44, i32 0, i32 0
  store i64 0, i64* %45, align 8
  %46 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %47 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %46, i32 0, i32 1
  %48 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %47, align 8
  %49 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %50 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %53 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %52, i32 0, i32 3
  %54 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %53, align 8
  %55 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %54, i64 %51
  %56 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %55, i64 -1
  %57 = icmp eq %struct.fio_uuid_links__ordered_s_* %48, %56
  br i1 %57, label %58, label %86

58:                                               ; preds = %37
  %59 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %60 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %59, i32 0, i32 0
  store i64 0, i64* %60, align 8
  br label %61

61:                                               ; preds = %83, %58
  %62 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %63 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %62, i32 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, -1
  store i64 %65, i64* %63, align 8
  br label %66

66:                                               ; preds = %61
  %67 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %68 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %67, i32 0, i32 2
  %69 = load i64, i64* %68, align 8
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %66
  %72 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %73 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %72, i32 0, i32 3
  %74 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %73, align 8
  %75 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %6, align 8
  %76 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, 1
  %79 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %74, i64 %78
  %80 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %81, 0
  br label %83

83:                                               ; preds = %71, %66
  %84 = phi i1 [ false, %66 ], [ %82, %71 ]
  br i1 %84, label %61, label %85

85:                                               ; preds = %83
  br label %86

86:                                               ; preds = %85, %37
  %87 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %10, align 8
  %88 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %87, i32 0, i32 1
  store %struct.fio_uuid_links__ordered_s_* null, %struct.fio_uuid_links__ordered_s_** %88, align 8
  store i32 0, i32* %5, align 4
  br label %89

89:                                               ; preds = %86, %26, %13
  %90 = load i32, i32* %5, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local i32 @fio_fork() #0 {
  %1 = call i32 @fork() #1
  ret i32 %1
}

; Function Attrs: nounwind
declare dso_local i32 @fork() #2

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local i8* @fio_thread_new(i8* (i8*)*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8* (i8*)*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  store i8* (i8*)* %0, i8* (i8*)** %4, align 8
  store i8* %1, i8** %5, align 8
  %7 = call noalias i8* @malloc(i64 8) #1
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %6, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = icmp ne i64* %9, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %2
  br label %12

12:                                               ; preds = %11
  %13 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %14 = icmp sle i32 1, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0))
  br label %16

16:                                               ; preds = %15, %12
  br label %17

17:                                               ; preds = %16
  %18 = call i32 @kill(i32 0, i32 2) #1
  %19 = call i32* @__errno_location() #9
  %20 = load i32, i32* %19, align 4
  call void @exit(i32 %20) #11
  unreachable

21:                                               ; preds = %2
  %22 = load i64*, i64** %6, align 8
  %23 = load i8* (i8*)*, i8* (i8*)** %4, align 8
  %24 = load i8*, i8** %5, align 8
  %25 = call i32 @pthread_create(i64* %22, %union.pthread_attr_t* null, i8* (i8*)* %23, i8* %24) #1
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  br label %31

28:                                               ; preds = %21
  %29 = load i64*, i64** %6, align 8
  %30 = bitcast i64* %29 to i8*
  store i8* %30, i8** %3, align 8
  br label %34

31:                                               ; preds = %27
  %32 = load i64*, i64** %6, align 8
  %33 = bitcast i64* %32 to i8*
  call void @free(i8* %33) #1
  store i8* null, i8** %3, align 8
  br label %34

34:                                               ; preds = %31, %28
  %35 = load i8*, i8** %3, align 8
  ret i8* %35
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare dso_local i32 @kill(i32, i32) #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #7

; Function Attrs: nounwind
declare !callback !3 dso_local i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @fio_thread_free(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = load i8*, i8** %2, align 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = call i32 @pthread_detach(i64 %10) #1
  br label %12

12:                                               ; preds = %7, %1
  %13 = load i8*, i8** %2, align 8
  call void @free(i8* %13) #1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_detach(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local i32 @fio_thread_join(i8*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6, %1
  store i32 -1, i32* %2, align 4
  br label %20

12:                                               ; preds = %6
  %13 = load i8*, i8** %3, align 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = call i32 @pthread_join(i64 %15, i8** null)
  %17 = load i8*, i8** %3, align 8
  %18 = bitcast i8* %17 to i64*
  store i64 0, i64* %18, align 8
  %19 = load i8*, i8** %3, align 8
  call void @free(i8* %19) #1
  store i32 0, i32* %2, align 4
  br label %20

20:                                               ; preds = %12, %11
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

declare dso_local i32 @pthread_join(i64, i8**) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_defer(void (i8*, i8*)*, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca void (i8*, i8*)*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.fio_defer_task_s, align 8
  store void (i8*, i8*)* %0, void (i8*, i8*)** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  %10 = icmp ne void (i8*, i8*)* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %3
  br label %21

12:                                               ; preds = %3
  br label %13

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 0
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  store void (i8*, i8*)* %15, void (i8*, i8*)** %14, align 8
  %16 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 1
  %17 = load i8*, i8** %6, align 8
  store i8* %17, i8** %16, align 8
  %18 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 2
  %19 = load i8*, i8** %7, align 8
  store i8* %19, i8** %18, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %8, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %20

20:                                               ; preds = %13
  store i32 0, i32* %4, align 4
  br label %22

21:                                               ; preds = %11
  store i32 -1, i32* %4, align 4
  br label %22

22:                                               ; preds = %21, %20
  %23 = load i32, i32* %4, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8, %struct.fio_task_queue_s*) #0 {
  %3 = alloca %struct.fio_task_queue_s*, align 8
  store %struct.fio_task_queue_s* %1, %struct.fio_task_queue_s** %3, align 8
  %4 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %5 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %4, i32 0, i32 0
  call void @fio_lock(i8* %5)
  %6 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %7 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %6, i32 0, i32 2
  %8 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %7, align 8
  %9 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %8, i32 0, i32 4
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %81

13:                                               ; preds = %2
  %14 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %15 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %14, i32 0, i32 2
  %16 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %15, align 8
  %17 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %16, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %20 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %19, i32 0, i32 2
  %21 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %20, align 8
  %22 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %21, i32 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %18, %23
  br i1 %24, label %25, label %81

25:                                               ; preds = %13
  %26 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %27 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %26, i32 0, i32 3
  %28 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %27, i32 0, i32 4
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %39

32:                                               ; preds = %25
  %33 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %34 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %33, i32 0, i32 3
  %35 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %36 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %35, i32 0, i32 2
  %37 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %36, align 8
  %38 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %37, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %34, %struct.fio_defer_queue_block_s** %38, align 8
  br label %57

39:                                               ; preds = %25
  %40 = call noalias i8* @fio_malloc(i64 4064)
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 15
  %43 = icmp eq i64 %42, 0
  call void @llvm.assume(i1 %43)
  %44 = bitcast i8* %40 to %struct.fio_defer_queue_block_s*
  %45 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %46 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %45, i32 0, i32 2
  %47 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %46, align 8
  %48 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %47, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %44, %struct.fio_defer_queue_block_s** %48, align 8
  %49 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %50 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %49, i32 0, i32 2
  %51 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %50, align 8
  %52 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %51, i32 0, i32 1
  %53 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %52, align 8
  %54 = icmp ne %struct.fio_defer_queue_block_s* %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %39
  br label %114

56:                                               ; preds = %39
  br label %57

57:                                               ; preds = %56, %32
  %58 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %59 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %58, i32 0, i32 2
  %60 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %59, align 8
  %61 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %60, i32 0, i32 1
  %62 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %61, align 8
  %63 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %64 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %63, i32 0, i32 2
  store %struct.fio_defer_queue_block_s* %62, %struct.fio_defer_queue_block_s** %64, align 8
  %65 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %66 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %65, i32 0, i32 2
  %67 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %66, align 8
  %68 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %67, i32 0, i32 2
  store i64 0, i64* %68, align 8
  %69 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %70 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %69, i32 0, i32 2
  %71 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %70, align 8
  %72 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %71, i32 0, i32 3
  store i64 0, i64* %72, align 8
  %73 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %74 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %73, i32 0, i32 2
  %75 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %74, align 8
  %76 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %75, i32 0, i32 4
  store i8 0, i8* %76, align 8
  %77 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %78 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %77, i32 0, i32 2
  %79 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %78, align 8
  %80 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %79, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* null, %struct.fio_defer_queue_block_s** %80, align 8
  br label %81

81:                                               ; preds = %57, %13, %2
  %82 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %83 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %82, i32 0, i32 2
  %84 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %83, align 8
  %85 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %84, i32 0, i32 0
  %86 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %87 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %86, i32 0, i32 2
  %88 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %87, align 8
  %89 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %88, i32 0, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %89, align 8
  %92 = getelementptr inbounds [168 x %struct.fio_defer_task_s], [168 x %struct.fio_defer_task_s]* %85, i64 0, i64 %90
  %93 = bitcast %struct.fio_defer_task_s* %92 to i8*
  %94 = bitcast %struct.fio_defer_task_s* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 24, i1 false)
  %95 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %96 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %95, i32 0, i32 2
  %97 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %96, align 8
  %98 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %97, i32 0, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %99, 168
  br i1 %100, label %101, label %110

101:                                              ; preds = %81
  %102 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %103 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %102, i32 0, i32 2
  %104 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %103, align 8
  %105 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %104, i32 0, i32 2
  store i64 0, i64* %105, align 8
  %106 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %107 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %106, i32 0, i32 2
  %108 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %107, align 8
  %109 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %108, i32 0, i32 4
  store i8 1, i8* %109, align 8
  br label %110

110:                                              ; preds = %101, %81
  %111 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %112 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %111, i32 0, i32 0
  %113 = call i32 @fio_unlock(i8* %112)
  ret void

114:                                              ; preds = %55
  %115 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %116 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %115, i32 0, i32 0
  %117 = call i32 @fio_unlock(i8* %116)
  br label %118

118:                                              ; preds = %114
  %119 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %120 = icmp sle i32 1, %119
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.48, i64 0, i64 0))
  br label %122

122:                                              ; preds = %121, %118
  br label %123

123:                                              ; preds = %122
  %124 = call i32 @kill(i32 0, i32 2) #1
  %125 = call i32* @__errno_location() #9
  %126 = load i32, i32* %125, align 4
  call void @exit(i32 %126) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_thread_signal() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_defer_perform() #0 {
  br label %1

1:                                                ; preds = %9, %0
  %2 = call i32 @fio_defer_perform_single_task_for_queue(%struct.fio_task_queue_s* @task_queue_urgent)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = call i32 @fio_defer_perform_single_task_for_queue(%struct.fio_task_queue_s* @task_queue_normal)
  %6 = icmp eq i32 %5, 0
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi i1 [ true, %1 ], [ %6, %4 ]
  br i1 %8, label %9, label %10

9:                                                ; preds = %7
  br label %1

10:                                               ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_defer_perform_single_task_for_queue(%struct.fio_task_queue_s*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.fio_task_queue_s*, align 8
  %4 = alloca %struct.fio_defer_task_s, align 8
  store %struct.fio_task_queue_s* %0, %struct.fio_task_queue_s** %3, align 8
  %5 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  call void @fio_defer_pop_task(%struct.fio_defer_task_s* sret %4, %struct.fio_task_queue_s* %5)
  %6 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 0
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %8 = icmp ne void (i8*, i8*)* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %17

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 0
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %11, align 8
  %13 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 2
  %16 = load i8*, i8** %15, align 8
  call void %12(i8* %14, i8* %16)
  store i32 0, i32* %2, align 4
  br label %17

17:                                               ; preds = %10, %9
  %18 = load i32, i32* %2, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_defer_has_queue() #0 {
  %1 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 1), align 8
  %2 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 2), align 8
  %3 = icmp ne %struct.fio_defer_queue_block_s* %1, %2
  br i1 %3, label %24, label %4

4:                                                ; preds = %0
  %5 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 1), align 8
  %6 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %5, i32 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 1), align 8
  %9 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %8, i32 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %7, %10
  br i1 %11, label %24, label %12

12:                                               ; preds = %4
  %13 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 1), align 8
  %14 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 2), align 8
  %15 = icmp ne %struct.fio_defer_queue_block_s* %13, %14
  br i1 %15, label %24, label %16

16:                                               ; preds = %12
  %17 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 1), align 8
  %18 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %17, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 1), align 8
  %21 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %20, i32 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %19, %22
  br label %24

24:                                               ; preds = %16, %12, %4, %0
  %25 = phi i1 [ true, %12 ], [ true, %4 ], [ true, %0 ], [ %23, %16 ]
  %26 = zext i1 %25 to i32
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_defer_clear_queue() #0 {
  call void @fio_defer_clear_tasks()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_clear_tasks() #0 {
  call void @fio_defer_clear_tasks_for_queue(%struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_clear_tasks_for_queue(%struct.fio_task_queue_s* @task_queue_urgent)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_run_every(i64, i64, void (i8*)*, i8*, void (i8*)*) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca void (i8*)*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca void (i8*)*, align 8
  %12 = alloca %struct.fio_timer_s*, align 8
  %13 = alloca %struct.fio_timer_s, align 8
  store i64 %0, i64* %7, align 8
  store i64 %1, i64* %8, align 8
  store void (i8*)* %2, void (i8*)** %9, align 8
  store i8* %3, i8** %10, align 8
  store void (i8*)* %4, void (i8*)** %11, align 8
  %14 = load void (i8*)*, void (i8*)** %9, align 8
  %15 = icmp ne void (i8*)* %14, null
  br i1 %15, label %16, label %22

16:                                               ; preds = %5
  %17 = load i64, i64* %7, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = load i64, i64* %8, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %19, %5
  store i32 -1, i32* %6, align 4
  br label %63

23:                                               ; preds = %19, %16
  %24 = call noalias i8* @malloc(i64 72) #1
  %25 = bitcast i8* %24 to %struct.fio_timer_s*
  store %struct.fio_timer_s* %25, %struct.fio_timer_s** %12, align 8
  %26 = load %struct.fio_timer_s*, %struct.fio_timer_s** %12, align 8
  %27 = icmp ne %struct.fio_timer_s* %26, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %23
  br label %29

29:                                               ; preds = %28
  %30 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %31 = icmp sle i32 1, %30
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.4, i64 0, i64 0))
  br label %33

33:                                               ; preds = %32, %29
  br label %34

34:                                               ; preds = %33
  %35 = call i32 @kill(i32 0, i32 2) #1
  %36 = call i32* @__errno_location() #9
  %37 = load i32, i32* %36, align 4
  call void @exit(i32 %37) #11
  unreachable

38:                                               ; preds = %23
  call void @fio_mark_time()
  %39 = load %struct.fio_timer_s*, %struct.fio_timer_s** %12, align 8
  %40 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 0
  %41 = bitcast %struct.fio_ls_embd_s* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 1
  %43 = load i64, i64* %7, align 8
  %44 = call { i64, i64 } @fio_timer_calc_due(i64 %43)
  %45 = bitcast %struct.timespec* %42 to { i64, i64 }*
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 0
  %47 = extractvalue { i64, i64 } %44, 0
  store i64 %47, i64* %46, align 8
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 1
  %49 = extractvalue { i64, i64 } %44, 1
  store i64 %49, i64* %48, align 8
  %50 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 2
  %51 = load i64, i64* %7, align 8
  store i64 %51, i64* %50, align 8
  %52 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 3
  %53 = load i64, i64* %8, align 8
  store i64 %53, i64* %52, align 8
  %54 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 4
  %55 = load void (i8*)*, void (i8*)** %9, align 8
  store void (i8*)* %55, void (i8*)** %54, align 8
  %56 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 5
  %57 = load i8*, i8** %10, align 8
  store i8* %57, i8** %56, align 8
  %58 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 6
  %59 = load void (i8*)*, void (i8*)** %11, align 8
  store void (i8*)* %59, void (i8*)** %58, align 8
  %60 = bitcast %struct.fio_timer_s* %39 to i8*
  %61 = bitcast %struct.fio_timer_s* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 72, i1 false)
  %62 = load %struct.fio_timer_s*, %struct.fio_timer_s** %12, align 8
  call void @fio_timer_add_order(%struct.fio_timer_s* %62)
  store i32 0, i32* %6, align 4
  br label %63

63:                                               ; preds = %38, %22
  %64 = load i32, i32* %6, align 4
  ret i32 %64
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_mark_time() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %1, i32 0, i32 0
  %3 = call i32 @clock_gettime(i32 0, %struct.timespec* %2) #1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @fio_timer_calc_due(i64) #0 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %5 = call { i64, i64 } @fio_last_tick()
  %6 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0
  %8 = extractvalue { i64, i64 } %5, 0
  store i64 %8, i64* %7, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1
  %10 = extractvalue { i64, i64 } %5, 1
  store i64 %10, i64* %9, align 8
  %11 = load i64, i64* %3, align 8
  %12 = icmp uge i64 %11, 1000
  br i1 %12, label %13, label %24

13:                                               ; preds = %1
  %14 = load i64, i64* %3, align 8
  %15 = udiv i64 %14, 1000
  store i64 %15, i64* %4, align 8
  %16 = load i64, i64* %4, align 8
  %17 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  store i64 %19, i64* %17, align 8
  %20 = load i64, i64* %4, align 8
  %21 = mul i64 %20, 1000
  %22 = load i64, i64* %3, align 8
  %23 = sub i64 %22, %21
  store i64 %23, i64* %3, align 8
  br label %24

24:                                               ; preds = %13, %1
  %25 = load i64, i64* %3, align 8
  %26 = mul i64 %25, 1000000
  %27 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, %26
  store i64 %29, i64* %27, align 8
  %30 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = icmp sge i64 %31, 1000000000
  br i1 %32, label %33, label %40

33:                                               ; preds = %24
  %34 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = sub nsw i64 %35, 1000000000
  store i64 %36, i64* %34, align 8
  %37 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = add nsw i64 %38, 1
  store i64 %39, i64* %37, align 8
  br label %40

40:                                               ; preds = %33, %24
  %41 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %42 = load { i64, i64 }, { i64, i64 }* %41, align 8
  ret { i64, i64 } %42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_timer_add_order(%struct.fio_timer_s*) #0 {
  %2 = alloca %struct.fio_timer_s*, align 8
  %3 = alloca %struct.timespec, align 8
  %4 = alloca %struct.fio_ls_embd_s*, align 8
  %5 = alloca %struct.fio_timer_s*, align 8
  store %struct.fio_timer_s* %0, %struct.fio_timer_s** %2, align 8
  %6 = load %struct.fio_timer_s*, %struct.fio_timer_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %6, i32 0, i32 1
  %8 = load %struct.fio_timer_s*, %struct.fio_timer_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %8, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = call { i64, i64 } @fio_timer_calc_due(i64 %10)
  %12 = bitcast %struct.timespec* %3 to { i64, i64 }*
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0
  %14 = extractvalue { i64, i64 } %11, 0
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1
  %16 = extractvalue { i64, i64 } %11, 1
  store i64 %16, i64* %15, align 8
  %17 = bitcast %struct.timespec* %7 to i8*
  %18 = bitcast %struct.timespec* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false)
  call void @fio_lock(i8* @fio_timer_lock)
  %19 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** getelementptr inbounds (%struct.fio_ls_embd_s, %struct.fio_ls_embd_s* @fio_timers, i32 0, i32 1), align 8
  store %struct.fio_ls_embd_s* %19, %struct.fio_ls_embd_s** %4, align 8
  br label %20

20:                                               ; preds = %49, %1
  %21 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %22 = icmp ne %struct.fio_ls_embd_s* %21, @fio_timers
  br i1 %22, label %23, label %53

23:                                               ; preds = %20
  %24 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %25 = ptrtoint %struct.fio_ls_embd_s* %24 to i64
  %26 = sub i64 %25, 0
  %27 = inttoptr i64 %26 to %struct.fio_timer_s*
  store %struct.fio_timer_s* %27, %struct.fio_timer_s** %5, align 8
  %28 = load %struct.fio_timer_s*, %struct.fio_timer_s** %2, align 8
  %29 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %28, i32 0, i32 1
  %30 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %30, i32 0, i32 1
  %32 = bitcast %struct.timespec* %29 to { i64, i64 }*
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %struct.timespec* %31 to { i64, i64 }*
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = call i32 @fio_timer_compare(i64 %34, i64 %36, i64 %39, i64 %41)
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %23
  %45 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %46 = load %struct.fio_timer_s*, %struct.fio_timer_s** %2, align 8
  %47 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %46, i32 0, i32 0
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* %45, %struct.fio_ls_embd_s* %47)
  br label %56

48:                                               ; preds = %23
  br label %49

49:                                               ; preds = %48
  %50 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %51 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %50, i32 0, i32 1
  %52 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %51, align 8
  store %struct.fio_ls_embd_s* %52, %struct.fio_ls_embd_s** %4, align 8
  br label %20

53:                                               ; preds = %20
  %54 = load %struct.fio_timer_s*, %struct.fio_timer_s** %2, align 8
  %55 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %54, i32 0, i32 0
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* @fio_timers, %struct.fio_ls_embd_s* %55)
  br label %56

56:                                               ; preds = %53, %44
  %57 = call i32 @fio_unlock(i8* @fio_timer_lock)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_reap_children() #0 {
  %1 = alloca %struct.sigaction, align 8
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.sigaction, %struct.sigaction* @fio_old_sig_chld, i32 0, i32 0, i32 0), align 8
  %3 = icmp ne void (i32)* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  br label %17

5:                                                ; preds = %0
  %6 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 0
  %7 = bitcast %union.anon.0* %6 to void (i32)**
  store void (i32)* @reap_child_handler, void (i32)** %7, align 8
  %8 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 1
  %9 = call i32 @sigemptyset(%struct.__sigset_t* %8) #1
  %10 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 2
  store i32 268435457, i32* %10, align 8
  %11 = call i32 @sigaction(i32 17, %struct.sigaction* %1, %struct.sigaction* @fio_old_sig_chld) #1
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %17

13:                                               ; preds = %5
  call void @perror(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %14 = call i32 @kill(i32 0, i32 2) #1
  %15 = call i32* @__errno_location() #9
  %16 = load i32, i32* %15, align 4
  call void @exit(i32 %16) #11
  unreachable

17:                                               ; preds = %4, %5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reap_child_handler(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* %2, align 4
  %5 = call i32* @__errno_location() #9
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %3, align 4
  br label %7

7:                                                ; preds = %10, %1
  %8 = call i32 @waitpid(i32 -1, i32* null, i32 1)
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  br label %7

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  %13 = call i32* @__errno_location() #9
  store i32 %12, i32* %13, align 4
  %14 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.sigaction, %struct.sigaction* @fio_old_sig_chld, i32 0, i32 0, i32 0), align 8
  %15 = icmp ne void (i32)* %14, inttoptr (i64 1 to void (i32)*)
  br i1 %15, label %16, label %22

16:                                               ; preds = %11
  %17 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.sigaction, %struct.sigaction* @fio_old_sig_chld, i32 0, i32 0, i32 0), align 8
  %18 = icmp ne void (i32)* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.sigaction, %struct.sigaction* @fio_old_sig_chld, i32 0, i32 0, i32 0), align 8
  %21 = load i32, i32* %2, align 4
  call void %20(i32 %21)
  br label %22

22:                                               ; preds = %19, %16, %11
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @sigemptyset(%struct.__sigset_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #2

declare dso_local void @perror(i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_signal_handler_reset() #0 {
  %1 = alloca %struct.sigaction, align 8
  %2 = load volatile i8, i8* @fio_signal_set_flag, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  br label %17

5:                                                ; preds = %0
  %6 = call i32 @fio_unlock(i8* @fio_signal_set_flag)
  %7 = bitcast %struct.sigaction* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 152, i1 false)
  %8 = call i32 @sigaction(i32 2, %struct.sigaction* @fio_old_sig_int, %struct.sigaction* %1) #1
  %9 = call i32 @sigaction(i32 15, %struct.sigaction* @fio_old_sig_term, %struct.sigaction* %1) #1
  %10 = call i32 @sigaction(i32 13, %struct.sigaction* @fio_old_sig_pipe, %struct.sigaction* %1) #1
  %11 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.sigaction, %struct.sigaction* @fio_old_sig_chld, i32 0, i32 0, i32 0), align 8
  %12 = icmp ne void (i32)* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = call i32 @sigaction(i32 17, %struct.sigaction* @fio_old_sig_chld, %struct.sigaction* %1) #1
  br label %15

15:                                               ; preds = %13, %5
  %16 = call i32 @sigaction(i32 10, %struct.sigaction* @fio_old_sig_usr1, %struct.sigaction* %1) #1
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.sigaction* @fio_old_sig_usr1 to i8*), i8 0, i64 152, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.sigaction* @fio_old_sig_int to i8*), i8 0, i64 152, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.sigaction* @fio_old_sig_term to i8*), i8 0, i64 152, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.sigaction* @fio_old_sig_pipe to i8*), i8 0, i64 152, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.sigaction* @fio_old_sig_chld to i8*), i8 0, i64 152, i1 false)
  br label %17

17:                                               ; preds = %15, %4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_is_worker() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %1, i32 0, i32 8
  %3 = load i8, i8* %2, align 2
  %4 = zext i8 %3 to i32
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_is_master() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %1, i32 0, i32 8
  %3 = load i8, i8* %2, align 2
  %4 = zext i8 %3 to i32
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %0
  %7 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %8 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %7, i32 0, i32 4
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = icmp eq i32 %10, 1
  br label %12

12:                                               ; preds = %6, %0
  %13 = phi i1 [ true, %0 ], [ %11, %6 ]
  %14 = zext i1 %13 to i32
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_parent_pid() #0 {
  %1 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %2 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %1, i32 0, i32 11
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_expected_concurrency(i16*, i16*) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i16, align 2
  store i16* %0, i16** %3, align 8
  store i16* %1, i16** %4, align 8
  %10 = load i16*, i16** %3, align 8
  %11 = icmp ne i16* %10, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = load i16*, i16** %4, align 8
  %14 = icmp ne i16* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %12, %2
  br label %200

16:                                               ; preds = %12
  %17 = load i16*, i16** %3, align 8
  %18 = load i16, i16* %17, align 2
  %19 = icmp ne i16 %18, 0
  br i1 %19, label %53, label %20

20:                                               ; preds = %16
  %21 = load i16*, i16** %4, align 8
  %22 = load i16, i16* %21, align 2
  %23 = icmp ne i16 %22, 0
  br i1 %23, label %53, label %24

24:                                               ; preds = %20
  %25 = call i64 @fio_detect_cpu_cores()
  store i64 %25, i64* %5, align 8
  %26 = load i64, i64* %5, align 8
  %27 = icmp sgt i64 %26, 8
  br i1 %27, label %28, label %41

28:                                               ; preds = %24
  %29 = load i32, i32* @fio_expected_concurrency.print_cores_warning, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %40

31:                                               ; preds = %28
  br label %32

32:                                               ; preds = %31
  %33 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %34 = icmp sle i32 3, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = load i64, i64* %5, align 8
  %37 = load i64, i64* %5, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.6, i64 0, i64 0), i64 %36, i64 8, i64 %37)
  br label %38

38:                                               ; preds = %35, %32
  br label %39

39:                                               ; preds = %38
  store i32 0, i32* @fio_expected_concurrency.print_cores_warning, align 4
  br label %40

40:                                               ; preds = %39, %28
  store i64 8, i64* %5, align 8
  br label %41

41:                                               ; preds = %40, %24
  %42 = load i64, i64* %5, align 8
  %43 = trunc i64 %42 to i16
  %44 = load i16*, i16** %4, align 8
  store i16 %43, i16* %44, align 2
  %45 = load i16*, i16** %3, align 8
  store i16 %43, i16* %45, align 2
  %46 = load i64, i64* %5, align 8
  %47 = icmp sgt i64 %46, 3
  br i1 %47, label %48, label %52

48:                                               ; preds = %41
  %49 = load i16*, i16** %4, align 8
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, -1
  store i16 %51, i16* %49, align 2
  br label %52

52:                                               ; preds = %48, %41
  br label %186

53:                                               ; preds = %20, %16
  %54 = load i16*, i16** %3, align 8
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %53
  %59 = load i16*, i16** %4, align 8
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %185

63:                                               ; preds = %58, %53
  %64 = call i64 @fio_detect_cpu_cores()
  store i64 %64, i64* %6, align 8
  %65 = load i16*, i16** %3, align 8
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = icmp sle i32 %67, 0
  %69 = zext i1 %68 to i64
  %70 = select i1 %68, i32 1, i32 0
  %71 = sext i32 %70 to i64
  store i64 %71, i64* %7, align 8
  %72 = load i16*, i16** %4, align 8
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = icmp sle i32 %74, 0
  %76 = zext i1 %75 to i64
  %77 = select i1 %75, i32 1, i32 0
  %78 = sext i32 %77 to i64
  store i64 %78, i64* %8, align 8
  %79 = load i64, i64* %6, align 8
  %80 = icmp sgt i64 %79, 0
  br i1 %80, label %81, label %184

81:                                               ; preds = %63
  store i16 0, i16* %9, align 2
  %82 = load i16*, i16** %3, align 8
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %86, label %95

86:                                               ; preds = %81
  %87 = load i64, i64* %6, align 8
  %88 = load i16*, i16** %3, align 8
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %90, -1
  %92 = sext i32 %91 to i64
  %93 = sdiv i64 %87, %92
  %94 = trunc i64 %93 to i16
  store i16 %94, i16* %9, align 2
  br label %110

95:                                               ; preds = %81
  %96 = load i16*, i16** %3, align 8
  %97 = load i16, i16* %96, align 2
  %98 = sext i16 %97 to i32
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %95
  %101 = load i16*, i16** %4, align 8
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 -1, %103
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %9, align 2
  store i64 0, i64* %7, align 8
  br label %109

106:                                              ; preds = %95
  %107 = load i16*, i16** %3, align 8
  %108 = load i16, i16* %107, align 2
  store i16 %108, i16* %9, align 2
  br label %109

109:                                              ; preds = %106, %100
  br label %110

110:                                              ; preds = %109, %86
  %111 = load i16*, i16** %4, align 8
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %110
  %116 = load i64, i64* %6, align 8
  %117 = load i16*, i16** %4, align 8
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = mul nsw i32 %119, -1
  %121 = sext i32 %120 to i64
  %122 = sdiv i64 %116, %121
  %123 = trunc i64 %122 to i16
  %124 = load i16*, i16** %4, align 8
  store i16 %123, i16* %124, align 2
  br label %138

125:                                              ; preds = %110
  %126 = load i16*, i16** %4, align 8
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %137

130:                                              ; preds = %125
  %131 = load i16*, i16** %3, align 8
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i32
  %134 = mul nsw i32 -1, %133
  %135 = trunc i32 %134 to i16
  %136 = load i16*, i16** %4, align 8
  store i16 %135, i16* %136, align 2
  store i64 0, i64* %8, align 8
  br label %137

137:                                              ; preds = %130, %125
  br label %138

138:                                              ; preds = %137, %115
  %139 = load i16, i16* %9, align 2
  %140 = load i16*, i16** %3, align 8
  store i16 %139, i16* %140, align 2
  %141 = load i16*, i16** %4, align 8
  %142 = load i16, i16* %141, align 2
  store i16 %142, i16* %9, align 2
  %143 = load i64, i64* %8, align 8
  %144 = icmp ne i64 %143, 0
  br i1 %144, label %145, label %163

145:                                              ; preds = %138
  %146 = load i16*, i16** %4, align 8
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = load i16*, i16** %3, align 8
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i32
  %152 = mul nsw i32 %148, %151
  %153 = sext i32 %152 to i64
  %154 = load i64, i64* %6, align 8
  %155 = icmp sge i64 %153, %154
  br i1 %155, label %156, label %163

156:                                              ; preds = %145
  %157 = load i64, i64* %6, align 8
  %158 = icmp sgt i64 %157, 3
  br i1 %158, label %159, label %163

159:                                              ; preds = %156
  %160 = load i16*, i16** %4, align 8
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %161, -1
  store i16 %162, i16* %160, align 2
  br label %163

163:                                              ; preds = %159, %156, %145, %138
  %164 = load i64, i64* %7, align 8
  %165 = icmp ne i64 %164, 0
  br i1 %165, label %166, label %183

166:                                              ; preds = %163
  %167 = load i16*, i16** %3, align 8
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = load i16, i16* %9, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %169, %171
  %173 = sext i32 %172 to i64
  %174 = load i64, i64* %6, align 8
  %175 = icmp sge i64 %173, %174
  br i1 %175, label %176, label %183

176:                                              ; preds = %166
  %177 = load i64, i64* %6, align 8
  %178 = icmp sgt i64 %177, 3
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = load i16*, i16** %3, align 8
  %181 = load i16, i16* %180, align 2
  %182 = add i16 %181, -1
  store i16 %182, i16* %180, align 2
  br label %183

183:                                              ; preds = %179, %176, %166, %163
  br label %184

184:                                              ; preds = %183, %63
  br label %185

185:                                              ; preds = %184, %58
  br label %186

186:                                              ; preds = %185, %52
  %187 = load i16*, i16** %4, align 8
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = icmp sle i32 %189, 0
  br i1 %190, label %191, label %193

191:                                              ; preds = %186
  %192 = load i16*, i16** %4, align 8
  store i16 1, i16* %192, align 2
  br label %193

193:                                              ; preds = %191, %186
  %194 = load i16*, i16** %3, align 8
  %195 = load i16, i16* %194, align 2
  %196 = sext i16 %195 to i32
  %197 = icmp sle i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %193
  %199 = load i16*, i16** %3, align 8
  store i16 1, i16* %199, align 2
  br label %200

200:                                              ; preds = %15, %198, %193
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_detect_cpu_cores() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  store i64 0, i64* %2, align 8
  %3 = call i64 @sysconf(i32 84) #1
  store i64 %3, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %0
  br label %7

7:                                                ; preds = %6
  %8 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %9 = icmp sle i32 3, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.49, i64 0, i64 0))
  br label %11

11:                                               ; preds = %10, %7
  br label %12

12:                                               ; preds = %11
  store i64 0, i64* %1, align 8
  br label %15

13:                                               ; preds = %0
  %14 = load i64, i64* %2, align 8
  store i64 %14, i64* %1, align 8
  br label %15

15:                                               ; preds = %13, %12
  %16 = load i64, i64* %1, align 8
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_engine() #0 {
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0)
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_force_event(i64, i32) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_defer_task_s, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  %7 = alloca %struct.fio_defer_task_s, align 8
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load i64, i64* %3, align 8
  %9 = icmp sge i64 %8, 0
  br i1 %9, label %10, label %32

10:                                               ; preds = %2
  %11 = load i64, i64* %3, align 8
  %12 = lshr i64 %11, 8
  %13 = trunc i64 %12 to i32
  %14 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %15 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp ult i32 %13, %16
  br i1 %17, label %18, label %32

18:                                               ; preds = %10
  %19 = load i64, i64* %3, align 8
  %20 = and i64 %19, 255
  %21 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %22 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %21, i32 0, i32 12
  %23 = load i64, i64* %3, align 8
  %24 = lshr i64 %23, 8
  %25 = trunc i64 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %22, i64 0, i64 %26
  %28 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %27, i32 0, i32 9
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = icmp eq i64 %20, %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %18, %10, %2
  br label %66

33:                                               ; preds = %18
  %34 = load i32, i32* %4, align 4
  switch i32 %34, label %66 [
    i32 0, label %35
    i32 2, label %52
    i32 1, label %60
  ]

35:                                               ; preds = %33
  %36 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %37 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %36, i32 0, i32 12
  %38 = load i64, i64* %3, align 8
  %39 = lshr i64 %38, 8
  %40 = trunc i64 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %37, i64 0, i64 %41
  %43 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %42, i32 0, i32 7
  %44 = call i32 @fio_trylock(i8* %43)
  br label %45

45:                                               ; preds = %35
  %46 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_data, void (i8*, i8*)** %46, align 8
  %47 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 1
  %48 = load i64, i64* %3, align 8
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %47, align 8
  %50 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 2
  store i8* inttoptr (i64 1 to i8*), i8** %50, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %5, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %51

51:                                               ; preds = %45
  br label %66

52:                                               ; preds = %33
  br label %53

53:                                               ; preds = %52
  %54 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_ping, void (i8*, i8*)** %54, align 8
  %55 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %56 = load i64, i64* %3, align 8
  %57 = inttoptr i64 %56 to i8*
  store i8* %57, i8** %55, align 8
  %58 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* null, i8** %58, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %59

59:                                               ; preds = %53
  br label %66

60:                                               ; preds = %33
  %61 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_ready, void (i8*, i8*)** %61, align 8
  %62 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 1
  %63 = load i64, i64* %3, align 8
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** %62, align 8
  %65 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 2
  store i8* null, i8** %65, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %7, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %66

66:                                               ; preds = %32, %33, %60, %59, %51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_trylock(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #1, !srcloc !5
  %6 = load i8*, i8** %2, align 8
  store i8 1, i8* %4, align 1
  %7 = load i8, i8* %4, align 1
  %8 = atomicrmw volatile xchg i8* %6, i8 %7 seq_cst
  store i8 %8, i8* %5, align 1
  %9 = load i8, i8* %5, align 1
  store volatile i8 %9, i8* %3, align 1
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #1, !srcloc !6
  %10 = load volatile i8, i8* %3, align 1
  %11 = zext i8 %10 to i32
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_on_data(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = call i32 @fio_is_closed(i64 %8)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  br label %96

12:                                               ; preds = %2
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 12
  %15 = load i8*, i8** %3, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = lshr i64 %16, 8
  %18 = trunc i64 %17 to i32
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %14, i64 0, i64 %19
  %21 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %20, i32 0, i32 3
  %22 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %21, align 8
  %23 = icmp ne %struct.fio_protocol_s* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %12
  br label %93

25:                                               ; preds = %12
  %26 = load i8*, i8** %3, align 8
  %27 = ptrtoint i8* %26 to i64
  %28 = lshr i64 %27, 8
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %30, i32 0)
  store %struct.fio_protocol_s* %31, %struct.fio_protocol_s** %5, align 8
  %32 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %33 = icmp ne %struct.fio_protocol_s* %32, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %25
  %35 = call i32* @__errno_location() #9
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 9
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  br label %96

39:                                               ; preds = %34
  br label %76

40:                                               ; preds = %25
  %41 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %42 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %41, i32 0, i32 12
  %43 = load i8*, i8** %3, align 8
  %44 = ptrtoint i8* %43 to i64
  %45 = lshr i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %42, i64 0, i64 %47
  %49 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %48, i32 0, i32 7
  %50 = call i32 @fio_unlock(i8* %49)
  %51 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %52 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %51, i32 0, i32 0
  %53 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %52, align 8
  %54 = load i8*, i8** %3, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void %53(i64 %55, %struct.fio_protocol_s* %56)
  %57 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %57, i32 0)
  %58 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %59 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %58, i32 0, i32 12
  %60 = load i8*, i8** %3, align 8
  %61 = ptrtoint i8* %60 to i64
  %62 = lshr i64 %61, 8
  %63 = trunc i64 %62 to i32
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %59, i64 0, i64 %64
  %66 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %65, i32 0, i32 7
  %67 = call i32 @fio_trylock(i8* %66)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %40
  %70 = load i8*, i8** %3, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = lshr i64 %71, 8
  %73 = trunc i64 %72 to i32
  %74 = sext i32 %73 to i64
  call void @fio_poll_add_read(i64 %74)
  br label %75

75:                                               ; preds = %69, %40
  br label %96

76:                                               ; preds = %39
  %77 = load i8*, i8** %4, align 8
  %78 = icmp ne i8* %77, null
  br i1 %78, label %79, label %86

79:                                               ; preds = %76
  br label %80

80:                                               ; preds = %79
  %81 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_data, void (i8*, i8*)** %81, align 8
  %82 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %83 = load i8*, i8** %3, align 8
  store i8* %83, i8** %82, align 8
  %84 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* inttoptr (i64 1 to i8*), i8** %84, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %85

85:                                               ; preds = %80
  br label %92

86:                                               ; preds = %76
  %87 = load i8*, i8** %3, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = lshr i64 %88, 8
  %90 = trunc i64 %89 to i32
  %91 = sext i32 %90 to i64
  call void @fio_poll_add_read(i64 %91)
  br label %92

92:                                               ; preds = %86, %85
  br label %96

93:                                               ; preds = %24
  %94 = load i8*, i8** %3, align 8
  %95 = load i8*, i8** %4, align 8
  call void @deferred_on_ready(i8* %94, i8* %95)
  br label %96

96:                                               ; preds = %93, %92, %75, %38, %11
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_ping(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %8 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %7, i32 0, i32 12
  %9 = load i8*, i8** %3, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %8, i64 0, i64 %13
  %15 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %14, i32 0, i32 3
  %16 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %15, align 8
  %17 = icmp ne %struct.fio_protocol_s* %16, null
  br i1 %17, label %18, label %59

18:                                               ; preds = %2
  %19 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %20 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %19, i32 0, i32 12
  %21 = load i8*, i8** %3, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = lshr i64 %22, 8
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %20, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %26, i32 0, i32 6
  %28 = load i8, i8* %27, align 2
  %29 = zext i8 %28 to i32
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %60

31:                                               ; preds = %18
  %32 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %33 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %32, i32 0, i32 12
  %34 = load i8*, i8** %3, align 8
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 8
  %37 = trunc i64 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %33, i64 0, i64 %38
  %40 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %39, i32 0, i32 6
  %41 = load i8, i8* %40, align 2
  %42 = zext i8 %41 to i64
  %43 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %44 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %43, i32 0, i32 12
  %45 = load i8*, i8** %3, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = lshr i64 %46, 8
  %48 = trunc i64 %47 to i32
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %44, i64 0, i64 %49
  %51 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %50, i32 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = add nsw i64 %42, %52
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 0
  %56 = getelementptr inbounds %struct.timespec, %struct.timespec* %55, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp sgt i64 %53, %57
  br i1 %58, label %59, label %60

59:                                               ; preds = %31, %2
  br label %86

60:                                               ; preds = %31, %18
  %61 = load i8*, i8** %3, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = lshr i64 %62, 8
  %64 = trunc i64 %63 to i32
  %65 = sext i32 %64 to i64
  %66 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %65, i32 1)
  store %struct.fio_protocol_s* %66, %struct.fio_protocol_s** %5, align 8
  %67 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %68 = icmp ne %struct.fio_protocol_s* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %60
  br label %78

70:                                               ; preds = %60
  %71 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %72 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %71, i32 0, i32 4
  %73 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %72, align 8
  %74 = load i8*, i8** %3, align 8
  %75 = ptrtoint i8* %74 to i64
  %76 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void %73(i64 %75, %struct.fio_protocol_s* %76)
  %77 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %77, i32 1)
  br label %86

78:                                               ; preds = %69
  br label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_ping, void (i8*, i8*)** %80, align 8
  %81 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %82 = load i8*, i8** %3, align 8
  store i8* %82, i8** %81, align 8
  %83 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* null, i8** %83, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %84

84:                                               ; preds = %79
  %85 = load i8*, i8** %4, align 8
  br label %86

86:                                               ; preds = %84, %70, %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_on_ready(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_defer_task_s, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = call i32* @__errno_location() #9
  store i32 0, i32* %7, align 4
  %8 = load i8*, i8** %3, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = call i64 @fio_flush(i64 %9)
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %2
  %13 = call i32* @__errno_location() #9
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 11
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = call i32* @__errno_location() #9
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 11
  br i1 %19, label %20, label %35

20:                                               ; preds = %16, %12, %2
  %21 = load i8*, i8** %4, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %28

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_ready, void (i8*, i8*)** %24, align 8
  %25 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 1
  %26 = load i8*, i8** %3, align 8
  store i8* %26, i8** %25, align 8
  %27 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 2
  store i8* null, i8** %27, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %5, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %34

28:                                               ; preds = %20
  %29 = load i8*, i8** %3, align 8
  %30 = ptrtoint i8* %29 to i64
  %31 = lshr i64 %30, 8
  %32 = trunc i64 %31 to i32
  %33 = sext i32 %32 to i64
  call void @fio_poll_add_write(i64 %33)
  br label %34

34:                                               ; preds = %28, %23
  br label %54

35:                                               ; preds = %16
  %36 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %37 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %36, i32 0, i32 12
  %38 = load i8*, i8** %3, align 8
  %39 = ptrtoint i8* %38 to i64
  %40 = lshr i64 %39, 8
  %41 = trunc i64 %40 to i32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %37, i64 0, i64 %42
  %44 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %43, i32 0, i32 3
  %45 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %44, align 8
  %46 = icmp ne %struct.fio_protocol_s* %45, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %35
  br label %54

48:                                               ; preds = %35
  br label %49

49:                                               ; preds = %48
  %50 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_ready_usr, void (i8*, i8*)** %50, align 8
  %51 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %52 = load i8*, i8** %3, align 8
  store i8* %52, i8** %51, align 8
  %53 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* null, i8** %53, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %54

54:                                               ; preds = %34, %47, %49
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_suspend(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sge i64 %3, 0
  br i1 %4, label %5, label %37

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = lshr i64 %6, 8
  %8 = trunc i64 %7 to i32
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %37

13:                                               ; preds = %5
  %14 = load i64, i64* %2, align 8
  %15 = and i64 %14, 255
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %2, align 8
  %19 = lshr i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = icmp eq i64 %15, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %13
  %28 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %29 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %28, i32 0, i32 12
  %30 = load i64, i64* %2, align 8
  %31 = lshr i64 %30, 8
  %32 = trunc i64 %31 to i32
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %29, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %34, i32 0, i32 7
  %36 = call i32 @fio_trylock(i8* %35)
  br label %37

37:                                               ; preds = %27, %13, %5, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_set_non_block(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* %2, align 4
  %5 = call i32 (i32, i32, ...) @fcntl(i32 %4, i32 3, i32 0)
  store i32 %5, i32* %3, align 4
  %6 = icmp eq i32 -1, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 0, i32* %3, align 4
  br label %8

8:                                                ; preds = %7, %1
  %9 = load i32, i32* %2, align 4
  %10 = load i32, i32* %3, align 4
  %11 = or i32 %10, 2048
  %12 = or i32 %11, 524288
  %13 = call i32 (i32, i32, ...) @fcntl(i32 %9, i32 4, i32 %12)
  ret i32 %13
}

declare dso_local i32 @fcntl(i32, i32, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_accept(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca [2 x %struct.sockaddr_in6], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %union.__SOCKADDR_ARG, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  store i32 56, i32* %5, align 4
  %11 = load i64, i64* %3, align 8
  %12 = lshr i64 %11, 8
  %13 = trunc i64 %12 to i32
  %14 = bitcast %union.__SOCKADDR_ARG* %7 to %struct.sockaddr**
  %15 = getelementptr inbounds [2 x %struct.sockaddr_in6], [2 x %struct.sockaddr_in6]* %4, i64 0, i64 0
  %16 = bitcast %struct.sockaddr_in6* %15 to %struct.sockaddr*
  store %struct.sockaddr* %16, %struct.sockaddr** %14, align 8
  %17 = getelementptr inbounds %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %7, i32 0, i32 0
  %18 = load %struct.sockaddr*, %struct.sockaddr** %17, align 8
  %19 = call i32 @accept4(i32 %13, %struct.sockaddr* %18, i32* %5, i32 526336)
  store i32 %19, i32* %6, align 4
  %20 = load i32, i32* %6, align 4
  %21 = icmp sle i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %1
  store i64 -1, i64* %2, align 8
  br label %142

23:                                               ; preds = %1
  store i32 1, i32* %8, align 4
  %24 = load i32, i32* %6, align 4
  %25 = bitcast i32* %8 to i8*
  %26 = call i32 @setsockopt(i32 %24, i32 6, i32 1, i8* %25, i32 4) #1
  store i32 0, i32* %9, align 4
  store i32 4, i32* %10, align 4
  %27 = load i32, i32* %6, align 4
  %28 = bitcast i32* %9 to i8*
  %29 = call i32 @getsockopt(i32 %27, i32 1, i32 7, i8* %28, i32* %10) #1
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %23
  %32 = load i32, i32* %9, align 4
  %33 = icmp sle i32 %32, 131072
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  store i32 131072, i32* %9, align 4
  %35 = load i32, i32* %6, align 4
  %36 = bitcast i32* %9 to i8*
  %37 = call i32 @setsockopt(i32 %35, i32 1, i32 7, i8* %36, i32 4) #1
  store i32 131072, i32* %9, align 4
  %38 = load i32, i32* %6, align 4
  %39 = bitcast i32* %9 to i8*
  %40 = call i32 @setsockopt(i32 %38, i32 1, i32 8, i8* %39, i32 4) #1
  br label %41

41:                                               ; preds = %34, %31, %23
  %42 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %43 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %42, i32 0, i32 12
  %44 = load i32, i32* %6, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %43, i64 0, i64 %45
  %47 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %46, i32 0, i32 8
  call void @fio_lock(i8* %47)
  %48 = load i32, i32* %6, align 4
  %49 = sext i32 %48 to i64
  %50 = call i32 @fio_clear_fd(i64 %49, i8 zeroext 1)
  %51 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %52 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %51, i32 0, i32 12
  %53 = load i32, i32* %6, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %52, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %55, i32 0, i32 8
  %57 = call i32 @fio_unlock(i8* %56)
  %58 = getelementptr inbounds [2 x %struct.sockaddr_in6], [2 x %struct.sockaddr_in6]* %4, i64 0, i64 0
  %59 = bitcast %struct.sockaddr_in6* %58 to %struct.sockaddr*
  %60 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %59, i32 0, i32 0
  %61 = load i16, i16* %60, align 16
  %62 = zext i16 %61 to i32
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %120

64:                                               ; preds = %41
  %65 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %66 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %65, i32 0, i32 12
  %67 = load i64, i64* %3, align 8
  %68 = lshr i64 %67, 8
  %69 = trunc i64 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %66, i64 0, i64 %70
  %72 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %71, i32 0, i32 13
  %73 = load i8, i8* %72, align 1
  %74 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %75 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %74, i32 0, i32 12
  %76 = load i32, i32* %6, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %75, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %78, i32 0, i32 13
  store i8 %73, i8* %79, align 1
  %80 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %81 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %80, i32 0, i32 12
  %82 = load i64, i64* %3, align 8
  %83 = lshr i64 %82, 8
  %84 = trunc i64 %83 to i32
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %81, i64 0, i64 %85
  %87 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %86, i32 0, i32 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp ne i8 %88, 0
  br i1 %89, label %90, label %119

90:                                               ; preds = %64
  %91 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %92 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %91, i32 0, i32 12
  %93 = load i32, i32* %6, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %92, i64 0, i64 %94
  %96 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %95, i32 0, i32 14
  %97 = getelementptr inbounds [48 x i8], [48 x i8]* %96, i64 0, i64 0
  %98 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %99 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %98, i32 0, i32 12
  %100 = load i64, i64* %3, align 8
  %101 = lshr i64 %100, 8
  %102 = trunc i64 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %99, i64 0, i64 %103
  %105 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %104, i32 0, i32 14
  %106 = getelementptr inbounds [48 x i8], [48 x i8]* %105, i64 0, i64 0
  %107 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %108 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %107, i32 0, i32 12
  %109 = load i64, i64* %3, align 8
  %110 = lshr i64 %109, 8
  %111 = trunc i64 %110 to i32
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %108, i64 0, i64 %112
  %114 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %113, i32 0, i32 13
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %116, 1
  %118 = sext i32 %117 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %97, i8* align 2 %106, i64 %118, i1 false)
  br label %119

119:                                              ; preds = %90, %64
  br label %129

120:                                              ; preds = %41
  %121 = load i32, i32* %6, align 4
  %122 = getelementptr inbounds [2 x %struct.sockaddr_in6], [2 x %struct.sockaddr_in6]* %4, i64 0, i64 0
  %123 = bitcast %struct.sockaddr_in6* %122 to %struct.sockaddr*
  %124 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %123, i32 0, i32 0
  %125 = load i16, i16* %124, align 16
  %126 = zext i16 %125 to i32
  %127 = getelementptr inbounds [2 x %struct.sockaddr_in6], [2 x %struct.sockaddr_in6]* %4, i64 0, i64 0
  %128 = bitcast %struct.sockaddr_in6* %127 to %struct.sockaddr*
  call void @fio_tcp_addr_cpy(i32 %121, i32 %126, %struct.sockaddr* %128)
  br label %129

129:                                              ; preds = %120, %119
  %130 = load i32, i32* %6, align 4
  %131 = sext i32 %130 to i64
  %132 = shl i64 %131, 8
  %133 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %134 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %133, i32 0, i32 12
  %135 = load i32, i32* %6, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %134, i64 0, i64 %136
  %138 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %137, i32 0, i32 9
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = or i64 %132, %140
  store i64 %141, i64* %2, align 8
  br label %142

142:                                              ; preds = %129, %22
  %143 = load i64, i64* %2, align 8
  ret i64 %143
}

declare dso_local i32 @accept4(i32, %struct.sockaddr*, i32*, i32) #4

; Function Attrs: nounwind
declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @getsockopt(i32, i32, i32, i8*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_tcp_addr_cpy(i32, i32, %struct.sockaddr*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sockaddr*, align 8
  %7 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sockaddr* %2, %struct.sockaddr** %6, align 8
  %8 = load i32, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = load %struct.sockaddr*, %struct.sockaddr** %6, align 8
  %13 = bitcast %struct.sockaddr* %12 to %struct.sockaddr_in*
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  %15 = bitcast %struct.in_addr* %14 to i8*
  br label %21

16:                                               ; preds = %3
  %17 = load %struct.sockaddr*, %struct.sockaddr** %6, align 8
  %18 = bitcast %struct.sockaddr* %17 to %struct.sockaddr_in6*
  %19 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %18, i32 0, i32 3
  %20 = bitcast %struct.in6_addr* %19 to i8*
  br label %21

21:                                               ; preds = %16, %11
  %22 = phi i8* [ %15, %11 ], [ %20, %16 ]
  %23 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %24 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %23, i32 0, i32 12
  %25 = load i32, i32* %4, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %24, i64 0, i64 %26
  %28 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %27, i32 0, i32 14
  %29 = getelementptr inbounds [48 x i8], [48 x i8]* %28, i64 0, i64 0
  %30 = call i8* @inet_ntop(i32 %8, i8* %22, i8* %29, i32 48) #1
  store i8* %30, i8** %7, align 8
  %31 = load i8*, i8** %7, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %49

33:                                               ; preds = %21
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 12
  %36 = load i32, i32* %4, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %35, i64 0, i64 %37
  %39 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %38, i32 0, i32 14
  %40 = getelementptr inbounds [48 x i8], [48 x i8]* %39, i64 0, i64 0
  %41 = call i64 @strlen(i8* %40) #10
  %42 = trunc i64 %41 to i8
  %43 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %44 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %43, i32 0, i32 12
  %45 = load i32, i32* %4, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %44, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %47, i32 0, i32 13
  store i8 %42, i8* %48, align 1
  br label %63

49:                                               ; preds = %21
  %50 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %51 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %50, i32 0, i32 12
  %52 = load i32, i32* %4, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %51, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %54, i32 0, i32 13
  store i8 0, i8* %55, align 1
  %56 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %57 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %56, i32 0, i32 12
  %58 = load i32, i32* %4, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %57, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %60, i32 0, i32 14
  %62 = getelementptr inbounds [48 x i8], [48 x i8]* %61, i64 0, i64 0
  store i8 0, i8* %62, align 2
  br label %63

63:                                               ; preds = %49, %33
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_socket(i8*, i8*, i8 zeroext) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8 %2, i8* %7, align 1
  %11 = load i8*, i8** %6, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %44

13:                                               ; preds = %3
  %14 = load i8*, i8** %6, align 8
  store i8* %14, i8** %9, align 8
  %15 = call i64 @fio_atol(i8** %9)
  store i64 %15, i64* %10, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = load i8, i8* %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %13
  br label %20

20:                                               ; preds = %19
  %21 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %22 = icmp sle i32 2, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = load i8*, i8** %6, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0), i8* %24)
  br label %25

25:                                               ; preds = %23, %20
  br label %26

26:                                               ; preds = %25
  %27 = call i32* @__errno_location() #9
  store i32 22, i32* %27, align 4
  store i64 -1, i64* %4, align 8
  br label %86

28:                                               ; preds = %13
  %29 = load i64, i64* %10, align 8
  %30 = icmp sle i64 %29, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %28
  %32 = load i64, i64* %10, align 8
  %33 = icmp slt i64 %32, -1
  br i1 %33, label %34, label %42

34:                                               ; preds = %31
  br label %35

35:                                               ; preds = %34
  %36 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %37 = icmp sle i32 3, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = load i8*, i8** %6, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.9, i64 0, i64 0), i8* %39)
  br label %40

40:                                               ; preds = %38, %35
  br label %41

41:                                               ; preds = %40
  br label %42

42:                                               ; preds = %41, %31
  store i8* null, i8** %6, align 8
  br label %43

43:                                               ; preds = %42, %28
  br label %44

44:                                               ; preds = %43, %3
  %45 = load i8*, i8** %5, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %58, label %47

47:                                               ; preds = %44
  %48 = load i8*, i8** %6, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %58, label %50

50:                                               ; preds = %47
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %53 = icmp sle i32 2, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.10, i64 0, i64 0))
  br label %55

55:                                               ; preds = %54, %51
  br label %56

56:                                               ; preds = %55
  %57 = call i32* @__errno_location() #9
  store i32 22, i32* %57, align 4
  store i64 -1, i64* %4, align 8
  br label %86

58:                                               ; preds = %47, %44
  %59 = load i8*, i8** %6, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %72, label %61

61:                                               ; preds = %58
  br label %62

62:                                               ; preds = %67, %61
  %63 = call i32* @__errno_location() #9
  store i32 0, i32* %63, align 4
  %64 = load i8*, i8** %5, align 8
  %65 = load i8, i8* %7, align 1
  %66 = call i64 @fio_unix_socket(i8* %64, i8 zeroext %65)
  store i64 %66, i64* %8, align 8
  br label %67

67:                                               ; preds = %62
  %68 = call i32* @__errno_location() #9
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 4
  br i1 %70, label %62, label %71

71:                                               ; preds = %67
  br label %84

72:                                               ; preds = %58
  br label %73

73:                                               ; preds = %79, %72
  %74 = call i32* @__errno_location() #9
  store i32 0, i32* %74, align 4
  %75 = load i8*, i8** %5, align 8
  %76 = load i8*, i8** %6, align 8
  %77 = load i8, i8* %7, align 1
  %78 = call i64 @fio_tcp_socket(i8* %75, i8* %76, i8 zeroext %77)
  store i64 %78, i64* %8, align 8
  br label %79

79:                                               ; preds = %73
  %80 = call i32* @__errno_location() #9
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 4
  br i1 %82, label %73, label %83

83:                                               ; preds = %79
  br label %84

84:                                               ; preds = %83, %71
  %85 = load i64, i64* %8, align 8
  store i64 %85, i64* %4, align 8
  br label %86

86:                                               ; preds = %84, %56, %26
  %87 = load i64, i64* %4, align 8
  ret i64 %87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_atol(i8**) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8**, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  store i8** %0, i8*** %3, align 8
  %7 = load i8**, i8*** %3, align 8
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** %4, align 8
  store i64 0, i64* %5, align 8
  store i8 0, i8* %6, align 1
  br label %9

9:                                                ; preds = %21, %1
  %10 = call i16** @__ctype_b_loc() #9
  %11 = load i16*, i16** %10, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16, i16* %11, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = and i32 %18, 8192
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %9
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %23, i8** %4, align 8
  br label %9

24:                                               ; preds = %9
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp eq i32 %28, 45
  br i1 %29, label %30, label %37

30:                                               ; preds = %24
  %31 = load i8, i8* %6, align 1
  %32 = zext i8 %31 to i32
  %33 = xor i32 %32, 1
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %6, align 1
  %35 = load i8*, i8** %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %36, i8** %4, align 8
  br label %46

37:                                               ; preds = %24
  %38 = load i8*, i8** %4, align 8
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 43
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %44, i8** %4, align 8
  br label %45

45:                                               ; preds = %42, %37
  br label %46

46:                                               ; preds = %45, %30
  %47 = load i8*, i8** %4, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 0
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp eq i32 %50, 66
  br i1 %51, label %76, label %52

52:                                               ; preds = %46
  %53 = load i8*, i8** %4, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 0
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = icmp eq i32 %56, 98
  br i1 %57, label %76, label %58

58:                                               ; preds = %52
  %59 = load i8*, i8** %4, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 0
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 48
  br i1 %63, label %64, label %116

64:                                               ; preds = %58
  %65 = load i8*, i8** %4, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 98
  br i1 %69, label %76, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %4, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 66
  br i1 %75, label %76, label %116

76:                                               ; preds = %70, %64, %52, %46
  %77 = load i8*, i8** %4, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 0
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp eq i32 %80, 48
  br i1 %81, label %82, label %85

82:                                               ; preds = %76
  %83 = load i8*, i8** %4, align 8
  %84 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %84, i8** %4, align 8
  br label %85

85:                                               ; preds = %82, %76
  %86 = load i8*, i8** %4, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %4, align 8
  %88 = call i64 @fio_atol_skip_zero(i8** %4)
  br label %89

89:                                               ; preds = %103, %85
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 0
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = icmp eq i32 %93, 48
  br i1 %94, label %101, label %95

95:                                               ; preds = %89
  %96 = load i8*, i8** %4, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 0
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = icmp eq i32 %99, 49
  br label %101

101:                                              ; preds = %95, %89
  %102 = phi i1 [ true, %89 ], [ %100, %95 ]
  br i1 %102, label %103, label %115

103:                                              ; preds = %101
  %104 = load i64, i64* %5, align 8
  %105 = shl i64 %104, 1
  %106 = load i8*, i8** %4, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 0
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = sub nsw i32 %109, 48
  %111 = sext i32 %110 to i64
  %112 = or i64 %105, %111
  store i64 %112, i64* %5, align 8
  %113 = load i8*, i8** %4, align 8
  %114 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %114, i8** %4, align 8
  br label %89

115:                                              ; preds = %101
  br label %191

116:                                              ; preds = %70, %58
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 0
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = icmp eq i32 %120, 120
  br i1 %121, label %146, label %122

122:                                              ; preds = %116
  %123 = load i8*, i8** %4, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 0
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = icmp eq i32 %126, 88
  br i1 %127, label %146, label %128

128:                                              ; preds = %122
  %129 = load i8*, i8** %4, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 0
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp eq i32 %132, 48
  br i1 %133, label %134, label %164

134:                                              ; preds = %128
  %135 = load i8*, i8** %4, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  %137 = load i8, i8* %136, align 1
  %138 = sext i8 %137 to i32
  %139 = icmp eq i32 %138, 120
  br i1 %139, label %146, label %140

140:                                              ; preds = %134
  %141 = load i8*, i8** %4, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 1
  %143 = load i8, i8* %142, align 1
  %144 = sext i8 %143 to i32
  %145 = icmp eq i32 %144, 88
  br i1 %145, label %146, label %164

146:                                              ; preds = %140, %134, %122, %116
  %147 = load i8*, i8** %4, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 0
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = icmp eq i32 %150, 48
  br i1 %151, label %152, label %155

152:                                              ; preds = %146
  %153 = load i8*, i8** %4, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %4, align 8
  br label %155

155:                                              ; preds = %152, %146
  %156 = load i8*, i8** %4, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %4, align 8
  %158 = call i64 @fio_atol_skip_zero(i8** %4)
  %159 = call i64 @fio_atol_consume_hex(i8** %4)
  store i64 %159, i64* %5, align 8
  %160 = call zeroext i8 @fio_atol_skip_hex_test(i8** %4)
  %161 = icmp ne i8 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %155
  store i64 0, i64* %2, align 8
  br label %201

163:                                              ; preds = %155
  br label %191

164:                                              ; preds = %140, %128
  %165 = load i8*, i8** %4, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 0
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = icmp eq i32 %168, 48
  br i1 %169, label %170, label %177

170:                                              ; preds = %164
  %171 = call i64 @fio_atol_skip_zero(i8** %4)
  %172 = call i64 @fio_atol_consume(i8** %4, i8 zeroext 8)
  store i64 %172, i64* %5, align 8
  %173 = call zeroext i8 @fio_atol_skip_test(i8** %4, i8 zeroext 8)
  %174 = icmp ne i8 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %170
  store i64 0, i64* %2, align 8
  br label %201

176:                                              ; preds = %170
  br label %183

177:                                              ; preds = %164
  %178 = call i64 @fio_atol_consume(i8** %4, i8 zeroext 10)
  store i64 %178, i64* %5, align 8
  %179 = call zeroext i8 @fio_atol_skip_test(i8** %4, i8 zeroext 10)
  %180 = icmp ne i8 %179, 0
  br i1 %180, label %181, label %182

181:                                              ; preds = %177
  store i64 0, i64* %2, align 8
  br label %201

182:                                              ; preds = %177
  br label %183

183:                                              ; preds = %182, %176
  br label %184

184:                                              ; preds = %183
  br label %185

185:                                              ; preds = %184
  %186 = load i64, i64* %5, align 8
  %187 = and i64 %186, -9223372036854775808
  %188 = icmp ne i64 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %185
  store i64 9223372036854775807, i64* %5, align 8
  br label %190

190:                                              ; preds = %189, %185
  br label %191

191:                                              ; preds = %190, %163, %115
  %192 = load i8, i8* %6, align 1
  %193 = icmp ne i8 %192, 0
  br i1 %193, label %194, label %197

194:                                              ; preds = %191
  %195 = load i64, i64* %5, align 8
  %196 = sub i64 0, %195
  store i64 %196, i64* %5, align 8
  br label %197

197:                                              ; preds = %194, %191
  %198 = load i8*, i8** %4, align 8
  %199 = load i8**, i8*** %3, align 8
  store i8* %198, i8** %199, align 8
  %200 = load i64, i64* %5, align 8
  store i64 %200, i64* %2, align 8
  br label %201

201:                                              ; preds = %197, %181, %175, %162
  %202 = load i64, i64* %2, align 8
  ret i64 %202
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_unix_socket(i8*, i8 zeroext) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  %6 = alloca %struct.sockaddr_un, align 2
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %10 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8* %0, i8** %4, align 8
  store i8 %1, i8* %5, align 1
  %11 = bitcast %struct.sockaddr_un* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %11, i8 0, i64 110, i1 false)
  %12 = load i8*, i8** %4, align 8
  %13 = call i64 @strlen(i8* %12) #10
  store i64 %13, i64* %7, align 8
  %14 = load i64, i64* %7, align 8
  %15 = icmp uge i64 %14, 108
  br i1 %15, label %16, label %25

16:                                               ; preds = %2
  br label %17

17:                                               ; preds = %16
  %18 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %19 = icmp sle i32 2, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = load i64, i64* %7, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.50, i64 0, i64 0), i64 %21, i64 107)
  br label %22

22:                                               ; preds = %20, %17
  br label %23

23:                                               ; preds = %22
  %24 = call i32* @__errno_location() #9
  store i32 36, i32* %24, align 4
  store i64 -1, i64* %3, align 8
  br label %137

25:                                               ; preds = %2
  %26 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %6, i32 0, i32 0
  store i16 1, i16* %26, align 2
  %27 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %6, i32 0, i32 1
  %28 = getelementptr inbounds [108 x i8], [108 x i8]* %27, i64 0, i64 0
  %29 = load i8*, i8** %4, align 8
  %30 = load i64, i64* %7, align 8
  %31 = add i64 %30, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %28, i8* align 1 %29, i64 %31, i1 false)
  %32 = call i32 @socket(i32 1, i32 1, i32 0) #1
  store i32 %32, i32* %8, align 4
  %33 = load i32, i32* %8, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %36

35:                                               ; preds = %25
  store i64 -1, i64* %3, align 8
  br label %137

36:                                               ; preds = %25
  %37 = load i32, i32* %8, align 4
  %38 = call i32 @fio_set_non_block(i32 %37)
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %43

40:                                               ; preds = %36
  %41 = load i32, i32* %8, align 4
  %42 = call i32 @close(i32 %41)
  store i64 -1, i64* %3, align 8
  br label %137

43:                                               ; preds = %36
  %44 = load i8, i8* %5, align 1
  %45 = icmp ne i8 %44, 0
  br i1 %45, label %46, label %70

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %6, i32 0, i32 1
  %48 = getelementptr inbounds [108 x i8], [108 x i8]* %47, i64 0, i64 0
  %49 = call i32 @unlink(i8* %48) #1
  %50 = load i32, i32* %8, align 4
  %51 = bitcast %union.__CONST_SOCKADDR_ARG* %9 to %struct.sockaddr**
  %52 = bitcast %struct.sockaddr_un* %6 to %struct.sockaddr*
  store %struct.sockaddr* %52, %struct.sockaddr** %51, align 8
  %53 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %9, i32 0, i32 0
  %54 = load %struct.sockaddr*, %struct.sockaddr** %53, align 8
  %55 = call i32 @bind(i32 %50, %struct.sockaddr* %54, i32 110) #1
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %60

57:                                               ; preds = %46
  %58 = load i32, i32* %8, align 4
  %59 = call i32 @close(i32 %58)
  store i64 -1, i64* %3, align 8
  br label %137

60:                                               ; preds = %46
  %61 = load i32, i32* %8, align 4
  %62 = call i32 @listen(i32 %61, i32 4096) #1
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %60
  %65 = load i32, i32* %8, align 4
  %66 = call i32 @close(i32 %65)
  store i64 -1, i64* %3, align 8
  br label %137

67:                                               ; preds = %60
  %68 = load i32, i32* %8, align 4
  %69 = call i32 @fchmod(i32 %68, i32 511) #1
  br label %86

70:                                               ; preds = %43
  %71 = load i32, i32* %8, align 4
  %72 = bitcast %union.__CONST_SOCKADDR_ARG* %10 to %struct.sockaddr**
  %73 = bitcast %struct.sockaddr_un* %6 to %struct.sockaddr*
  store %struct.sockaddr* %73, %struct.sockaddr** %72, align 8
  %74 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %10, i32 0, i32 0
  %75 = load %struct.sockaddr*, %struct.sockaddr** %74, align 8
  %76 = call i32 @connect(i32 %71, %struct.sockaddr* %75, i32 110)
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %85

78:                                               ; preds = %70
  %79 = call i32* @__errno_location() #9
  %80 = load i32, i32* %79, align 4
  %81 = icmp ne i32 %80, 115
  br i1 %81, label %82, label %85

82:                                               ; preds = %78
  %83 = load i32, i32* %8, align 4
  %84 = call i32 @close(i32 %83)
  store i64 -1, i64* %3, align 8
  br label %137

85:                                               ; preds = %78, %70
  br label %86

86:                                               ; preds = %85, %67
  %87 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %88 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %87, i32 0, i32 12
  %89 = load i32, i32* %8, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %88, i64 0, i64 %90
  %92 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %91, i32 0, i32 8
  call void @fio_lock(i8* %92)
  %93 = load i32, i32* %8, align 4
  %94 = sext i32 %93 to i64
  %95 = call i32 @fio_clear_fd(i64 %94, i8 zeroext 1)
  %96 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %97 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %96, i32 0, i32 12
  %98 = load i32, i32* %8, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %97, i64 0, i64 %99
  %101 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %100, i32 0, i32 8
  %102 = call i32 @fio_unlock(i8* %101)
  %103 = load i64, i64* %7, align 8
  %104 = icmp ult i64 %103, 48
  br i1 %104, label %105, label %124

105:                                              ; preds = %86
  %106 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %107 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %106, i32 0, i32 12
  %108 = load i32, i32* %8, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %107, i64 0, i64 %109
  %111 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %110, i32 0, i32 14
  %112 = getelementptr inbounds [48 x i8], [48 x i8]* %111, i64 0, i64 0
  %113 = load i8*, i8** %4, align 8
  %114 = load i64, i64* %7, align 8
  %115 = add i64 %114, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %112, i8* align 1 %113, i64 %115, i1 false)
  %116 = load i64, i64* %7, align 8
  %117 = trunc i64 %116 to i8
  %118 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %119 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %118, i32 0, i32 12
  %120 = load i32, i32* %8, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %119, i64 0, i64 %121
  %123 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %122, i32 0, i32 13
  store i8 %117, i8* %123, align 1
  br label %124

124:                                              ; preds = %105, %86
  %125 = load i32, i32* %8, align 4
  %126 = sext i32 %125 to i64
  %127 = shl i64 %126, 8
  %128 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %129 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %128, i32 0, i32 12
  %130 = load i32, i32* %8, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %129, i64 0, i64 %131
  %133 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %132, i32 0, i32 9
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = or i64 %127, %135
  store i64 %136, i64* %3, align 8
  br label %137

137:                                              ; preds = %124, %82, %64, %57, %40, %35, %23
  %138 = load i64, i64* %3, align 8
  ret i64 %138
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_tcp_socket(i8*, i8*, i8 zeroext) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.addrinfo, align 8
  %9 = alloca %struct.addrinfo*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.addrinfo*, align 8
  %14 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.addrinfo*, align 8
  %18 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8 %2, i8* %7, align 1
  %19 = bitcast %struct.addrinfo* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 48, i1 false)
  %20 = bitcast %struct.addrinfo* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 48, i1 false)
  %21 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %8, i32 0, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %8, i32 0, i32 2
  store i32 1, i32* %22, align 8
  %23 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %8, i32 0, i32 0
  store i32 1, i32* %23, align 8
  %24 = load i8*, i8** %5, align 8
  %25 = load i8*, i8** %6, align 8
  %26 = call i32 @getaddrinfo(i8* %24, i8* %25, %struct.addrinfo* %8, %struct.addrinfo** %9)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %3
  store i64 -1, i64* %4, align 8
  br label %178

29:                                               ; preds = %3
  %30 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %31 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %34 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %33, i32 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %37 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %36, i32 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = call i32 @socket(i32 %32, i32 %35, i32 %38) #1
  store i32 %39, i32* %10, align 4
  %40 = load i32, i32* %10, align 4
  %41 = icmp sle i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %29
  %43 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %43) #1
  store i64 -1, i64* %4, align 8
  br label %178

44:                                               ; preds = %29
  %45 = load i32, i32* %10, align 4
  %46 = call i32 @fio_set_non_block(i32 %45)
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %49) #1
  %50 = load i32, i32* %10, align 4
  %51 = call i32 @close(i32 %50)
  store i64 -1, i64* %4, align 8
  br label %178

52:                                               ; preds = %44
  %53 = load i8, i8* %7, align 1
  %54 = icmp ne i8 %53, 0
  br i1 %54, label %55, label %104

55:                                               ; preds = %52
  store i32 1, i32* %11, align 4
  %56 = load i32, i32* %10, align 4
  %57 = bitcast i32* %11 to i8*
  %58 = call i32 @setsockopt(i32 %56, i32 1, i32 2, i8* %57, i32 4) #1
  store i32 0, i32* %12, align 4
  %59 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  store %struct.addrinfo* %59, %struct.addrinfo** %13, align 8
  br label %60

60:                                               ; preds = %78, %55
  %61 = load %struct.addrinfo*, %struct.addrinfo** %13, align 8
  %62 = icmp ne %struct.addrinfo* %61, null
  br i1 %62, label %63, label %82

63:                                               ; preds = %60
  %64 = load i32, i32* %10, align 4
  %65 = bitcast %union.__CONST_SOCKADDR_ARG* %14 to %struct.sockaddr**
  %66 = load %struct.addrinfo*, %struct.addrinfo** %13, align 8
  %67 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %66, i32 0, i32 5
  %68 = load %struct.sockaddr*, %struct.sockaddr** %67, align 8
  store %struct.sockaddr* %68, %struct.sockaddr** %65, align 8
  %69 = load %struct.addrinfo*, %struct.addrinfo** %13, align 8
  %70 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %69, i32 0, i32 4
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %14, i32 0, i32 0
  %73 = load %struct.sockaddr*, %struct.sockaddr** %72, align 8
  %74 = call i32 @bind(i32 %64, %struct.sockaddr* %73, i32 %71) #1
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %63
  store i32 1, i32* %12, align 4
  br label %77

77:                                               ; preds = %76, %63
  br label %78

78:                                               ; preds = %77
  %79 = load %struct.addrinfo*, %struct.addrinfo** %13, align 8
  %80 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %79, i32 0, i32 7
  %81 = load %struct.addrinfo*, %struct.addrinfo** %80, align 8
  store %struct.addrinfo* %81, %struct.addrinfo** %13, align 8
  br label %60

82:                                               ; preds = %60
  %83 = load i32, i32* %12, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %82
  %86 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %86) #1
  %87 = load i32, i32* %10, align 4
  %88 = call i32 @close(i32 %87)
  store i64 -1, i64* %4, align 8
  br label %178

89:                                               ; preds = %82
  store i32 128, i32* %15, align 4
  %90 = load i32, i32* %10, align 4
  %91 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %92 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %91, i32 0, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = bitcast i32* %15 to i8*
  %95 = call i32 @setsockopt(i32 %90, i32 %93, i32 23, i8* %94, i32 4) #1
  %96 = load i32, i32* %10, align 4
  %97 = call i32 @listen(i32 %96, i32 4096) #1
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %99, label %103

99:                                               ; preds = %89
  %100 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %100) #1
  %101 = load i32, i32* %10, align 4
  %102 = call i32 @close(i32 %101)
  store i64 -1, i64* %4, align 8
  br label %178

103:                                              ; preds = %89
  br label %140

104:                                              ; preds = %52
  store i32 1, i32* %16, align 4
  %105 = load i32, i32* %10, align 4
  %106 = bitcast i32* %16 to i8*
  %107 = call i32 @setsockopt(i32 %105, i32 6, i32 1, i8* %106, i32 4) #1
  %108 = call i32* @__errno_location() #9
  store i32 0, i32* %108, align 4
  %109 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  store %struct.addrinfo* %109, %struct.addrinfo** %17, align 8
  br label %110

110:                                              ; preds = %132, %104
  %111 = load %struct.addrinfo*, %struct.addrinfo** %17, align 8
  %112 = icmp ne %struct.addrinfo* %111, null
  br i1 %112, label %113, label %136

113:                                              ; preds = %110
  %114 = load i32, i32* %10, align 4
  %115 = bitcast %union.__CONST_SOCKADDR_ARG* %18 to %struct.sockaddr**
  %116 = load %struct.addrinfo*, %struct.addrinfo** %17, align 8
  %117 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %116, i32 0, i32 5
  %118 = load %struct.sockaddr*, %struct.sockaddr** %117, align 8
  store %struct.sockaddr* %118, %struct.sockaddr** %115, align 8
  %119 = load %struct.addrinfo*, %struct.addrinfo** %17, align 8
  %120 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %119, i32 0, i32 4
  %121 = load i32, i32* %120, align 8
  %122 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %18, i32 0, i32 0
  %123 = load %struct.sockaddr*, %struct.sockaddr** %122, align 8
  %124 = call i32 @connect(i32 %114, %struct.sockaddr* %123, i32 %121)
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %113
  %127 = call i32* @__errno_location() #9
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 115
  br i1 %129, label %130, label %131

130:                                              ; preds = %126, %113
  br label %141

131:                                              ; preds = %126
  br label %132

132:                                              ; preds = %131
  %133 = load %struct.addrinfo*, %struct.addrinfo** %17, align 8
  %134 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %133, i32 0, i32 7
  %135 = load %struct.addrinfo*, %struct.addrinfo** %134, align 8
  store %struct.addrinfo* %135, %struct.addrinfo** %17, align 8
  br label %110

136:                                              ; preds = %110
  %137 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %137) #1
  %138 = load i32, i32* %10, align 4
  %139 = call i32 @close(i32 %138)
  store i64 -1, i64* %4, align 8
  br label %178

140:                                              ; preds = %103
  br label %141

141:                                              ; preds = %140, %130
  %142 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %143 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %142, i32 0, i32 12
  %144 = load i32, i32* %10, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %143, i64 0, i64 %145
  %147 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %146, i32 0, i32 8
  call void @fio_lock(i8* %147)
  %148 = load i32, i32* %10, align 4
  %149 = sext i32 %148 to i64
  %150 = call i32 @fio_clear_fd(i64 %149, i8 zeroext 1)
  %151 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %152 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %151, i32 0, i32 12
  %153 = load i32, i32* %10, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %152, i64 0, i64 %154
  %156 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %155, i32 0, i32 8
  %157 = call i32 @fio_unlock(i8* %156)
  %158 = load i32, i32* %10, align 4
  %159 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %160 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %159, i32 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %163 = bitcast %struct.addrinfo* %162 to i8*
  %164 = bitcast i8* %163 to %struct.sockaddr*
  call void @fio_tcp_addr_cpy(i32 %158, i32 %161, %struct.sockaddr* %164)
  %165 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  call void @freeaddrinfo(%struct.addrinfo* %165) #1
  %166 = load i32, i32* %10, align 4
  %167 = sext i32 %166 to i64
  %168 = shl i64 %167, 8
  %169 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %170 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %169, i32 0, i32 12
  %171 = load i32, i32* %10, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %170, i64 0, i64 %172
  %174 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %173, i32 0, i32 9
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i64
  %177 = or i64 %168, %176
  store i64 %177, i64* %4, align 8
  br label %178

178:                                              ; preds = %141, %136, %99, %85, %48, %42, %28
  %179 = load i64, i64* %4, align 8
  ret i64 %179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_read(i64, i8*, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64 (i64, i8*, i8*, i64)*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %12 = load i64, i64* %5, align 8
  %13 = icmp sge i64 %12, 0
  br i1 %13, label %14, label %47

14:                                               ; preds = %3
  %15 = load i64, i64* %5, align 8
  %16 = lshr i64 %15, 8
  %17 = trunc i64 %16 to i32
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp ult i32 %17, %20
  br i1 %21, label %22, label %47

22:                                               ; preds = %14
  %23 = load i64, i64* %5, align 8
  %24 = and i64 %23, 255
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i64, i64* %5, align 8
  %28 = lshr i64 %27, 8
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %31, i32 0, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = icmp eq i64 %24, %34
  br i1 %35, label %36, label %47

36:                                               ; preds = %22
  %37 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %38 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %37, i32 0, i32 12
  %39 = load i64, i64* %5, align 8
  %40 = lshr i64 %39, 8
  %41 = trunc i64 %40 to i32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %38, i64 0, i64 %42
  %44 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %43, i32 0, i32 11
  %45 = load i8, i8* %44, align 1
  %46 = icmp ne i8 %45, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %36, %22, %14, %3
  %48 = call i32* @__errno_location() #9
  store i32 9, i32* %48, align 4
  store i64 -1, i64* %4, align 8
  br label %133

49:                                               ; preds = %36
  %50 = load i64, i64* %7, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  store i64 0, i64* %4, align 8
  br label %133

53:                                               ; preds = %49
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 12
  %56 = load i64, i64* %5, align 8
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %55, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %60, i32 0, i32 10
  call void @fio_lock(i8* %61)
  %62 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %63 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %62, i32 0, i32 12
  %64 = load i64, i64* %5, align 8
  %65 = lshr i64 %64, 8
  %66 = trunc i64 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %63, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %68, i32 0, i32 15
  %70 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %69, align 8
  %71 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %70, i32 0, i32 0
  %72 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %71, align 8
  store i64 (i64, i8*, i8*, i64)* %72, i64 (i64, i8*, i8*, i64)** %8, align 8
  %73 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %74 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %73, i32 0, i32 12
  %75 = load i64, i64* %5, align 8
  %76 = lshr i64 %75, 8
  %77 = trunc i64 %76 to i32
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %74, i64 0, i64 %78
  %80 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %79, i32 0, i32 16
  %81 = load i8*, i8** %80, align 8
  store i8* %81, i8** %9, align 8
  %82 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %83 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %82, i32 0, i32 12
  %84 = load i64, i64* %5, align 8
  %85 = lshr i64 %84, 8
  %86 = trunc i64 %85 to i32
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %83, i64 0, i64 %87
  %89 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %88, i32 0, i32 10
  %90 = call i32 @fio_unlock(i8* %89)
  %91 = call i32* @__errno_location() #9
  %92 = load i32, i32* %91, align 4
  store i32 %92, i32* %10, align 4
  br label %93

93:                                               ; preds = %112, %53
  %94 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %8, align 8
  %95 = load i64, i64* %5, align 8
  %96 = load i8*, i8** %9, align 8
  %97 = load i8*, i8** %6, align 8
  %98 = load i64, i64* %7, align 8
  %99 = call i64 %94(i64 %95, i8* %96, i8* %97, i64 %98)
  store i64 %99, i64* %11, align 8
  %100 = load i64, i64* %11, align 8
  %101 = icmp sgt i64 %100, 0
  br i1 %101, label %102, label %105

102:                                              ; preds = %93
  %103 = load i64, i64* %5, align 8
  call void @fio_touch(i64 %103)
  %104 = load i64, i64* %11, align 8
  store i64 %104, i64* %4, align 8
  br label %133

105:                                              ; preds = %93
  %106 = load i64, i64* %11, align 8
  %107 = icmp slt i64 %106, 0
  br i1 %107, label %108, label %113

108:                                              ; preds = %105
  %109 = call i32* @__errno_location() #9
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 4
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  br label %93

113:                                              ; preds = %108, %105
  %114 = load i64, i64* %11, align 8
  %115 = icmp slt i64 %114, 0
  br i1 %115, label %116, label %131

116:                                              ; preds = %113
  %117 = call i32* @__errno_location() #9
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, 11
  br i1 %119, label %128, label %120

120:                                              ; preds = %116
  %121 = call i32* @__errno_location() #9
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 11
  br i1 %123, label %128, label %124

124:                                              ; preds = %120
  %125 = call i32* @__errno_location() #9
  %126 = load i32, i32* %125, align 4
  %127 = icmp eq i32 %126, 107
  br i1 %127, label %128, label %131

128:                                              ; preds = %124, %120, %116
  %129 = load i32, i32* %10, align 4
  %130 = call i32* @__errno_location() #9
  store i32 %129, i32* %130, align 4
  store i64 0, i64* %4, align 8
  br label %133

131:                                              ; preds = %124, %113
  %132 = load i64, i64* %5, align 8
  call void @fio_force_close(i64 %132)
  store i64 -1, i64* %4, align 8
  br label %133

133:                                              ; preds = %131, %128, %102, %52, %47
  %134 = load i64, i64* %4, align 8
  ret i64 %134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_force_close(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.fio_packet_s*, align 8
  %4 = alloca %struct.fio_packet_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp sge i64 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %1
  %10 = load i64, i64* %2, align 8
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %31

17:                                               ; preds = %9
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 255
  %20 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %21 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %20, i32 0, i32 12
  %22 = load i64, i64* %2, align 8
  %23 = lshr i64 %22, 8
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %21, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %26, i32 0, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = icmp eq i64 %19, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %17, %9, %1
  %32 = call i32* @__errno_location() #9
  store i32 9, i32* %32, align 4
  br label %222

33:                                               ; preds = %17
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 12
  %36 = load i64, i64* %2, align 8
  %37 = lshr i64 %36, 8
  %38 = trunc i64 %37 to i32
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %35, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %40, i32 0, i32 12
  %42 = load i8, i8* %41, align 8
  %43 = icmp ne i8 %42, 0
  br i1 %43, label %53, label %44

44:                                               ; preds = %33
  %45 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %46 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %45, i32 0, i32 12
  %47 = load i64, i64* %2, align 8
  %48 = lshr i64 %47, 8
  %49 = trunc i64 %48 to i32
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %46, i64 0, i64 %50
  %52 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %51, i32 0, i32 12
  store i8 1, i8* %52, align 8
  br label %53

53:                                               ; preds = %44, %33
  store %struct.fio_packet_s* null, %struct.fio_packet_s** %3, align 8
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 12
  %56 = load i64, i64* %2, align 8
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %55, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %60, i32 0, i32 10
  call void @fio_lock(i8* %61)
  %62 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %63 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %62, i32 0, i32 12
  %64 = load i64, i64* %2, align 8
  %65 = lshr i64 %64, 8
  %66 = trunc i64 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %63, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %68, i32 0, i32 0
  %70 = load %struct.fio_packet_s*, %struct.fio_packet_s** %69, align 8
  store %struct.fio_packet_s* %70, %struct.fio_packet_s** %3, align 8
  %71 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %72 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %71, i32 0, i32 12
  %73 = load i64, i64* %2, align 8
  %74 = lshr i64 %73, 8
  %75 = trunc i64 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %72, i64 0, i64 %76
  %78 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %77, i32 0, i32 0
  store %struct.fio_packet_s* null, %struct.fio_packet_s** %78, align 8
  %79 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %80 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %79, i32 0, i32 12
  %81 = load i64, i64* %2, align 8
  %82 = lshr i64 %81, 8
  %83 = trunc i64 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %80, i64 0, i64 %84
  %86 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %85, i32 0, i32 0
  %87 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %88 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %87, i32 0, i32 12
  %89 = load i64, i64* %2, align 8
  %90 = lshr i64 %89, 8
  %91 = trunc i64 %90 to i32
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %88, i64 0, i64 %92
  %94 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %93, i32 0, i32 1
  store %struct.fio_packet_s** %86, %struct.fio_packet_s*** %94, align 8
  %95 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %96 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %95, i32 0, i32 12
  %97 = load i64, i64* %2, align 8
  %98 = lshr i64 %97, 8
  %99 = trunc i64 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %96, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %101, i32 0, i32 2
  store i64 0, i64* %102, align 8
  %103 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %104 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %103, i32 0, i32 12
  %105 = load i64, i64* %2, align 8
  %106 = lshr i64 %105, 8
  %107 = trunc i64 %106 to i32
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %104, i64 0, i64 %108
  %110 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %109, i32 0, i32 10
  %111 = call i32 @fio_unlock(i8* %110)
  br label %112

112:                                              ; preds = %115, %53
  %113 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  %114 = icmp ne %struct.fio_packet_s* %113, null
  br i1 %114, label %115, label %121

115:                                              ; preds = %112
  %116 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  store %struct.fio_packet_s* %116, %struct.fio_packet_s** %4, align 8
  %117 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  %118 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %117, i32 0, i32 0
  %119 = load %struct.fio_packet_s*, %struct.fio_packet_s** %118, align 8
  store %struct.fio_packet_s* %119, %struct.fio_packet_s** %3, align 8
  %120 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  call void @fio_packet_free(%struct.fio_packet_s* %120)
  br label %112

121:                                              ; preds = %112
  %122 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %123 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %122, i32 0, i32 12
  %124 = load i64, i64* %2, align 8
  %125 = lshr i64 %124, 8
  %126 = trunc i64 %125 to i32
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %123, i64 0, i64 %127
  %129 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %128, i32 0, i32 11
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %184

133:                                              ; preds = %121
  %134 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %135 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %134, i32 0, i32 12
  %136 = load i64, i64* %2, align 8
  %137 = lshr i64 %136, 8
  %138 = trunc i64 %137 to i32
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %135, i64 0, i64 %139
  %141 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %140, i32 0, i32 12
  %142 = load i8, i8* %141, align 8
  %143 = zext i8 %142 to i32
  %144 = and i32 %143, 1
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %184

146:                                              ; preds = %133
  %147 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %148 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %147, i32 0, i32 12
  %149 = load i64, i64* %2, align 8
  %150 = lshr i64 %149, 8
  %151 = trunc i64 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %148, i64 0, i64 %152
  %154 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %153, i32 0, i32 15
  %155 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %154, align 8
  %156 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %155, i32 0, i32 3
  %157 = load i64 (i64, i8*)*, i64 (i64, i8*)** %156, align 8
  %158 = load i64, i64* %2, align 8
  %159 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %160 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %159, i32 0, i32 12
  %161 = load i64, i64* %2, align 8
  %162 = lshr i64 %161, 8
  %163 = trunc i64 %162 to i32
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %160, i64 0, i64 %164
  %166 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %165, i32 0, i32 16
  %167 = load i8*, i8** %166, align 8
  %168 = call i64 %157(i64 %158, i8* %167)
  %169 = icmp ne i64 %168, 0
  br i1 %169, label %170, label %184

170:                                              ; preds = %146
  %171 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %172 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %171, i32 0, i32 12
  %173 = load i64, i64* %2, align 8
  %174 = lshr i64 %173, 8
  %175 = trunc i64 %174 to i32
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %172, i64 0, i64 %176
  %178 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %177, i32 0, i32 12
  store i8 2, i8* %178, align 8
  %179 = load i64, i64* %2, align 8
  call void @fio_touch(i64 %179)
  %180 = load i64, i64* %2, align 8
  %181 = lshr i64 %180, 8
  %182 = trunc i64 %181 to i32
  %183 = sext i32 %182 to i64
  call void @fio_poll_add_write(i64 %183)
  br label %222

184:                                              ; preds = %146, %133, %121
  %185 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %186 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %185, i32 0, i32 12
  %187 = load i64, i64* %2, align 8
  %188 = lshr i64 %187, 8
  %189 = trunc i64 %188 to i32
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %186, i64 0, i64 %190
  %192 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %191, i32 0, i32 8
  call void @fio_lock(i8* %192)
  %193 = load i64, i64* %2, align 8
  %194 = lshr i64 %193, 8
  %195 = trunc i64 %194 to i32
  %196 = sext i32 %195 to i64
  %197 = call i32 @fio_clear_fd(i64 %196, i8 zeroext 0)
  %198 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %199 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %198, i32 0, i32 12
  %200 = load i64, i64* %2, align 8
  %201 = lshr i64 %200, 8
  %202 = trunc i64 %201 to i32
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %199, i64 0, i64 %203
  %205 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %204, i32 0, i32 8
  %206 = call i32 @fio_unlock(i8* %205)
  %207 = load i64, i64* %2, align 8
  %208 = lshr i64 %207, 8
  %209 = trunc i64 %208 to i32
  %210 = call i32 @close(i32 %209)
  %211 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %212 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %211, i32 0, i32 2
  %213 = load i32, i32* %212, align 4
  %214 = icmp ne i32 %213, 0
  br i1 %214, label %215, label %222

215:                                              ; preds = %184
  %216 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %217 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %216, i32 0, i32 2
  store i32 1, i32* %5, align 4
  %218 = load i32, i32* %5, align 4
  %219 = atomicrmw sub i32* %217, i32 %218 seq_cst
  %220 = sub i32 %219, %218
  store i32 %220, i32* %6, align 4
  %221 = load i32, i32* %6, align 4
  br label %222

222:                                              ; preds = %31, %170, %215, %184
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_write2_fn(i64, %struct.fio_write_args_s* byval(%struct.fio_write_args_s) align 8) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_packet_s*, align 8
  %6 = alloca %struct.fio_packet_s, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.fio_packet_s**, align 8
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  store i64 %0, i64* %4, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp sge i64 %11, 0
  br i1 %12, label %13, label %35

13:                                               ; preds = %2
  %14 = load i64, i64* %4, align 8
  %15 = lshr i64 %14, 8
  %16 = trunc i64 %15 to i32
  %17 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %18 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ult i32 %16, %19
  br i1 %20, label %21, label %35

21:                                               ; preds = %13
  %22 = load i64, i64* %4, align 8
  %23 = and i64 %22, 255
  %24 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %25 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %24, i32 0, i32 12
  %26 = load i64, i64* %4, align 8
  %27 = lshr i64 %26, 8
  %28 = trunc i64 %27 to i32
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %25, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %30, i32 0, i32 9
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = icmp eq i64 %23, %33
  br i1 %34, label %36, label %35

35:                                               ; preds = %21, %13, %2
  br label %269

36:                                               ; preds = %21
  %37 = call %struct.fio_packet_s* @fio_packet_alloc()
  store %struct.fio_packet_s* %37, %struct.fio_packet_s** %5, align 8
  %38 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %39 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 0
  store %struct.fio_packet_s* null, %struct.fio_packet_s** %39, align 8
  %40 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 1
  store i32 (i32, %struct.fio_packet_s*)* null, i32 (i32, %struct.fio_packet_s*)** %40, align 8
  %41 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 2
  store void (i8*)* null, void (i8*)** %41, align 8
  %42 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 3
  %43 = bitcast %union.anon* %42 to i8**
  %44 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 0
  %45 = bitcast %union.anon.11* %44 to i8**
  %46 = load i8*, i8** %45, align 8
  store i8* %46, i8** %43, align 8
  %47 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 4
  %48 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 3
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %47, align 8
  %50 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 5
  %51 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %50, align 8
  %53 = bitcast %struct.fio_packet_s* %38 to i8*
  %54 = bitcast %struct.fio_packet_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 48, i1 false)
  %55 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 4
  %56 = load i8, i8* %55, align 8
  %57 = lshr i8 %56, 1
  %58 = and i8 %57, 1
  %59 = zext i8 %58 to i32
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %89

61:                                               ; preds = %36
  %62 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %63 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %62, i32 0, i32 12
  %64 = load i64, i64* %4, align 8
  %65 = lshr i64 %64, 8
  %66 = trunc i64 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %63, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %68, i32 0, i32 15
  %70 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %69, align 8
  %71 = icmp eq %struct.fio_rw_hook_s* %70, @FIO_DEFAULT_RW_HOOKS
  %72 = zext i1 %71 to i64
  %73 = select i1 %71, i32 (i32, %struct.fio_packet_s*)* @fio_sock_sendfile_from_fd, i32 (i32, %struct.fio_packet_s*)* @fio_sock_write_from_fd
  %74 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %75 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %74, i32 0, i32 1
  store i32 (i32, %struct.fio_packet_s*)* %73, i32 (i32, %struct.fio_packet_s*)** %75, align 8
  %76 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %77 = bitcast %union.anon.12* %76 to void (i8*)**
  %78 = load void (i8*)*, void (i8*)** %77, align 8
  %79 = icmp ne void (i8*)* %78, null
  br i1 %79, label %80, label %84

80:                                               ; preds = %61
  %81 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %82 = bitcast %union.anon.12* %81 to void (i8*)**
  %83 = load void (i8*)*, void (i8*)** %82, align 8
  br label %85

84:                                               ; preds = %61
  br label %85

85:                                               ; preds = %84, %80
  %86 = phi void (i8*)* [ %83, %80 ], [ bitcast (void (i64)* @fio_sock_perform_close_fd to void (i8*)*), %84 ]
  %87 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %88 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %87, i32 0, i32 2
  store void (i8*)* %86, void (i8*)** %88, align 8
  br label %105

89:                                               ; preds = %36
  %90 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %91 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %90, i32 0, i32 1
  store i32 (i32, %struct.fio_packet_s*)* @fio_sock_write_buffer, i32 (i32, %struct.fio_packet_s*)** %91, align 8
  %92 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %93 = bitcast %union.anon.12* %92 to void (i8*)**
  %94 = load void (i8*)*, void (i8*)** %93, align 8
  %95 = icmp ne void (i8*)* %94, null
  br i1 %95, label %96, label %100

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %98 = bitcast %union.anon.12* %97 to void (i8*)**
  %99 = load void (i8*)*, void (i8*)** %98, align 8
  br label %101

100:                                              ; preds = %89
  br label %101

101:                                              ; preds = %100, %96
  %102 = phi void (i8*)* [ %99, %96 ], [ @free, %100 ]
  %103 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %104 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %103, i32 0, i32 2
  store void (i8*)* %102, void (i8*)** %104, align 8
  br label %105

105:                                              ; preds = %101, %85
  store i8 1, i8* %7, align 1
  %106 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %107 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %106, i32 0, i32 12
  %108 = load i64, i64* %4, align 8
  %109 = lshr i64 %108, 8
  %110 = trunc i64 %109 to i32
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %107, i64 0, i64 %111
  %113 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %112, i32 0, i32 10
  call void @fio_lock(i8* %113)
  %114 = load i64, i64* %4, align 8
  %115 = icmp sge i64 %114, 0
  br i1 %115, label %116, label %138

116:                                              ; preds = %105
  %117 = load i64, i64* %4, align 8
  %118 = lshr i64 %117, 8
  %119 = trunc i64 %118 to i32
  %120 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %121 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %120, i32 0, i32 1
  %122 = load i32, i32* %121, align 8
  %123 = icmp ult i32 %119, %122
  br i1 %123, label %124, label %138

124:                                              ; preds = %116
  %125 = load i64, i64* %4, align 8
  %126 = and i64 %125, 255
  %127 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %128 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %127, i32 0, i32 12
  %129 = load i64, i64* %4, align 8
  %130 = lshr i64 %129, 8
  %131 = trunc i64 %130 to i32
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %128, i64 0, i64 %132
  %134 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %133, i32 0, i32 9
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = icmp eq i64 %126, %136
  br i1 %137, label %139, label %138

138:                                              ; preds = %124, %116, %105
  br label %257

139:                                              ; preds = %124
  %140 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %141 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %140, i32 0, i32 12
  %142 = load i64, i64* %4, align 8
  %143 = lshr i64 %142, 8
  %144 = trunc i64 %143 to i32
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %141, i64 0, i64 %145
  %147 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %146, i32 0, i32 0
  %148 = load %struct.fio_packet_s*, %struct.fio_packet_s** %147, align 8
  %149 = icmp ne %struct.fio_packet_s* %148, null
  br i1 %149, label %150, label %151

150:                                              ; preds = %139
  store i8 0, i8* %7, align 1
  br label %151

151:                                              ; preds = %150, %139
  %152 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 4
  %153 = load i8, i8* %152, align 8
  %154 = and i8 %153, 1
  %155 = zext i8 %154 to i32
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %178

157:                                              ; preds = %151
  %158 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %159 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %160 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %159, i32 0, i32 12
  %161 = load i64, i64* %4, align 8
  %162 = lshr i64 %161, 8
  %163 = trunc i64 %162 to i32
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %160, i64 0, i64 %164
  %166 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %165, i32 0, i32 1
  %167 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %166, align 8
  store %struct.fio_packet_s* %158, %struct.fio_packet_s** %167, align 8
  %168 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %169 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %168, i32 0, i32 0
  %170 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %171 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %170, i32 0, i32 12
  %172 = load i64, i64* %4, align 8
  %173 = lshr i64 %172, 8
  %174 = trunc i64 %173 to i32
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %171, i64 0, i64 %175
  %177 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %176, i32 0, i32 1
  store %struct.fio_packet_s** %169, %struct.fio_packet_s*** %177, align 8
  br label %217

178:                                              ; preds = %151
  %179 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %180 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %179, i32 0, i32 12
  %181 = load i64, i64* %4, align 8
  %182 = lshr i64 %181, 8
  %183 = trunc i64 %182 to i32
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %180, i64 0, i64 %184
  %186 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %185, i32 0, i32 0
  store %struct.fio_packet_s** %186, %struct.fio_packet_s*** %8, align 8
  %187 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %8, align 8
  %188 = load %struct.fio_packet_s*, %struct.fio_packet_s** %187, align 8
  %189 = icmp ne %struct.fio_packet_s* %188, null
  br i1 %189, label %190, label %194

190:                                              ; preds = %178
  %191 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %8, align 8
  %192 = load %struct.fio_packet_s*, %struct.fio_packet_s** %191, align 8
  %193 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %192, i32 0, i32 0
  store %struct.fio_packet_s** %193, %struct.fio_packet_s*** %8, align 8
  br label %194

194:                                              ; preds = %190, %178
  %195 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %8, align 8
  %196 = load %struct.fio_packet_s*, %struct.fio_packet_s** %195, align 8
  %197 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %198 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %197, i32 0, i32 0
  store %struct.fio_packet_s* %196, %struct.fio_packet_s** %198, align 8
  %199 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %200 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %8, align 8
  store %struct.fio_packet_s* %199, %struct.fio_packet_s** %200, align 8
  %201 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %202 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %201, i32 0, i32 0
  %203 = load %struct.fio_packet_s*, %struct.fio_packet_s** %202, align 8
  %204 = icmp ne %struct.fio_packet_s* %203, null
  br i1 %204, label %216, label %205

205:                                              ; preds = %194
  %206 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %207 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %206, i32 0, i32 0
  %208 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %209 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %208, i32 0, i32 12
  %210 = load i64, i64* %4, align 8
  %211 = lshr i64 %210, 8
  %212 = trunc i64 %211 to i32
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %209, i64 0, i64 %213
  %215 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %214, i32 0, i32 1
  store %struct.fio_packet_s** %207, %struct.fio_packet_s*** %215, align 8
  br label %216

216:                                              ; preds = %205, %194
  br label %217

217:                                              ; preds = %216, %157
  %218 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %219 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %218, i32 0, i32 12
  %220 = load i64, i64* %4, align 8
  %221 = lshr i64 %220, 8
  %222 = trunc i64 %221 to i32
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %219, i64 0, i64 %223
  %225 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %224, i32 0, i32 5
  store i16 1, i16* %9, align 2
  %226 = load i16, i16* %9, align 2
  %227 = atomicrmw add i16* %225, i16 %226 seq_cst
  %228 = add i16 %227, %226
  store i16 %228, i16* %10, align 2
  %229 = load i16, i16* %10, align 2
  %230 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %231 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %230, i32 0, i32 12
  %232 = load i64, i64* %4, align 8
  %233 = lshr i64 %232, 8
  %234 = trunc i64 %233 to i32
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %231, i64 0, i64 %235
  %237 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %236, i32 0, i32 10
  %238 = call i32 @fio_unlock(i8* %237)
  %239 = load i8, i8* %7, align 1
  %240 = icmp ne i8 %239, 0
  br i1 %240, label %241, label %256

241:                                              ; preds = %217
  %242 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %243 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %242, i32 0, i32 0
  %244 = getelementptr inbounds %struct.timespec, %struct.timespec* %243, i32 0, i32 0
  %245 = load i64, i64* %244, align 8
  %246 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %247 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %246, i32 0, i32 12
  %248 = load i64, i64* %4, align 8
  %249 = lshr i64 %248, 8
  %250 = trunc i64 %249 to i32
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %247, i64 0, i64 %251
  %253 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %252, i32 0, i32 4
  store i64 %245, i64* %253, align 8
  %254 = load i64, i64* %4, align 8
  %255 = inttoptr i64 %254 to i8*
  call void @deferred_on_ready(i8* %255, i8* inttoptr (i64 1 to i8*))
  br label %256

256:                                              ; preds = %241, %217
  store i64 0, i64* %3, align 8
  br label %283

257:                                              ; preds = %138
  %258 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %259 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %258, i32 0, i32 12
  %260 = load i64, i64* %4, align 8
  %261 = lshr i64 %260, 8
  %262 = trunc i64 %261 to i32
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %259, i64 0, i64 %263
  %265 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %264, i32 0, i32 10
  %266 = call i32 @fio_unlock(i8* %265)
  %267 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  call void @fio_packet_free(%struct.fio_packet_s* %267)
  %268 = call i32* @__errno_location() #9
  store i32 9, i32* %268, align 4
  store i64 -1, i64* %3, align 8
  br label %283

269:                                              ; preds = %35
  %270 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %271 = bitcast %union.anon.12* %270 to void (i8*)**
  %272 = load void (i8*)*, void (i8*)** %271, align 8
  %273 = icmp ne void (i8*)* %272, null
  br i1 %273, label %274, label %281

274:                                              ; preds = %269
  %275 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 1
  %276 = bitcast %union.anon.12* %275 to void (i8*)**
  %277 = load void (i8*)*, void (i8*)** %276, align 8
  %278 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %1, i32 0, i32 0
  %279 = bitcast %union.anon.11* %278 to i8**
  %280 = load i8*, i8** %279, align 8
  call void %277(i8* %280)
  br label %281

281:                                              ; preds = %274, %269
  %282 = call i32* @__errno_location() #9
  store i32 9, i32* %282, align 4
  store i64 -1, i64* %3, align 8
  br label %283

283:                                              ; preds = %281, %257, %256
  %284 = load i64, i64* %3, align 8
  ret i64 %284
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_packet_s* @fio_packet_alloc() #0 {
  %1 = alloca %struct.fio_packet_s*, align 8
  %2 = call noalias i8* @fio_malloc(i64 48)
  %3 = ptrtoint i8* %2 to i64
  %4 = and i64 %3, 15
  %5 = icmp eq i64 %4, 0
  call void @llvm.assume(i1 %5)
  %6 = bitcast i8* %2 to %struct.fio_packet_s*
  store %struct.fio_packet_s* %6, %struct.fio_packet_s** %1, align 8
  %7 = load %struct.fio_packet_s*, %struct.fio_packet_s** %1, align 8
  %8 = icmp ne %struct.fio_packet_s* %7, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %0
  br label %10

10:                                               ; preds = %9
  %11 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %12 = icmp sle i32 1, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.51, i64 0, i64 0))
  br label %14

14:                                               ; preds = %13, %10
  br label %15

15:                                               ; preds = %14
  %16 = call i32 @kill(i32 0, i32 2) #1
  %17 = call i32* @__errno_location() #9
  %18 = load i32, i32* %17, align 4
  call void @exit(i32 %18) #11
  unreachable

19:                                               ; preds = %0
  %20 = load %struct.fio_packet_s*, %struct.fio_packet_s** %1, align 8
  ret %struct.fio_packet_s* %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_sock_sendfile_from_fd(i32, %struct.fio_packet_s*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_packet_s*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  store %struct.fio_packet_s* %1, %struct.fio_packet_s** %5, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %9 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %8, i32 0, i32 3
  %10 = bitcast %union.anon* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %14 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %13, i32 0, i32 4
  %15 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %16 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %15, i32 0, i32 5
  %17 = load i64, i64* %16, align 8
  %18 = call i64 @sendfile64(i32 %7, i32 %12, i64* %14, i64 %17) #1
  store i64 %18, i64* %6, align 8
  %19 = load i64, i64* %6, align 8
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %38

22:                                               ; preds = %2
  %23 = load i64, i64* %6, align 8
  %24 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %24, i32 0, i32 5
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %26, %23
  store i64 %27, i64* %25, align 8
  %28 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %29 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %28, i32 0, i32 5
  %30 = load i64, i64* %29, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %22
  %33 = load i32, i32* %4, align 4
  %34 = sext i32 %33 to i64
  call void @fio_sock_packet_rotate_unsafe(i64 %34)
  br label %35

35:                                               ; preds = %32, %22
  %36 = load i64, i64* %6, align 8
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %3, align 4
  br label %38

38:                                               ; preds = %35, %21
  %39 = load i32, i32* %3, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_sock_write_from_fd(i32, %struct.fio_packet_s*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_packet_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca [49152 x i8], align 16
  store i32 %0, i32* %4, align 4
  store %struct.fio_packet_s* %1, %struct.fio_packet_s** %5, align 8
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  store i64 0, i64* %8, align 8
  br label %10

10:                                               ; preds = %87, %2
  %11 = load i64, i64* %7, align 8
  %12 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %13 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %12, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, %11
  store i64 %15, i64* %13, align 8
  %16 = load i64, i64* %7, align 8
  %17 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %18 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %17, i32 0, i32 5
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %16
  store i64 %20, i64* %18, align 8
  br label %21

21:                                               ; preds = %135, %10
  %22 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %23 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %22, i32 0, i32 3
  %24 = bitcast %union.anon* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds [49152 x i8], [49152 x i8]* %9, i64 0, i64 0
  %28 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %29 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %28, i32 0, i32 5
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %30, 49152
  br i1 %31, label %32, label %36

32:                                               ; preds = %21
  %33 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %34 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %33, i32 0, i32 5
  %35 = load i64, i64* %34, align 8
  br label %37

36:                                               ; preds = %21
  br label %37

37:                                               ; preds = %36, %32
  %38 = phi i64 [ %35, %32 ], [ 49152, %36 ]
  %39 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %40 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %39, i32 0, i32 4
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @pread(i32 %26, i8* %27, i64 %38, i64 %41)
  store i64 %42, i64* %6, align 8
  %43 = load i64, i64* %6, align 8
  %44 = icmp sle i64 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  br label %117

46:                                               ; preds = %37
  %47 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %48 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %47, i32 0, i32 12
  %49 = load i32, i32* %4, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %48, i64 0, i64 %50
  %52 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %51, i32 0, i32 15
  %53 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %52, align 8
  %54 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %53, i32 0, i32 1
  %55 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %54, align 8
  %56 = load i32, i32* %4, align 4
  %57 = sext i32 %56 to i64
  %58 = shl i64 %57, 8
  %59 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %60 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %59, i32 0, i32 12
  %61 = load i32, i32* %4, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %60, i64 0, i64 %62
  %64 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %63, i32 0, i32 9
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = or i64 %58, %66
  %68 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %69 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %68, i32 0, i32 12
  %70 = load i32, i32* %4, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %69, i64 0, i64 %71
  %73 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %72, i32 0, i32 16
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds [49152 x i8], [49152 x i8]* %9, i64 0, i64 0
  %76 = load i64, i64* %6, align 8
  %77 = call i64 %55(i64 %67, i8* %74, i8* %75, i64 %76)
  store i64 %77, i64* %7, align 8
  br label %78

78:                                               ; preds = %46
  %79 = load i64, i64* %7, align 8
  %80 = load i64, i64* %6, align 8
  %81 = icmp eq i64 %79, %80
  br i1 %81, label %82, label %87

82:                                               ; preds = %78
  %83 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %84 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %83, i32 0, i32 5
  %85 = load i64, i64* %84, align 8
  %86 = icmp ne i64 %85, 0
  br label %87

87:                                               ; preds = %82, %78
  %88 = phi i1 [ false, %78 ], [ %86, %82 ]
  br i1 %88, label %10, label %89

89:                                               ; preds = %87
  %90 = load i64, i64* %7, align 8
  %91 = icmp sge i64 %90, 0
  br i1 %91, label %92, label %114

92:                                               ; preds = %89
  %93 = load i64, i64* %7, align 8
  %94 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %95 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %94, i32 0, i32 4
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %93
  store i64 %97, i64* %95, align 8
  %98 = load i64, i64* %7, align 8
  %99 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %100 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %99, i32 0, i32 5
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %101, %98
  store i64 %102, i64* %100, align 8
  %103 = load i64, i64* %7, align 8
  %104 = load i64, i64* %8, align 8
  %105 = add nsw i64 %104, %103
  store i64 %105, i64* %8, align 8
  %106 = load %struct.fio_packet_s*, %struct.fio_packet_s** %5, align 8
  %107 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %106, i32 0, i32 5
  %108 = load i64, i64* %107, align 8
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %92
  %111 = load i32, i32* %4, align 4
  %112 = sext i32 %111 to i64
  call void @fio_sock_packet_rotate_unsafe(i64 %112)
  store i32 1, i32* %3, align 4
  br label %137

113:                                              ; preds = %92
  br label %114

114:                                              ; preds = %113, %89
  %115 = load i64, i64* %8, align 8
  %116 = trunc i64 %115 to i32
  store i32 %116, i32* %3, align 4
  br label %137

117:                                              ; preds = %45
  %118 = load i64, i64* %7, align 8
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = load i32, i32* %4, align 4
  %122 = sext i32 %121 to i64
  call void @fio_sock_packet_rotate_unsafe(i64 %122)
  store i32 1, i32* %3, align 4
  br label %137

123:                                              ; preds = %117
  %124 = call i32* @__errno_location() #9
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 11
  br i1 %126, label %135, label %127

127:                                              ; preds = %123
  %128 = call i32* @__errno_location() #9
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 11
  br i1 %130, label %135, label %131

131:                                              ; preds = %127
  %132 = call i32* @__errno_location() #9
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 4
  br i1 %134, label %135, label %136

135:                                              ; preds = %131, %127, %123
  br label %21

136:                                              ; preds = %131
  store i32 -1, i32* %3, align 4
  br label %137

137:                                              ; preds = %136, %120, %114, %110
  %138 = load i32, i32* %3, align 4
  ret i32 %138
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sock_perform_close_fd(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = call i32 @close(i32 %4)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_sock_write_buffer(i32, %struct.fio_packet_s*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.fio_packet_s*, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store %struct.fio_packet_s* %1, %struct.fio_packet_s** %4, align 8
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 12
  %8 = load i32, i32* %3, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %7, i64 0, i64 %9
  %11 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %10, i32 0, i32 15
  %12 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %11, align 8
  %13 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %12, i32 0, i32 1
  %14 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %13, align 8
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = shl i64 %16, 8
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 12
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %19, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = or i64 %17, %25
  %27 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %28 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %27, i32 0, i32 12
  %29 = load i32, i32* %3, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %28, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %31, i32 0, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %35 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %34, i32 0, i32 3
  %36 = bitcast %union.anon* %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %39 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %38, i32 0, i32 4
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds i8, i8* %37, i64 %40
  %42 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %43 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %42, i32 0, i32 5
  %44 = load i64, i64* %43, align 8
  %45 = call i64 %14(i64 %26, i8* %33, i8* %41, i64 %44)
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %5, align 4
  %47 = load i32, i32* %5, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %2
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %53 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %52, i32 0, i32 5
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %54, %51
  store i64 %55, i64* %53, align 8
  %56 = load i32, i32* %5, align 4
  %57 = sext i32 %56 to i64
  %58 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %59 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %58, i32 0, i32 4
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, %57
  store i64 %61, i64* %59, align 8
  %62 = load %struct.fio_packet_s*, %struct.fio_packet_s** %4, align 8
  %63 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %62, i32 0, i32 5
  %64 = load i64, i64* %63, align 8
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %49
  %67 = load i32, i32* %3, align 4
  %68 = sext i32 %67 to i64
  call void @fio_sock_packet_rotate_unsafe(i64 %68)
  br label %69

69:                                               ; preds = %66, %49
  br label %70

70:                                               ; preds = %69, %2
  %71 = load i32, i32* %5, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_packet_free(%struct.fio_packet_s*) #0 {
  %2 = alloca %struct.fio_packet_s*, align 8
  store %struct.fio_packet_s* %0, %struct.fio_packet_s** %2, align 8
  %3 = load %struct.fio_packet_s*, %struct.fio_packet_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %3, i32 0, i32 2
  %5 = load void (i8*)*, void (i8*)** %4, align 8
  %6 = load %struct.fio_packet_s*, %struct.fio_packet_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %6, i32 0, i32 3
  %8 = bitcast %union.anon* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  call void %5(i8* %9)
  %10 = load %struct.fio_packet_s*, %struct.fio_packet_s** %2, align 8
  %11 = bitcast %struct.fio_packet_s* %10 to i8*
  call void @fio_free(i8* %11)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FIO_DEALLOC_NOOP(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_pending(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp sge i64 %4, 0
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  %7 = load i64, i64* %3, align 8
  %8 = lshr i64 %7, 8
  %9 = trunc i64 %8 to i32
  %10 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %11 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %9, %12
  br i1 %13, label %14, label %28

14:                                               ; preds = %6
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, 255
  %17 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %18 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %17, i32 0, i32 12
  %19 = load i64, i64* %3, align 8
  %20 = lshr i64 %19, 8
  %21 = trunc i64 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %18, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %23, i32 0, i32 9
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = icmp eq i64 %16, %26
  br i1 %27, label %29, label %28

28:                                               ; preds = %14, %6, %1
  store i64 0, i64* %2, align 8
  br label %40

29:                                               ; preds = %14
  %30 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %31 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %30, i32 0, i32 12
  %32 = load i64, i64* %3, align 8
  %33 = lshr i64 %32, 8
  %34 = trunc i64 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %31, i64 0, i64 %35
  %37 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %36, i32 0, i32 5
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i64
  store i64 %39, i64* %2, align 8
  br label %40

40:                                               ; preds = %29, %28
  %41 = load i64, i64* %2, align 8
  ret i64 %41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_close(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sge i64 %3, 0
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = lshr i64 %6, 8
  %8 = trunc i64 %7 to i32
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %13, label %27

13:                                               ; preds = %5
  %14 = load i64, i64* %2, align 8
  %15 = and i64 %14, 255
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %2, align 8
  %19 = lshr i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %22, i32 0, i32 9
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = icmp eq i64 %15, %25
  br i1 %26, label %29, label %27

27:                                               ; preds = %13, %5, %1
  %28 = call i32* @__errno_location() #9
  store i32 9, i32* %28, align 4
  br label %67

29:                                               ; preds = %13
  %30 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %31 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %30, i32 0, i32 12
  %32 = load i64, i64* %2, align 8
  %33 = lshr i64 %32, 8
  %34 = trunc i64 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %31, i64 0, i64 %35
  %37 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %36, i32 0, i32 0
  %38 = load %struct.fio_packet_s*, %struct.fio_packet_s** %37, align 8
  %39 = icmp ne %struct.fio_packet_s* %38, null
  br i1 %39, label %52, label %40

40:                                               ; preds = %29
  %41 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %42 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %41, i32 0, i32 12
  %43 = load i64, i64* %2, align 8
  %44 = lshr i64 %43, 8
  %45 = trunc i64 %44 to i32
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %42, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %47, i32 0, i32 10
  %49 = load volatile i8, i8* %48, align 2
  %50 = zext i8 %49 to i32
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %65

52:                                               ; preds = %40, %29
  %53 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %54 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %53, i32 0, i32 12
  %55 = load i64, i64* %2, align 8
  %56 = lshr i64 %55, 8
  %57 = trunc i64 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %54, i64 0, i64 %58
  %60 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %59, i32 0, i32 12
  store i8 1, i8* %60, align 8
  %61 = load i64, i64* %2, align 8
  %62 = lshr i64 %61, 8
  %63 = trunc i64 %62 to i32
  %64 = sext i32 %63 to i64
  call void @fio_poll_add_write(i64 %64)
  br label %67

65:                                               ; preds = %40
  %66 = load i64, i64* %2, align 8
  call void @fio_force_close(i64 %66)
  br label %67

67:                                               ; preds = %65, %52, %27
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_add_write(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 2), align 4
  %6 = call i32 @fio_poll_add2(i32 %4, i32 1073750036, i32 %5)
  ret void
}

declare dso_local i32 @close(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_flush(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_packet_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.fio_str_info_s, align 8
  %9 = alloca %struct.fio_str_info_s, align 8
  store i64 %0, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp sge i64 %10, 0
  br i1 %11, label %12, label %34

12:                                               ; preds = %1
  %13 = load i64, i64* %3, align 8
  %14 = lshr i64 %13, 8
  %15 = trunc i64 %14 to i32
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp ult i32 %15, %18
  br i1 %19, label %20, label %34

20:                                               ; preds = %12
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, 255
  %23 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %24 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %23, i32 0, i32 12
  %25 = load i64, i64* %3, align 8
  %26 = lshr i64 %25, 8
  %27 = trunc i64 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %24, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %29, i32 0, i32 9
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = icmp eq i64 %22, %32
  br i1 %33, label %35, label %34

34:                                               ; preds = %20, %12, %1
  br label %309

35:                                               ; preds = %20
  %36 = call i32* @__errno_location() #9
  store i32 0, i32* %36, align 4
  store i64 0, i64* %4, align 8
  %37 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %38 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %37, i32 0, i32 12
  %39 = load i64, i64* %3, align 8
  %40 = lshr i64 %39, 8
  %41 = trunc i64 %40 to i32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %38, i64 0, i64 %42
  %44 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %43, i32 0, i32 10
  %45 = call i32 @fio_trylock(i8* %44)
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %35
  br label %216

48:                                               ; preds = %35
  %49 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %50 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %49, i32 0, i32 12
  %51 = load i64, i64* %3, align 8
  %52 = lshr i64 %51, 8
  %53 = trunc i64 %52 to i32
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %50, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %55, i32 0, i32 0
  %57 = load %struct.fio_packet_s*, %struct.fio_packet_s** %56, align 8
  %58 = icmp ne %struct.fio_packet_s* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %48
  br label %220

60:                                               ; preds = %48
  %61 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %62 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %61, i32 0, i32 12
  %63 = load i64, i64* %3, align 8
  %64 = lshr i64 %63, 8
  %65 = trunc i64 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %62, i64 0, i64 %66
  %68 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %67, i32 0, i32 0
  %69 = load %struct.fio_packet_s*, %struct.fio_packet_s** %68, align 8
  store %struct.fio_packet_s* %69, %struct.fio_packet_s** %6, align 8
  %70 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %71 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %70, i32 0, i32 12
  %72 = load i64, i64* %3, align 8
  %73 = lshr i64 %72, 8
  %74 = trunc i64 %73 to i32
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %71, i64 0, i64 %75
  %77 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %76, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %7, align 8
  %79 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %80 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %79, i32 0, i32 12
  %81 = load i64, i64* %3, align 8
  %82 = lshr i64 %81, 8
  %83 = trunc i64 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %80, i64 0, i64 %84
  %86 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %85, i32 0, i32 0
  %87 = load %struct.fio_packet_s*, %struct.fio_packet_s** %86, align 8
  %88 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %87, i32 0, i32 1
  %89 = load i32 (i32, %struct.fio_packet_s*)*, i32 (i32, %struct.fio_packet_s*)** %88, align 8
  %90 = load i64, i64* %3, align 8
  %91 = lshr i64 %90, 8
  %92 = trunc i64 %91 to i32
  %93 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %94 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %93, i32 0, i32 12
  %95 = load i64, i64* %3, align 8
  %96 = lshr i64 %95, 8
  %97 = trunc i64 %96 to i32
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %94, i64 0, i64 %98
  %100 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %99, i32 0, i32 0
  %101 = load %struct.fio_packet_s*, %struct.fio_packet_s** %100, align 8
  %102 = call i32 %89(i32 %92, %struct.fio_packet_s* %101)
  store i32 %102, i32* %5, align 4
  %103 = load i32, i32* %5, align 4
  %104 = icmp sle i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %60
  br label %272

106:                                              ; preds = %60
  %107 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %108 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %107, i32 0, i32 12
  %109 = load i64, i64* %3, align 8
  %110 = lshr i64 %109, 8
  %111 = trunc i64 %110 to i32
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %108, i64 0, i64 %112
  %114 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %113, i32 0, i32 5
  %115 = load i16, i16* %114, align 8
  %116 = zext i16 %115 to i32
  %117 = icmp sge i32 %116, 1024
  br i1 %117, label %118, label %156

118:                                              ; preds = %106
  %119 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %120 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %119, i32 0, i32 12
  %121 = load i64, i64* %3, align 8
  %122 = lshr i64 %121, 8
  %123 = trunc i64 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %120, i64 0, i64 %124
  %126 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %125, i32 0, i32 0
  %127 = load %struct.fio_packet_s*, %struct.fio_packet_s** %126, align 8
  %128 = load %struct.fio_packet_s*, %struct.fio_packet_s** %6, align 8
  %129 = icmp eq %struct.fio_packet_s* %127, %128
  br i1 %129, label %130, label %156

130:                                              ; preds = %118
  %131 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %132 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %131, i32 0, i32 12
  %133 = load i64, i64* %3, align 8
  %134 = lshr i64 %133, 8
  %135 = trunc i64 %134 to i32
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %132, i64 0, i64 %136
  %138 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %137, i32 0, i32 2
  %139 = load i64, i64* %138, align 8
  %140 = load i64, i64* %7, align 8
  %141 = icmp uge i64 %139, %140
  br i1 %141, label %142, label %156

142:                                              ; preds = %130
  %143 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %144 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %143, i32 0, i32 12
  %145 = load i64, i64* %3, align 8
  %146 = lshr i64 %145, 8
  %147 = trunc i64 %146 to i32
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %144, i64 0, i64 %148
  %150 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %149, i32 0, i32 2
  %151 = load i64, i64* %150, align 8
  %152 = load i64, i64* %7, align 8
  %153 = sub i64 %151, %152
  %154 = icmp ult i64 %153, 32768
  br i1 %154, label %155, label %156

155:                                              ; preds = %142
  br label %311

156:                                              ; preds = %142, %130, %118, %106
  %157 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %158 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %157, i32 0, i32 12
  %159 = load i64, i64* %3, align 8
  %160 = lshr i64 %159, 8
  %161 = trunc i64 %160 to i32
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %158, i64 0, i64 %162
  %164 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %163, i32 0, i32 10
  %165 = call i32 @fio_unlock(i8* %164)
  %166 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %167 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %166, i32 0, i32 12
  %168 = load i64, i64* %3, align 8
  %169 = lshr i64 %168, 8
  %170 = trunc i64 %169 to i32
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %167, i64 0, i64 %171
  %173 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %172, i32 0, i32 0
  %174 = load %struct.fio_packet_s*, %struct.fio_packet_s** %173, align 8
  %175 = icmp ne %struct.fio_packet_s* %174, null
  br i1 %175, label %189, label %176

176:                                              ; preds = %156
  %177 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %178 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %177, i32 0, i32 12
  %179 = load i64, i64* %3, align 8
  %180 = lshr i64 %179, 8
  %181 = trunc i64 %180 to i32
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %178, i64 0, i64 %182
  %184 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %183, i32 0, i32 12
  %185 = load i8, i8* %184, align 8
  %186 = zext i8 %185 to i32
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %176
  br label %218

189:                                              ; preds = %176, %156
  %190 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %191 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %190, i32 0, i32 12
  %192 = load i64, i64* %3, align 8
  %193 = lshr i64 %192, 8
  %194 = trunc i64 %193 to i32
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %191, i64 0, i64 %195
  %197 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %196, i32 0, i32 11
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = icmp ne i32 %199, 0
  br i1 %200, label %201, label %212

201:                                              ; preds = %189
  %202 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %203 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %202, i32 0, i32 12
  %204 = load i64, i64* %3, align 8
  %205 = lshr i64 %204, 8
  %206 = trunc i64 %205 to i32
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %203, i64 0, i64 %207
  %209 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %208, i32 0, i32 0
  %210 = load %struct.fio_packet_s*, %struct.fio_packet_s** %209, align 8
  %211 = icmp ne %struct.fio_packet_s* %210, null
  br label %212

212:                                              ; preds = %201, %189
  %213 = phi i1 [ false, %189 ], [ %211, %201 ]
  %214 = zext i1 %213 to i32
  %215 = sext i32 %214 to i64
  store i64 %215, i64* %2, align 8
  br label %339

216:                                              ; preds = %47
  %217 = call i32* @__errno_location() #9
  store i32 11, i32* %217, align 4
  store i64 -1, i64* %2, align 8
  br label %339

218:                                              ; preds = %188
  %219 = load i64, i64* %3, align 8
  call void @fio_force_close(i64 %219)
  store i64 -1, i64* %2, align 8
  br label %339

220:                                              ; preds = %59
  %221 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %222 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %221, i32 0, i32 12
  %223 = load i64, i64* %3, align 8
  %224 = lshr i64 %223, 8
  %225 = trunc i64 %224 to i32
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %222, i64 0, i64 %226
  %228 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %227, i32 0, i32 15
  %229 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %228, align 8
  %230 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %229, i32 0, i32 2
  %231 = load i64 (i64, i8*)*, i64 (i64, i8*)** %230, align 8
  %232 = load i64, i64* %3, align 8
  %233 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %234 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %233, i32 0, i32 12
  %235 = load i64, i64* %3, align 8
  %236 = lshr i64 %235, 8
  %237 = trunc i64 %236 to i32
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %234, i64 0, i64 %238
  %240 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %239, i32 0, i32 16
  %241 = load i8*, i8** %240, align 8
  %242 = call i64 %231(i64 %232, i8* %241)
  store i64 %242, i64* %4, align 8
  %243 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %244 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %243, i32 0, i32 12
  %245 = load i64, i64* %3, align 8
  %246 = lshr i64 %245, 8
  %247 = trunc i64 %246 to i32
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %244, i64 0, i64 %248
  %250 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %249, i32 0, i32 10
  %251 = call i32 @fio_unlock(i8* %250)
  %252 = load i64, i64* %4, align 8
  %253 = icmp ne i64 %252, 0
  br i1 %253, label %255, label %254

254:                                              ; preds = %220
  store i64 0, i64* %2, align 8
  br label %339

255:                                              ; preds = %220
  %256 = load i64, i64* %4, align 8
  %257 = icmp slt i64 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %255
  br label %272

259:                                              ; preds = %255
  %260 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %261 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %260, i32 0, i32 0
  %262 = getelementptr inbounds %struct.timespec, %struct.timespec* %261, i32 0, i32 0
  %263 = load i64, i64* %262, align 8
  %264 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %265 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %264, i32 0, i32 12
  %266 = load i64, i64* %3, align 8
  %267 = lshr i64 %266, 8
  %268 = trunc i64 %267 to i32
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %265, i64 0, i64 %269
  %271 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %270, i32 0, i32 4
  store i64 %263, i64* %271, align 8
  store i64 1, i64* %2, align 8
  br label %339

272:                                              ; preds = %258, %105
  %273 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %274 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %273, i32 0, i32 12
  %275 = load i64, i64* %3, align 8
  %276 = lshr i64 %275, 8
  %277 = trunc i64 %276 to i32
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %274, i64 0, i64 %278
  %280 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %279, i32 0, i32 10
  %281 = call i32 @fio_unlock(i8* %280)
  %282 = call i32* @__errno_location() #9
  %283 = load i32, i32* %282, align 4
  switch i32 %283, label %302 [
    i32 11, label %284
    i32 107, label %284
    i32 115, label %284
    i32 28, label %284
    i32 99, label %284
    i32 4, label %284
    i32 14, label %285
    i32 32, label %292
    i32 5, label %292
    i32 22, label %292
    i32 9, label %292
  ]

284:                                              ; preds = %272, %272, %272, %272, %272, %272
  store i64 1, i64* %2, align 8
  br label %339

285:                                              ; preds = %272
  br label %286

286:                                              ; preds = %285
  %287 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %288 = icmp sle i32 2, %287
  br i1 %288, label %289, label %290

289:                                              ; preds = %286
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.11, i64 0, i64 0))
  br label %290

290:                                              ; preds = %289, %286
  br label %291

291:                                              ; preds = %290
  br label %292

292:                                              ; preds = %272, %272, %272, %272, %291
  %293 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %294 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %293, i32 0, i32 12
  %295 = load i64, i64* %3, align 8
  %296 = lshr i64 %295, 8
  %297 = trunc i64 %296 to i32
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %294, i64 0, i64 %298
  %300 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %299, i32 0, i32 12
  store i8 1, i8* %300, align 8
  %301 = load i64, i64* %3, align 8
  call void @fio_force_close(i64 %301)
  store i64 -1, i64* %2, align 8
  br label %339

302:                                              ; preds = %272
  %303 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %304 = load i64, i64* %3, align 8
  %305 = inttoptr i64 %304 to i8*
  %306 = call i32* @__errno_location() #9
  %307 = load i32, i32* %306, align 4
  %308 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %303, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i8* %305, i32 %307)
  call void @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0))
  store i64 0, i64* %2, align 8
  br label %339

309:                                              ; preds = %34
  %310 = call i32* @__errno_location() #9
  store i32 9, i32* %310, align 4
  store i64 -1, i64* %2, align 8
  br label %339

311:                                              ; preds = %155
  br label %312

312:                                              ; preds = %311
  %313 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %314 = icmp sle i32 3, %313
  br i1 %314, label %315, label %323

315:                                              ; preds = %312
  %316 = load i64, i64* %3, align 8
  call void @fio_peer_addr(%struct.fio_str_info_s* sret %8, i64 %316)
  %317 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 1
  %318 = load i64, i64* %317, align 8
  %319 = trunc i64 %318 to i32
  %320 = load i64, i64* %3, align 8
  call void @fio_peer_addr(%struct.fio_str_info_s* sret %9, i64 %320)
  %321 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %9, i32 0, i32 2
  %322 = load i8*, i8** %321, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.14, i64 0, i64 0), i32 %319, i8* %322)
  br label %323

323:                                              ; preds = %315, %312
  br label %324

324:                                              ; preds = %323
  %325 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %326 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %325, i32 0, i32 12
  %327 = load i64, i64* %3, align 8
  %328 = lshr i64 %327, 8
  %329 = trunc i64 %328 to i32
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %326, i64 0, i64 %330
  %332 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %331, i32 0, i32 10
  %333 = call i32 @fio_unlock(i8* %332)
  %334 = load i64, i64* %3, align 8
  %335 = lshr i64 %334, 8
  %336 = trunc i64 %335 to i32
  %337 = sext i32 %336 to i64
  %338 = call i32 @fio_clear_fd(i64 %337, i8 zeroext 0)
  store i64 -1, i64* %2, align 8
  br label %339

339:                                              ; preds = %324, %309, %302, %292, %284, %259, %254, %218, %216, %212
  %340 = load i64, i64* %2, align 8
  ret i64 %340
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_flush_all() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = icmp ne %struct.fio_data_s* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  br label %54

7:                                                ; preds = %0
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  br label %8

8:                                                ; preds = %49, %7
  %9 = load i64, i64* %3, align 8
  %10 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %11 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %10, i32 0, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = icmp ule i64 %9, %13
  br i1 %14, label %15, label %52

15:                                               ; preds = %8
  %16 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %17 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %16, i32 0, i32 12
  %18 = load i64, i64* %3, align 8
  %19 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %17, i64 0, i64 %18
  %20 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %19, i32 0, i32 11
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %32, label %24

24:                                               ; preds = %15
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i64, i64* %3, align 8
  %28 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %28, i32 0, i32 0
  %30 = load %struct.fio_packet_s*, %struct.fio_packet_s** %29, align 8
  %31 = icmp ne %struct.fio_packet_s* %30, null
  br i1 %31, label %32, label %48

32:                                               ; preds = %24, %15
  %33 = load i64, i64* %3, align 8
  %34 = shl i64 %33, 8
  %35 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %36 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %35, i32 0, i32 12
  %37 = load i64, i64* %3, align 8
  %38 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %36, i64 0, i64 %37
  %39 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %38, i32 0, i32 9
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = or i64 %34, %41
  %43 = call i64 @fio_flush(i64 %42)
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %32
  %46 = load i64, i64* %2, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %2, align 8
  br label %48

48:                                               ; preds = %45, %32, %24
  br label %49

49:                                               ; preds = %48
  %50 = load i64, i64* %3, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %3, align 8
  br label %8

52:                                               ; preds = %8
  %53 = load i64, i64* %2, align 8
  store i64 %53, i64* %1, align 8
  br label %54

54:                                               ; preds = %52, %6
  %55 = load i64, i64* %1, align 8
  ret i64 %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_hooks_default_read(i64, i8*, i8*, i64) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %5, align 8
  %10 = lshr i64 %9, 8
  %11 = trunc i64 %10 to i32
  %12 = load i8*, i8** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = call i64 @read(i32 %11, i8* %12, i64 %13)
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_hooks_default_write(i64, i8*, i8*, i64) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %5, align 8
  %10 = lshr i64 %9, 8
  %11 = trunc i64 %10 to i32
  %12 = load i8*, i8** %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = call i64 @write(i32 %11, i8* %12, i64 %13)
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_hooks_default_flush(i64, i8*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  ret i64 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_hooks_default_before_close(i64, i8*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  ret i64 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_hooks_default_cleanup(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_rw_hook_replace_unsafe(i64, %struct.fio_rw_hook_s*, i8*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_rw_hook_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store %struct.fio_rw_hook_s* %1, %struct.fio_rw_hook_s** %5, align 8
  store i8* %2, i8** %6, align 8
  store i32 -1, i32* %7, align 4
  %10 = load i64, i64* %4, align 8
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %9, align 8
  %14 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %15 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %14, i32 0, i32 0
  %16 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %15, align 8
  %17 = icmp ne i64 (i64, i8*, i8*, i64)* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %20 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %19, i32 0, i32 0
  store i64 (i64, i8*, i8*, i64)* @fio_hooks_default_read, i64 (i64, i8*, i8*, i64)** %20, align 8
  br label %21

21:                                               ; preds = %18, %3
  %22 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %23 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %22, i32 0, i32 1
  %24 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %23, align 8
  %25 = icmp ne i64 (i64, i8*, i8*, i64)* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  %27 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %28 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %27, i32 0, i32 1
  store i64 (i64, i8*, i8*, i64)* @fio_hooks_default_write, i64 (i64, i8*, i8*, i64)** %28, align 8
  br label %29

29:                                               ; preds = %26, %21
  %30 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %30, i32 0, i32 2
  %32 = load i64 (i64, i8*)*, i64 (i64, i8*)** %31, align 8
  %33 = icmp ne i64 (i64, i8*)* %32, null
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %36 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %35, i32 0, i32 2
  store i64 (i64, i8*)* @fio_hooks_default_flush, i64 (i64, i8*)** %36, align 8
  br label %37

37:                                               ; preds = %34, %29
  %38 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %39 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %38, i32 0, i32 3
  %40 = load i64 (i64, i8*)*, i64 (i64, i8*)** %39, align 8
  %41 = icmp ne i64 (i64, i8*)* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %37
  %43 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %44 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %43, i32 0, i32 3
  store i64 (i64, i8*)* @fio_hooks_default_before_close, i64 (i64, i8*)** %44, align 8
  br label %45

45:                                               ; preds = %42, %37
  %46 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %47 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %46, i32 0, i32 4
  %48 = load void (i8*)*, void (i8*)** %47, align 8
  %49 = icmp ne void (i8*)* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %52 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %51, i32 0, i32 4
  store void (i8*)* @fio_hooks_default_cleanup, void (i8*)** %52, align 8
  br label %53

53:                                               ; preds = %50, %45
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 12
  %56 = load i64, i64* %9, align 8
  %57 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %55, i64 0, i64 %56
  %58 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %57, i32 0, i32 10
  %59 = call i32 @fio_trylock(i8* %58)
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %8, align 1
  %61 = load i64, i64* %9, align 8
  %62 = shl i64 %61, 8
  %63 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %64 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %63, i32 0, i32 12
  %65 = load i64, i64* %9, align 8
  %66 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %64, i64 0, i64 %65
  %67 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %66, i32 0, i32 9
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i64
  %70 = or i64 %62, %69
  %71 = load i64, i64* %4, align 8
  %72 = icmp eq i64 %70, %71
  br i1 %72, label %73, label %86

73:                                               ; preds = %53
  %74 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %5, align 8
  %75 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %76 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %75, i32 0, i32 12
  %77 = load i64, i64* %9, align 8
  %78 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %76, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %78, i32 0, i32 15
  store %struct.fio_rw_hook_s* %74, %struct.fio_rw_hook_s** %79, align 8
  %80 = load i8*, i8** %6, align 8
  %81 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %82 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %81, i32 0, i32 12
  %83 = load i64, i64* %9, align 8
  %84 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %82, i64 0, i64 %83
  %85 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %84, i32 0, i32 16
  store i8* %80, i8** %85, align 8
  store i32 0, i32* %7, align 4
  br label %86

86:                                               ; preds = %73, %53
  %87 = load i8, i8* %8, align 1
  %88 = icmp ne i8 %87, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %86
  %90 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %91 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %90, i32 0, i32 12
  %92 = load i64, i64* %9, align 8
  %93 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %91, i64 0, i64 %92
  %94 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %93, i32 0, i32 10
  %95 = call i32 @fio_unlock(i8* %94)
  br label %96

96:                                               ; preds = %89, %86
  %97 = load i32, i32* %7, align 4
  ret i32 %97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_rw_hook_set(i64, %struct.fio_rw_hook_s*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %struct.fio_rw_hook_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.fio_rw_hook_s*, align 8
  %10 = alloca i8*, align 8
  store i64 %0, i64* %5, align 8
  store %struct.fio_rw_hook_s* %1, %struct.fio_rw_hook_s** %6, align 8
  store i8* %2, i8** %7, align 8
  %11 = load i64, i64* %5, align 8
  %12 = call i32 @fio_is_closed(i64 %11)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  br label %128

15:                                               ; preds = %3
  %16 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %17 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %16, i32 0, i32 0
  %18 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %17, align 8
  %19 = icmp ne i64 (i64, i8*, i8*, i64)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %22 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %21, i32 0, i32 0
  store i64 (i64, i8*, i8*, i64)* @fio_hooks_default_read, i64 (i64, i8*, i8*, i64)** %22, align 8
  br label %23

23:                                               ; preds = %20, %15
  %24 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %25 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %24, i32 0, i32 1
  %26 = load i64 (i64, i8*, i8*, i64)*, i64 (i64, i8*, i8*, i64)** %25, align 8
  %27 = icmp ne i64 (i64, i8*, i8*, i64)* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %30 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %29, i32 0, i32 1
  store i64 (i64, i8*, i8*, i64)* @fio_hooks_default_write, i64 (i64, i8*, i8*, i64)** %30, align 8
  br label %31

31:                                               ; preds = %28, %23
  %32 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %33 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %32, i32 0, i32 2
  %34 = load i64 (i64, i8*)*, i64 (i64, i8*)** %33, align 8
  %35 = icmp ne i64 (i64, i8*)* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %38 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %37, i32 0, i32 2
  store i64 (i64, i8*)* @fio_hooks_default_flush, i64 (i64, i8*)** %38, align 8
  br label %39

39:                                               ; preds = %36, %31
  %40 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %41 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %40, i32 0, i32 3
  %42 = load i64 (i64, i8*)*, i64 (i64, i8*)** %41, align 8
  %43 = icmp ne i64 (i64, i8*)* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %39
  %45 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %46 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %45, i32 0, i32 3
  store i64 (i64, i8*)* @fio_hooks_default_before_close, i64 (i64, i8*)** %46, align 8
  br label %47

47:                                               ; preds = %44, %39
  %48 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %49 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %48, i32 0, i32 4
  %50 = load void (i8*)*, void (i8*)** %49, align 8
  %51 = icmp ne void (i8*)* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %54 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %53, i32 0, i32 4
  store void (i8*)* @fio_hooks_default_cleanup, void (i8*)** %54, align 8
  br label %55

55:                                               ; preds = %52, %47
  %56 = load i64, i64* %5, align 8
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %58 to i64
  store i64 %59, i64* %8, align 8
  %60 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %61 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %60, i32 0, i32 12
  %62 = load i64, i64* %8, align 8
  %63 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %61, i64 0, i64 %62
  %64 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %63, i32 0, i32 10
  call void @fio_lock(i8* %64)
  %65 = load i64, i64* %8, align 8
  %66 = shl i64 %65, 8
  %67 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %68 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %67, i32 0, i32 12
  %69 = load i64, i64* %8, align 8
  %70 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %68, i64 0, i64 %69
  %71 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %70, i32 0, i32 9
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = or i64 %66, %73
  %75 = load i64, i64* %5, align 8
  %76 = icmp ne i64 %74, %75
  br i1 %76, label %77, label %84

77:                                               ; preds = %55
  %78 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %79 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %78, i32 0, i32 12
  %80 = load i64, i64* %8, align 8
  %81 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %79, i64 0, i64 %80
  %82 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %81, i32 0, i32 10
  %83 = call i32 @fio_unlock(i8* %82)
  br label %128

84:                                               ; preds = %55
  %85 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %86 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %85, i32 0, i32 12
  %87 = load i64, i64* %8, align 8
  %88 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %86, i64 0, i64 %87
  %89 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %88, i32 0, i32 15
  %90 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %89, align 8
  store %struct.fio_rw_hook_s* %90, %struct.fio_rw_hook_s** %9, align 8
  %91 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %92 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %91, i32 0, i32 12
  %93 = load i64, i64* %8, align 8
  %94 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %92, i64 0, i64 %93
  %95 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %94, i32 0, i32 16
  %96 = load i8*, i8** %95, align 8
  store i8* %96, i8** %10, align 8
  %97 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %98 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %99 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %98, i32 0, i32 12
  %100 = load i64, i64* %8, align 8
  %101 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %99, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %101, i32 0, i32 15
  store %struct.fio_rw_hook_s* %97, %struct.fio_rw_hook_s** %102, align 8
  %103 = load i8*, i8** %7, align 8
  %104 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %105 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %104, i32 0, i32 12
  %106 = load i64, i64* %8, align 8
  %107 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %105, i64 0, i64 %106
  %108 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %107, i32 0, i32 16
  store i8* %103, i8** %108, align 8
  %109 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %110 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %109, i32 0, i32 12
  %111 = load i64, i64* %8, align 8
  %112 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %110, i64 0, i64 %111
  %113 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %112, i32 0, i32 10
  %114 = call i32 @fio_unlock(i8* %113)
  %115 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %9, align 8
  %116 = icmp ne %struct.fio_rw_hook_s* %115, null
  br i1 %116, label %117, label %127

117:                                              ; preds = %84
  %118 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %9, align 8
  %119 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %118, i32 0, i32 4
  %120 = load void (i8*)*, void (i8*)** %119, align 8
  %121 = icmp ne void (i8*)* %120, null
  br i1 %121, label %122, label %127

122:                                              ; preds = %117
  %123 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %9, align 8
  %124 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %123, i32 0, i32 4
  %125 = load void (i8*)*, void (i8*)** %124, align 8
  %126 = load i8*, i8** %10, align 8
  call void %125(i8* %126)
  br label %127

127:                                              ; preds = %122, %117, %84
  store i32 0, i32* %4, align 4
  br label %139

128:                                              ; preds = %77, %14
  %129 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %130 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %129, i32 0, i32 4
  %131 = load void (i8*)*, void (i8*)** %130, align 8
  %132 = icmp ne void (i8*)* %131, null
  br i1 %132, label %138, label %133

133:                                              ; preds = %128
  %134 = load %struct.fio_rw_hook_s*, %struct.fio_rw_hook_s** %6, align 8
  %135 = getelementptr inbounds %struct.fio_rw_hook_s, %struct.fio_rw_hook_s* %134, i32 0, i32 4
  %136 = load void (i8*)*, void (i8*)** %135, align 8
  %137 = load i8*, i8** %7, align 8
  call void %136(i8* %137)
  br label %138

138:                                              ; preds = %133, %128
  store i32 -1, i32* %4, align 4
  br label %139

139:                                              ; preds = %138, %127
  %140 = load i32, i32* %4, align 4
  ret i32 %140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_attach(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = inttoptr i64 %5 to i8*
  %7 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %8 = bitcast %struct.fio_protocol_s* %7 to i8*
  %9 = call i32 @fio_attach__internal(i8* %6, i8* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_attach__internal(i8*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_protocol_s*, align 8
  %8 = alloca %struct.protocol_metadata_s, align 4
  %9 = alloca %struct.fio_protocol_s*, align 8
  %10 = alloca %struct.fio_defer_task_s, align 8
  %11 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = ptrtoint i8* %12 to i64
  store i64 %13, i64* %6, align 8
  %14 = load i8*, i8** %5, align 8
  %15 = bitcast i8* %14 to %struct.fio_protocol_s*
  store %struct.fio_protocol_s* %15, %struct.fio_protocol_s** %7, align 8
  %16 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %17 = icmp ne %struct.fio_protocol_s* %16, null
  br i1 %17, label %18, label %68

18:                                               ; preds = %2
  %19 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %20 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %19, i32 0, i32 3
  %21 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %20, align 8
  %22 = icmp ne void (i64, %struct.fio_protocol_s*)* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %25 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %24, i32 0, i32 3
  store void (i64, %struct.fio_protocol_s*)* @mock_on_ev, void (i64, %struct.fio_protocol_s*)** %25, align 8
  br label %26

26:                                               ; preds = %23, %18
  %27 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %28 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %27, i32 0, i32 0
  %29 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %28, align 8
  %30 = icmp ne void (i64, %struct.fio_protocol_s*)* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %33 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %32, i32 0, i32 0
  store void (i64, %struct.fio_protocol_s*)* @mock_on_data, void (i64, %struct.fio_protocol_s*)** %33, align 8
  br label %34

34:                                               ; preds = %31, %26
  %35 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %36 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %35, i32 0, i32 1
  %37 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %36, align 8
  %38 = icmp ne void (i64, %struct.fio_protocol_s*)* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %41 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %40, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* @mock_on_ev, void (i64, %struct.fio_protocol_s*)** %41, align 8
  br label %42

42:                                               ; preds = %39, %34
  %43 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %44 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %43, i32 0, i32 4
  %45 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %44, align 8
  %46 = icmp ne void (i64, %struct.fio_protocol_s*)* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %42
  %48 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %49 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %48, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping, void (i64, %struct.fio_protocol_s*)** %49, align 8
  br label %50

50:                                               ; preds = %47, %42
  %51 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %52 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %51, i32 0, i32 2
  %53 = load i8 (i64, %struct.fio_protocol_s*)*, i8 (i64, %struct.fio_protocol_s*)** %52, align 8
  %54 = icmp ne i8 (i64, %struct.fio_protocol_s*)* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %50
  %56 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %57 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %56, i32 0, i32 2
  store i8 (i64, %struct.fio_protocol_s*)* @mock_on_shutdown, i8 (i64, %struct.fio_protocol_s*)** %57, align 8
  br label %58

58:                                               ; preds = %55, %50
  %59 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %60 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %59, i32 0, i32 5
  %61 = bitcast i64* %60 to %union.protocol_metadata_union_u*
  %62 = bitcast %union.protocol_metadata_union_u* %61 to %struct.protocol_metadata_s*
  %63 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %8, i32 0, i32 0
  %64 = bitcast [3 x i8]* %63 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 3, i1 false)
  %65 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %8, i32 0, i32 1
  store i8 0, i8* %65, align 1
  %66 = bitcast %struct.protocol_metadata_s* %62 to i8*
  %67 = bitcast %struct.protocol_metadata_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 4 %67, i64 4, i1 true)
  br label %68

68:                                               ; preds = %58, %2
  %69 = load i64, i64* %6, align 8
  %70 = icmp sge i64 %69, 0
  br i1 %70, label %71, label %93

71:                                               ; preds = %68
  %72 = load i64, i64* %6, align 8
  %73 = lshr i64 %72, 8
  %74 = trunc i64 %73 to i32
  %75 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %76 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %75, i32 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = icmp ult i32 %74, %77
  br i1 %78, label %79, label %93

79:                                               ; preds = %71
  %80 = load i64, i64* %6, align 8
  %81 = and i64 %80, 255
  %82 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %83 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %82, i32 0, i32 12
  %84 = load i64, i64* %6, align 8
  %85 = lshr i64 %84, 8
  %86 = trunc i64 %85 to i32
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %83, i64 0, i64 %87
  %89 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %88, i32 0, i32 9
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = icmp eq i64 %81, %91
  br i1 %92, label %94, label %93

93:                                               ; preds = %79, %71, %68
  br label %223

94:                                               ; preds = %79
  %95 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %96 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %95, i32 0, i32 12
  %97 = load i64, i64* %6, align 8
  %98 = lshr i64 %97, 8
  %99 = trunc i64 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %96, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %101, i32 0, i32 8
  call void @fio_lock(i8* %102)
  %103 = load i64, i64* %6, align 8
  %104 = icmp sge i64 %103, 0
  br i1 %104, label %105, label %127

105:                                              ; preds = %94
  %106 = load i64, i64* %6, align 8
  %107 = lshr i64 %106, 8
  %108 = trunc i64 %107 to i32
  %109 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %110 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %109, i32 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = icmp ult i32 %108, %111
  br i1 %112, label %113, label %127

113:                                              ; preds = %105
  %114 = load i64, i64* %6, align 8
  %115 = and i64 %114, 255
  %116 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %117 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %116, i32 0, i32 12
  %118 = load i64, i64* %6, align 8
  %119 = lshr i64 %118, 8
  %120 = trunc i64 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %117, i64 0, i64 %121
  %123 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %122, i32 0, i32 9
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i64
  %126 = icmp eq i64 %115, %125
  br i1 %126, label %128, label %127

127:                                              ; preds = %113, %105, %94
  br label %213

128:                                              ; preds = %113
  %129 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %130 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %129, i32 0, i32 12
  %131 = load i64, i64* %6, align 8
  %132 = lshr i64 %131, 8
  %133 = trunc i64 %132 to i32
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %130, i64 0, i64 %134
  %136 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %135, i32 0, i32 3
  %137 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %136, align 8
  store %struct.fio_protocol_s* %137, %struct.fio_protocol_s** %9, align 8
  %138 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %139 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %138, i32 0, i32 12
  %140 = load i64, i64* %6, align 8
  %141 = lshr i64 %140, 8
  %142 = trunc i64 %141 to i32
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %139, i64 0, i64 %143
  %145 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %144, i32 0, i32 11
  store i8 1, i8* %145, align 1
  %146 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %147 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %148 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %147, i32 0, i32 12
  %149 = load i64, i64* %6, align 8
  %150 = lshr i64 %149, 8
  %151 = trunc i64 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %148, i64 0, i64 %152
  %154 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %153, i32 0, i32 3
  store %struct.fio_protocol_s* %146, %struct.fio_protocol_s** %154, align 8
  %155 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %156 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %155, i32 0, i32 0
  %157 = getelementptr inbounds %struct.timespec, %struct.timespec* %156, i32 0, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %160 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %159, i32 0, i32 12
  %161 = load i64, i64* %6, align 8
  %162 = lshr i64 %161, 8
  %163 = trunc i64 %162 to i32
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %160, i64 0, i64 %164
  %166 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %165, i32 0, i32 4
  store i64 %158, i64* %166, align 8
  %167 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %168 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %167, i32 0, i32 12
  %169 = load i64, i64* %6, align 8
  %170 = lshr i64 %169, 8
  %171 = trunc i64 %170 to i32
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %168, i64 0, i64 %172
  %174 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %173, i32 0, i32 8
  %175 = call i32 @fio_unlock(i8* %174)
  %176 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %9, align 8
  %177 = icmp ne %struct.fio_protocol_s* %176, null
  br i1 %177, label %178, label %200

178:                                              ; preds = %128
  br label %179

179:                                              ; preds = %178
  %180 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_close, void (i8*, i8*)** %180, align 8
  %181 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 1
  %182 = load i64, i64* %6, align 8
  %183 = inttoptr i64 %182 to i8*
  store i8* %183, i8** %181, align 8
  %184 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 2
  %185 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %9, align 8
  %186 = bitcast %struct.fio_protocol_s* %185 to i8*
  store i8* %186, i8** %184, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %10, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %187

187:                                              ; preds = %179
  %188 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %189 = icmp ne %struct.fio_protocol_s* %188, null
  br i1 %189, label %199, label %190

190:                                              ; preds = %187
  %191 = load i64, i64* %6, align 8
  %192 = lshr i64 %191, 8
  %193 = trunc i64 %192 to i32
  %194 = sext i32 %193 to i64
  call void @fio_poll_remove_fd(i64 %194)
  %195 = load i64, i64* %6, align 8
  %196 = lshr i64 %195, 8
  %197 = trunc i64 %196 to i32
  %198 = sext i32 %197 to i64
  call void @fio_poll_add_write(i64 %198)
  br label %199

199:                                              ; preds = %190, %187
  br label %209

200:                                              ; preds = %128
  %201 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %202 = icmp ne %struct.fio_protocol_s* %201, null
  br i1 %202, label %203, label %208

203:                                              ; preds = %200
  %204 = load i64, i64* %6, align 8
  %205 = lshr i64 %204, 8
  %206 = trunc i64 %205 to i32
  %207 = sext i32 %206 to i64
  call void @fio_poll_add(i64 %207)
  br label %208

208:                                              ; preds = %203, %200
  br label %209

209:                                              ; preds = %208, %199
  %210 = load i64, i64* %6, align 8
  %211 = lshr i64 %210, 8
  %212 = trunc i64 %211 to i32
  call void @fio_max_fd_min(i32 %212)
  store i32 0, i32* %3, align 4
  br label %244

213:                                              ; preds = %127
  %214 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %215 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %214, i32 0, i32 12
  %216 = load i64, i64* %6, align 8
  %217 = lshr i64 %216, 8
  %218 = trunc i64 %217 to i32
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %215, i64 0, i64 %219
  %221 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %220, i32 0, i32 8
  %222 = call i32 @fio_unlock(i8* %221)
  br label %223

223:                                              ; preds = %213, %93
  %224 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %225 = icmp ne %struct.fio_protocol_s* %224, null
  br i1 %225, label %226, label %236

226:                                              ; preds = %223
  br label %227

227:                                              ; preds = %226
  %228 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_close, void (i8*, i8*)** %228, align 8
  %229 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 1
  %230 = load i64, i64* %6, align 8
  %231 = inttoptr i64 %230 to i8*
  store i8* %231, i8** %229, align 8
  %232 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 2
  %233 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %234 = bitcast %struct.fio_protocol_s* %233 to i8*
  store i8* %234, i8** %232, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %11, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %235

235:                                              ; preds = %227
  br label %236

236:                                              ; preds = %235, %223
  %237 = load i64, i64* %6, align 8
  %238 = icmp eq i64 %237, -1
  br i1 %238, label %239, label %241

239:                                              ; preds = %236
  %240 = call i32* @__errno_location() #9
  store i32 9, i32* %240, align 4
  br label %243

241:                                              ; preds = %236
  %242 = call i32* @__errno_location() #9
  store i32 107, i32* %242, align 4
  br label %243

243:                                              ; preds = %241, %239
  store i32 -1, i32* %3, align 4
  br label %244

244:                                              ; preds = %243, %209
  %245 = load i32, i32* %3, align 4
  ret i32 %245
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_attach_fd(i32, %struct.fio_protocol_s*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i32 %0, i32* %3, align 4
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load i32, i32* %3, align 4
  %6 = call i64 @fio_fd2uuid(i32 %5)
  %7 = inttoptr i64 %6 to i8*
  %8 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %9 = bitcast %struct.fio_protocol_s* %8 to i8*
  %10 = call i32 @fio_attach__internal(i8* %7, i8* %9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_timeout_set(i64, i8 zeroext) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  store i64 %0, i64* %3, align 8
  store i8 %1, i8* %4, align 1
  %5 = load i64, i64* %3, align 8
  %6 = icmp sge i64 %5, 0
  br i1 %6, label %7, label %51

7:                                                ; preds = %2
  %8 = load i64, i64* %3, align 8
  %9 = lshr i64 %8, 8
  %10 = trunc i64 %9 to i32
  %11 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %12 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %51

15:                                               ; preds = %7
  %16 = load i64, i64* %3, align 8
  %17 = and i64 %16, 255
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 12
  %20 = load i64, i64* %3, align 8
  %21 = lshr i64 %20, 8
  %22 = trunc i64 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %19, i64 0, i64 %23
  %25 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %24, i32 0, i32 9
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = icmp eq i64 %17, %27
  br i1 %28, label %29, label %51

29:                                               ; preds = %15
  %30 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %31 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %30, i32 0, i32 0
  %32 = getelementptr inbounds %struct.timespec, %struct.timespec* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 12
  %36 = load i64, i64* %3, align 8
  %37 = lshr i64 %36, 8
  %38 = trunc i64 %37 to i32
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %35, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %40, i32 0, i32 4
  store i64 %33, i64* %41, align 8
  %42 = load i8, i8* %4, align 1
  %43 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %44 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %43, i32 0, i32 12
  %45 = load i64, i64* %3, align 8
  %46 = lshr i64 %45, 8
  %47 = trunc i64 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %44, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %49, i32 0, i32 6
  store i8 %42, i8* %50, align 2
  br label %60

51:                                               ; preds = %15, %7, %2
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %54 = icmp sle i32 5, %53
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = load i64, i64* %3, align 8
  %57 = inttoptr i64 %56 to i8*
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0), i8* %57)
  br label %58

58:                                               ; preds = %55, %52
  br label %59

59:                                               ; preds = %58
  br label %60

60:                                               ; preds = %59, %29
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @fio_timeout_get(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %4 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %3, i32 0, i32 12
  %5 = load i64, i64* %2, align 8
  %6 = lshr i64 %5, 8
  %7 = trunc i64 %6 to i32
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %4, i64 0, i64 %8
  %10 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %9, i32 0, i32 6
  %11 = load i8, i8* %10, align 2
  ret i8 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_state_callback_add(i32, void (i8*)*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca void (i8*)*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.callback_data_s*, align 8
  %8 = alloca %struct.callback_data_s, align 8
  store i32 %0, i32* %4, align 4
  store void (i8*)* %1, void (i8*)** %5, align 8
  store i8* %2, i8** %6, align 8
  %9 = load i32, i32* %4, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %3
  %12 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %13 = icmp ne %struct.fio_data_s* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %11
  %15 = load void (i8*)*, void (i8*)** %5, align 8
  %16 = load i8*, i8** %6, align 8
  call void %15(i8* %16)
  br label %70

17:                                               ; preds = %11, %3
  %18 = load void (i8*)*, void (i8*)** %5, align 8
  %19 = icmp ne void (i8*)* %18, null
  br i1 %19, label %20, label %26

20:                                               ; preds = %17
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* %4, align 4
  %25 = icmp ugt i32 %24, 13
  br i1 %25, label %26, label %27

26:                                               ; preds = %23, %20, %17
  br label %70

27:                                               ; preds = %23
  %28 = load i32, i32* %4, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %30, i32 0, i32 0
  call void @fio_lock(i8* %31)
  %32 = load i32, i32* %4, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %33
  call void @fio_state_callback_ensure(%struct.callback_collection_s* %34)
  %35 = call noalias i8* @malloc(i64 32) #1
  %36 = bitcast i8* %35 to %struct.callback_data_s*
  store %struct.callback_data_s* %36, %struct.callback_data_s** %7, align 8
  %37 = load %struct.callback_data_s*, %struct.callback_data_s** %7, align 8
  %38 = icmp ne %struct.callback_data_s* %37, null
  br i1 %38, label %49, label %39

39:                                               ; preds = %27
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %42 = icmp sle i32 1, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.16, i64 0, i64 0))
  br label %44

44:                                               ; preds = %43, %40
  br label %45

45:                                               ; preds = %44
  %46 = call i32 @kill(i32 0, i32 2) #1
  %47 = call i32* @__errno_location() #9
  %48 = load i32, i32* %47, align 4
  call void @exit(i32 %48) #11
  unreachable

49:                                               ; preds = %27
  %50 = load %struct.callback_data_s*, %struct.callback_data_s** %7, align 8
  %51 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %8, i32 0, i32 0
  %52 = bitcast %struct.fio_ls_embd_s* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false)
  %53 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %8, i32 0, i32 1
  %54 = load void (i8*)*, void (i8*)** %5, align 8
  store void (i8*)* %54, void (i8*)** %53, align 8
  %55 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %8, i32 0, i32 2
  %56 = load i8*, i8** %6, align 8
  store i8* %56, i8** %55, align 8
  %57 = bitcast %struct.callback_data_s* %50 to i8*
  %58 = bitcast %struct.callback_data_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 32, i1 false)
  %59 = load i32, i32* %4, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %60
  %62 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %61, i32 0, i32 1
  %63 = load %struct.callback_data_s*, %struct.callback_data_s** %7, align 8
  %64 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %63, i32 0, i32 0
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* %62, %struct.fio_ls_embd_s* %64)
  %65 = load i32, i32* %4, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %66
  %68 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %67, i32 0, i32 0
  %69 = call i32 @fio_unlock(i8* %68)
  br label %70

70:                                               ; preds = %49, %26, %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_state_callback_ensure(%struct.callback_collection_s*) #0 {
  %2 = alloca %struct.callback_collection_s*, align 8
  %3 = alloca %struct.fio_ls_embd_s, align 8
  store %struct.callback_collection_s* %0, %struct.callback_collection_s** %2, align 8
  %4 = load %struct.callback_collection_s*, %struct.callback_collection_s** %2, align 8
  %5 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %5, i32 0, i32 1
  %7 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %8 = icmp ne %struct.fio_ls_embd_s* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  br label %21

10:                                               ; preds = %1
  %11 = load %struct.callback_collection_s*, %struct.callback_collection_s** %2, align 8
  %12 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %11, i32 0, i32 1
  %13 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 0
  %14 = load %struct.callback_collection_s*, %struct.callback_collection_s** %2, align 8
  %15 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %14, i32 0, i32 1
  store %struct.fio_ls_embd_s* %15, %struct.fio_ls_embd_s** %13, align 8
  %16 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 1
  %17 = load %struct.callback_collection_s*, %struct.callback_collection_s** %2, align 8
  %18 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %17, i32 0, i32 1
  store %struct.fio_ls_embd_s* %18, %struct.fio_ls_embd_s** %16, align 8
  %19 = bitcast %struct.fio_ls_embd_s* %12 to i8*
  %20 = bitcast %struct.fio_ls_embd_s* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  br label %21

21:                                               ; preds = %10, %9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ls_embd_push(%struct.fio_ls_embd_s*, %struct.fio_ls_embd_s*) #0 {
  %3 = alloca %struct.fio_ls_embd_s*, align 8
  %4 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %3, align 8
  store %struct.fio_ls_embd_s* %1, %struct.fio_ls_embd_s** %4, align 8
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %6 = icmp ne %struct.fio_ls_embd_s* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %9 = icmp ne %struct.fio_ls_embd_s* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %7, %2
  br label %28

11:                                               ; preds = %7
  %12 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %13 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %12, i32 0, i32 0
  %14 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %13, align 8
  %15 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %16 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %15, i32 0, i32 0
  store %struct.fio_ls_embd_s* %14, %struct.fio_ls_embd_s** %16, align 8
  %17 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %18 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %19 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %18, i32 0, i32 1
  store %struct.fio_ls_embd_s* %17, %struct.fio_ls_embd_s** %19, align 8
  %20 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %21 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %22 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %21, i32 0, i32 0
  %23 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %22, align 8
  %24 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %23, i32 0, i32 1
  store %struct.fio_ls_embd_s* %20, %struct.fio_ls_embd_s** %24, align 8
  %25 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %26 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %27 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %26, i32 0, i32 0
  store %struct.fio_ls_embd_s* %25, %struct.fio_ls_embd_s** %27, align 8
  br label %28

28:                                               ; preds = %11, %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_state_callback_remove(i32, void (i8*)*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca void (i8*)*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.fio_ls_embd_s*, align 8
  %9 = alloca %struct.callback_data_s*, align 8
  store i32 %0, i32* %5, align 4
  store void (i8*)* %1, void (i8*)** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = load i32, i32* %5, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %3
  %13 = load i32, i32* %5, align 4
  %14 = icmp ugt i32 %13, 13
  br i1 %14, label %15, label %16

15:                                               ; preds = %12, %3
  store i32 -1, i32* %4, align 4
  br label %73

16:                                               ; preds = %12
  %17 = load i32, i32* %5, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %18
  %20 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %19, i32 0, i32 0
  call void @fio_lock(i8* %20)
  %21 = load i32, i32* %5, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %24, i32 0, i32 1
  %26 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %25, align 8
  store %struct.fio_ls_embd_s* %26, %struct.fio_ls_embd_s** %8, align 8
  br label %27

27:                                               ; preds = %57, %16
  %28 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %8, align 8
  %29 = load i32, i32* %5, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %31, i32 0, i32 1
  %33 = icmp ne %struct.fio_ls_embd_s* %28, %32
  br i1 %33, label %34, label %61

34:                                               ; preds = %27
  %35 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %8, align 8
  %36 = ptrtoint %struct.fio_ls_embd_s* %35 to i64
  %37 = sub i64 %36, 0
  %38 = inttoptr i64 %37 to %struct.callback_data_s*
  store %struct.callback_data_s* %38, %struct.callback_data_s** %9, align 8
  %39 = load %struct.callback_data_s*, %struct.callback_data_s** %9, align 8
  %40 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %39, i32 0, i32 1
  %41 = load void (i8*)*, void (i8*)** %40, align 8
  %42 = load void (i8*)*, void (i8*)** %6, align 8
  %43 = icmp eq void (i8*)* %41, %42
  br i1 %43, label %44, label %56

44:                                               ; preds = %34
  %45 = load %struct.callback_data_s*, %struct.callback_data_s** %9, align 8
  %46 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %45, i32 0, i32 2
  %47 = load i8*, i8** %46, align 8
  %48 = load i8*, i8** %7, align 8
  %49 = icmp eq i8* %47, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = load %struct.callback_data_s*, %struct.callback_data_s** %9, align 8
  %52 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %51, i32 0, i32 0
  %53 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %52)
  %54 = load %struct.callback_data_s*, %struct.callback_data_s** %9, align 8
  %55 = bitcast %struct.callback_data_s* %54 to i8*
  call void @free(i8* %55) #1
  br label %67

56:                                               ; preds = %44, %34
  br label %57

57:                                               ; preds = %56
  %58 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %8, align 8
  %59 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %58, i32 0, i32 1
  %60 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %59, align 8
  store %struct.fio_ls_embd_s* %60, %struct.fio_ls_embd_s** %8, align 8
  br label %27

61:                                               ; preds = %27
  %62 = load i32, i32* %5, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %63
  %65 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %64, i32 0, i32 0
  %66 = call i32 @fio_unlock(i8* %65)
  store i32 -1, i32* %4, align 4
  br label %73

67:                                               ; preds = %50
  %68 = load i32, i32* %5, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %69
  %71 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %70, i32 0, i32 0
  %72 = call i32 @fio_unlock(i8* %71)
  store i32 0, i32* %4, align 4
  br label %73

73:                                               ; preds = %67, %61, %15
  %74 = load i32, i32* %4, align 4
  ret i32 %74
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s*) #0 {
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  %3 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %3, align 8
  %4 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %5 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %4, i32 0, i32 1
  %6 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %5, align 8
  %7 = icmp ne %struct.fio_ls_embd_s* %6, null
  br i1 %7, label %8, label %14

8:                                                ; preds = %1
  %9 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %10 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %9, i32 0, i32 1
  %11 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %10, align 8
  %12 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %13 = icmp eq %struct.fio_ls_embd_s* %11, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %8, %1
  store %struct.fio_ls_embd_s* null, %struct.fio_ls_embd_s** %2, align 8
  br label %36

15:                                               ; preds = %8
  %16 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %17 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %16, i32 0, i32 0
  %18 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %17, align 8
  %19 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %20 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %19, i32 0, i32 1
  %21 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %20, align 8
  %22 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %21, i32 0, i32 0
  store %struct.fio_ls_embd_s* %18, %struct.fio_ls_embd_s** %22, align 8
  %23 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %24 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %23, i32 0, i32 1
  %25 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %24, align 8
  %26 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %27 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %26, i32 0, i32 0
  %28 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %27, align 8
  %29 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %28, i32 0, i32 1
  store %struct.fio_ls_embd_s* %25, %struct.fio_ls_embd_s** %29, align 8
  %30 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %31 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %32 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %31, i32 0, i32 1
  store %struct.fio_ls_embd_s* %30, %struct.fio_ls_embd_s** %32, align 8
  %33 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %34 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %33, i32 0, i32 0
  store %struct.fio_ls_embd_s* %30, %struct.fio_ls_embd_s** %34, align 8
  %35 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  store %struct.fio_ls_embd_s* %35, %struct.fio_ls_embd_s** %2, align 8
  br label %36

36:                                               ; preds = %15, %14
  %37 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  ret %struct.fio_ls_embd_s* %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_state_callback_force(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.fio_ls_embd_s, align 8
  %4 = alloca %struct.fio_ls_embd_s*, align 8
  %5 = alloca %struct.callback_data_s*, align 8
  %6 = alloca %struct.fio_ls_embd_s*, align 8
  %7 = alloca %struct.callback_data_s*, align 8
  %8 = alloca %struct.fio_defer_task_s, align 8
  %9 = alloca %struct.fio_ls_embd_s*, align 8
  %10 = alloca %struct.callback_data_s*, align 8
  %11 = alloca %struct.callback_data_s*, align 8
  store i32 %0, i32* %2, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %1
  %15 = load i32, i32* %2, align 4
  %16 = icmp ugt i32 %15, 13
  br i1 %16, label %17, label %18

17:                                               ; preds = %14, %1
  br label %189

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 0
  store %struct.fio_ls_embd_s* %3, %struct.fio_ls_embd_s** %19, align 8
  %20 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 1
  store %struct.fio_ls_embd_s* %3, %struct.fio_ls_embd_s** %20, align 8
  %21 = load i32, i32* %2, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %23, i32 0, i32 0
  call void @fio_lock(i8* %24)
  %25 = load i32, i32* %2, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %26
  call void @fio_state_callback_ensure(%struct.callback_collection_s* %27)
  %28 = load i32, i32* %2, align 4
  switch i32 %28, label %114 [
    i32 0, label %29
    i32 1, label %29
    i32 2, label %29
    i32 3, label %29
    i32 4, label %29
    i32 5, label %29
    i32 6, label %29
    i32 7, label %76
    i32 8, label %113
    i32 9, label %113
    i32 10, label %113
    i32 11, label %113
    i32 12, label %113
    i32 13, label %113
  ]

29:                                               ; preds = %18, %18, %18, %18, %18, %18, %18
  %30 = load i32, i32* %2, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %31
  %33 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %33, i32 0, i32 1
  %35 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %34, align 8
  store %struct.fio_ls_embd_s* %35, %struct.fio_ls_embd_s** %4, align 8
  br label %36

36:                                               ; preds = %71, %29
  %37 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %38 = load i32, i32* %2, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %40, i32 0, i32 1
  %42 = icmp ne %struct.fio_ls_embd_s* %37, %41
  br i1 %42, label %43, label %75

43:                                               ; preds = %36
  %44 = call noalias i8* @fio_malloc(i64 32)
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 15
  %47 = icmp eq i64 %46, 0
  call void @llvm.assume(i1 %47)
  %48 = bitcast i8* %44 to %struct.callback_data_s*
  store %struct.callback_data_s* %48, %struct.callback_data_s** %5, align 8
  %49 = load %struct.callback_data_s*, %struct.callback_data_s** %5, align 8
  %50 = icmp ne %struct.callback_data_s* %49, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %43
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %54 = icmp sle i32 1, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.17, i64 0, i64 0))
  br label %56

56:                                               ; preds = %55, %52
  br label %57

57:                                               ; preds = %56
  %58 = call i32 @kill(i32 0, i32 2) #1
  %59 = call i32* @__errno_location() #9
  %60 = load i32, i32* %59, align 4
  call void @exit(i32 %60) #11
  unreachable

61:                                               ; preds = %43
  %62 = load %struct.callback_data_s*, %struct.callback_data_s** %5, align 8
  %63 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %64 = ptrtoint %struct.fio_ls_embd_s* %63 to i64
  %65 = sub i64 %64, 0
  %66 = inttoptr i64 %65 to %struct.callback_data_s*
  %67 = bitcast %struct.callback_data_s* %62 to i8*
  %68 = bitcast %struct.callback_data_s* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 32, i1 false)
  %69 = load %struct.callback_data_s*, %struct.callback_data_s** %5, align 8
  %70 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %69, i32 0, i32 0
  call void @fio_ls_embd_unshift(%struct.fio_ls_embd_s* %3, %struct.fio_ls_embd_s* %70)
  br label %71

71:                                               ; preds = %61
  %72 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %73 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %72, i32 0, i32 1
  %74 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %73, align 8
  store %struct.fio_ls_embd_s* %74, %struct.fio_ls_embd_s** %4, align 8
  br label %36

75:                                               ; preds = %36
  br label %161

76:                                               ; preds = %18
  %77 = load i32, i32* %2, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %78
  %80 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %79, i32 0, i32 1
  %81 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %80, i32 0, i32 1
  %82 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %81, align 8
  store %struct.fio_ls_embd_s* %82, %struct.fio_ls_embd_s** %6, align 8
  br label %83

83:                                               ; preds = %108, %76
  %84 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %85 = load i32, i32* %2, align 4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %86
  %88 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %87, i32 0, i32 1
  %89 = icmp ne %struct.fio_ls_embd_s* %84, %88
  br i1 %89, label %90, label %112

90:                                               ; preds = %83
  %91 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %92 = ptrtoint %struct.fio_ls_embd_s* %91 to i64
  %93 = sub i64 %92, 0
  %94 = inttoptr i64 %93 to %struct.callback_data_s*
  store %struct.callback_data_s* %94, %struct.callback_data_s** %7, align 8
  br label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 0
  store void (i8*, i8*)* @fio_state_on_idle_perform, void (i8*, i8*)** %96, align 8
  %97 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 1
  %98 = load %struct.callback_data_s*, %struct.callback_data_s** %7, align 8
  %99 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %98, i32 0, i32 1
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  %101 = ptrtoint void (i8*)* %100 to i64
  %102 = inttoptr i64 %101 to i8*
  store i8* %102, i8** %97, align 8
  %103 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 2
  %104 = load %struct.callback_data_s*, %struct.callback_data_s** %7, align 8
  %105 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %104, i32 0, i32 2
  %106 = load i8*, i8** %105, align 8
  store i8* %106, i8** %103, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %8, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %107

107:                                              ; preds = %95
  br label %108

108:                                              ; preds = %107
  %109 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %110 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %109, i32 0, i32 1
  %111 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %110, align 8
  store %struct.fio_ls_embd_s* %111, %struct.fio_ls_embd_s** %6, align 8
  br label %83

112:                                              ; preds = %83
  br label %161

113:                                              ; preds = %18, %18, %18, %18, %18, %18
  br label %114

114:                                              ; preds = %18, %113
  %115 = load i32, i32* %2, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %116
  %118 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %117, i32 0, i32 1
  %119 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %118, i32 0, i32 1
  %120 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %119, align 8
  store %struct.fio_ls_embd_s* %120, %struct.fio_ls_embd_s** %9, align 8
  br label %121

121:                                              ; preds = %156, %114
  %122 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %9, align 8
  %123 = load i32, i32* %2, align 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %124
  %126 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %125, i32 0, i32 1
  %127 = icmp ne %struct.fio_ls_embd_s* %122, %126
  br i1 %127, label %128, label %160

128:                                              ; preds = %121
  %129 = call noalias i8* @fio_malloc(i64 32)
  %130 = ptrtoint i8* %129 to i64
  %131 = and i64 %130, 15
  %132 = icmp eq i64 %131, 0
  call void @llvm.assume(i1 %132)
  %133 = bitcast i8* %129 to %struct.callback_data_s*
  store %struct.callback_data_s* %133, %struct.callback_data_s** %10, align 8
  %134 = load %struct.callback_data_s*, %struct.callback_data_s** %10, align 8
  %135 = icmp ne %struct.callback_data_s* %134, null
  br i1 %135, label %146, label %136

136:                                              ; preds = %128
  br label %137

137:                                              ; preds = %136
  %138 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %139 = icmp sle i32 1, %138
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.18, i64 0, i64 0))
  br label %141

141:                                              ; preds = %140, %137
  br label %142

142:                                              ; preds = %141
  %143 = call i32 @kill(i32 0, i32 2) #1
  %144 = call i32* @__errno_location() #9
  %145 = load i32, i32* %144, align 4
  call void @exit(i32 %145) #11
  unreachable

146:                                              ; preds = %128
  %147 = load %struct.callback_data_s*, %struct.callback_data_s** %10, align 8
  %148 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %9, align 8
  %149 = ptrtoint %struct.fio_ls_embd_s* %148 to i64
  %150 = sub i64 %149, 0
  %151 = inttoptr i64 %150 to %struct.callback_data_s*
  %152 = bitcast %struct.callback_data_s* %147 to i8*
  %153 = bitcast %struct.callback_data_s* %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 32, i1 false)
  %154 = load %struct.callback_data_s*, %struct.callback_data_s** %10, align 8
  %155 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %154, i32 0, i32 0
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* %3, %struct.fio_ls_embd_s* %155)
  br label %156

156:                                              ; preds = %146
  %157 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %9, align 8
  %158 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %157, i32 0, i32 1
  %159 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %158, align 8
  store %struct.fio_ls_embd_s* %159, %struct.fio_ls_embd_s** %9, align 8
  br label %121

160:                                              ; preds = %121
  br label %161

161:                                              ; preds = %160, %112, %75
  %162 = load i32, i32* %2, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %163
  %165 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %164, i32 0, i32 0
  %166 = call i32 @fio_unlock(i8* %165)
  br label %167

167:                                              ; preds = %186, %161
  %168 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* %3)
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %189

170:                                              ; preds = %167
  %171 = call %struct.fio_ls_embd_s* @fio_ls_embd_pop(%struct.fio_ls_embd_s* %3)
  %172 = ptrtoint %struct.fio_ls_embd_s* %171 to i64
  %173 = sub i64 %172, 0
  %174 = inttoptr i64 %173 to %struct.callback_data_s*
  store %struct.callback_data_s* %174, %struct.callback_data_s** %11, align 8
  %175 = load %struct.callback_data_s*, %struct.callback_data_s** %11, align 8
  %176 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %175, i32 0, i32 1
  %177 = load void (i8*)*, void (i8*)** %176, align 8
  %178 = icmp ne void (i8*)* %177, null
  br i1 %178, label %179, label %186

179:                                              ; preds = %170
  %180 = load %struct.callback_data_s*, %struct.callback_data_s** %11, align 8
  %181 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %180, i32 0, i32 1
  %182 = load void (i8*)*, void (i8*)** %181, align 8
  %183 = load %struct.callback_data_s*, %struct.callback_data_s** %11, align 8
  %184 = getelementptr inbounds %struct.callback_data_s, %struct.callback_data_s* %183, i32 0, i32 2
  %185 = load i8*, i8** %184, align 8
  call void %182(i8* %185)
  br label %186

186:                                              ; preds = %179, %170
  %187 = load %struct.callback_data_s*, %struct.callback_data_s** %11, align 8
  %188 = bitcast %struct.callback_data_s* %187 to i8*
  call void @fio_free(i8* %188)
  br label %167

189:                                              ; preds = %17, %167
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @fio_malloc(i64) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  store i8* bitcast (x86_fp80* @on_malloc_zero to i8*), i8** %2, align 8
  br label %29

8:                                                ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = icmp uge i64 %9, 16384
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = load i64, i64* %3, align 8
  %13 = call i8* @big_alloc(i64 %12)
  store i8* %13, i8** %2, align 8
  br label %29

14:                                               ; preds = %8
  %15 = load i64, i64* %3, align 8
  %16 = lshr i64 %15, 4
  %17 = load i64, i64* %3, align 8
  %18 = and i64 %17, 15
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %19, true
  %21 = xor i1 %20, true
  %22 = zext i1 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = add i64 %16, %23
  store i64 %24, i64* %3, align 8
  call void @arena_enter()
  %25 = load i64, i64* %3, align 8
  %26 = trunc i64 %25 to i16
  %27 = call i8* @block_slice(i16 zeroext %26)
  store i8* %27, i8** %4, align 8
  call void @arena_exit()
  %28 = load i8*, i8** %4, align 8
  store i8* %28, i8** %2, align 8
  br label %29

29:                                               ; preds = %14, %11, %7
  %30 = load i8*, i8** %2, align 8
  ret i8* %30
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ls_embd_unshift(%struct.fio_ls_embd_s*, %struct.fio_ls_embd_s*) #0 {
  %3 = alloca %struct.fio_ls_embd_s*, align 8
  %4 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %3, align 8
  store %struct.fio_ls_embd_s* %1, %struct.fio_ls_embd_s** %4, align 8
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %6 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %5, i32 0, i32 1
  %7 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %8 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* %7, %struct.fio_ls_embd_s* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_state_on_idle_perform(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = ptrtoint i8* %5 to i64
  %7 = inttoptr i64 %6 to void (i8*)*
  %8 = load i8*, i8** %4, align 8
  call void %7(i8* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_ls_embd_any(%struct.fio_ls_embd_s*) #0 {
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %2, align 8
  %3 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 1
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %6 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %7 = icmp ne %struct.fio_ls_embd_s* %5, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_ls_embd_s* @fio_ls_embd_pop(%struct.fio_ls_embd_s*) #0 {
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %2, align 8
  %3 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 0
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %6 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %5)
  ret %struct.fio_ls_embd_s* %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_free(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load i8*, i8** %2, align 8
  %7 = icmp eq i8* %6, bitcast (x86_fp80* @on_malloc_zero to i8*)
  br i1 %7, label %8, label %9

8:                                                ; preds = %5, %1
  br label %18

9:                                                ; preds = %5
  %10 = load i8*, i8** %2, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 32767
  %13 = icmp eq i64 %12, 16
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = load i8*, i8** %2, align 8
  call void @big_free(i8* %15)
  br label %18

16:                                               ; preds = %9
  %17 = load i8*, i8** %2, align 8
  call void @block_slice_free(i8* %17)
  br label %18

18:                                               ; preds = %16, %14, %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_state_callback_clear(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.callback_data_s*, align 8
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %2, align 4
  %8 = icmp ugt i32 %7, 13
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  br label %42

10:                                               ; preds = %6
  %11 = load i32, i32* %2, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %12
  %14 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %13, i32 0, i32 0
  call void @fio_lock(i8* %14)
  %15 = load i32, i32* %2, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %16
  call void @fio_state_callback_ensure(%struct.callback_collection_s* %17)
  br label %18

18:                                               ; preds = %25, %10
  %19 = load i32, i32* %2, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %21, i32 0, i32 1
  %23 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %36

25:                                               ; preds = %18
  %26 = load i32, i32* %2, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %28, i32 0, i32 1
  %30 = call %struct.fio_ls_embd_s* @fio_ls_embd_shift(%struct.fio_ls_embd_s* %29)
  %31 = ptrtoint %struct.fio_ls_embd_s* %30 to i64
  %32 = sub i64 %31, 0
  %33 = inttoptr i64 %32 to %struct.callback_data_s*
  store %struct.callback_data_s* %33, %struct.callback_data_s** %3, align 8
  %34 = load %struct.callback_data_s*, %struct.callback_data_s** %3, align 8
  %35 = bitcast %struct.callback_data_s* %34 to i8*
  call void @free(i8* %35) #1
  br label %18

36:                                               ; preds = %18
  %37 = load i32, i32* %2, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %38
  %40 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %39, i32 0, i32 0
  %41 = call i32 @fio_unlock(i8* %40)
  br label %42

42:                                               ; preds = %36, %9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_ls_embd_s* @fio_ls_embd_shift(%struct.fio_ls_embd_s*) #0 {
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %2, align 8
  %3 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 1
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %6 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %5)
  ret %struct.fio_ls_embd_s* %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_state_callback_on_fork() #0 {
  %1 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  br label %2

2:                                                ; preds = %9, %0
  %3 = load i64, i64* %1, align 8
  %4 = icmp ult i64 %3, 14
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = load i64, i64* %1, align 8
  %7 = getelementptr inbounds [14 x %struct.callback_collection_s], [14 x %struct.callback_collection_s]* @callback_collection, i64 0, i64 %6
  %8 = getelementptr inbounds %struct.callback_collection_s, %struct.callback_collection_s* %7, i32 0, i32 0
  store volatile i8 0, i8* %8, align 8
  br label %9

9:                                                ; preds = %5
  %10 = load i64, i64* %1, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %1, align 8
  br label %2

12:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_state_callback_clear_all() #0 {
  %1 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  br label %2

2:                                                ; preds = %8, %0
  %3 = load i64, i64* %1, align 8
  %4 = icmp ult i64 %3, 14
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = load i64, i64* %1, align 8
  %7 = trunc i64 %6 to i32
  call void @fio_state_callback_clear(i32 %7)
  br label %8

8:                                                ; preds = %5
  %9 = load i64, i64* %1, align 8
  %10 = add i64 %9, 1
  store i64 %10, i64* %1, align 8
  br label %2

11:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_defer_io_task(i64, %struct.fio_defer_iotask_args_s* byval(%struct.fio_defer_iotask_args_s) align 8) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_defer_task_s, align 8
  %5 = alloca %struct.fio_defer_iotask_args_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i64 %0, i64* %3, align 8
  %7 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %1, i32 0, i32 1
  %8 = load void (i64, %struct.fio_protocol_s*, i8*)*, void (i64, %struct.fio_protocol_s*, i8*)** %7, align 8
  %9 = icmp ne void (i64, %struct.fio_protocol_s*, i8*)* %8, null
  br i1 %9, label %28, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %1, i32 0, i32 3
  %12 = load void (i64, i8*)*, void (i64, i8*)** %11, align 8
  %13 = icmp ne void (i64, i8*)* %12, null
  br i1 %13, label %14, label %27

14:                                               ; preds = %10
  br label %15

15:                                               ; preds = %14
  %16 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 0
  %17 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %1, i32 0, i32 3
  %18 = load void (i64, i8*)*, void (i64, i8*)** %17, align 8
  %19 = bitcast void (i64, i8*)* %18 to void (i8*, i8*)*
  store void (i8*, i8*)* %19, void (i8*, i8*)** %16, align 8
  %20 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 1
  %21 = load i64, i64* %3, align 8
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %20, align 8
  %23 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 2
  %24 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %1, i32 0, i32 2
  %25 = load i8*, i8** %24, align 8
  store i8* %25, i8** %23, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %4, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %26

26:                                               ; preds = %15
  br label %27

27:                                               ; preds = %26, %10
  br label %58

28:                                               ; preds = %2
  %29 = call noalias i8* @fio_malloc(i64 32)
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 15
  %32 = icmp eq i64 %31, 0
  call void @llvm.assume(i1 %32)
  %33 = bitcast i8* %29 to %struct.fio_defer_iotask_args_s*
  store %struct.fio_defer_iotask_args_s* %33, %struct.fio_defer_iotask_args_s** %5, align 8
  %34 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %35 = icmp ne %struct.fio_defer_iotask_args_s* %34, null
  br i1 %35, label %46, label %36

36:                                               ; preds = %28
  br label %37

37:                                               ; preds = %36
  %38 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %39 = icmp sle i32 1, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.19, i64 0, i64 0))
  br label %41

41:                                               ; preds = %40, %37
  br label %42

42:                                               ; preds = %41
  %43 = call i32 @kill(i32 0, i32 2) #1
  %44 = call i32* @__errno_location() #9
  %45 = load i32, i32* %44, align 4
  call void @exit(i32 %45) #11
  unreachable

46:                                               ; preds = %28
  %47 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %48 = bitcast %struct.fio_defer_iotask_args_s* %47 to i8*
  %49 = bitcast %struct.fio_defer_iotask_args_s* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 32, i1 false)
  br label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @fio_io_task_perform, void (i8*, i8*)** %51, align 8
  %52 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %53 = load i64, i64* %3, align 8
  %54 = inttoptr i64 %53 to i8*
  store i8* %54, i8** %52, align 8
  %55 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  %56 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %57 = bitcast %struct.fio_defer_iotask_args_s* %56 to i8*
  store i8* %57, i8** %55, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %58

58:                                               ; preds = %27, %50
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_io_task_perform(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_defer_iotask_args_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_protocol_s*, align 8
  %8 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fio_defer_iotask_args_s*
  store %struct.fio_defer_iotask_args_s* %10, %struct.fio_defer_iotask_args_s** %5, align 8
  %11 = load i8*, i8** %3, align 8
  %12 = ptrtoint i8* %11 to i64
  store i64 %12, i64* %6, align 8
  %13 = load i64, i64* %6, align 8
  %14 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %15 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = call %struct.fio_protocol_s* @fio_protocol_try_lock(i64 %13, i32 %16)
  store %struct.fio_protocol_s* %17, %struct.fio_protocol_s** %7, align 8
  %18 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %19 = icmp ne %struct.fio_protocol_s* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %2
  br label %36

21:                                               ; preds = %2
  %22 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %23 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %22, i32 0, i32 1
  %24 = load void (i64, %struct.fio_protocol_s*, i8*)*, void (i64, %struct.fio_protocol_s*, i8*)** %23, align 8
  %25 = load i64, i64* %6, align 8
  %26 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %27 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %28 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %27, i32 0, i32 2
  %29 = load i8*, i8** %28, align 8
  call void %24(i64 %25, %struct.fio_protocol_s* %26, i8* %29)
  %30 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %7, align 8
  %31 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %32 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  call void @fio_protocol_unlock(%struct.fio_protocol_s* %30, i32 %33)
  %34 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %35 = bitcast %struct.fio_defer_iotask_args_s* %34 to i8*
  call void @fio_free(i8* %35)
  br label %63

36:                                               ; preds = %20
  %37 = call i32* @__errno_location() #9
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 9
  br i1 %39, label %40, label %56

40:                                               ; preds = %36
  %41 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %42 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %41, i32 0, i32 3
  %43 = load void (i64, i8*)*, void (i64, i8*)** %42, align 8
  %44 = icmp ne void (i64, i8*)* %43, null
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %47 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %46, i32 0, i32 3
  %48 = load void (i64, i8*)*, void (i64, i8*)** %47, align 8
  %49 = load i64, i64* %6, align 8
  %50 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %51 = getelementptr inbounds %struct.fio_defer_iotask_args_s, %struct.fio_defer_iotask_args_s* %50, i32 0, i32 2
  %52 = load i8*, i8** %51, align 8
  call void %48(i64 %49, i8* %52)
  br label %53

53:                                               ; preds = %45, %40
  %54 = load %struct.fio_defer_iotask_args_s*, %struct.fio_defer_iotask_args_s** %5, align 8
  %55 = bitcast %struct.fio_defer_iotask_args_s* %54 to i8*
  call void @fio_free(i8* %55)
  br label %63

56:                                               ; preds = %36
  br label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 0
  store void (i8*, i8*)* @fio_io_task_perform, void (i8*, i8*)** %58, align 8
  %59 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 1
  %60 = load i8*, i8** %3, align 8
  store i8* %60, i8** %59, align 8
  %61 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %8, i32 0, i32 2
  %62 = load i8*, i8** %4, align 8
  store i8* %62, i8** %61, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %8, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %63

63:                                               ; preds = %21, %53, %57
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_lib_destroy() #0 {
  %1 = alloca i8, align 1
  %2 = call i32 @fio_is_master()
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* %1, align 1
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %4, i32 0, i32 7
  store volatile i8 0, i8* %5, align 1
  call void @fio_on_fork()
  call void @fio_defer_perform()
  call void @fio_timer_clear_all()
  call void @fio_defer_perform()
  call void @fio_state_callback_force(i32 12)
  call void @fio_state_callback_clear_all()
  call void @fio_defer_perform()
  call void @fio_poll_close()
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = bitcast %struct.fio_data_s* %6 to i8*
  call void @fio_free(i8* %7)
  call void @fio_mem_destroy()
  br label %8

8:                                                ; preds = %0
  %9 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %10 = icmp sle i32 5, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.20, i64 0, i64 0), i32 %12)
  br label %13

13:                                               ; preds = %11, %8
  br label %14

14:                                               ; preds = %13
  %15 = load i8, i8* %1, align 1
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
  br label %20

20:                                               ; preds = %17, %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_on_fork() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i16, align 2
  store volatile i8 0, i8* @fio_timer_lock, align 1
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %4, i32 0, i32 9
  store volatile i8 0, i8* %5, align 1
  call void @fio_defer_on_fork()
  call void @fio_malloc_after_fork()
  call void @fio_poll_init()
  call void @fio_state_callback_on_fork()
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %1, align 8
  store i64 0, i64* %2, align 8
  br label %10

10:                                               ; preds = %51, %0
  %11 = load i64, i64* %2, align 8
  %12 = load i64, i64* %1, align 8
  %13 = icmp ult i64 %11, %12
  br i1 %13, label %14, label %54

14:                                               ; preds = %10
  %15 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %16 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %15, i32 0, i32 12
  %17 = load i64, i64* %2, align 8
  %18 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %16, i64 0, i64 %17
  %19 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %18, i32 0, i32 10
  store volatile i8 0, i8* %19, align 2
  %20 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %21 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %20, i32 0, i32 12
  %22 = load i64, i64* %2, align 8
  %23 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %21, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %23, i32 0, i32 8
  store volatile i8 0, i8* %24, align 4
  %25 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %26 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %25, i32 0, i32 12
  %27 = load i64, i64* %2, align 8
  %28 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %26, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %28, i32 0, i32 3
  %30 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %29, align 8
  %31 = icmp ne %struct.fio_protocol_s* %30, null
  br i1 %31, label %32, label %50

32:                                               ; preds = %14
  %33 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %34 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %33, i32 0, i32 12
  %35 = load i64, i64* %2, align 8
  %36 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %34, i64 0, i64 %35
  %37 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %36, i32 0, i32 3
  %38 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %37, align 8
  %39 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %38, i32 0, i32 5
  store i64 0, i64* %39, align 8
  %40 = load i64, i64* %2, align 8
  %41 = shl i64 %40, 8
  %42 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %43 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %42, i32 0, i32 12
  %44 = load i64, i64* %2, align 8
  %45 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %43, i64 0, i64 %44
  %46 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %45, i32 0, i32 9
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = or i64 %41, %48
  call void @fio_force_close(i64 %49)
  br label %50

50:                                               ; preds = %32, %14
  br label %51

51:                                               ; preds = %50
  %52 = load i64, i64* %2, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %2, align 8
  br label %10

54:                                               ; preds = %10
  call void @fio_pubsub_on_fork()
  call void @fio_max_fd_shrink()
  %55 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %56 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %55, i32 0, i32 7
  %57 = load volatile i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  store i16 %58, i16* %3, align 2
  %59 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %60 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %59, i32 0, i32 7
  store volatile i8 0, i8* %60, align 1
  call void @fio_defer_perform()
  %61 = load i16, i16* %3, align 2
  %62 = trunc i16 %61 to i8
  %63 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %64 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %63, i32 0, i32 7
  store volatile i8 %62, i8* %64, align 1
  %65 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %66 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %65, i32 0, i32 8
  store i8 1, i8* %66, align 2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_timer_clear_all() #0 {
  %1 = alloca %struct.fio_timer_s*, align 8
  call void @fio_lock(i8* @fio_timer_lock)
  br label %2

2:                                                ; preds = %21, %0
  %3 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* @fio_timers)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %24

5:                                                ; preds = %2
  %6 = call %struct.fio_ls_embd_s* @fio_ls_embd_pop(%struct.fio_ls_embd_s* @fio_timers)
  %7 = ptrtoint %struct.fio_ls_embd_s* %6 to i64
  %8 = sub i64 %7, 0
  %9 = inttoptr i64 %8 to %struct.fio_timer_s*
  store %struct.fio_timer_s* %9, %struct.fio_timer_s** %1, align 8
  %10 = load %struct.fio_timer_s*, %struct.fio_timer_s** %1, align 8
  %11 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %10, i32 0, i32 6
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp ne void (i8*)* %12, null
  br i1 %13, label %14, label %21

14:                                               ; preds = %5
  %15 = load %struct.fio_timer_s*, %struct.fio_timer_s** %1, align 8
  %16 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %15, i32 0, i32 6
  %17 = load void (i8*)*, void (i8*)** %16, align 8
  %18 = load %struct.fio_timer_s*, %struct.fio_timer_s** %1, align 8
  %19 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %18, i32 0, i32 5
  %20 = load i8*, i8** %19, align 8
  call void %17(i8* %20)
  br label %21

21:                                               ; preds = %14, %5
  %22 = load %struct.fio_timer_s*, %struct.fio_timer_s** %1, align 8
  %23 = bitcast %struct.fio_timer_s* %22 to i8*
  call void @free(i8* %23) #1
  br label %2

24:                                               ; preds = %2
  %25 = call i32 @fio_unlock(i8* @fio_timer_lock)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_close() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2

2:                                                ; preds = %21, %0
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %24

5:                                                ; preds = %2
  %6 = load i32, i32* %1, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, -1
  br i1 %10, label %11, label %20

11:                                               ; preds = %5
  %12 = load i32, i32* %1, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @close(i32 %15)
  %17 = load i32, i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %18
  store i32 -1, i32* %19, align 4
  br label %20

20:                                               ; preds = %11, %5
  br label %21

21:                                               ; preds = %20
  %22 = load i32, i32* %1, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %1, align 4
  br label %2

24:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_mem_destroy() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.fio_ls_embd_s*, align 8
  %4 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %5 = icmp ne %struct.arena_s* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %0
  br label %68

7:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  br label %8

8:                                                ; preds = %30, %7
  %9 = load i64, i64* %1, align 8
  %10 = load i64, i64* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 1), align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %12, label %33

12:                                               ; preds = %8
  %13 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %14 = load i64, i64* %1, align 8
  %15 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %13, i64 %14
  %16 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %15, i32 0, i32 0
  %17 = load %struct.block_s*, %struct.block_s** %16, align 8
  %18 = icmp ne %struct.block_s* %17, null
  br i1 %18, label %19, label %25

19:                                               ; preds = %12
  %20 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %21 = load i64, i64* %1, align 8
  %22 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %20, i64 %21
  %23 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %22, i32 0, i32 0
  %24 = load %struct.block_s*, %struct.block_s** %23, align 8
  call void @block_free(%struct.block_s* %24)
  br label %25

25:                                               ; preds = %19, %12
  %26 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %27 = load i64, i64* %1, align 8
  %28 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %26, i64 %27
  %29 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %28, i32 0, i32 0
  store %struct.block_s* null, %struct.block_s** %29, align 8
  br label %30

30:                                               ; preds = %25
  %31 = load i64, i64* %1, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %1, align 8
  br label %8

33:                                               ; preds = %8
  %34 = load i8, i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 3), align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %65, label %36

36:                                               ; preds = %33
  %37 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0))
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %65

39:                                               ; preds = %36
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %42 = icmp sle i32 3, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.94, i64 0, i64 0))
  br label %44

44:                                               ; preds = %43, %40
  br label %45

45:                                               ; preds = %44
  store i64 0, i64* %2, align 8
  %46 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0, i32 1), align 8
  store %struct.fio_ls_embd_s* %46, %struct.fio_ls_embd_s** %3, align 8
  br label %47

47:                                               ; preds = %53, %45
  %48 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %49 = icmp ne %struct.fio_ls_embd_s* %48, getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0)
  br i1 %49, label %50, label %57

50:                                               ; preds = %47
  %51 = load i64, i64* %2, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %2, align 8
  br label %53

53:                                               ; preds = %50
  %54 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %3, align 8
  %55 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %54, i32 0, i32 1
  %56 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %55, align 8
  store %struct.fio_ls_embd_s* %56, %struct.fio_ls_embd_s** %3, align 8
  br label %47

57:                                               ; preds = %47
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %60 = icmp sle i32 5, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = load i64, i64* %2, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.95, i64 0, i64 0), i64 %62, i64 256)
  br label %63

63:                                               ; preds = %61, %58
  br label %64

64:                                               ; preds = %63
  br label %65

65:                                               ; preds = %64, %36, %33
  %66 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %67 = bitcast %struct.arena_s* %66 to i8*
  call void @big_free(i8* %67)
  store %struct.arena_s* null, %struct.arena_s** @arenas, align 8
  br label %68

68:                                               ; preds = %65, %6
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @getpid() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_lib_init() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.rlimit, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  %5 = call i64 @sysconf(i32 4) #1
  store i64 %5, i64* %1, align 8
  %6 = bitcast %struct.rlimit* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  %7 = call i32 @getrlimit(i32 7, %struct.rlimit* %2) #1
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %16

9:                                                ; preds = %0
  br label %10

10:                                               ; preds = %9
  %11 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %12 = icmp sle i32 3, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0))
  br label %14

14:                                               ; preds = %13, %10
  br label %15

15:                                               ; preds = %14
  call void @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i64 0, i64 0))
  br label %53

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %3, align 8
  %19 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %23, 131072
  br i1 %24, label %25, label %28

25:                                               ; preds = %16
  %26 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 1
  store i64 131072, i64* %26, align 8
  %27 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  store i64 131072, i64* %27, align 8
  br label %28

28:                                               ; preds = %25, %16
  br label %29

29:                                               ; preds = %39, %28
  %30 = call i32 @setrlimit(i32 7, %struct.rlimit* %2) #1
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = load i64, i64* %3, align 8
  %36 = icmp ugt i64 %34, %35
  br label %37

37:                                               ; preds = %32, %29
  %38 = phi i1 [ false, %29 ], [ %36, %32 ]
  br i1 %38, label %39, label %43

39:                                               ; preds = %37
  %40 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, -1
  store i64 %42, i64* %40, align 8
  br label %29

43:                                               ; preds = %37
  %44 = call i32 @getrlimit(i32 7, %struct.rlimit* %2) #1
  %45 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %2, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %1, align 8
  %47 = load i64, i64* %1, align 8
  %48 = icmp sgt i64 %47, 1024
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = load i64, i64* %1, align 8
  %51 = sub nsw i64 %50, 16
  store i64 %51, i64* %1, align 8
  br label %52

52:                                               ; preds = %49, %43
  br label %53

53:                                               ; preds = %52, %15
  call void @fio_mem_init()
  call void @fio_poll_init()
  call void @fio_pubsub_initialize()
  %54 = load i64, i64* %1, align 8
  %55 = mul i64 %54, 168
  %56 = add i64 64, %55
  %57 = call noalias i8* @fio_mmap(i64 %56)
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 15
  %60 = icmp eq i64 %59, 0
  call void @llvm.assume(i1 %60)
  %61 = bitcast i8* %57 to %struct.fio_data_s*
  store %struct.fio_data_s* %61, %struct.fio_data_s** @fio_data, align 8
  %62 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %63 = icmp ne %struct.fio_data_s* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %53
  br label %65

65:                                               ; preds = %64
  %66 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %67 = icmp sle i32 1, %66
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.24, i64 0, i64 0))
  br label %69

69:                                               ; preds = %68, %65
  br label %70

70:                                               ; preds = %69
  %71 = call i32 @kill(i32 0, i32 2) #1
  %72 = call i32* @__errno_location() #9
  %73 = load i32, i32* %72, align 4
  call void @exit(i32 %73) #11
  unreachable

74:                                               ; preds = %53
  %75 = load i64, i64* %1, align 8
  %76 = trunc i64 %75 to i32
  %77 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %78 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %77, i32 0, i32 1
  store i32 %76, i32* %78, align 8
  %79 = call i32 @getpid() #1
  %80 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %81 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %80, i32 0, i32 11
  store i32 %79, i32* %81, align 4
  %82 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %83 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %82, i32 0, i32 2
  store i32 0, i32* %83, align 4
  call void @fio_mark_time()
  store i64 0, i64* %4, align 8
  br label %84

84:                                               ; preds = %91, %74
  %85 = load i64, i64* %4, align 8
  %86 = load i64, i64* %1, align 8
  %87 = icmp slt i64 %85, %86
  br i1 %87, label %88, label %94

88:                                               ; preds = %84
  %89 = load i64, i64* %4, align 8
  %90 = call i32 @fio_clear_fd(i64 %89, i8 zeroext 0)
  br label %91

91:                                               ; preds = %88
  %92 = load i64, i64* %4, align 8
  %93 = add nsw i64 %92, 1
  store i64 %93, i64* %4, align 8
  br label %84

94:                                               ; preds = %84
  call void @fio_state_callback_force(i32 0)
  call void @fio_state_callback_clear(i32 0)
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @sysconf(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @getrlimit(i32, %struct.rlimit*) #2

; Function Attrs: nounwind
declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_mem_init() #0 {
  %1 = alloca i64, align 8
  %2 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %3 = icmp ne %struct.arena_s* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  br label %31

5:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  %6 = call i64 @sysconf(i32 84) #1
  store i64 %6, i64* %1, align 8
  %7 = load i64, i64* %1, align 8
  %8 = icmp sle i64 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  store i64 8, i64* %1, align 8
  br label %10

10:                                               ; preds = %9, %5
  %11 = load i64, i64* %1, align 8
  store i64 %11, i64* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 1), align 8
  %12 = load i64, i64* %1, align 8
  %13 = mul i64 16, %12
  %14 = call i8* @big_alloc(i64 %13)
  %15 = bitcast i8* %14 to %struct.arena_s*
  store %struct.arena_s* %15, %struct.arena_s** @arenas, align 8
  %16 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %17 = icmp ne %struct.arena_s* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %10
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %21 = icmp sle i32 1, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.89, i64 0, i64 0))
  br label %23

23:                                               ; preds = %22, %19
  br label %24

24:                                               ; preds = %23
  %25 = call i32 @kill(i32 0, i32 2) #1
  %26 = call i32* @__errno_location() #9
  %27 = load i32, i32* %26, align 4
  call void @exit(i32 %27) #11
  unreachable

28:                                               ; preds = %10
  %29 = call %struct.block_s* @block_new()
  call void @block_free(%struct.block_s* %29)
  %30 = call i32 @pthread_atfork(void ()* null, void ()* null, void ()* @fio_malloc_after_fork) #1
  br label %31

31:                                               ; preds = %28, %4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_init() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.epoll_event, align 1
  call void @fio_poll_close()
  store i32 0, i32* %1, align 4
  br label %4

4:                                                ; preds = %19, %0
  %5 = load i32, i32* %1, align 4
  %6 = icmp slt i32 %5, 3
  br i1 %6, label %7, label %22

7:                                                ; preds = %4
  %8 = call i32 @epoll_create1(i32 524288) #1
  %9 = load i32, i32* %1, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %10
  store i32 %8, i32* %11, align 4
  %12 = load i32, i32* %1, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %18

17:                                               ; preds = %7
  br label %47

18:                                               ; preds = %7
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* %1, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %1, align 4
  br label %4

22:                                               ; preds = %4
  store i32 1, i32* %2, align 4
  br label %23

23:                                               ; preds = %43, %22
  %24 = load i32, i32* %2, align 4
  %25 = icmp slt i32 %24, 3
  br i1 %25, label %26, label %46

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %3, i32 0, i32 0
  store i32 5, i32* %27, align 1
  %28 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %3, i32 0, i32 1
  %29 = bitcast %union.epoll_data* %28 to i32*
  %30 = load i32, i32* %2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %29, align 1
  %34 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 0), align 4
  %35 = load i32, i32* %2, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [3 x i32], [3 x i32]* @evio_fd, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = call i32 @epoll_ctl(i32 %34, i32 1, i32 %38, %struct.epoll_event* %3) #1
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %42

41:                                               ; preds = %26
  br label %47

42:                                               ; preds = %26
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* %2, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %2, align 4
  br label %23

46:                                               ; preds = %23
  ret void

47:                                               ; preds = %41, %17
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %50 = icmp sle i32 1, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.52, i64 0, i64 0))
  br label %52

52:                                               ; preds = %51, %48
  br label %53

53:                                               ; preds = %52
  call void @fio_poll_close()
  %54 = call i32* @__errno_location() #9
  %55 = load i32, i32* %54, align 4
  call void @exit(i32 %55) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_pubsub_initialize() #0 {
  call void @fio_cluster_init()
  call void @fio_state_callback_add(i32 1, void (i8*)* @fio_listen2cluster, i8* null)
  call void @fio_state_callback_add(i32 5, void (i8*)* @fio_accept_after_fork, i8* null)
  call void @fio_state_callback_add(i32 4, void (i8*)* @fio_connect2cluster, i8* null)
  call void @fio_state_callback_add(i32 9, void (i8*)* @fio_cluster_cleanup, i8* null)
  call void @fio_state_callback_add(i32 12, void (i8*)* @fio_cluster_at_exit, i8* null)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @fio_mmap(i64) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  store i8* null, i8** %2, align 8
  br label %10

7:                                                ; preds = %1
  %8 = load i64, i64* %3, align 8
  %9 = call i8* @big_alloc(i64 %8)
  store i8* %9, i8** %2, align 8
  br label %10

10:                                               ; preds = %7, %6
  %11 = load i8*, i8** %2, align 8
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_start(i32) #0 {
  %2 = alloca %struct.fio_start_args, align 2
  %3 = alloca i32, align 4
  %4 = bitcast %struct.fio_start_args* %2 to i32*
  store i32 %0, i32* %4, align 2
  %5 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 0
  %6 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 1
  call void @fio_expected_concurrency(i16* %5, i16* %6)
  call void @fio_signal_handler_setup()
  %7 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 1
  %8 = load i16, i16* %7, align 2
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 4
  store i16 %8, i16* %10, align 8
  %11 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 0
  %12 = load i16, i16* %11, align 2
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 5
  store i16 %12, i16* %14, align 2
  %15 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %16 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %15, i32 0, i32 7
  store volatile i8 1, i8* %16, align 1
  %17 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %18 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %17, i32 0, i32 8
  store i8 0, i8* %18, align 2
  call void @fio_state_callback_force(i32 1)
  br label %19

19:                                               ; preds = %1
  %20 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %21 = icmp sle i32 4, %20
  br i1 %21, label %22, label %52

22:                                               ; preds = %19
  %23 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %24 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %23, i32 0, i32 4
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %28 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %27, i32 0, i32 4
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = icmp sgt i32 %30, 1
  %32 = zext i1 %31 to i64
  %33 = select i1 %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i64 0, i64 0)
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 5
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %39 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %38, i32 0, i32 5
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp sgt i32 %41, 1
  %43 = zext i1 %42 to i64
  %44 = select i1 %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i64 0, i64 0)
  %45 = call i8* @fio_engine()
  %46 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %47 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %50 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %49, i32 0, i32 11
  %51 = load i32, i32* %50, align 4
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.25, i64 0, i64 0), i32 %26, i8* %33, i32 %37, i8* %44, i8* %45, i32 %48, i32 %51)
  br label %52

52:                                               ; preds = %22, %19
  br label %53

53:                                               ; preds = %52
  %54 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 1
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = icmp sgt i32 %56, 1
  br i1 %57, label %58, label %78

58:                                               ; preds = %53
  store i32 0, i32* %3, align 4
  br label %59

59:                                               ; preds = %74, %58
  %60 = load i32, i32* %3, align 4
  %61 = getelementptr inbounds %struct.fio_start_args, %struct.fio_start_args* %2, i32 0, i32 1
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %60, %63
  br i1 %64, label %65, label %71

65:                                               ; preds = %59
  %66 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %67 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %66, i32 0, i32 7
  %68 = load volatile i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp ne i32 %69, 0
  br label %71

71:                                               ; preds = %65, %59
  %72 = phi i1 [ false, %59 ], [ %70, %65 ]
  br i1 %72, label %73, label %77

73:                                               ; preds = %71
  call void @fio_sentinel_task(i8* null, i8* null)
  br label %74

74:                                               ; preds = %73
  %75 = load i32, i32* %3, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %3, align 4
  br label %59

77:                                               ; preds = %71
  br label %78

78:                                               ; preds = %77, %53
  call void @fio_worker_startup()
  call void @fio_worker_cleanup()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_signal_handler_setup() #0 {
  %1 = alloca %struct.sigaction, align 8
  %2 = call i32 @fio_trylock(i8* @fio_signal_set_flag)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  br label %29

5:                                                ; preds = %0
  %6 = bitcast %struct.sigaction* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 152, i1 false)
  %7 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 0
  %8 = bitcast %union.anon.0* %7 to void (i32)**
  store void (i32)* @sig_int_handler, void (i32)** %8, align 8
  %9 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 1
  %10 = call i32 @sigemptyset(%struct.__sigset_t* %9) #1
  %11 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 2
  store i32 268435457, i32* %11, align 8
  %12 = call i32 @sigaction(i32 2, %struct.sigaction* %1, %struct.sigaction* @fio_old_sig_int) #1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %5
  call void @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i64 0, i64 0))
  br label %29

15:                                               ; preds = %5
  %16 = call i32 @sigaction(i32 15, %struct.sigaction* %1, %struct.sigaction* @fio_old_sig_term) #1
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  call void @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i64 0, i64 0))
  br label %29

19:                                               ; preds = %15
  %20 = call i32 @sigaction(i32 10, %struct.sigaction* %1, %struct.sigaction* @fio_old_sig_usr1) #1
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i64 0, i64 0))
  br label %29

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %1, i32 0, i32 0
  %25 = bitcast %union.anon.0* %24 to void (i32)**
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %25, align 8
  %26 = call i32 @sigaction(i32 13, %struct.sigaction* %1, %struct.sigaction* @fio_old_sig_pipe) #1
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  call void @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i64 0, i64 0))
  br label %29

29:                                               ; preds = %4, %14, %18, %22, %28, %23
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sentinel_task(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 7
  %8 = load volatile i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  br label %17

11:                                               ; preds = %2
  call void @fio_state_callback_force(i32 2)
  call void @fio_lock(i8* @fio_fork_lock)
  %12 = call i8* @fio_thread_new(i8* (i8*)* @fio_sentinel_worker_thread, i8* @fio_fork_lock)
  store i8* %12, i8** %5, align 8
  %13 = load i8*, i8** %5, align 8
  call void @fio_thread_free(i8* %13)
  call void @fio_lock(i8* @fio_fork_lock)
  %14 = call i32 @fio_unlock(i8* @fio_fork_lock)
  call void @fio_state_callback_force(i32 3)
  call void @fio_state_callback_force(i32 5)
  %15 = load i8*, i8** %3, align 8
  %16 = load i8*, i8** %4, align 8
  br label %17

17:                                               ; preds = %11, %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_worker_startup() #0 {
  %1 = alloca %struct.fio_defer_task_s, align 8
  %2 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %3 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %2, i32 0, i32 4
  %4 = load i16, i16* %3, align 8
  %5 = zext i16 %4 to i32
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %13, label %7

7:                                                ; preds = %0
  %8 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %9 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %8, i32 0, i32 8
  %10 = load i8, i8* %9, align 2
  %11 = zext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %7, %0
  call void @fio_state_callback_force(i32 6)
  call void @fio_state_callback_clear(i32 6)
  br label %14

14:                                               ; preds = %13, %7
  %15 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %16 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %15, i32 0, i32 4
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %23

20:                                               ; preds = %14
  %21 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %22 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %21, i32 0, i32 8
  store i8 1, i8* %22, align 2
  br label %40

23:                                               ; preds = %14
  %24 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %25 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %24, i32 0, i32 8
  %26 = load i8, i8* %25, align 2
  %27 = icmp ne i8 %26, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %23
  br label %29

29:                                               ; preds = %28
  %30 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %31 = icmp sle i32 4, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.58, i64 0, i64 0), i32 %33)
  br label %34

34:                                               ; preds = %32, %29
  br label %35

35:                                               ; preds = %34
  br label %39

36:                                               ; preds = %23
  %37 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %38 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %37, i32 0, i32 5
  store i16 1, i16* %38, align 2
  br label %39

39:                                               ; preds = %36, %35
  br label %40

40:                                               ; preds = %39, %20
  %41 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %42 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %41, i32 0, i32 6
  store i8 1, i8* %42, align 4
  br label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %1, i32 0, i32 0
  store void (i8*, i8*)* @fio_cycle, void (i8*, i8*)** %44, align 8
  %45 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %1, i32 0, i32 1
  store i8* null, i8** %45, align 8
  %46 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %1, i32 0, i32 2
  store i8* null, i8** %46, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %1, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %47

47:                                               ; preds = %43
  %48 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %49 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %48, i32 0, i32 5
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = icmp sgt i32 %51, 1
  br i1 %52, label %53, label %59

53:                                               ; preds = %47
  %54 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %55 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %54, i32 0, i32 5
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  %58 = call %struct.fio_defer_thread_pool_s* @fio_defer_thread_pool_new(i64 %57)
  call void @fio_defer_thread_pool_join(%struct.fio_defer_thread_pool_s* %58)
  br label %60

59:                                               ; preds = %47
  call void @fio_defer_perform()
  br label %60

60:                                               ; preds = %59, %53
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_worker_cleanup() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.fio_defer_task_s, align 8
  %3 = alloca %struct.fio_defer_task_s, align 8
  %4 = alloca i64, align 8
  %5 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %6 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %5, i32 0, i32 8
  %7 = load i8, i8* %6, align 2
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %0
  br label %10

10:                                               ; preds = %9
  %11 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %12 = icmp sle i32 4, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0), i32 %14)
  br label %15

15:                                               ; preds = %13, %10
  br label %16

16:                                               ; preds = %15
  br label %24

17:                                               ; preds = %0
  br label %18

18:                                               ; preds = %17
  %19 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %20 = icmp sle i32 4, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.62, i64 0, i64 0))
  br label %22

22:                                               ; preds = %21, %18
  br label %23

23:                                               ; preds = %22
  br label %24

24:                                               ; preds = %23, %16
  call void @fio_state_callback_force(i32 8)
  store i64 0, i64* %1, align 8
  br label %25

25:                                               ; preds = %58, %24
  %26 = load i64, i64* %1, align 8
  %27 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %28 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %27, i32 0, i32 10
  %29 = load i32, i32* %28, align 8
  %30 = zext i32 %29 to i64
  %31 = icmp ule i64 %26, %30
  br i1 %31, label %32, label %61

32:                                               ; preds = %25
  %33 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %34 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %33, i32 0, i32 12
  %35 = load i64, i64* %1, align 8
  %36 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %34, i64 0, i64 %35
  %37 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %36, i32 0, i32 3
  %38 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %37, align 8
  %39 = icmp ne %struct.fio_protocol_s* %38, null
  br i1 %39, label %40, label %57

40:                                               ; preds = %32
  br label %41

41:                                               ; preds = %40
  %42 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_shutdown, void (i8*, i8*)** %42, align 8
  %43 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 1
  %44 = load i64, i64* %1, align 8
  %45 = shl i64 %44, 8
  %46 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %47 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %46, i32 0, i32 12
  %48 = load i64, i64* %1, align 8
  %49 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %47, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %49, i32 0, i32 9
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = or i64 %45, %52
  %54 = inttoptr i64 %53 to i8*
  store i8* %54, i8** %43, align 8
  %55 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 2
  store i8* null, i8** %55, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %2, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %56

56:                                               ; preds = %41
  br label %57

57:                                               ; preds = %56, %32
  br label %58

58:                                               ; preds = %57
  %59 = load i64, i64* %1, align 8
  %60 = add i64 %59, 1
  store i64 %60, i64* %1, align 8
  br label %25

61:                                               ; preds = %25
  br label %62

62:                                               ; preds = %61
  %63 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %3, i32 0, i32 0
  store void (i8*, i8*)* @fio_cycle_unwind, void (i8*, i8*)** %63, align 8
  %64 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %3, i32 0, i32 1
  store i8* null, i8** %64, align 8
  %65 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %3, i32 0, i32 2
  store i8* null, i8** %65, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %3, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %66

66:                                               ; preds = %62
  call void @fio_defer_perform()
  store i64 0, i64* %4, align 8
  br label %67

67:                                               ; preds = %103, %66
  %68 = load i64, i64* %4, align 8
  %69 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %70 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %69, i32 0, i32 10
  %71 = load i32, i32* %70, align 8
  %72 = zext i32 %71 to i64
  %73 = icmp ule i64 %68, %72
  br i1 %73, label %74, label %106

74:                                               ; preds = %67
  %75 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %76 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %75, i32 0, i32 12
  %77 = load i64, i64* %4, align 8
  %78 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %76, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %78, i32 0, i32 3
  %80 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %79, align 8
  %81 = icmp ne %struct.fio_protocol_s* %80, null
  br i1 %81, label %91, label %82

82:                                               ; preds = %74
  %83 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %84 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %83, i32 0, i32 12
  %85 = load i64, i64* %4, align 8
  %86 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %84, i64 0, i64 %85
  %87 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %86, i32 0, i32 11
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %102

91:                                               ; preds = %82, %74
  %92 = load i64, i64* %4, align 8
  %93 = shl i64 %92, 8
  %94 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %95 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %94, i32 0, i32 12
  %96 = load i64, i64* %4, align 8
  %97 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %95, i64 0, i64 %96
  %98 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %97, i32 0, i32 9
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = or i64 %93, %100
  call void @fio_force_close(i64 %101)
  br label %102

102:                                              ; preds = %91, %82
  br label %103

103:                                              ; preds = %102
  %104 = load i64, i64* %4, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %4, align 8
  br label %67

106:                                              ; preds = %67
  call void @fio_timer_clear_all()
  call void @fio_defer_perform()
  %107 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %108 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %107, i32 0, i32 8
  %109 = load i8, i8* %108, align 2
  %110 = icmp ne i8 %109, 0
  br i1 %110, label %117, label %111

111:                                              ; preds = %106
  call void @fio_cluster_signal_children()
  call void @fio_defer_perform()
  br label %112

112:                                              ; preds = %115, %111
  %113 = call i32 @wait(i32* null)
  %114 = icmp ne i32 %113, -1
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  br label %112

116:                                              ; preds = %112
  br label %117

117:                                              ; preds = %116, %106
  call void @fio_defer_perform()
  call void @fio_state_callback_force(i32 9)
  call void @fio_defer_perform()
  call void @fio_signal_handler_reset()
  %118 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %119 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %118, i32 0, i32 11
  %120 = load i32, i32* %119, align 4
  %121 = call i32 @getpid() #1
  %122 = icmp eq i32 %120, %121
  br i1 %122, label %123, label %130

123:                                              ; preds = %117
  br label %124

124:                                              ; preds = %123
  %125 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %126 = icmp sle i32 4, %125
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.63, i64 0, i64 0))
  br label %128

128:                                              ; preds = %127, %124
  br label %129

129:                                              ; preds = %128
  br label %138

130:                                              ; preds = %117
  br label %131

131:                                              ; preds = %130
  %132 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %133 = icmp sle i32 4, %132
  br i1 %133, label %134, label %136

134:                                              ; preds = %131
  %135 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.64, i64 0, i64 0), i32 %135)
  br label %136

136:                                              ; preds = %134, %131
  br label %137

137:                                              ; preds = %136
  br label %138

138:                                              ; preds = %137, %129
  ret void
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_atol_skip_zero(i8**) #0 {
  %2 = alloca i8**, align 8
  %3 = alloca i8*, align 8
  store i8** %0, i8*** %2, align 8
  %4 = load i8**, i8*** %2, align 8
  %5 = load i8*, i8** %4, align 8
  store i8* %5, i8** %3, align 8
  br label %6

6:                                                ; preds = %12, %1
  %7 = load i8**, i8*** %2, align 8
  %8 = load i8*, i8** %7, align 8
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 48
  br i1 %11, label %12, label %16

12:                                               ; preds = %6
  %13 = load i8**, i8*** %2, align 8
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %15, i8** %13, align 8
  br label %6

16:                                               ; preds = %6
  %17 = load i8**, i8*** %2, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = load i8*, i8** %3, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = sub i64 0, %22
  %24 = getelementptr inbounds i8, i8* %18, i64 %23
  %25 = ptrtoint i8* %24 to i64
  ret i64 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_atol_consume_hex(i8**) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8**, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  store i8** %0, i8*** %3, align 8
  store i64 0, i64* %4, align 8
  store i64 -257, i64* %5, align 8
  br label %7

7:                                                ; preds = %71, %1
  %8 = load i64, i64* %4, align 8
  %9 = icmp ule i64 %8, -257
  br i1 %9, label %10, label %80

10:                                               ; preds = %7
  %11 = load i8**, i8*** %3, align 8
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp sge i32 %14, 48
  br i1 %15, label %16, label %29

16:                                               ; preds = %10
  %17 = load i8**, i8*** %3, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp sle i32 %20, 57
  br i1 %21, label %22, label %29

22:                                               ; preds = %16
  %23 = load i8**, i8*** %3, align 8
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = sub nsw i32 %26, 48
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %6, align 1
  br label %71

29:                                               ; preds = %16, %10
  %30 = load i8**, i8*** %3, align 8
  %31 = load i8*, i8** %30, align 8
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp sge i32 %33, 65
  br i1 %34, label %35, label %48

35:                                               ; preds = %29
  %36 = load i8**, i8*** %3, align 8
  %37 = load i8*, i8** %36, align 8
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp sle i32 %39, 70
  br i1 %40, label %41, label %48

41:                                               ; preds = %35
  %42 = load i8**, i8*** %3, align 8
  %43 = load i8*, i8** %42, align 8
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = sub nsw i32 %45, 55
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %6, align 1
  br label %70

48:                                               ; preds = %35, %29
  %49 = load i8**, i8*** %3, align 8
  %50 = load i8*, i8** %49, align 8
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp sge i32 %52, 97
  br i1 %53, label %54, label %67

54:                                               ; preds = %48
  %55 = load i8**, i8*** %3, align 8
  %56 = load i8*, i8** %55, align 8
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp sle i32 %58, 102
  br i1 %59, label %60, label %67

60:                                               ; preds = %54
  %61 = load i8**, i8*** %3, align 8
  %62 = load i8*, i8** %61, align 8
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = sub nsw i32 %64, 87
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %6, align 1
  br label %69

67:                                               ; preds = %54, %48
  %68 = load i64, i64* %4, align 8
  store i64 %68, i64* %2, align 8
  br label %82

69:                                               ; preds = %60
  br label %70

70:                                               ; preds = %69, %41
  br label %71

71:                                               ; preds = %70, %22
  %72 = load i64, i64* %4, align 8
  %73 = shl i64 %72, 4
  %74 = load i8, i8* %6, align 1
  %75 = zext i8 %74 to i64
  %76 = or i64 %73, %75
  store i64 %76, i64* %4, align 8
  %77 = load i8**, i8*** %3, align 8
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %79, i8** %77, align 8
  br label %7

80:                                               ; preds = %7
  %81 = load i64, i64* %4, align 8
  store i64 %81, i64* %2, align 8
  br label %82

82:                                               ; preds = %80, %67
  %83 = load i64, i64* %2, align 8
  ret i64 %83
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @fio_atol_skip_hex_test(i8**) #0 {
  %2 = alloca i8**, align 8
  store i8** %0, i8*** %2, align 8
  %3 = load i8**, i8*** %2, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp sge i32 %6, 48
  br i1 %7, label %8, label %14

8:                                                ; preds = %1
  %9 = load i8**, i8*** %2, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp sle i32 %12, 57
  br i1 %13, label %40, label %14

14:                                               ; preds = %8, %1
  %15 = load i8**, i8*** %2, align 8
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp sge i32 %18, 65
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = load i8**, i8*** %2, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp sle i32 %24, 70
  br i1 %25, label %40, label %26

26:                                               ; preds = %20, %14
  %27 = load i8**, i8*** %2, align 8
  %28 = load i8*, i8** %27, align 8
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp sge i32 %30, 97
  br i1 %31, label %32, label %38

32:                                               ; preds = %26
  %33 = load i8**, i8*** %2, align 8
  %34 = load i8*, i8** %33, align 8
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp sle i32 %36, 102
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i1 [ false, %26 ], [ %37, %32 ]
  br label %40

40:                                               ; preds = %38, %20, %8
  %41 = phi i1 [ true, %20 ], [ true, %8 ], [ %39, %38 ]
  %42 = zext i1 %41 to i32
  %43 = trunc i32 %42 to i8
  ret i8 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_atol_consume(i8**, i8 zeroext) #0 {
  %3 = alloca i8**, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8** %0, i8*** %3, align 8
  store i8 %1, i8* %4, align 1
  store i64 0, i64* %5, align 8
  %7 = load i8, i8* %4, align 1
  %8 = zext i8 %7 to i32
  %9 = load i8, i8* %4, align 1
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %8, %10
  %12 = sext i32 %11 to i64
  %13 = sub i64 -1, %12
  store i64 %13, i64* %6, align 8
  br label %14

14:                                               ; preds = %35, %2
  %15 = load i8**, i8*** %3, align 8
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp sge i32 %18, 48
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = load i8**, i8*** %3, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = load i8, i8* %4, align 1
  %26 = zext i8 %25 to i32
  %27 = add nsw i32 48, %26
  %28 = icmp slt i32 %24, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %20
  %30 = load i64, i64* %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = icmp ule i64 %30, %31
  br label %33

33:                                               ; preds = %29, %20, %14
  %34 = phi i1 [ false, %20 ], [ false, %14 ], [ %32, %29 ]
  br i1 %34, label %35, label %50

35:                                               ; preds = %33
  %36 = load i64, i64* %5, align 8
  %37 = load i8, i8* %4, align 1
  %38 = zext i8 %37 to i64
  %39 = mul i64 %36, %38
  %40 = load i8**, i8*** %3, align 8
  %41 = load i8*, i8** %40, align 8
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = sub nsw i32 %43, 48
  %45 = sext i32 %44 to i64
  %46 = add i64 %39, %45
  store i64 %46, i64* %5, align 8
  %47 = load i8**, i8*** %3, align 8
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %49, i8** %47, align 8
  br label %14

50:                                               ; preds = %33
  %51 = load i64, i64* %5, align 8
  ret i64 %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @fio_atol_skip_test(i8**, i8 zeroext) #0 {
  %3 = alloca i8**, align 8
  %4 = alloca i8, align 1
  store i8** %0, i8*** %3, align 8
  store i8 %1, i8* %4, align 1
  %5 = load i8**, i8*** %3, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp sge i32 %8, 48
  br i1 %9, label %10, label %19

10:                                               ; preds = %2
  %11 = load i8**, i8*** %3, align 8
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = load i8, i8* %4, align 1
  %16 = zext i8 %15 to i32
  %17 = add nsw i32 48, %16
  %18 = icmp slt i32 %14, %17
  br label %19

19:                                               ; preds = %10, %2
  %20 = phi i1 [ false, %2 ], [ %18, %10 ]
  %21 = zext i1 %20 to i32
  %22 = trunc i32 %21 to i8
  ret i8 %22
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @fio_atof(i8**) #0 {
  %2 = alloca i8**, align 8
  store i8** %0, i8*** %2, align 8
  %3 = load i8**, i8*** %2, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8**, i8*** %2, align 8
  %6 = call x86_fp80 @strtold(i8* %4, i8** %5) #1
  %7 = fptrunc x86_fp80 %6 to double
  ret double %7
}

; Function Attrs: nounwind
declare dso_local x86_fp80 @strtold(i8*, i8**) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_ltoa(i8*, i64, i8 zeroext) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca [16 x i8], align 16
  %9 = alloca i64, align 8
  %10 = alloca [48 x i8], align 16
  %11 = alloca i64, align 8
  %12 = alloca i8, align 1
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i8 %2, i8* %7, align 1
  %21 = bitcast [16 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %21, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.fio_ltoa.notation, i32 0, i32 0), i64 16, i1 false)
  store i64 0, i64* %9, align 8
  %22 = load i64, i64* %6, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %3
  br label %311

25:                                               ; preds = %3
  %26 = load i8, i8* %7, align 1
  %27 = zext i8 %26 to i32
  switch i32 %27, label %264 [
    i32 1, label %28
    i32 2, label %28
    i32 8, label %86
    i32 16, label %133
    i32 3, label %214
    i32 4, label %214
    i32 5, label %214
    i32 6, label %214
    i32 7, label %214
    i32 9, label %214
  ]

28:                                               ; preds = %25, %25
  %29 = load i64, i64* %6, align 8
  store i64 %29, i64* %11, align 8
  store i8 0, i8* %12, align 1
  %30 = load i8*, i8** %5, align 8
  %31 = load i64, i64* %9, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %9, align 8
  %33 = getelementptr inbounds i8, i8* %30, i64 %31
  store i8 48, i8* %33, align 1
  %34 = load i8*, i8** %5, align 8
  %35 = load i64, i64* %9, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %9, align 8
  %37 = getelementptr inbounds i8, i8* %34, i64 %35
  store i8 98, i8* %37, align 1
  br label %38

38:                                               ; preds = %48, %28
  %39 = load i8, i8* %12, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp slt i32 %40, 64
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = load i64, i64* %11, align 8
  %44 = and i64 %43, -9223372036854775808
  %45 = icmp eq i64 %44, 0
  br label %46

46:                                               ; preds = %42, %38
  %47 = phi i1 [ false, %38 ], [ %45, %42 ]
  br i1 %47, label %48, label %53

48:                                               ; preds = %46
  %49 = load i64, i64* %11, align 8
  %50 = shl i64 %49, 1
  store i64 %50, i64* %11, align 8
  %51 = load i8, i8* %12, align 1
  %52 = add i8 %51, 1
  store i8 %52, i8* %12, align 1
  br label %38

53:                                               ; preds = %46
  %54 = load i8, i8* %12, align 1
  %55 = icmp ne i8 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %53
  %57 = load i8*, i8** %5, align 8
  %58 = load i64, i64* %9, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %9, align 8
  %60 = getelementptr inbounds i8, i8* %57, i64 %58
  store i8 48, i8* %60, align 1
  br label %61

61:                                               ; preds = %56, %53
  br label %62

62:                                               ; preds = %66, %61
  %63 = load i8, i8* %12, align 1
  %64 = zext i8 %63 to i32
  %65 = icmp slt i32 %64, 64
  br i1 %65, label %66, label %81

66:                                               ; preds = %62
  %67 = load i64, i64* %11, align 8
  %68 = and i64 %67, -9223372036854775808
  %69 = icmp ne i64 %68, 0
  %70 = zext i1 %69 to i64
  %71 = select i1 %69, i32 49, i32 48
  %72 = trunc i32 %71 to i8
  %73 = load i8*, i8** %5, align 8
  %74 = load i64, i64* %9, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %9, align 8
  %76 = getelementptr inbounds i8, i8* %73, i64 %74
  store i8 %72, i8* %76, align 1
  %77 = load i64, i64* %11, align 8
  %78 = shl i64 %77, 1
  store i64 %78, i64* %11, align 8
  %79 = load i8, i8* %12, align 1
  %80 = add i8 %79, 1
  store i8 %80, i8* %12, align 1
  br label %62

81:                                               ; preds = %62
  %82 = load i8*, i8** %5, align 8
  %83 = load i64, i64* %9, align 8
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 0, i8* %84, align 1
  %85 = load i64, i64* %9, align 8
  store i64 %85, i64* %4, align 8
  br label %350

86:                                               ; preds = %25
  store i64 0, i64* %13, align 8
  %87 = load i64, i64* %6, align 8
  %88 = icmp slt i64 %87, 0
  br i1 %88, label %89, label %96

89:                                               ; preds = %86
  %90 = load i8*, i8** %5, align 8
  %91 = load i64, i64* %9, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %9, align 8
  %93 = getelementptr inbounds i8, i8* %90, i64 %91
  store i8 45, i8* %93, align 1
  %94 = load i64, i64* %6, align 8
  %95 = sub nsw i64 0, %94
  store i64 %95, i64* %6, align 8
  br label %96

96:                                               ; preds = %89, %86
  %97 = load i8*, i8** %5, align 8
  %98 = load i64, i64* %9, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %9, align 8
  %100 = getelementptr inbounds i8, i8* %97, i64 %98
  store i8 48, i8* %100, align 1
  br label %101

101:                                              ; preds = %104, %96
  %102 = load i64, i64* %6, align 8
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %101
  %105 = load i64, i64* %6, align 8
  %106 = and i64 %105, 7
  %107 = add nsw i64 48, %106
  %108 = trunc i64 %107 to i8
  %109 = load i64, i64* %13, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %13, align 8
  %111 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %109
  store i8 %108, i8* %111, align 1
  %112 = load i64, i64* %6, align 8
  %113 = ashr i64 %112, 3
  store i64 %113, i64* %6, align 8
  br label %101

114:                                              ; preds = %101
  br label %115

115:                                              ; preds = %118, %114
  %116 = load i64, i64* %13, align 8
  %117 = icmp ne i64 %116, 0
  br i1 %117, label %118, label %128

118:                                              ; preds = %115
  %119 = load i64, i64* %13, align 8
  %120 = add i64 %119, -1
  store i64 %120, i64* %13, align 8
  %121 = load i64, i64* %13, align 8
  %122 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = load i8*, i8** %5, align 8
  %125 = load i64, i64* %9, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %9, align 8
  %127 = getelementptr inbounds i8, i8* %124, i64 %125
  store i8 %123, i8* %127, align 1
  br label %115

128:                                              ; preds = %115
  %129 = load i8*, i8** %5, align 8
  %130 = load i64, i64* %9, align 8
  %131 = getelementptr inbounds i8, i8* %129, i64 %130
  store i8 0, i8* %131, align 1
  %132 = load i64, i64* %9, align 8
  store i64 %132, i64* %4, align 8
  br label %350

133:                                              ; preds = %25
  %134 = load i64, i64* %6, align 8
  store i64 %134, i64* %14, align 8
  store i8 0, i8* %15, align 1
  %135 = load i8*, i8** %5, align 8
  %136 = load i64, i64* %9, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %9, align 8
  %138 = getelementptr inbounds i8, i8* %135, i64 %136
  store i8 48, i8* %138, align 1
  %139 = load i8*, i8** %5, align 8
  %140 = load i64, i64* %9, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %9, align 8
  %142 = getelementptr inbounds i8, i8* %139, i64 %140
  store i8 120, i8* %142, align 1
  br label %143

143:                                              ; preds = %153, %133
  %144 = load i8, i8* %15, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp slt i32 %145, 8
  br i1 %146, label %147, label %151

147:                                              ; preds = %143
  %148 = load i64, i64* %14, align 8
  %149 = and i64 %148, -72057594037927936
  %150 = icmp eq i64 %149, 0
  br label %151

151:                                              ; preds = %147, %143
  %152 = phi i1 [ false, %143 ], [ %150, %147 ]
  br i1 %152, label %153, label %158

153:                                              ; preds = %151
  %154 = load i64, i64* %14, align 8
  %155 = shl i64 %154, 8
  store i64 %155, i64* %14, align 8
  %156 = load i8, i8* %15, align 1
  %157 = add i8 %156, 1
  store i8 %157, i8* %15, align 1
  br label %143

158:                                              ; preds = %151
  %159 = load i8, i8* %15, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %162, label %175

162:                                              ; preds = %158
  %163 = load i64, i64* %14, align 8
  %164 = and i64 %163, -9223372036854775808
  %165 = icmp ne i64 %164, 0
  br i1 %165, label %166, label %175

166:                                              ; preds = %162
  %167 = load i8*, i8** %5, align 8
  %168 = load i64, i64* %9, align 8
  %169 = add i64 %168, 1
  store i64 %169, i64* %9, align 8
  %170 = getelementptr inbounds i8, i8* %167, i64 %168
  store i8 48, i8* %170, align 1
  %171 = load i8*, i8** %5, align 8
  %172 = load i64, i64* %9, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %9, align 8
  %174 = getelementptr inbounds i8, i8* %171, i64 %172
  store i8 48, i8* %174, align 1
  br label %175

175:                                              ; preds = %166, %162, %158
  br label %176

176:                                              ; preds = %180, %175
  %177 = load i8, i8* %15, align 1
  %178 = zext i8 %177 to i32
  %179 = icmp slt i32 %178, 8
  br i1 %179, label %180, label %209

180:                                              ; preds = %176
  %181 = load i64, i64* %14, align 8
  %182 = and i64 %181, -1152921504606846976
  %183 = lshr i64 %182, 60
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %16, align 1
  %185 = load i8, i8* %16, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = load i8*, i8** %5, align 8
  %190 = load i64, i64* %9, align 8
  %191 = add i64 %190, 1
  store i64 %191, i64* %9, align 8
  %192 = getelementptr inbounds i8, i8* %189, i64 %190
  store i8 %188, i8* %192, align 1
  %193 = load i64, i64* %14, align 8
  %194 = and i64 %193, 1080863910568919040
  %195 = lshr i64 %194, 56
  %196 = trunc i64 %195 to i8
  store i8 %196, i8* %16, align 1
  %197 = load i8, i8* %16, align 1
  %198 = zext i8 %197 to i64
  %199 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = load i8*, i8** %5, align 8
  %202 = load i64, i64* %9, align 8
  %203 = add i64 %202, 1
  store i64 %203, i64* %9, align 8
  %204 = getelementptr inbounds i8, i8* %201, i64 %202
  store i8 %200, i8* %204, align 1
  %205 = load i8, i8* %15, align 1
  %206 = add i8 %205, 1
  store i8 %206, i8* %15, align 1
  %207 = load i64, i64* %14, align 8
  %208 = shl i64 %207, 8
  store i64 %208, i64* %14, align 8
  br label %176

209:                                              ; preds = %176
  %210 = load i8*, i8** %5, align 8
  %211 = load i64, i64* %9, align 8
  %212 = getelementptr inbounds i8, i8* %210, i64 %211
  store i8 0, i8* %212, align 1
  %213 = load i64, i64* %9, align 8
  store i64 %213, i64* %4, align 8
  br label %350

214:                                              ; preds = %25, %25, %25, %25, %25, %25
  %215 = load i64, i64* %6, align 8
  %216 = icmp slt i64 %215, 0
  br i1 %216, label %217, label %224

217:                                              ; preds = %214
  %218 = load i8*, i8** %5, align 8
  %219 = load i64, i64* %9, align 8
  %220 = add i64 %219, 1
  store i64 %220, i64* %9, align 8
  %221 = getelementptr inbounds i8, i8* %218, i64 %219
  store i8 45, i8* %221, align 1
  %222 = load i64, i64* %6, align 8
  %223 = sub nsw i64 0, %222
  store i64 %223, i64* %6, align 8
  br label %224

224:                                              ; preds = %217, %214
  store i64 0, i64* %17, align 8
  br label %225

225:                                              ; preds = %228, %224
  %226 = load i64, i64* %6, align 8
  %227 = icmp ne i64 %226, 0
  br i1 %227, label %228, label %245

228:                                              ; preds = %225
  %229 = load i64, i64* %6, align 8
  %230 = load i8, i8* %7, align 1
  %231 = zext i8 %230 to i64
  %232 = sdiv i64 %229, %231
  store i64 %232, i64* %18, align 8
  %233 = load i64, i64* %6, align 8
  %234 = load i64, i64* %18, align 8
  %235 = load i8, i8* %7, align 1
  %236 = zext i8 %235 to i64
  %237 = mul i64 %234, %236
  %238 = sub i64 %233, %237
  %239 = add i64 48, %238
  %240 = trunc i64 %239 to i8
  %241 = load i64, i64* %17, align 8
  %242 = add i64 %241, 1
  store i64 %242, i64* %17, align 8
  %243 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %241
  store i8 %240, i8* %243, align 1
  %244 = load i64, i64* %18, align 8
  store i64 %244, i64* %6, align 8
  br label %225

245:                                              ; preds = %225
  br label %246

246:                                              ; preds = %249, %245
  %247 = load i64, i64* %17, align 8
  %248 = icmp ne i64 %247, 0
  br i1 %248, label %249, label %259

249:                                              ; preds = %246
  %250 = load i64, i64* %17, align 8
  %251 = add i64 %250, -1
  store i64 %251, i64* %17, align 8
  %252 = load i64, i64* %17, align 8
  %253 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = load i8*, i8** %5, align 8
  %256 = load i64, i64* %9, align 8
  %257 = add i64 %256, 1
  store i64 %257, i64* %9, align 8
  %258 = getelementptr inbounds i8, i8* %255, i64 %256
  store i8 %254, i8* %258, align 1
  br label %246

259:                                              ; preds = %246
  %260 = load i8*, i8** %5, align 8
  %261 = load i64, i64* %9, align 8
  %262 = getelementptr inbounds i8, i8* %260, i64 %261
  store i8 0, i8* %262, align 1
  %263 = load i64, i64* %9, align 8
  store i64 %263, i64* %4, align 8
  br label %350

264:                                              ; preds = %25
  br label %265

265:                                              ; preds = %264
  %266 = load i64, i64* %6, align 8
  %267 = icmp slt i64 %266, 0
  br i1 %267, label %268, label %275

268:                                              ; preds = %265
  %269 = load i8*, i8** %5, align 8
  %270 = load i64, i64* %9, align 8
  %271 = add i64 %270, 1
  store i64 %271, i64* %9, align 8
  %272 = getelementptr inbounds i8, i8* %269, i64 %270
  store i8 45, i8* %272, align 1
  %273 = load i64, i64* %6, align 8
  %274 = sub nsw i64 0, %273
  store i64 %274, i64* %6, align 8
  br label %275

275:                                              ; preds = %268, %265
  store i64 0, i64* %19, align 8
  br label %276

276:                                              ; preds = %279, %275
  %277 = load i64, i64* %6, align 8
  %278 = icmp ne i64 %277, 0
  br i1 %278, label %279, label %292

279:                                              ; preds = %276
  %280 = load i64, i64* %6, align 8
  %281 = sdiv i64 %280, 10
  store i64 %281, i64* %20, align 8
  %282 = load i64, i64* %6, align 8
  %283 = load i64, i64* %20, align 8
  %284 = mul i64 %283, 10
  %285 = sub i64 %282, %284
  %286 = add i64 48, %285
  %287 = trunc i64 %286 to i8
  %288 = load i64, i64* %19, align 8
  %289 = add i64 %288, 1
  store i64 %289, i64* %19, align 8
  %290 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %288
  store i8 %287, i8* %290, align 1
  %291 = load i64, i64* %20, align 8
  store i64 %291, i64* %6, align 8
  br label %276

292:                                              ; preds = %276
  br label %293

293:                                              ; preds = %296, %292
  %294 = load i64, i64* %19, align 8
  %295 = icmp ne i64 %294, 0
  br i1 %295, label %296, label %306

296:                                              ; preds = %293
  %297 = load i64, i64* %19, align 8
  %298 = add i64 %297, -1
  store i64 %298, i64* %19, align 8
  %299 = load i64, i64* %19, align 8
  %300 = getelementptr inbounds [48 x i8], [48 x i8]* %10, i64 0, i64 %299
  %301 = load i8, i8* %300, align 1
  %302 = load i8*, i8** %5, align 8
  %303 = load i64, i64* %9, align 8
  %304 = add i64 %303, 1
  store i64 %304, i64* %9, align 8
  %305 = getelementptr inbounds i8, i8* %302, i64 %303
  store i8 %301, i8* %305, align 1
  br label %293

306:                                              ; preds = %293
  %307 = load i8*, i8** %5, align 8
  %308 = load i64, i64* %9, align 8
  %309 = getelementptr inbounds i8, i8* %307, i64 %308
  store i8 0, i8* %309, align 1
  %310 = load i64, i64* %9, align 8
  store i64 %310, i64* %4, align 8
  br label %350

311:                                              ; preds = %24
  %312 = load i8, i8* %7, align 1
  %313 = zext i8 %312 to i32
  switch i32 %313, label %341 [
    i32 1, label %314
    i32 2, label %314
    i32 8, label %323
    i32 16, label %328
  ]

314:                                              ; preds = %311, %311
  %315 = load i8*, i8** %5, align 8
  %316 = load i64, i64* %9, align 8
  %317 = add i64 %316, 1
  store i64 %317, i64* %9, align 8
  %318 = getelementptr inbounds i8, i8* %315, i64 %316
  store i8 48, i8* %318, align 1
  %319 = load i8*, i8** %5, align 8
  %320 = load i64, i64* %9, align 8
  %321 = add i64 %320, 1
  store i64 %321, i64* %9, align 8
  %322 = getelementptr inbounds i8, i8* %319, i64 %320
  store i8 98, i8* %322, align 1
  br label %341

323:                                              ; preds = %311
  %324 = load i8*, i8** %5, align 8
  %325 = load i64, i64* %9, align 8
  %326 = add i64 %325, 1
  store i64 %326, i64* %9, align 8
  %327 = getelementptr inbounds i8, i8* %324, i64 %325
  store i8 48, i8* %327, align 1
  br label %341

328:                                              ; preds = %311
  %329 = load i8*, i8** %5, align 8
  %330 = load i64, i64* %9, align 8
  %331 = add i64 %330, 1
  store i64 %331, i64* %9, align 8
  %332 = getelementptr inbounds i8, i8* %329, i64 %330
  store i8 48, i8* %332, align 1
  %333 = load i8*, i8** %5, align 8
  %334 = load i64, i64* %9, align 8
  %335 = add i64 %334, 1
  store i64 %335, i64* %9, align 8
  %336 = getelementptr inbounds i8, i8* %333, i64 %334
  store i8 120, i8* %336, align 1
  %337 = load i8*, i8** %5, align 8
  %338 = load i64, i64* %9, align 8
  %339 = add i64 %338, 1
  store i64 %339, i64* %9, align 8
  %340 = getelementptr inbounds i8, i8* %337, i64 %338
  store i8 48, i8* %340, align 1
  br label %341

341:                                              ; preds = %311, %328, %323, %314
  %342 = load i8*, i8** %5, align 8
  %343 = load i64, i64* %9, align 8
  %344 = add i64 %343, 1
  store i64 %344, i64* %9, align 8
  %345 = getelementptr inbounds i8, i8* %342, i64 %343
  store i8 48, i8* %345, align 1
  %346 = load i8*, i8** %5, align 8
  %347 = load i64, i64* %9, align 8
  %348 = getelementptr inbounds i8, i8* %346, i64 %347
  store i8 0, i8* %348, align 1
  %349 = load i64, i64* %9, align 8
  store i64 %349, i64* %4, align 8
  br label %350

350:                                              ; preds = %341, %306, %259, %209, %128, %81
  %351 = load i64, i64* %4, align 8
  ret i64 %351
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_ftoa(i8*, double, i8 zeroext) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca double, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store double %1, double* %6, align 8
  store i8 %2, i8* %7, align 1
  %12 = load i8, i8* %7, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %19, label %15

15:                                               ; preds = %3
  %16 = load i8, i8* %7, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 16
  br i1 %18, label %19, label %27

19:                                               ; preds = %15, %3
  %20 = bitcast double* %6 to i8*
  %21 = bitcast i8* %20 to i64*
  store i64* %21, i64** %8, align 8
  %22 = load i8*, i8** %5, align 8
  %23 = load i64*, i64** %8, align 8
  %24 = load i64, i64* %23, align 8
  %25 = load i8, i8* %7, align 1
  %26 = call i64 @fio_ltoa(i8* %22, i64 %24, i8 zeroext %25)
  store i64 %26, i64* %4, align 8
  br label %72

27:                                               ; preds = %15
  %28 = load i8*, i8** %5, align 8
  %29 = load double, double* %6, align 8
  %30 = call i32 (i8*, i8*, ...) @sprintf(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0), double %29) #1
  %31 = sext i32 %30 to i64
  store i64 %31, i64* %9, align 8
  store i8 1, i8* %10, align 1
  %32 = load i8*, i8** %5, align 8
  store i8* %32, i8** %11, align 8
  br label %33

33:                                               ; preds = %55, %27
  %34 = load i8*, i8** %11, align 8
  %35 = load i8, i8* %34, align 1
  %36 = icmp ne i8 %35, 0
  br i1 %36, label %37, label %58

37:                                               ; preds = %33
  %38 = load i8*, i8** %11, align 8
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 44
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = load i8*, i8** %11, align 8
  store i8 46, i8* %43, align 1
  br label %44

44:                                               ; preds = %42, %37
  %45 = load i8*, i8** %11, align 8
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp eq i32 %47, 46
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = load i8*, i8** %11, align 8
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 101
  br i1 %53, label %54, label %55

54:                                               ; preds = %49, %44
  store i8 0, i8* %10, align 1
  br label %58

55:                                               ; preds = %49
  %56 = load i8*, i8** %11, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %11, align 8
  br label %33

58:                                               ; preds = %54, %33
  %59 = load i8, i8* %10, align 1
  %60 = icmp ne i8 %59, 0
  br i1 %60, label %61, label %70

61:                                               ; preds = %58
  %62 = load i8*, i8** %5, align 8
  %63 = load i64, i64* %9, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %9, align 8
  %65 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8 46, i8* %65, align 1
  %66 = load i8*, i8** %5, align 8
  %67 = load i64, i64* %9, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %9, align 8
  %69 = getelementptr inbounds i8, i8* %66, i64 %67
  store i8 48, i8* %69, align 1
  br label %70

70:                                               ; preds = %61, %58
  %71 = load i64, i64* %9, align 8
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %19
  %73 = load i64, i64* %4, align 8
  ret i64 %73
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local i64 @fio_tls_alpn_count(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  ret i64 0
}

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @fio_tls_accept(i64, i8*, i8*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i64 %0, i64* %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  br label %7

7:                                                ; preds = %3
  %8 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %9 = icmp sle i32 1, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i64 0, i64 0))
  br label %11

11:                                               ; preds = %10, %7
  br label %12

12:                                               ; preds = %11
  call void @exit(i32 -1) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @fio_tls_connect(i64, i8*, i8*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i64 %0, i64* %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  br label %7

7:                                                ; preds = %3
  %8 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %9 = icmp sle i32 1, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i64 0, i64 0))
  br label %11

11:                                               ; preds = %10, %7
  br label %12

12:                                               ; preds = %11
  call void @exit(i32 -1) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @fio_tls_dup(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  br label %3

3:                                                ; preds = %1
  %4 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %5 = icmp sle i32 1, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i64 0, i64 0))
  br label %7

7:                                                ; preds = %6, %3
  br label %8

8:                                                ; preds = %7
  call void @exit(i32 -1) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define weak dso_local void @fio_tls_destroy(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  br label %3

3:                                                ; preds = %1
  %4 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %5 = icmp sle i32 1, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i64 0, i64 0))
  br label %7

7:                                                ; preds = %6, %3
  br label %8

8:                                                ; preds = %7
  call void @exit(i32 -1) #11
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_listen(%struct.fio_listen_args* byval(%struct.fio_listen_args) align 8) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_listen_protocol_s*, align 8
  %8 = alloca %struct.fio_listen_protocol_s, align 8
  %9 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 0
  %10 = load void (i64, i8*)*, void (i64, i8*)** %9, align 8
  %11 = icmp ne void (i64, i8*)* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %29

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = call i64 @fio_tls_alpn_count(i8* %18)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %16, %1
  %22 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %23 = load i8*, i8** %22, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %25, %16, %12
  %30 = call i32* @__errno_location() #9
  store i32 22, i32* %30, align 4
  br label %218

31:                                               ; preds = %25, %21
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  %32 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %33 = load i8*, i8** %32, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %39

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i64 @strlen(i8* %37) #10
  store i64 %38, i64* %3, align 8
  br label %39

39:                                               ; preds = %35, %31
  %40 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, null
  br i1 %42, label %43, label %60

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i64 @strlen(i8* %45) #10
  store i64 %46, i64* %4, align 8
  %47 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  store i8* %48, i8** %5, align 8
  %49 = call i64 @fio_atol(i8** %5)
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %43
  store i64 0, i64* %4, align 8
  %52 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  store i8* null, i8** %52, align 8
  br label %53

53:                                               ; preds = %51, %43
  %54 = load i8*, i8** %5, align 8
  %55 = load i8, i8* %54, align 1
  %56 = icmp ne i8 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = call i32* @__errno_location() #9
  store i32 22, i32* %58, align 4
  br label %218

59:                                               ; preds = %53
  br label %60

60:                                               ; preds = %59, %39
  %61 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = call i64 @fio_socket(i8* %62, i8* %64, i8 zeroext 1)
  store i64 %65, i64* %6, align 8
  %66 = load i64, i64* %6, align 8
  %67 = icmp eq i64 %66, -1
  br i1 %67, label %68, label %69

68:                                               ; preds = %60
  br label %218

69:                                               ; preds = %60
  %70 = load i64, i64* %3, align 8
  %71 = add i64 128, %70
  %72 = load i64, i64* %4, align 8
  %73 = add i64 %71, %72
  %74 = load i64, i64* %3, align 8
  %75 = load i64, i64* %4, align 8
  %76 = add i64 %74, %75
  %77 = icmp ne i64 %76, 0
  %78 = zext i1 %77 to i64
  %79 = select i1 %77, i32 2, i32 0
  %80 = sext i32 %79 to i64
  %81 = add i64 %73, %80
  %82 = call noalias i8* @malloc(i64 %81) #1
  %83 = bitcast i8* %82 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %83, %struct.fio_listen_protocol_s** %7, align 8
  %84 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %85 = icmp ne %struct.fio_listen_protocol_s* %84, null
  br i1 %85, label %96, label %86

86:                                               ; preds = %69
  br label %87

87:                                               ; preds = %86
  %88 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %89 = icmp sle i32 1, %88
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.32, i64 0, i64 0))
  br label %91

91:                                               ; preds = %90, %87
  br label %92

92:                                               ; preds = %91
  %93 = call i32 @kill(i32 0, i32 2) #1
  %94 = call i32* @__errno_location() #9
  %95 = load i32, i32* %94, align 4
  call void @exit(i32 %95) #11
  unreachable

96:                                               ; preds = %69
  %97 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %98 = load i8*, i8** %97, align 8
  %99 = icmp ne i8* %98, null
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %102 = load i8*, i8** %101, align 8
  call void @fio_tls_dup(i8* %102)
  br label %103

103:                                              ; preds = %100, %96
  %104 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %105 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 0
  %106 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %108 = load i8*, i8** %107, align 8
  %109 = icmp ne i8* %108, null
  br i1 %109, label %110, label %117

110:                                              ; preds = %103
  %111 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %112 = load i8*, i8** %111, align 8
  %113 = call i64 @fio_tls_alpn_count(i8* %112)
  %114 = icmp ne i64 %113, 0
  %115 = zext i1 %114 to i64
  %116 = select i1 %114, void (i64, %struct.fio_protocol_s*)* @fio_listen_on_data_tls_alpn, void (i64, %struct.fio_protocol_s*)* @fio_listen_on_data_tls
  br label %118

117:                                              ; preds = %103
  br label %118

118:                                              ; preds = %117, %110
  %119 = phi void (i64, %struct.fio_protocol_s*)* [ %116, %110 ], [ @fio_listen_on_data, %117 ]
  store void (i64, %struct.fio_protocol_s*)* %119, void (i64, %struct.fio_protocol_s*)** %106, align 8
  %120 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* null, void (i64, %struct.fio_protocol_s*)** %120, align 8
  %121 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 2
  store i8 (i64, %struct.fio_protocol_s*)* null, i8 (i64, %struct.fio_protocol_s*)** %121, align 8
  %122 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 3
  store void (i64, %struct.fio_protocol_s*)* @fio_listen_on_close, void (i64, %struct.fio_protocol_s*)** %122, align 8
  %123 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping_eternal, void (i64, %struct.fio_protocol_s*)** %123, align 8
  %124 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %105, i32 0, i32 5
  store i64 0, i64* %124, align 8
  %125 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 1
  %126 = load i64, i64* %6, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 2
  %128 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 4
  %129 = load i8*, i8** %128, align 8
  store i8* %129, i8** %127, align 8
  %130 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 3
  %131 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 0
  %132 = load void (i64, i8*)*, void (i64, i8*)** %131, align 8
  store void (i64, i8*)* %132, void (i64, i8*)** %130, align 8
  %133 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 4
  %134 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 5
  %135 = load void (i64, i8*)*, void (i64, i8*)** %134, align 8
  store void (i64, i8*)* %135, void (i64, i8*)** %133, align 8
  %136 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 5
  %137 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 6
  %138 = load void (i64, i8*)*, void (i64, i8*)** %137, align 8
  store void (i64, i8*)* %138, void (i64, i8*)** %136, align 8
  %139 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 6
  %140 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %141 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %140, i64 1
  %142 = bitcast %struct.fio_listen_protocol_s* %141 to i8*
  %143 = load i64, i64* %3, align 8
  %144 = getelementptr inbounds i8, i8* %142, i64 %143
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  store i8* %145, i8** %139, align 8
  %146 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 7
  %147 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %148 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %147, i64 1
  %149 = bitcast %struct.fio_listen_protocol_s* %148 to i8*
  store i8* %149, i8** %146, align 8
  %150 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 8
  %151 = load i64, i64* %4, align 8
  store i64 %151, i64* %150, align 8
  %152 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 9
  %153 = load i64, i64* %3, align 8
  store i64 %153, i64* %152, align 8
  %154 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 10
  %155 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 3
  %156 = load i8*, i8** %155, align 8
  store i8* %156, i8** %154, align 8
  %157 = bitcast %struct.fio_listen_protocol_s* %104 to i8*
  %158 = bitcast %struct.fio_listen_protocol_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %158, i64 128, i1 false)
  %159 = load i64, i64* %3, align 8
  %160 = icmp ne i64 %159, 0
  br i1 %160, label %161, label %169

161:                                              ; preds = %118
  %162 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %163 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %162, i32 0, i32 7
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = load i64, i64* %3, align 8
  %168 = add i64 %167, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %166, i64 %168, i1 false)
  br label %169

169:                                              ; preds = %161, %118
  %170 = load i64, i64* %4, align 8
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %180

172:                                              ; preds = %169
  %173 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %174 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %173, i32 0, i32 6
  %175 = load i8*, i8** %174, align 8
  %176 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %177 = load i8*, i8** %176, align 8
  %178 = load i64, i64* %4, align 8
  %179 = add i64 %178, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %175, i8* align 1 %177, i64 %179, i1 false)
  br label %180

180:                                              ; preds = %172, %169
  %181 = call signext i16 @fio_is_running()
  %182 = icmp ne i16 %181, 0
  br i1 %182, label %183, label %189

183:                                              ; preds = %180
  %184 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %185 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %184, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %188 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %187, i32 0, i32 0
  call void @fio_attach(i64 %186, %struct.fio_protocol_s* %188)
  br label %194

189:                                              ; preds = %180
  %190 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %191 = bitcast %struct.fio_listen_protocol_s* %190 to i8*
  call void @fio_state_callback_add(i32 6, void (i8*)* @fio_listen_on_startup, i8* %191)
  %192 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %7, align 8
  %193 = bitcast %struct.fio_listen_protocol_s* %192 to i8*
  call void @fio_state_callback_add(i32 8, void (i8*)* @fio_listen_cleanup_task, i8* %193)
  br label %194

194:                                              ; preds = %189, %183
  %195 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %196 = load i8*, i8** %195, align 8
  %197 = icmp ne i8* %196, null
  br i1 %197, label %198, label %207

198:                                              ; preds = %194
  br label %199

199:                                              ; preds = %198
  %200 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %201 = icmp sle i32 4, %200
  br i1 %201, label %202, label %205

202:                                              ; preds = %199
  %203 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 1
  %204 = load i8*, i8** %203, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.33, i64 0, i64 0), i8* %204)
  br label %205

205:                                              ; preds = %202, %199
  br label %206

206:                                              ; preds = %205
  br label %216

207:                                              ; preds = %194
  br label %208

208:                                              ; preds = %207
  %209 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %210 = icmp sle i32 4, %209
  br i1 %210, label %211, label %214

211:                                              ; preds = %208
  %212 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 2
  %213 = load i8*, i8** %212, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.34, i64 0, i64 0), i8* %213)
  br label %214

214:                                              ; preds = %211, %208
  br label %215

215:                                              ; preds = %214
  br label %216

216:                                              ; preds = %215, %206
  %217 = load i64, i64* %6, align 8
  store i64 %217, i64* %2, align 8
  br label %228

218:                                              ; preds = %68, %57, %29
  %219 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 6
  %220 = load void (i64, i8*)*, void (i64, i8*)** %219, align 8
  %221 = icmp ne void (i64, i8*)* %220, null
  br i1 %221, label %222, label %227

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 6
  %224 = load void (i64, i8*)*, void (i64, i8*)** %223, align 8
  %225 = getelementptr inbounds %struct.fio_listen_args, %struct.fio_listen_args* %0, i32 0, i32 4
  %226 = load i8*, i8** %225, align 8
  call void %224(i64 -1, i8* %226)
  br label %227

227:                                              ; preds = %222, %218
  store i64 -1, i64* %2, align 8
  br label %228

228:                                              ; preds = %227, %216
  %229 = load i64, i64* %2, align 8
  ret i64 %229
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_on_data_tls_alpn(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_listen_protocol_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %8 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %9 = bitcast %struct.fio_protocol_s* %8 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %9, %struct.fio_listen_protocol_s** %5, align 8
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %27, %2
  %11 = load i32, i32* %6, align 4
  %12 = icmp slt i32 %11, 4
  br i1 %12, label %13, label %30

13:                                               ; preds = %10
  %14 = load i64, i64* %3, align 8
  %15 = call i64 @fio_accept(i64 %14)
  store i64 %15, i64* %7, align 8
  %16 = load i64, i64* %7, align 8
  %17 = icmp eq i64 %16, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  br label %30

19:                                               ; preds = %13
  %20 = load i64, i64* %7, align 8
  %21 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %21, i32 0, i32 10
  %23 = load i8*, i8** %22, align 8
  %24 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void @fio_tls_accept(i64 %20, i8* %23, i8* %26)
  br label %27

27:                                               ; preds = %19
  %28 = load i32, i32* %6, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %6, align 4
  br label %10

30:                                               ; preds = %18, %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_on_data_tls(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_listen_protocol_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %8 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %9 = bitcast %struct.fio_protocol_s* %8 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %9, %struct.fio_listen_protocol_s** %5, align 8
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %34, %2
  %11 = load i32, i32* %6, align 4
  %12 = icmp slt i32 %11, 4
  br i1 %12, label %13, label %37

13:                                               ; preds = %10
  %14 = load i64, i64* %3, align 8
  %15 = call i64 @fio_accept(i64 %14)
  store i64 %15, i64* %7, align 8
  %16 = load i64, i64* %7, align 8
  %17 = icmp eq i64 %16, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  br label %37

19:                                               ; preds = %13
  %20 = load i64, i64* %7, align 8
  %21 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %21, i32 0, i32 10
  %23 = load i8*, i8** %22, align 8
  %24 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void @fio_tls_accept(i64 %20, i8* %23, i8* %26)
  %27 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %28 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %27, i32 0, i32 3
  %29 = load void (i64, i8*)*, void (i64, i8*)** %28, align 8
  %30 = load i64, i64* %7, align 8
  %31 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %32 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %31, i32 0, i32 2
  %33 = load i8*, i8** %32, align 8
  call void %29(i64 %30, i8* %33)
  br label %34

34:                                               ; preds = %19
  %35 = load i32, i32* %6, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %6, align 4
  br label %10

37:                                               ; preds = %18, %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_on_data(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_listen_protocol_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %8 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %9 = bitcast %struct.fio_protocol_s* %8 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %9, %struct.fio_listen_protocol_s** %5, align 8
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %27, %2
  %11 = load i32, i32* %6, align 4
  %12 = icmp slt i32 %11, 4
  br i1 %12, label %13, label %30

13:                                               ; preds = %10
  %14 = load i64, i64* %3, align 8
  %15 = call i64 @fio_accept(i64 %14)
  store i64 %15, i64* %7, align 8
  %16 = load i64, i64* %7, align 8
  %17 = icmp eq i64 %16, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  br label %30

19:                                               ; preds = %13
  %20 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %21 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %20, i32 0, i32 3
  %22 = load void (i64, i8*)*, void (i64, i8*)** %21, align 8
  %23 = load i64, i64* %7, align 8
  %24 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void %22(i64 %23, i8* %26)
  br label %27

27:                                               ; preds = %19
  %28 = load i32, i32* %6, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %6, align 4
  br label %10

30:                                               ; preds = %18, %10
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_on_close(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %6 = bitcast %struct.fio_protocol_s* %5 to i8*
  call void @fio_listen_cleanup_task(i8* %6)
  %7 = load i64, i64* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mock_ping_eternal(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %6 = load i64, i64* %3, align 8
  call void @fio_touch(i64 %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_on_startup(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_listen_protocol_s*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 @fio_state_callback_remove(i32 8, void (i8*)* @fio_listen_cleanup_task, i8* %4)
  %6 = load i8*, i8** %2, align 8
  %7 = bitcast i8* %6 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %7, %struct.fio_listen_protocol_s** %3, align 8
  %8 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %9 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %8, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %12 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %11, i32 0, i32 0
  call void @fio_attach(i64 %10, %struct.fio_protocol_s* %12)
  %13 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %14 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %13, i32 0, i32 8
  %15 = load i64, i64* %14, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %28

17:                                               ; preds = %1
  br label %18

18:                                               ; preds = %17
  %19 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %20 = icmp sle i32 5, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = call i32 @getpid() #1
  %23 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %24 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %23, i32 0, i32 6
  %25 = load i8*, i8** %24, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.65, i64 0, i64 0), i32 %22, i8* %25)
  br label %26

26:                                               ; preds = %21, %18
  br label %27

27:                                               ; preds = %26
  br label %39

28:                                               ; preds = %1
  br label %29

29:                                               ; preds = %28
  %30 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %31 = icmp sle i32 5, %30
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = call i32 @getpid() #1
  %34 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %35 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %34, i32 0, i32 7
  %36 = load i8*, i8** %35, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.66, i64 0, i64 0), i32 %33, i8* %36)
  br label %37

37:                                               ; preds = %32, %29
  br label %38

38:                                               ; preds = %37
  br label %39

39:                                               ; preds = %38, %27
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen_cleanup_task(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_listen_protocol_s*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = bitcast i8* %4 to %struct.fio_listen_protocol_s*
  store %struct.fio_listen_protocol_s* %5, %struct.fio_listen_protocol_s** %3, align 8
  %6 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %7 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %6, i32 0, i32 10
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %1
  %11 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %12 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %11, i32 0, i32 10
  %13 = load i8*, i8** %12, align 8
  call void @fio_tls_destroy(i8* %13)
  br label %14

14:                                               ; preds = %10, %1
  %15 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %16 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %15, i32 0, i32 5
  %17 = load void (i64, i8*)*, void (i64, i8*)** %16, align 8
  %18 = icmp ne void (i64, i8*)* %17, null
  br i1 %18, label %19, label %29

19:                                               ; preds = %14
  %20 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %21 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %20, i32 0, i32 5
  %22 = load void (i64, i8*)*, void (i64, i8*)** %21, align 8
  %23 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %24 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %23, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %27 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %26, i32 0, i32 2
  %28 = load i8*, i8** %27, align 8
  call void %22(i64 %25, i8* %28)
  br label %29

29:                                               ; preds = %19, %14
  %30 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %31 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %30, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  call void @fio_force_close(i64 %32)
  %33 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %34 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %33, i32 0, i32 7
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %37, label %73

37:                                               ; preds = %29
  %38 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %39 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %38, i32 0, i32 6
  %40 = load i8*, i8** %39, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %65

42:                                               ; preds = %37
  %43 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %44 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %43, i32 0, i32 6
  %45 = load i8*, i8** %44, align 8
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %65, label %49

49:                                               ; preds = %42
  %50 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %51 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %50, i32 0, i32 6
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp eq i32 %55, 48
  br i1 %56, label %57, label %73

57:                                               ; preds = %49
  %58 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %59 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %58, i32 0, i32 6
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %73

65:                                               ; preds = %57, %42, %37
  %66 = call i32 @fio_is_master()
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %65
  %69 = load %struct.fio_listen_protocol_s*, %struct.fio_listen_protocol_s** %3, align 8
  %70 = getelementptr inbounds %struct.fio_listen_protocol_s, %struct.fio_listen_protocol_s* %69, i32 0, i32 7
  %71 = load i8*, i8** %70, align 8
  %72 = call i32 @unlink(i8* %71) #1
  br label %73

73:                                               ; preds = %68, %65, %57, %49, %29
  %74 = load i8*, i8** %2, align 8
  call void @free(i8* %74) #1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_connect(%struct.fio_connect_args* byval(%struct.fio_connect_args) align 8) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_connect_protocol_s*, align 8
  %5 = alloca %struct.fio_connect_protocol_s, align 8
  %6 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 2
  %7 = load void (i64, i8*)*, void (i64, i8*)** %6, align 8
  %8 = icmp ne void (i64, i8*)* %7, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %26

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %15 = load i8*, i8** %14, align 8
  %16 = call i64 @fio_tls_alpn_count(i8* %15)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %26

18:                                               ; preds = %13, %1
  %19 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %13, %9
  %27 = call i32* @__errno_location() #9
  store i32 22, i32* %27, align 4
  br label %107

28:                                               ; preds = %22, %18
  %29 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @fio_socket(i8* %30, i8* %32, i8 zeroext 0)
  store i64 %33, i64* %3, align 8
  %34 = load i64, i64* %3, align 8
  %35 = icmp eq i64 %34, -1
  br i1 %35, label %36, label %37

36:                                               ; preds = %28
  br label %107

37:                                               ; preds = %28
  %38 = load i64, i64* %3, align 8
  %39 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 6
  %40 = load i8, i8* %39, align 8
  call void @fio_timeout_set(i64 %38, i8 zeroext %40)
  %41 = call noalias i8* @fio_malloc(i64 88)
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 15
  %44 = icmp eq i64 %43, 0
  call void @llvm.assume(i1 %44)
  %45 = bitcast i8* %41 to %struct.fio_connect_protocol_s*
  store %struct.fio_connect_protocol_s* %45, %struct.fio_connect_protocol_s** %4, align 8
  %46 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %4, align 8
  %47 = icmp ne %struct.fio_connect_protocol_s* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %37
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %51 = icmp sle i32 1, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.35, i64 0, i64 0))
  br label %53

53:                                               ; preds = %52, %49
  br label %54

54:                                               ; preds = %53
  %55 = call i32 @kill(i32 0, i32 2) #1
  %56 = call i32* @__errno_location() #9
  %57 = load i32, i32* %56, align 4
  call void @exit(i32 %57) #11
  unreachable

58:                                               ; preds = %37
  %59 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %60 = load i8*, i8** %59, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %64 = load i8*, i8** %63, align 8
  call void @fio_tls_dup(i8* %64)
  br label %65

65:                                               ; preds = %62, %58
  %66 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %4, align 8
  %67 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 0
  %68 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 0
  store void (i64, %struct.fio_protocol_s*)* null, void (i64, %struct.fio_protocol_s*)** %68, align 8
  %69 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 1
  %70 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %71 = load i8*, i8** %70, align 8
  %72 = icmp ne i8* %71, null
  br i1 %72, label %73, label %80

73:                                               ; preds = %65
  %74 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %75 = load i8*, i8** %74, align 8
  %76 = call i64 @fio_tls_alpn_count(i8* %75)
  %77 = icmp ne i64 %76, 0
  %78 = zext i1 %77 to i64
  %79 = select i1 %77, void (i64, %struct.fio_protocol_s*)* @fio_connect_on_ready_tls_alpn, void (i64, %struct.fio_protocol_s*)* @fio_connect_on_ready_tls
  br label %81

80:                                               ; preds = %65
  br label %81

81:                                               ; preds = %80, %73
  %82 = phi void (i64, %struct.fio_protocol_s*)* [ %79, %73 ], [ @fio_connect_on_ready, %80 ]
  store void (i64, %struct.fio_protocol_s*)* %82, void (i64, %struct.fio_protocol_s*)** %69, align 8
  %83 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 2
  store i8 (i64, %struct.fio_protocol_s*)* null, i8 (i64, %struct.fio_protocol_s*)** %83, align 8
  %84 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 3
  store void (i64, %struct.fio_protocol_s*)* @fio_connect_on_close, void (i64, %struct.fio_protocol_s*)** %84, align 8
  %85 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* null, void (i64, %struct.fio_protocol_s*)** %85, align 8
  %86 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %67, i32 0, i32 5
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 1
  %88 = load i64, i64* %3, align 8
  store i64 %88, i64* %87, align 8
  %89 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 2
  %90 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 5
  %91 = load i8*, i8** %90, align 8
  store i8* %91, i8** %89, align 8
  %92 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 3
  %93 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 4
  %94 = load i8*, i8** %93, align 8
  store i8* %94, i8** %92, align 8
  %95 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 4
  %96 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 2
  %97 = load void (i64, i8*)*, void (i64, i8*)** %96, align 8
  store void (i64, i8*)* %97, void (i64, i8*)** %95, align 8
  %98 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %5, i32 0, i32 5
  %99 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 3
  %100 = load void (i64, i8*)*, void (i64, i8*)** %99, align 8
  store void (i64, i8*)* %100, void (i64, i8*)** %98, align 8
  %101 = bitcast %struct.fio_connect_protocol_s* %66 to i8*
  %102 = bitcast %struct.fio_connect_protocol_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 88, i1 false)
  %103 = load i64, i64* %3, align 8
  %104 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %4, align 8
  %105 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %104, i32 0, i32 0
  call void @fio_attach(i64 %103, %struct.fio_protocol_s* %105)
  %106 = load i64, i64* %3, align 8
  store i64 %106, i64* %2, align 8
  br label %117

107:                                              ; preds = %36, %26
  %108 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 3
  %109 = load void (i64, i8*)*, void (i64, i8*)** %108, align 8
  %110 = icmp ne void (i64, i8*)* %109, null
  br i1 %110, label %111, label %116

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 3
  %113 = load void (i64, i8*)*, void (i64, i8*)** %112, align 8
  %114 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %0, i32 0, i32 5
  %115 = load i8*, i8** %114, align 8
  call void %113(i64 -1, i8* %115)
  br label %116

116:                                              ; preds = %111, %107
  store i64 -1, i64* %2, align 8
  br label %117

117:                                              ; preds = %116, %81
  %118 = load i64, i64* %2, align 8
  ret i64 %118
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_connect_on_ready_tls_alpn(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_connect_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %7 = bitcast %struct.fio_protocol_s* %6 to %struct.fio_connect_protocol_s*
  store %struct.fio_connect_protocol_s* %7, %struct.fio_connect_protocol_s** %5, align 8
  %8 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %9 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %8, i32 0, i32 0
  %10 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %9, i32 0, i32 1
  %11 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %10, align 8
  %12 = icmp eq void (i64, %struct.fio_protocol_s*)* %11, @mock_on_ev
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  br label %32

14:                                               ; preds = %2
  %15 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %16 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %16, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* @mock_on_ev, void (i64, %struct.fio_protocol_s*)** %17, align 8
  %18 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %19 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %18, i32 0, i32 5
  store void (i64, i8*)* null, void (i64, i8*)** %19, align 8
  %20 = load i64, i64* %3, align 8
  %21 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %21, i32 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void @fio_tls_connect(i64 %20, i8* %23, i8* %26)
  %27 = load i64, i64* %3, align 8
  %28 = lshr i64 %27, 8
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  call void @fio_poll_add(i64 %30)
  %31 = load i64, i64* %3, align 8
  br label %32

32:                                               ; preds = %14, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_connect_on_ready_tls(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_connect_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %7 = bitcast %struct.fio_protocol_s* %6 to %struct.fio_connect_protocol_s*
  store %struct.fio_connect_protocol_s* %7, %struct.fio_connect_protocol_s** %5, align 8
  %8 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %9 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %8, i32 0, i32 0
  %10 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %9, i32 0, i32 1
  %11 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %10, align 8
  %12 = icmp eq void (i64, %struct.fio_protocol_s*)* %11, @mock_on_ev
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  br label %39

14:                                               ; preds = %2
  %15 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %16 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %16, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* @mock_on_ev, void (i64, %struct.fio_protocol_s*)** %17, align 8
  %18 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %19 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %18, i32 0, i32 5
  store void (i64, i8*)* null, void (i64, i8*)** %19, align 8
  %20 = load i64, i64* %3, align 8
  %21 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %21, i32 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void @fio_tls_connect(i64 %20, i8* %23, i8* %26)
  %27 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %28 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %27, i32 0, i32 4
  %29 = load void (i64, i8*)*, void (i64, i8*)** %28, align 8
  %30 = load i64, i64* %3, align 8
  %31 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %32 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %31, i32 0, i32 2
  %33 = load i8*, i8** %32, align 8
  call void %29(i64 %30, i8* %33)
  %34 = load i64, i64* %3, align 8
  %35 = lshr i64 %34, 8
  %36 = trunc i64 %35 to i32
  %37 = sext i32 %36 to i64
  call void @fio_poll_add(i64 %37)
  %38 = load i64, i64* %3, align 8
  br label %39

39:                                               ; preds = %14, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_connect_on_ready(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_connect_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %7 = bitcast %struct.fio_protocol_s* %6 to %struct.fio_connect_protocol_s*
  store %struct.fio_connect_protocol_s* %7, %struct.fio_connect_protocol_s** %5, align 8
  %8 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %9 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %8, i32 0, i32 0
  %10 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %9, i32 0, i32 1
  %11 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %10, align 8
  %12 = icmp eq void (i64, %struct.fio_protocol_s*)* %11, @mock_on_ev
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  br label %32

14:                                               ; preds = %2
  %15 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %16 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %16, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* @mock_on_ev, void (i64, %struct.fio_protocol_s*)** %17, align 8
  %18 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %19 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %18, i32 0, i32 5
  store void (i64, i8*)* null, void (i64, i8*)** %19, align 8
  %20 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %21 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %20, i32 0, i32 4
  %22 = load void (i64, i8*)*, void (i64, i8*)** %21, align 8
  %23 = load i64, i64* %3, align 8
  %24 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %24, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  call void %22(i64 %23, i8* %26)
  %27 = load i64, i64* %3, align 8
  %28 = lshr i64 %27, 8
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  call void @fio_poll_add(i64 %30)
  %31 = load i64, i64* %3, align 8
  br label %32

32:                                               ; preds = %14, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_connect_on_close(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_connect_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %7 = bitcast %struct.fio_protocol_s* %6 to %struct.fio_connect_protocol_s*
  store %struct.fio_connect_protocol_s* %7, %struct.fio_connect_protocol_s** %5, align 8
  %8 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %9 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %8, i32 0, i32 5
  %10 = load void (i64, i8*)*, void (i64, i8*)** %9, align 8
  %11 = icmp ne void (i64, i8*)* %10, null
  br i1 %11, label %12, label %20

12:                                               ; preds = %2
  %13 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %14 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %13, i32 0, i32 5
  %15 = load void (i64, i8*)*, void (i64, i8*)** %14, align 8
  %16 = load i64, i64* %3, align 8
  %17 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %18 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %17, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  call void %15(i64 %16, i8* %19)
  br label %20

20:                                               ; preds = %12, %2
  %21 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %21, i32 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %27 = getelementptr inbounds %struct.fio_connect_protocol_s, %struct.fio_connect_protocol_s* %26, i32 0, i32 3
  %28 = load i8*, i8** %27, align 8
  call void @fio_tls_destroy(i8* %28)
  br label %29

29:                                               ; preds = %25, %20
  %30 = load %struct.fio_connect_protocol_s*, %struct.fio_connect_protocol_s** %5, align 8
  %31 = bitcast %struct.fio_connect_protocol_s* %30 to i8*
  call void @fio_free(i8* %31)
  %32 = load i64, i64* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_url_parse(%struct.fio_url_s* noalias sret, i8*, i64) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.fio_str_info_s, align 8
  %9 = alloca %struct.fio_str_info_s, align 8
  %10 = alloca %struct.fio_str_info_s, align 8
  %11 = alloca %struct.fio_str_info_s, align 8
  %12 = alloca %struct.fio_str_info_s, align 8
  %13 = alloca %struct.fio_str_info_s, align 8
  %14 = alloca %struct.fio_str_info_s, align 8
  %15 = alloca %struct.fio_str_info_s, align 8
  %16 = alloca %struct.fio_str_info_s, align 8
  %17 = alloca %struct.fio_str_info_s, align 8
  %18 = alloca %struct.fio_str_info_s, align 8
  %19 = alloca %struct.fio_str_info_s, align 8
  %20 = alloca %struct.fio_str_info_s, align 8
  %21 = alloca %struct.fio_str_info_s, align 8
  %22 = alloca %struct.fio_str_info_s, align 8
  %23 = alloca %struct.fio_str_info_s, align 8
  %24 = alloca %struct.fio_str_info_s, align 8
  %25 = alloca %struct.fio_str_info_s, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %26 = load i8*, i8** %4, align 8
  %27 = load i64, i64* %5, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  store i8* %28, i8** %6, align 8
  %29 = load i8*, i8** %4, align 8
  store i8* %29, i8** %7, align 8
  %30 = bitcast %struct.fio_url_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 192, i1 false)
  %31 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 0
  %32 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %31, i32 0, i32 2
  %33 = load i8*, i8** %4, align 8
  store i8* %33, i8** %32, align 8
  %34 = load i64, i64* %5, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %3
  br label %612

37:                                               ; preds = %3
  %38 = load i8*, i8** %7, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 0
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 47
  br i1 %42, label %43, label %44

43:                                               ; preds = %37
  br label %512

44:                                               ; preds = %37
  br label %45

45:                                               ; preds = %81, %44
  %46 = load i8*, i8** %7, align 8
  %47 = load i8*, i8** %6, align 8
  %48 = icmp ult i8* %46, %47
  br i1 %48, label %49, label %79

49:                                               ; preds = %45
  %50 = load i8*, i8** %7, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 0
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp ne i32 %53, 58
  br i1 %54, label %55, label %79

55:                                               ; preds = %49
  %56 = load i8*, i8** %7, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 0
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp ne i32 %59, 47
  br i1 %60, label %61, label %79

61:                                               ; preds = %55
  %62 = load i8*, i8** %7, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 0
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp ne i32 %65, 64
  br i1 %66, label %67, label %79

67:                                               ; preds = %61
  %68 = load i8*, i8** %7, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 0
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = icmp ne i32 %71, 35
  br i1 %72, label %73, label %79

73:                                               ; preds = %67
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 0
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp ne i32 %77, 63
  br label %79

79:                                               ; preds = %73, %67, %61, %55, %49, %45
  %80 = phi i1 [ false, %67 ], [ false, %61 ], [ false, %55 ], [ false, %49 ], [ false, %45 ], [ %78, %73 ]
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = load i8*, i8** %7, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %7, align 8
  br label %45

84:                                               ; preds = %79
  %85 = load i8*, i8** %7, align 8
  %86 = load i8*, i8** %6, align 8
  %87 = icmp eq i8* %85, %86
  br i1 %87, label %88, label %101

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %90 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 0
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 1
  %92 = load i8*, i8** %7, align 8
  %93 = load i8*, i8** %4, align 8
  %94 = ptrtoint i8* %92 to i64
  %95 = ptrtoint i8* %93 to i64
  %96 = sub i64 %94, %95
  store i64 %96, i64* %91, align 8
  %97 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 2
  %98 = load i8*, i8** %4, align 8
  store i8* %98, i8** %97, align 8
  %99 = bitcast %struct.fio_str_info_s* %89 to i8*
  %100 = bitcast %struct.fio_str_info_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 24, i1 false)
  br label %612

101:                                              ; preds = %84
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 0
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  switch i32 %105, label %207 [
    i32 64, label %106
    i32 47, label %121
    i32 63, label %134
    i32 35, label %149
    i32 58, label %164
  ]

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %108 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %9, i32 0, i32 0
  store i64 0, i64* %108, align 8
  %109 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %9, i32 0, i32 1
  %110 = load i8*, i8** %7, align 8
  %111 = load i8*, i8** %4, align 8
  %112 = ptrtoint i8* %110 to i64
  %113 = ptrtoint i8* %111 to i64
  %114 = sub i64 %112, %113
  store i64 %114, i64* %109, align 8
  %115 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %9, i32 0, i32 2
  %116 = load i8*, i8** %4, align 8
  store i8* %116, i8** %115, align 8
  %117 = bitcast %struct.fio_str_info_s* %107 to i8*
  %118 = bitcast %struct.fio_str_info_s* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 24, i1 false)
  %119 = load i8*, i8** %7, align 8
  %120 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %120, i8** %7, align 8
  br label %388

121:                                              ; preds = %101
  %122 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %123 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %10, i32 0, i32 0
  store i64 0, i64* %123, align 8
  %124 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %10, i32 0, i32 1
  %125 = load i8*, i8** %7, align 8
  %126 = load i8*, i8** %4, align 8
  %127 = ptrtoint i8* %125 to i64
  %128 = ptrtoint i8* %126 to i64
  %129 = sub i64 %127, %128
  store i64 %129, i64* %124, align 8
  %130 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %10, i32 0, i32 2
  %131 = load i8*, i8** %4, align 8
  store i8* %131, i8** %130, align 8
  %132 = bitcast %struct.fio_str_info_s* %122 to i8*
  %133 = bitcast %struct.fio_str_info_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %133, i64 24, i1 false)
  br label %512

134:                                              ; preds = %101
  %135 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %136 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %11, i32 0, i32 0
  store i64 0, i64* %136, align 8
  %137 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %11, i32 0, i32 1
  %138 = load i8*, i8** %7, align 8
  %139 = load i8*, i8** %4, align 8
  %140 = ptrtoint i8* %138 to i64
  %141 = ptrtoint i8* %139 to i64
  %142 = sub i64 %140, %141
  store i64 %142, i64* %137, align 8
  %143 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %11, i32 0, i32 2
  %144 = load i8*, i8** %4, align 8
  store i8* %144, i8** %143, align 8
  %145 = bitcast %struct.fio_str_info_s* %135 to i8*
  %146 = bitcast %struct.fio_str_info_s* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* align 8 %146, i64 24, i1 false)
  %147 = load i8*, i8** %7, align 8
  %148 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %148, i8** %7, align 8
  br label %562

149:                                              ; preds = %101
  %150 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %151 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %12, i32 0, i32 0
  store i64 0, i64* %151, align 8
  %152 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %12, i32 0, i32 1
  %153 = load i8*, i8** %7, align 8
  %154 = load i8*, i8** %4, align 8
  %155 = ptrtoint i8* %153 to i64
  %156 = ptrtoint i8* %154 to i64
  %157 = sub i64 %155, %156
  store i64 %157, i64* %152, align 8
  %158 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %12, i32 0, i32 2
  %159 = load i8*, i8** %4, align 8
  store i8* %159, i8** %158, align 8
  %160 = bitcast %struct.fio_str_info_s* %150 to i8*
  %161 = bitcast %struct.fio_str_info_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %160, i8* align 8 %161, i64 24, i1 false)
  %162 = load i8*, i8** %7, align 8
  %163 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %163, i8** %7, align 8
  br label %599

164:                                              ; preds = %101
  %165 = load i8*, i8** %7, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 2
  %167 = load i8*, i8** %6, align 8
  %168 = icmp ule i8* %166, %167
  br i1 %168, label %169, label %191

169:                                              ; preds = %164
  %170 = load i8*, i8** %7, align 8
  %171 = getelementptr inbounds i8, i8* %170, i64 1
  %172 = load i8, i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = icmp eq i32 %173, 47
  br i1 %174, label %175, label %191

175:                                              ; preds = %169
  %176 = load i8*, i8** %7, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 2
  %178 = load i8, i8* %177, align 1
  %179 = sext i8 %178 to i32
  %180 = icmp eq i32 %179, 47
  br i1 %180, label %181, label %191

181:                                              ; preds = %175
  %182 = load i8*, i8** %7, align 8
  %183 = load i8*, i8** %4, align 8
  %184 = ptrtoint i8* %182 to i64
  %185 = ptrtoint i8* %183 to i64
  %186 = sub i64 %184, %185
  %187 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 0
  %188 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %187, i32 0, i32 1
  store i64 %186, i64* %188, align 8
  %189 = load i8*, i8** %7, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 3
  store i8* %190, i8** %7, align 8
  br label %206

191:                                              ; preds = %175, %169, %164
  %192 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %193 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %13, i32 0, i32 0
  store i64 0, i64* %193, align 8
  %194 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %13, i32 0, i32 1
  %195 = load i8*, i8** %7, align 8
  %196 = load i8*, i8** %4, align 8
  %197 = ptrtoint i8* %195 to i64
  %198 = ptrtoint i8* %196 to i64
  %199 = sub i64 %197, %198
  store i64 %199, i64* %194, align 8
  %200 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %13, i32 0, i32 2
  %201 = load i8*, i8** %4, align 8
  store i8* %201, i8** %200, align 8
  %202 = bitcast %struct.fio_str_info_s* %192 to i8*
  %203 = bitcast %struct.fio_str_info_s* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* align 8 %203, i64 24, i1 false)
  %204 = load i8*, i8** %7, align 8
  %205 = getelementptr inbounds i8, i8* %204, i32 1
  store i8* %205, i8** %7, align 8
  br label %302

206:                                              ; preds = %181
  br label %207

207:                                              ; preds = %101, %206
  %208 = load i8*, i8** %7, align 8
  store i8* %208, i8** %4, align 8
  br label %209

209:                                              ; preds = %233, %207
  %210 = load i8*, i8** %7, align 8
  %211 = load i8*, i8** %6, align 8
  %212 = icmp ult i8* %210, %211
  br i1 %212, label %213, label %231

213:                                              ; preds = %209
  %214 = load i8*, i8** %7, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 0
  %216 = load i8, i8* %215, align 1
  %217 = sext i8 %216 to i32
  %218 = icmp ne i32 %217, 58
  br i1 %218, label %219, label %231

219:                                              ; preds = %213
  %220 = load i8*, i8** %7, align 8
  %221 = getelementptr inbounds i8, i8* %220, i64 0
  %222 = load i8, i8* %221, align 1
  %223 = sext i8 %222 to i32
  %224 = icmp ne i32 %223, 47
  br i1 %224, label %225, label %231

225:                                              ; preds = %219
  %226 = load i8*, i8** %7, align 8
  %227 = getelementptr inbounds i8, i8* %226, i64 0
  %228 = load i8, i8* %227, align 1
  %229 = sext i8 %228 to i32
  %230 = icmp ne i32 %229, 64
  br label %231

231:                                              ; preds = %225, %219, %213, %209
  %232 = phi i1 [ false, %219 ], [ false, %213 ], [ false, %209 ], [ %230, %225 ]
  br i1 %232, label %233, label %236

233:                                              ; preds = %231
  %234 = load i8*, i8** %7, align 8
  %235 = getelementptr inbounds i8, i8* %234, i32 1
  store i8* %235, i8** %7, align 8
  br label %209

236:                                              ; preds = %231
  %237 = load i8*, i8** %7, align 8
  %238 = load i8*, i8** %6, align 8
  %239 = icmp uge i8* %237, %238
  br i1 %239, label %240, label %253

240:                                              ; preds = %236
  %241 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %242 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %14, i32 0, i32 0
  store i64 0, i64* %242, align 8
  %243 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %14, i32 0, i32 1
  %244 = load i8*, i8** %7, align 8
  %245 = load i8*, i8** %4, align 8
  %246 = ptrtoint i8* %244 to i64
  %247 = ptrtoint i8* %245 to i64
  %248 = sub i64 %246, %247
  store i64 %248, i64* %243, align 8
  %249 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %14, i32 0, i32 2
  %250 = load i8*, i8** %4, align 8
  store i8* %250, i8** %249, align 8
  %251 = bitcast %struct.fio_str_info_s* %241 to i8*
  %252 = bitcast %struct.fio_str_info_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %251, i8* align 8 %252, i64 24, i1 false)
  br label %612

253:                                              ; preds = %236
  %254 = load i8*, i8** %7, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 0
  %256 = load i8, i8* %255, align 1
  %257 = sext i8 %256 to i32
  switch i32 %257, label %301 [
    i32 47, label %258
    i32 64, label %271
    i32 58, label %286
  ]

258:                                              ; preds = %253
  %259 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %260 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %15, i32 0, i32 0
  store i64 0, i64* %260, align 8
  %261 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %15, i32 0, i32 1
  %262 = load i8*, i8** %7, align 8
  %263 = load i8*, i8** %4, align 8
  %264 = ptrtoint i8* %262 to i64
  %265 = ptrtoint i8* %263 to i64
  %266 = sub i64 %264, %265
  store i64 %266, i64* %261, align 8
  %267 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %15, i32 0, i32 2
  %268 = load i8*, i8** %4, align 8
  store i8* %268, i8** %267, align 8
  %269 = bitcast %struct.fio_str_info_s* %259 to i8*
  %270 = bitcast %struct.fio_str_info_s* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %269, i8* align 8 %270, i64 24, i1 false)
  br label %512

271:                                              ; preds = %253
  %272 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %273 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %16, i32 0, i32 0
  store i64 0, i64* %273, align 8
  %274 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %16, i32 0, i32 1
  %275 = load i8*, i8** %7, align 8
  %276 = load i8*, i8** %4, align 8
  %277 = ptrtoint i8* %275 to i64
  %278 = ptrtoint i8* %276 to i64
  %279 = sub i64 %277, %278
  store i64 %279, i64* %274, align 8
  %280 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %16, i32 0, i32 2
  %281 = load i8*, i8** %4, align 8
  store i8* %281, i8** %280, align 8
  %282 = bitcast %struct.fio_str_info_s* %272 to i8*
  %283 = bitcast %struct.fio_str_info_s* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %282, i8* align 8 %283, i64 24, i1 false)
  %284 = load i8*, i8** %7, align 8
  %285 = getelementptr inbounds i8, i8* %284, i32 1
  store i8* %285, i8** %7, align 8
  br label %388

286:                                              ; preds = %253
  %287 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %288 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %17, i32 0, i32 0
  store i64 0, i64* %288, align 8
  %289 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %17, i32 0, i32 1
  %290 = load i8*, i8** %7, align 8
  %291 = load i8*, i8** %4, align 8
  %292 = ptrtoint i8* %290 to i64
  %293 = ptrtoint i8* %291 to i64
  %294 = sub i64 %292, %293
  store i64 %294, i64* %289, align 8
  %295 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %17, i32 0, i32 2
  %296 = load i8*, i8** %4, align 8
  store i8* %296, i8** %295, align 8
  %297 = bitcast %struct.fio_str_info_s* %287 to i8*
  %298 = bitcast %struct.fio_str_info_s* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %297, i8* align 8 %298, i64 24, i1 false)
  %299 = load i8*, i8** %7, align 8
  %300 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %300, i8** %7, align 8
  br label %301

301:                                              ; preds = %253, %286
  br label %302

302:                                              ; preds = %301, %191
  %303 = load i8*, i8** %7, align 8
  store i8* %303, i8** %4, align 8
  br label %304

304:                                              ; preds = %322, %302
  %305 = load i8*, i8** %7, align 8
  %306 = load i8*, i8** %6, align 8
  %307 = icmp ult i8* %305, %306
  br i1 %307, label %308, label %320

308:                                              ; preds = %304
  %309 = load i8*, i8** %7, align 8
  %310 = getelementptr inbounds i8, i8* %309, i64 0
  %311 = load i8, i8* %310, align 1
  %312 = sext i8 %311 to i32
  %313 = icmp ne i32 %312, 47
  br i1 %313, label %314, label %320

314:                                              ; preds = %308
  %315 = load i8*, i8** %7, align 8
  %316 = getelementptr inbounds i8, i8* %315, i64 0
  %317 = load i8, i8* %316, align 1
  %318 = sext i8 %317 to i32
  %319 = icmp ne i32 %318, 64
  br label %320

320:                                              ; preds = %314, %308, %304
  %321 = phi i1 [ false, %308 ], [ false, %304 ], [ %319, %314 ]
  br i1 %321, label %322, label %325

322:                                              ; preds = %320
  %323 = load i8*, i8** %7, align 8
  %324 = getelementptr inbounds i8, i8* %323, i32 1
  store i8* %324, i8** %7, align 8
  br label %304

325:                                              ; preds = %320
  %326 = load i8*, i8** %7, align 8
  %327 = load i8*, i8** %6, align 8
  %328 = icmp uge i8* %326, %327
  br i1 %328, label %329, label %348

329:                                              ; preds = %325
  %330 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 4
  %331 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %18, i32 0, i32 0
  store i64 0, i64* %331, align 8
  %332 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %18, i32 0, i32 1
  %333 = load i8*, i8** %7, align 8
  %334 = load i8*, i8** %4, align 8
  %335 = ptrtoint i8* %333 to i64
  %336 = ptrtoint i8* %334 to i64
  %337 = sub i64 %335, %336
  store i64 %337, i64* %332, align 8
  %338 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %18, i32 0, i32 2
  %339 = load i8*, i8** %4, align 8
  store i8* %339, i8** %338, align 8
  %340 = bitcast %struct.fio_str_info_s* %330 to i8*
  %341 = bitcast %struct.fio_str_info_s* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %340, i8* align 8 %341, i64 24, i1 false)
  %342 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %343 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %344 = bitcast %struct.fio_str_info_s* %342 to i8*
  %345 = bitcast %struct.fio_str_info_s* %343 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %344, i8* align 8 %345, i64 24, i1 false)
  %346 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %347 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %346, i32 0, i32 1
  store i64 0, i64* %347, align 8
  br label %612

348:                                              ; preds = %325
  %349 = load i8*, i8** %7, align 8
  %350 = getelementptr inbounds i8, i8* %349, i64 0
  %351 = load i8, i8* %350, align 1
  %352 = sext i8 %351 to i32
  switch i32 %352, label %387 [
    i32 47, label %353
    i32 64, label %372
  ]

353:                                              ; preds = %348
  %354 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 4
  %355 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %19, i32 0, i32 0
  store i64 0, i64* %355, align 8
  %356 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %19, i32 0, i32 1
  %357 = load i8*, i8** %7, align 8
  %358 = load i8*, i8** %4, align 8
  %359 = ptrtoint i8* %357 to i64
  %360 = ptrtoint i8* %358 to i64
  %361 = sub i64 %359, %360
  store i64 %361, i64* %356, align 8
  %362 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %19, i32 0, i32 2
  %363 = load i8*, i8** %4, align 8
  store i8* %363, i8** %362, align 8
  %364 = bitcast %struct.fio_str_info_s* %354 to i8*
  %365 = bitcast %struct.fio_str_info_s* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %364, i8* align 8 %365, i64 24, i1 false)
  %366 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %367 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %368 = bitcast %struct.fio_str_info_s* %366 to i8*
  %369 = bitcast %struct.fio_str_info_s* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %368, i8* align 8 %369, i64 24, i1 false)
  %370 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %371 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %370, i32 0, i32 1
  store i64 0, i64* %371, align 8
  br label %512

372:                                              ; preds = %348
  %373 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 2
  %374 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %20, i32 0, i32 0
  store i64 0, i64* %374, align 8
  %375 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %20, i32 0, i32 1
  %376 = load i8*, i8** %7, align 8
  %377 = load i8*, i8** %4, align 8
  %378 = ptrtoint i8* %376 to i64
  %379 = ptrtoint i8* %377 to i64
  %380 = sub i64 %378, %379
  store i64 %380, i64* %375, align 8
  %381 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %20, i32 0, i32 2
  %382 = load i8*, i8** %4, align 8
  store i8* %382, i8** %381, align 8
  %383 = bitcast %struct.fio_str_info_s* %373 to i8*
  %384 = bitcast %struct.fio_str_info_s* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %383, i8* align 8 %384, i64 24, i1 false)
  %385 = load i8*, i8** %7, align 8
  %386 = getelementptr inbounds i8, i8* %385, i32 1
  store i8* %386, i8** %7, align 8
  br label %387

387:                                              ; preds = %348, %372
  br label %388

388:                                              ; preds = %387, %271, %106
  %389 = load i8*, i8** %7, align 8
  store i8* %389, i8** %4, align 8
  br label %390

390:                                              ; preds = %420, %388
  %391 = load i8*, i8** %7, align 8
  %392 = load i8*, i8** %6, align 8
  %393 = icmp ult i8* %391, %392
  br i1 %393, label %394, label %418

394:                                              ; preds = %390
  %395 = load i8*, i8** %7, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 0
  %397 = load i8, i8* %396, align 1
  %398 = sext i8 %397 to i32
  %399 = icmp ne i32 %398, 47
  br i1 %399, label %400, label %418

400:                                              ; preds = %394
  %401 = load i8*, i8** %7, align 8
  %402 = getelementptr inbounds i8, i8* %401, i64 0
  %403 = load i8, i8* %402, align 1
  %404 = sext i8 %403 to i32
  %405 = icmp ne i32 %404, 58
  br i1 %405, label %406, label %418

406:                                              ; preds = %400
  %407 = load i8*, i8** %7, align 8
  %408 = getelementptr inbounds i8, i8* %407, i64 0
  %409 = load i8, i8* %408, align 1
  %410 = sext i8 %409 to i32
  %411 = icmp ne i32 %410, 35
  br i1 %411, label %412, label %418

412:                                              ; preds = %406
  %413 = load i8*, i8** %7, align 8
  %414 = getelementptr inbounds i8, i8* %413, i64 0
  %415 = load i8, i8* %414, align 1
  %416 = sext i8 %415 to i32
  %417 = icmp ne i32 %416, 63
  br label %418

418:                                              ; preds = %412, %406, %400, %394, %390
  %419 = phi i1 [ false, %406 ], [ false, %400 ], [ false, %394 ], [ false, %390 ], [ %417, %412 ]
  br i1 %419, label %420, label %423

420:                                              ; preds = %418
  %421 = load i8*, i8** %7, align 8
  %422 = getelementptr inbounds i8, i8* %421, i32 1
  store i8* %422, i8** %7, align 8
  br label %390

423:                                              ; preds = %418
  %424 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %425 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %21, i32 0, i32 0
  store i64 0, i64* %425, align 8
  %426 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %21, i32 0, i32 1
  %427 = load i8*, i8** %7, align 8
  %428 = load i8*, i8** %4, align 8
  %429 = ptrtoint i8* %427 to i64
  %430 = ptrtoint i8* %428 to i64
  %431 = sub i64 %429, %430
  store i64 %431, i64* %426, align 8
  %432 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %21, i32 0, i32 2
  %433 = load i8*, i8** %4, align 8
  store i8* %433, i8** %432, align 8
  %434 = bitcast %struct.fio_str_info_s* %424 to i8*
  %435 = bitcast %struct.fio_str_info_s* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %434, i8* align 8 %435, i64 24, i1 false)
  %436 = load i8*, i8** %7, align 8
  %437 = load i8*, i8** %6, align 8
  %438 = icmp uge i8* %436, %437
  br i1 %438, label %439, label %440

439:                                              ; preds = %423
  br label %612

440:                                              ; preds = %423
  %441 = load i8*, i8** %7, align 8
  %442 = getelementptr inbounds i8, i8* %441, i64 0
  %443 = load i8, i8* %442, align 1
  %444 = sext i8 %443 to i32
  switch i32 %444, label %452 [
    i32 47, label %445
    i32 63, label %446
    i32 35, label %449
  ]

445:                                              ; preds = %440
  br label %512

446:                                              ; preds = %440
  %447 = load i8*, i8** %7, align 8
  %448 = getelementptr inbounds i8, i8* %447, i32 1
  store i8* %448, i8** %7, align 8
  br label %562

449:                                              ; preds = %440
  %450 = load i8*, i8** %7, align 8
  %451 = getelementptr inbounds i8, i8* %450, i32 1
  store i8* %451, i8** %7, align 8
  br label %599

452:                                              ; preds = %440
  %453 = load i8*, i8** %7, align 8
  %454 = getelementptr inbounds i8, i8* %453, i32 1
  store i8* %454, i8** %7, align 8
  %455 = load i8*, i8** %7, align 8
  store i8* %455, i8** %4, align 8
  br label %456

456:                                              ; preds = %480, %452
  %457 = load i8*, i8** %7, align 8
  %458 = load i8*, i8** %6, align 8
  %459 = icmp ult i8* %457, %458
  br i1 %459, label %460, label %478

460:                                              ; preds = %456
  %461 = load i8*, i8** %7, align 8
  %462 = getelementptr inbounds i8, i8* %461, i64 0
  %463 = load i8, i8* %462, align 1
  %464 = sext i8 %463 to i32
  %465 = icmp ne i32 %464, 47
  br i1 %465, label %466, label %478

466:                                              ; preds = %460
  %467 = load i8*, i8** %7, align 8
  %468 = getelementptr inbounds i8, i8* %467, i64 0
  %469 = load i8, i8* %468, align 1
  %470 = sext i8 %469 to i32
  %471 = icmp ne i32 %470, 35
  br i1 %471, label %472, label %478

472:                                              ; preds = %466
  %473 = load i8*, i8** %7, align 8
  %474 = getelementptr inbounds i8, i8* %473, i64 0
  %475 = load i8, i8* %474, align 1
  %476 = sext i8 %475 to i32
  %477 = icmp ne i32 %476, 63
  br label %478

478:                                              ; preds = %472, %466, %460, %456
  %479 = phi i1 [ false, %466 ], [ false, %460 ], [ false, %456 ], [ %477, %472 ]
  br i1 %479, label %480, label %483

480:                                              ; preds = %478
  %481 = load i8*, i8** %7, align 8
  %482 = getelementptr inbounds i8, i8* %481, i32 1
  store i8* %482, i8** %7, align 8
  br label %456

483:                                              ; preds = %478
  %484 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 4
  %485 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %22, i32 0, i32 0
  store i64 0, i64* %485, align 8
  %486 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %22, i32 0, i32 1
  %487 = load i8*, i8** %7, align 8
  %488 = load i8*, i8** %4, align 8
  %489 = ptrtoint i8* %487 to i64
  %490 = ptrtoint i8* %488 to i64
  %491 = sub i64 %489, %490
  store i64 %491, i64* %486, align 8
  %492 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %22, i32 0, i32 2
  %493 = load i8*, i8** %4, align 8
  store i8* %493, i8** %492, align 8
  %494 = bitcast %struct.fio_str_info_s* %484 to i8*
  %495 = bitcast %struct.fio_str_info_s* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %494, i8* align 8 %495, i64 24, i1 false)
  %496 = load i8*, i8** %7, align 8
  %497 = load i8*, i8** %6, align 8
  %498 = icmp uge i8* %496, %497
  br i1 %498, label %499, label %500

499:                                              ; preds = %483
  br label %612

500:                                              ; preds = %483
  %501 = load i8*, i8** %7, align 8
  %502 = getelementptr inbounds i8, i8* %501, i64 0
  %503 = load i8, i8* %502, align 1
  %504 = sext i8 %503 to i32
  switch i32 %504, label %511 [
    i32 63, label %505
    i32 35, label %508
  ]

505:                                              ; preds = %500
  %506 = load i8*, i8** %7, align 8
  %507 = getelementptr inbounds i8, i8* %506, i32 1
  store i8* %507, i8** %7, align 8
  br label %562

508:                                              ; preds = %500
  %509 = load i8*, i8** %7, align 8
  %510 = getelementptr inbounds i8, i8* %509, i32 1
  store i8* %510, i8** %7, align 8
  br label %599

511:                                              ; preds = %500
  br label %512

512:                                              ; preds = %511, %445, %353, %258, %121, %43
  %513 = load i8*, i8** %7, align 8
  store i8* %513, i8** %4, align 8
  br label %514

514:                                              ; preds = %532, %512
  %515 = load i8*, i8** %7, align 8
  %516 = load i8*, i8** %6, align 8
  %517 = icmp ult i8* %515, %516
  br i1 %517, label %518, label %530

518:                                              ; preds = %514
  %519 = load i8*, i8** %7, align 8
  %520 = getelementptr inbounds i8, i8* %519, i64 0
  %521 = load i8, i8* %520, align 1
  %522 = sext i8 %521 to i32
  %523 = icmp ne i32 %522, 35
  br i1 %523, label %524, label %530

524:                                              ; preds = %518
  %525 = load i8*, i8** %7, align 8
  %526 = getelementptr inbounds i8, i8* %525, i64 0
  %527 = load i8, i8* %526, align 1
  %528 = sext i8 %527 to i32
  %529 = icmp ne i32 %528, 63
  br label %530

530:                                              ; preds = %524, %518, %514
  %531 = phi i1 [ false, %518 ], [ false, %514 ], [ %529, %524 ]
  br i1 %531, label %532, label %535

532:                                              ; preds = %530
  %533 = load i8*, i8** %7, align 8
  %534 = getelementptr inbounds i8, i8* %533, i32 1
  store i8* %534, i8** %7, align 8
  br label %514

535:                                              ; preds = %530
  %536 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 5
  %537 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %23, i32 0, i32 0
  store i64 0, i64* %537, align 8
  %538 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %23, i32 0, i32 1
  %539 = load i8*, i8** %7, align 8
  %540 = load i8*, i8** %4, align 8
  %541 = ptrtoint i8* %539 to i64
  %542 = ptrtoint i8* %540 to i64
  %543 = sub i64 %541, %542
  store i64 %543, i64* %538, align 8
  %544 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %23, i32 0, i32 2
  %545 = load i8*, i8** %4, align 8
  store i8* %545, i8** %544, align 8
  %546 = bitcast %struct.fio_str_info_s* %536 to i8*
  %547 = bitcast %struct.fio_str_info_s* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %546, i8* align 8 %547, i64 24, i1 false)
  %548 = load i8*, i8** %7, align 8
  %549 = load i8*, i8** %6, align 8
  %550 = icmp uge i8* %548, %549
  br i1 %550, label %551, label %552

551:                                              ; preds = %535
  br label %612

552:                                              ; preds = %535
  %553 = load i8*, i8** %7, align 8
  %554 = getelementptr inbounds i8, i8* %553, i32 1
  store i8* %554, i8** %7, align 8
  %555 = load i8*, i8** %7, align 8
  %556 = getelementptr inbounds i8, i8* %555, i64 -1
  %557 = load i8, i8* %556, align 1
  %558 = sext i8 %557 to i32
  %559 = icmp eq i32 %558, 35
  br i1 %559, label %560, label %561

560:                                              ; preds = %552
  br label %599

561:                                              ; preds = %552
  br label %562

562:                                              ; preds = %561, %505, %446, %134
  %563 = load i8*, i8** %7, align 8
  store i8* %563, i8** %4, align 8
  br label %564

564:                                              ; preds = %576, %562
  %565 = load i8*, i8** %7, align 8
  %566 = load i8*, i8** %6, align 8
  %567 = icmp ult i8* %565, %566
  br i1 %567, label %568, label %574

568:                                              ; preds = %564
  %569 = load i8*, i8** %7, align 8
  %570 = getelementptr inbounds i8, i8* %569, i64 0
  %571 = load i8, i8* %570, align 1
  %572 = sext i8 %571 to i32
  %573 = icmp ne i32 %572, 35
  br label %574

574:                                              ; preds = %568, %564
  %575 = phi i1 [ false, %564 ], [ %573, %568 ]
  br i1 %575, label %576, label %579

576:                                              ; preds = %574
  %577 = load i8*, i8** %7, align 8
  %578 = getelementptr inbounds i8, i8* %577, i32 1
  store i8* %578, i8** %7, align 8
  br label %564

579:                                              ; preds = %574
  %580 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 6
  %581 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %24, i32 0, i32 0
  store i64 0, i64* %581, align 8
  %582 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %24, i32 0, i32 1
  %583 = load i8*, i8** %7, align 8
  %584 = load i8*, i8** %4, align 8
  %585 = ptrtoint i8* %583 to i64
  %586 = ptrtoint i8* %584 to i64
  %587 = sub i64 %585, %586
  store i64 %587, i64* %582, align 8
  %588 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %24, i32 0, i32 2
  %589 = load i8*, i8** %4, align 8
  store i8* %589, i8** %588, align 8
  %590 = bitcast %struct.fio_str_info_s* %580 to i8*
  %591 = bitcast %struct.fio_str_info_s* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %590, i8* align 8 %591, i64 24, i1 false)
  %592 = load i8*, i8** %7, align 8
  %593 = getelementptr inbounds i8, i8* %592, i32 1
  store i8* %593, i8** %7, align 8
  %594 = load i8*, i8** %7, align 8
  %595 = load i8*, i8** %6, align 8
  %596 = icmp uge i8* %594, %595
  br i1 %596, label %597, label %598

597:                                              ; preds = %579
  br label %612

598:                                              ; preds = %579
  br label %599

599:                                              ; preds = %598, %560, %508, %449, %149
  %600 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 7
  %601 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %25, i32 0, i32 0
  store i64 0, i64* %601, align 8
  %602 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %25, i32 0, i32 1
  %603 = load i8*, i8** %6, align 8
  %604 = load i8*, i8** %7, align 8
  %605 = ptrtoint i8* %603 to i64
  %606 = ptrtoint i8* %604 to i64
  %607 = sub i64 %605, %606
  store i64 %607, i64* %602, align 8
  %608 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %25, i32 0, i32 2
  %609 = load i8*, i8** %7, align 8
  store i8* %609, i8** %608, align 8
  %610 = bitcast %struct.fio_str_info_s* %600 to i8*
  %611 = bitcast %struct.fio_str_info_s* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %610, i8* align 8 %611, i64 24, i1 false)
  br label %612

612:                                              ; preds = %599, %597, %551, %499, %439, %329, %240, %88, %36
  %613 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 0
  %614 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %613, i32 0, i32 1
  %615 = load i64, i64* %614, align 8
  %616 = icmp ne i64 %615, 0
  br i1 %616, label %620, label %617

617:                                              ; preds = %612
  %618 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 0
  %619 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %618, i32 0, i32 2
  store i8* null, i8** %619, align 8
  br label %620

620:                                              ; preds = %617, %612
  %621 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %622 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %621, i32 0, i32 1
  %623 = load i64, i64* %622, align 8
  %624 = icmp ne i64 %623, 0
  br i1 %624, label %628, label %625

625:                                              ; preds = %620
  %626 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 1
  %627 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %626, i32 0, i32 2
  store i8* null, i8** %627, align 8
  br label %628

628:                                              ; preds = %625, %620
  %629 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 2
  %630 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %629, i32 0, i32 1
  %631 = load i64, i64* %630, align 8
  %632 = icmp ne i64 %631, 0
  br i1 %632, label %636, label %633

633:                                              ; preds = %628
  %634 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 2
  %635 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %634, i32 0, i32 2
  store i8* null, i8** %635, align 8
  br label %636

636:                                              ; preds = %633, %628
  %637 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %638 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %637, i32 0, i32 1
  %639 = load i64, i64* %638, align 8
  %640 = icmp ne i64 %639, 0
  br i1 %640, label %644, label %641

641:                                              ; preds = %636
  %642 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 3
  %643 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %642, i32 0, i32 2
  store i8* null, i8** %643, align 8
  br label %644

644:                                              ; preds = %641, %636
  %645 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 4
  %646 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %645, i32 0, i32 1
  %647 = load i64, i64* %646, align 8
  %648 = icmp ne i64 %647, 0
  br i1 %648, label %652, label %649

649:                                              ; preds = %644
  %650 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 4
  %651 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %650, i32 0, i32 2
  store i8* null, i8** %651, align 8
  br label %652

652:                                              ; preds = %649, %644
  %653 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 5
  %654 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %653, i32 0, i32 1
  %655 = load i64, i64* %654, align 8
  %656 = icmp ne i64 %655, 0
  br i1 %656, label %660, label %657

657:                                              ; preds = %652
  %658 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 5
  %659 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %658, i32 0, i32 2
  store i8* null, i8** %659, align 8
  br label %660

660:                                              ; preds = %657, %652
  %661 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 6
  %662 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %661, i32 0, i32 1
  %663 = load i64, i64* %662, align 8
  %664 = icmp ne i64 %663, 0
  br i1 %664, label %668, label %665

665:                                              ; preds = %660
  %666 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 6
  %667 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %666, i32 0, i32 2
  store i8* null, i8** %667, align 8
  br label %668

668:                                              ; preds = %665, %660
  %669 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 7
  %670 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %669, i32 0, i32 1
  %671 = load i64, i64* %670, align 8
  %672 = icmp ne i64 %671, 0
  br i1 %672, label %676, label %673

673:                                              ; preds = %668
  %674 = getelementptr inbounds %struct.fio_url_s, %struct.fio_url_s* %0, i32 0, i32 7
  %675 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %674, i32 0, i32 2
  store i8* null, i8** %675, align 8
  br label %676

676:                                              ; preds = %673, %668
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.subscription_s* @fio_subscribe(%struct.subscribe_args_s* byval(%struct.subscribe_args_s) align 8) #0 {
  %2 = alloca %struct.subscription_s*, align 8
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.subscription_s*, align 8
  %5 = alloca %struct.subscription_s, align 8
  %6 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 3
  %7 = load void (%struct.fio_msg_s*)*, void (%struct.fio_msg_s*)** %6, align 8
  %8 = icmp ne void (%struct.fio_msg_s*)* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  br label %82

10:                                               ; preds = %1
  %11 = call noalias i8* @fio_malloc(i64 72)
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 15
  %14 = icmp eq i64 %13, 0
  call void @llvm.assume(i1 %14)
  %15 = bitcast i8* %11 to %struct.subscription_s*
  store %struct.subscription_s* %15, %struct.subscription_s** %4, align 8
  %16 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  %17 = icmp ne %struct.subscription_s* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %10
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %21 = icmp sle i32 1, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.36, i64 0, i64 0))
  br label %23

23:                                               ; preds = %22, %19
  br label %24

24:                                               ; preds = %23
  %25 = call i32 @kill(i32 0, i32 2) #1
  %26 = call i32* @__errno_location() #9
  %27 = load i32, i32* %26, align 4
  call void @exit(i32 %27) #11
  unreachable

28:                                               ; preds = %10
  %29 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  %30 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 0
  %31 = bitcast %struct.fio_ls_embd_s* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 16, i1 false)
  %32 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 1
  store %struct.channel_s* null, %struct.channel_s** %32, align 8
  %33 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 2
  %34 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 3
  %35 = load void (%struct.fio_msg_s*)*, void (%struct.fio_msg_s*)** %34, align 8
  store void (%struct.fio_msg_s*)* %35, void (%struct.fio_msg_s*)** %33, align 8
  %36 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 3
  %37 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 4
  %38 = load void (i8*, i8*)*, void (i8*, i8*)** %37, align 8
  store void (i8*, i8*)* %38, void (i8*, i8*)** %36, align 8
  %39 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 4
  %40 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 5
  %41 = load i8*, i8** %40, align 8
  store i8* %41, i8** %39, align 8
  %42 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 5
  %43 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 6
  %44 = load i8*, i8** %43, align 8
  store i8* %44, i8** %42, align 8
  %45 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 6
  store volatile i64 1, i64* %45, align 8
  %46 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 7
  store volatile i8 0, i8* %46, align 8
  %47 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 8
  store volatile i8 0, i8* %47, align 1
  %48 = bitcast %struct.subscription_s* %29 to i8*
  %49 = bitcast %struct.subscription_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 72, i1 true)
  %50 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %28
  %54 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = call %struct.channel_s* @fio_filter_dup_lock(i32 %55)
  store %struct.channel_s* %56, %struct.channel_s** %3, align 8
  br label %70

57:                                               ; preds = %28
  %58 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 2
  %59 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %58, align 8
  %60 = icmp ne i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %59, null
  br i1 %60, label %61, label %66

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 1
  %63 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 2
  %64 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %63, align 8
  %65 = call %struct.channel_s* @fio_channel_match_dup_lock(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %62, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %64)
  store %struct.channel_s* %65, %struct.channel_s** %3, align 8
  br label %69

66:                                               ; preds = %57
  %67 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 1
  %68 = call %struct.channel_s* @fio_channel_dup_lock(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %67)
  store %struct.channel_s* %68, %struct.channel_s** %3, align 8
  br label %69

69:                                               ; preds = %66, %61
  br label %70

70:                                               ; preds = %69, %53
  %71 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %72 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  %73 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %72, i32 0, i32 1
  store %struct.channel_s* %71, %struct.channel_s** %73, align 8
  %74 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %75 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %74, i32 0, i32 3
  %76 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  %77 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %76, i32 0, i32 0
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* %75, %struct.fio_ls_embd_s* %77)
  %78 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %79 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %78, i32 0, i32 6
  %80 = call i32 @fio_unlock(i8* %79)
  %81 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  store %struct.subscription_s* %81, %struct.subscription_s** %2, align 8
  br label %94

82:                                               ; preds = %9
  %83 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 4
  %84 = load void (i8*, i8*)*, void (i8*, i8*)** %83, align 8
  %85 = icmp ne void (i8*, i8*)* %84, null
  br i1 %85, label %86, label %93

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 4
  %88 = load void (i8*, i8*)*, void (i8*, i8*)** %87, align 8
  %89 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 5
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %0, i32 0, i32 6
  %92 = load i8*, i8** %91, align 8
  call void %88(i8* %90, i8* %92)
  br label %93

93:                                               ; preds = %86, %82
  store %struct.subscription_s* null, %struct.subscription_s** %2, align 8
  br label %94

94:                                               ; preds = %93, %70
  %95 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  ret %struct.subscription_s* %95
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_filter_dup_lock(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.channel_s, align 8
  store i32 %0, i32* %2, align 4
  %4 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 0
  store i64 4, i64* %4, align 8
  %5 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 1
  %6 = bitcast i32* %2 to i8*
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 2
  store volatile i64 8, i64* %7, align 8
  %8 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 3
  %9 = bitcast %struct.fio_ls_embd_s* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  %10 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 4
  store %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0), %struct.fio_collection_s** %10, align 8
  %11 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 5
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* null, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %11, align 8
  %12 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 6
  store volatile i8 0, i8* %12, align 8
  %13 = load i32, i32* %2, align 4
  %14 = zext i32 %13 to i64
  %15 = call %struct.channel_s* @fio_filter_dup_lock_internal(%struct.channel_s* %3, i64 %14, %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0))
  ret %struct.channel_s* %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_channel_match_dup_lock(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*) #0 {
  %3 = alloca i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, align 8
  %4 = alloca %struct.channel_s, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.channel_s*, align 8
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %1, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %3, align 8
  %7 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 0
  %8 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 1
  %11 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 2
  store volatile i64 8, i64* %13, align 8
  %14 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 3
  %15 = bitcast %struct.fio_ls_embd_s* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  %16 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 4
  store %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2), %struct.fio_collection_s** %16, align 8
  %17 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 5
  %18 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %3, align 8
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %18, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %17, align 8
  %19 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %4, i32 0, i32 6
  store volatile i8 0, i8* %19, align 8
  %20 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = call i64 @fio_siphash13(i8* %21, i64 %23, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  store i64 %24, i64* %5, align 8
  %25 = load i64, i64* %5, align 8
  %26 = call %struct.channel_s* @fio_filter_dup_lock_internal(%struct.channel_s* %4, i64 %25, %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2))
  store %struct.channel_s* %26, %struct.channel_s** %6, align 8
  %27 = load %struct.channel_s*, %struct.channel_s** %6, align 8
  %28 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %27, i32 0, i32 3
  %29 = call i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s* %28)
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %2
  %32 = load %struct.channel_s*, %struct.channel_s** %6, align 8
  call void @fio_pubsub_on_channel_create(%struct.channel_s* %32)
  br label %33

33:                                               ; preds = %31, %2
  %34 = load %struct.channel_s*, %struct.channel_s** %6, align 8
  ret %struct.channel_s* %34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_channel_dup_lock(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8) #0 {
  %2 = alloca %struct.channel_s, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.channel_s*, align 8
  %5 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 0
  %6 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 1
  %9 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %10 = load i8*, i8** %9, align 8
  store i8* %10, i8** %8, align 8
  %11 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 2
  store volatile i64 8, i64* %11, align 8
  %12 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 3
  %13 = bitcast %struct.fio_ls_embd_s* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 4
  store %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1), %struct.fio_collection_s** %14, align 8
  %15 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 5
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* null, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %15, align 8
  %16 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 6
  store volatile i8 0, i8* %16, align 8
  %17 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = call i64 @fio_siphash13(i8* %18, i64 %20, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  store i64 %21, i64* %3, align 8
  %22 = load i64, i64* %3, align 8
  %23 = call %struct.channel_s* @fio_filter_dup_lock_internal(%struct.channel_s* %2, i64 %22, %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1))
  store %struct.channel_s* %23, %struct.channel_s** %4, align 8
  %24 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %25 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %24, i32 0, i32 3
  %26 = call i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s* %25)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %1
  %29 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  call void @fio_pubsub_on_channel_create(%struct.channel_s* %29)
  br label %30

30:                                               ; preds = %28, %1
  %31 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_unsubscribe(%struct.subscription_s*) #0 {
  %2 = alloca %struct.subscription_s*, align 8
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca i8, align 1
  %5 = alloca %struct.fio_collection_s*, align 8
  %6 = alloca i64, align 8
  store %struct.subscription_s* %0, %struct.subscription_s** %2, align 8
  %7 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %8 = icmp ne %struct.subscription_s* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  br label %78

10:                                               ; preds = %1
  %11 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %12 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %11, i32 0, i32 8
  %13 = call i32 @fio_trylock(i8* %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  br label %76

16:                                               ; preds = %10
  %17 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %18 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %17, i32 0, i32 7
  call void @fio_lock(i8* %18)
  %19 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %20 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %19, i32 0, i32 1
  %21 = load %struct.channel_s*, %struct.channel_s** %20, align 8
  store %struct.channel_s* %21, %struct.channel_s** %3, align 8
  store i8 0, i8* %4, align 1
  %22 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %23 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %22, i32 0, i32 6
  call void @fio_lock(i8* %23)
  %24 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %25 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %24, i32 0, i32 0
  %26 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %25)
  %27 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %28 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %27, i32 0, i32 3
  %29 = call i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s* %28)
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %62

31:                                               ; preds = %16
  %32 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %33 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %32, i32 0, i32 4
  %34 = load %struct.fio_collection_s*, %struct.fio_collection_s** %33, align 8
  store %struct.fio_collection_s* %34, %struct.fio_collection_s** %5, align 8
  %35 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %36 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %35, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %39 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = call i64 @fio_siphash13(i8* %37, i64 %40, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  store i64 %41, i64* %6, align 8
  %42 = load %struct.fio_collection_s*, %struct.fio_collection_s** %5, align 8
  %43 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %42, i32 0, i32 1
  call void @fio_lock(i8* %43)
  %44 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %45 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %44, i32 0, i32 3
  %46 = call i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s* %45)
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %31
  %49 = load %struct.fio_collection_s*, %struct.fio_collection_s** %5, align 8
  %50 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %49, i32 0, i32 0
  %51 = load i64, i64* %6, align 8
  %52 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %53 = call i32 @fio_ch_set_remove(%struct.fio_ch_set_s* %50, i64 %51, %struct.channel_s* %52, %struct.channel_s** null)
  %54 = load %struct.fio_collection_s*, %struct.fio_collection_s** %5, align 8
  %55 = icmp ne %struct.fio_collection_s* %54, getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0)
  %56 = zext i1 %55 to i32
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %4, align 1
  br label %58

58:                                               ; preds = %48, %31
  %59 = load %struct.fio_collection_s*, %struct.fio_collection_s** %5, align 8
  %60 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %59, i32 0, i32 1
  %61 = call i32 @fio_unlock(i8* %60)
  br label %62

62:                                               ; preds = %58, %16
  %63 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %64 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %63, i32 0, i32 6
  %65 = call i32 @fio_unlock(i8* %64)
  %66 = load i8, i8* %4, align 1
  %67 = icmp ne i8 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  call void @fio_pubsub_on_channel_destroy(%struct.channel_s* %69)
  br label %70

70:                                               ; preds = %68, %62
  %71 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %72 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %71, i32 0, i32 2
  store void (%struct.fio_msg_s*)* null, void (%struct.fio_msg_s*)** %72, align 8
  %73 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %74 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %73, i32 0, i32 7
  %75 = call i32 @fio_unlock(i8* %74)
  br label %76

76:                                               ; preds = %70, %15
  %77 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  call void @fio_subscription_free(%struct.subscription_s* %77)
  br label %78

78:                                               ; preds = %76, %9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s*) #0 {
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  store %struct.fio_ls_embd_s* %0, %struct.fio_ls_embd_s** %2, align 8
  %3 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %3, i32 0, i32 1
  %5 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %6 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %7 = icmp eq %struct.fio_ls_embd_s* %5, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_siphash13(i8*, i64, i64, i64) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %8, align 8
  %13 = call i64 @fio_siphash_xy(i8* %9, i64 %10, i64 1, i64 3, i64 %11, i64 %12)
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_ch_set_remove(%struct.fio_ch_set_s*, i64, %struct.channel_s*, %struct.channel_s**) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_ch_set_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.channel_s*, align 8
  %9 = alloca %struct.channel_s**, align 8
  %10 = alloca %struct.fio_ch_set__map_s_*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store %struct.channel_s* %2, %struct.channel_s** %8, align 8
  store %struct.channel_s** %3, %struct.channel_s*** %9, align 8
  %11 = load i64, i64* %7, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  store i32 -1, i32* %5, align 4
  br label %95

14:                                               ; preds = %4
  %15 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %16 = load i64, i64* %7, align 8
  %17 = load %struct.channel_s*, %struct.channel_s** %8, align 8
  %18 = call %struct.fio_ch_set__map_s_* @fio_ch_set__find_map_pos_(%struct.fio_ch_set_s* %15, i64 %16, %struct.channel_s* %17)
  store %struct.fio_ch_set__map_s_* %18, %struct.fio_ch_set__map_s_** %10, align 8
  %19 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %20 = icmp ne %struct.fio_ch_set__map_s_* %19, null
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %23 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %22, i32 0, i32 1
  %24 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %23, align 8
  %25 = icmp ne %struct.fio_ch_set__ordered_s_* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %21, %14
  store i32 -1, i32* %5, align 4
  br label %95

27:                                               ; preds = %21
  %28 = load %struct.channel_s**, %struct.channel_s*** %9, align 8
  %29 = icmp ne %struct.channel_s** %28, null
  br i1 %29, label %30, label %38

30:                                               ; preds = %27
  %31 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %32 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %31, i32 0, i32 1
  %33 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %32, align 8
  %34 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %33, i32 0, i32 1
  %35 = load %struct.channel_s*, %struct.channel_s** %34, align 8
  %36 = call %struct.channel_s* @fio_channel_copy(%struct.channel_s* %35)
  %37 = load %struct.channel_s**, %struct.channel_s*** %9, align 8
  store %struct.channel_s* %36, %struct.channel_s** %37, align 8
  br label %38

38:                                               ; preds = %30, %27
  %39 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %40 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %39, i32 0, i32 1
  %41 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %40, align 8
  %42 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %41, i32 0, i32 1
  %43 = load %struct.channel_s*, %struct.channel_s** %42, align 8
  call void @fio_channel_free(%struct.channel_s* %43)
  %44 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %45 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, -1
  store i64 %47, i64* %45, align 8
  %48 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %49 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %48, i32 0, i32 1
  %50 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %49, align 8
  %51 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %50, i32 0, i32 0
  store i64 0, i64* %51, align 8
  %52 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %53 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %52, i32 0, i32 1
  %54 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %53, align 8
  %55 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %56 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %55, i32 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %59 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %58, i32 0, i32 3
  %60 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %59, align 8
  %61 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %60, i64 %57
  %62 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %61, i64 -1
  %63 = icmp eq %struct.fio_ch_set__ordered_s_* %54, %62
  br i1 %63, label %64, label %92

64:                                               ; preds = %38
  %65 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %66 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %65, i32 0, i32 0
  store i64 0, i64* %66, align 8
  br label %67

67:                                               ; preds = %89, %64
  %68 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %69 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %68, i32 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, -1
  store i64 %71, i64* %69, align 8
  br label %72

72:                                               ; preds = %67
  %73 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %74 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %73, i32 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = icmp ne i64 %75, 0
  br i1 %76, label %77, label %89

77:                                               ; preds = %72
  %78 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %79 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %78, i32 0, i32 3
  %80 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %79, align 8
  %81 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %6, align 8
  %82 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %81, i32 0, i32 2
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %83, 1
  %85 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %80, i64 %84
  %86 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %85, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %87, 0
  br label %89

89:                                               ; preds = %77, %72
  %90 = phi i1 [ false, %72 ], [ %88, %77 ]
  br i1 %90, label %67, label %91

91:                                               ; preds = %89
  br label %92

92:                                               ; preds = %91, %38
  %93 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %10, align 8
  %94 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %93, i32 0, i32 1
  store %struct.fio_ch_set__ordered_s_* null, %struct.fio_ch_set__ordered_s_** %94, align 8
  store i32 0, i32* %5, align 4
  br label %95

95:                                               ; preds = %92, %26, %13
  %96 = load i32, i32* %5, align 4
  ret i32 %96
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_pubsub_on_channel_destroy(%struct.channel_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_str_info_s, align 8
  store %struct.channel_s* %0, %struct.channel_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %5 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 3), align 8
  store %struct.fio_engine_set__ordered_s_* %5, %struct.fio_engine_set__ordered_s_** %3, align 8
  br label %6

6:                                                ; preds = %44, %1
  %7 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %8 = icmp ne %struct.fio_engine_set__ordered_s_* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %6
  %10 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %11 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 3), align 8
  %12 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 2), align 8
  %13 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %11, i64 %12
  %14 = icmp ult %struct.fio_engine_set__ordered_s_* %10, %13
  br label %15

15:                                               ; preds = %9, %6
  %16 = phi i1 [ false, %6 ], [ %14, %9 ]
  br i1 %16, label %17, label %47

17:                                               ; preds = %15
  %18 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %19 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  br label %44

23:                                               ; preds = %17
  %24 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %25 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %24, i32 0, i32 1
  %26 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %25, align 8
  %27 = getelementptr inbounds %struct.fio_pubsub_engine_s, %struct.fio_pubsub_engine_s* %26, i32 0, i32 1
  %28 = load void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)** %27, align 8
  %29 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %30 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %29, i32 0, i32 1
  %31 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %30, align 8
  %32 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 0
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 1
  %34 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %35 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %33, align 8
  %37 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 2
  %38 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %39 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %38, i32 0, i32 1
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %37, align 8
  %41 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %42 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %41, i32 0, i32 5
  %43 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %42, align 8
  call void %28(%struct.fio_pubsub_engine_s* %31, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %4, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %43)
  br label %44

44:                                               ; preds = %23, %22
  %45 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %46 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %45, i32 1
  store %struct.fio_engine_set__ordered_s_* %46, %struct.fio_engine_set__ordered_s_** %3, align 8
  br label %6

47:                                               ; preds = %15
  %48 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %49 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  call void @fio_cluster_inform_root_about_channel(%struct.channel_s* %49, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_subscription_free(%struct.subscription_s*) #0 {
  %2 = alloca %struct.subscription_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store %struct.subscription_s* %0, %struct.subscription_s** %2, align 8
  %5 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %6 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %5, i32 0, i32 6
  store i64 1, i64* %3, align 8
  %7 = load i64, i64* %3, align 8
  %8 = atomicrmw volatile sub i64* %6, i64 %7 seq_cst
  %9 = sub i64 %8, %7
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %4, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  br label %34

13:                                               ; preds = %1
  %14 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %15 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %14, i32 0, i32 3
  %16 = load void (i8*, i8*)*, void (i8*, i8*)** %15, align 8
  %17 = icmp ne void (i8*, i8*)* %16, null
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %20 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %19, i32 0, i32 3
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %20, align 8
  %22 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %23 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %22, i32 0, i32 4
  %24 = load i8*, i8** %23, align 8
  %25 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %26 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %25, i32 0, i32 5
  %27 = load i8*, i8** %26, align 8
  call void %21(i8* %24, i8* %27)
  br label %28

28:                                               ; preds = %18, %13
  %29 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %30 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %29, i32 0, i32 1
  %31 = load %struct.channel_s*, %struct.channel_s** %30, align 8
  call void @fio_channel_free(%struct.channel_s* %31)
  %32 = load %struct.subscription_s*, %struct.subscription_s** %2, align 8
  %33 = bitcast %struct.subscription_s* %32 to i8*
  call void @fio_free(i8* %33)
  br label %34

34:                                               ; preds = %28, %12
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_subscription_channel(%struct.fio_str_info_s* noalias sret, %struct.subscription_s*) #0 {
  %3 = alloca %struct.subscription_s*, align 8
  store %struct.subscription_s* %1, %struct.subscription_s** %3, align 8
  %4 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %6 = load %struct.subscription_s*, %struct.subscription_s** %3, align 8
  %7 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %6, i32 0, i32 1
  %8 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %9 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %5, align 8
  %11 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %12 = load %struct.subscription_s*, %struct.subscription_s** %3, align 8
  %13 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %12, i32 0, i32 1
  %14 = load %struct.channel_s*, %struct.channel_s** %13, align 8
  %15 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %14, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  store i8* %16, i8** %11, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_pubsub_attach(%struct.fio_pubsub_engine_s*) #0 {
  %2 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_pubsub_engine_s* %0, %struct.fio_pubsub_engine_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %3 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %4 = ptrtoint %struct.fio_pubsub_engine_s* %3 to i64
  %5 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %6 = call %struct.fio_pubsub_engine_s* @fio_engine_set_insert(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0), i64 %4, %struct.fio_pubsub_engine_s* %5)
  %7 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %8 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  call void @fio_pubsub_reattach(%struct.fio_pubsub_engine_s* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_pubsub_engine_s* @fio_engine_set_insert(%struct.fio_engine_set_s*, i64, %struct.fio_pubsub_engine_s*) #0 {
  %4 = alloca %struct.fio_engine_set_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store %struct.fio_pubsub_engine_s* %2, %struct.fio_pubsub_engine_s** %6, align 8
  %7 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %6, align 8
  %10 = call %struct.fio_pubsub_engine_s* @fio_engine_set__insert_or_overwrite_(%struct.fio_engine_set_s* %7, i64 %8, %struct.fio_pubsub_engine_s* %9, i32 0, %struct.fio_pubsub_engine_s** null)
  ret %struct.fio_pubsub_engine_s* %10
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_pubsub_reattach(%struct.fio_pubsub_engine_s*) #0 {
  %2 = alloca %struct.fio_pubsub_engine_s*, align 8
  %3 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_str_info_s, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  store %struct.fio_pubsub_engine_s* %0, %struct.fio_pubsub_engine_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 1))
  %7 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %7, %struct.fio_ch_set__ordered_s_** %3, align 8
  br label %8

8:                                                ; preds = %43, %1
  %9 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %10 = icmp ne %struct.fio_ch_set__ordered_s_* %9, null
  br i1 %10, label %11, label %17

11:                                               ; preds = %8
  %12 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %13 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  %14 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 2), align 8
  %15 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %13, i64 %14
  %16 = icmp ult %struct.fio_ch_set__ordered_s_* %12, %15
  br label %17

17:                                               ; preds = %11, %8
  %18 = phi i1 [ false, %8 ], [ %16, %11 ]
  br i1 %18, label %19, label %46

19:                                               ; preds = %17
  %20 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %21 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %19
  br label %43

25:                                               ; preds = %19
  %26 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %27 = getelementptr inbounds %struct.fio_pubsub_engine_s, %struct.fio_pubsub_engine_s* %26, i32 0, i32 0
  %28 = load void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)** %27, align 8
  %29 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %30 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 0
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 1
  %32 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %33 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %32, i32 0, i32 1
  %34 = load %struct.channel_s*, %struct.channel_s** %33, align 8
  %35 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %31, align 8
  %37 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 2
  %38 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %39 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %38, i32 0, i32 1
  %40 = load %struct.channel_s*, %struct.channel_s** %39, align 8
  %41 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %40, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  store i8* %42, i8** %37, align 8
  call void %28(%struct.fio_pubsub_engine_s* %29, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %4, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* null)
  br label %43

43:                                               ; preds = %25, %24
  %44 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %45 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %44, i32 1
  store %struct.fio_ch_set__ordered_s_* %45, %struct.fio_ch_set__ordered_s_** %3, align 8
  br label %8

46:                                               ; preds = %17
  %47 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 1))
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  %48 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %48, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %49

49:                                               ; preds = %89, %46
  %50 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %51 = icmp ne %struct.fio_ch_set__ordered_s_* %50, null
  br i1 %51, label %52, label %58

52:                                               ; preds = %49
  %53 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %54 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  %55 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 2), align 8
  %56 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %54, i64 %55
  %57 = icmp ult %struct.fio_ch_set__ordered_s_* %53, %56
  br label %58

58:                                               ; preds = %52, %49
  %59 = phi i1 [ false, %49 ], [ %57, %52 ]
  br i1 %59, label %60, label %92

60:                                               ; preds = %58
  %61 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %62 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %60
  br label %89

66:                                               ; preds = %60
  %67 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %68 = getelementptr inbounds %struct.fio_pubsub_engine_s, %struct.fio_pubsub_engine_s* %67, i32 0, i32 0
  %69 = load void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)** %68, align 8
  %70 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %71 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 0
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %73 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %74 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %73, i32 0, i32 1
  %75 = load %struct.channel_s*, %struct.channel_s** %74, align 8
  %76 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %75, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %72, align 8
  %78 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  %79 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %80 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %79, i32 0, i32 1
  %81 = load %struct.channel_s*, %struct.channel_s** %80, align 8
  %82 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %81, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  store i8* %83, i8** %78, align 8
  %84 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %85 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %84, i32 0, i32 1
  %86 = load %struct.channel_s*, %struct.channel_s** %85, align 8
  %87 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %86, i32 0, i32 5
  %88 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %87, align 8
  call void %69(%struct.fio_pubsub_engine_s* %70, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %6, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %88)
  br label %89

89:                                               ; preds = %66, %65
  %90 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %91 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %90, i32 1
  store %struct.fio_ch_set__ordered_s_* %91, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %49

92:                                               ; preds = %58
  %93 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_pubsub_detach(%struct.fio_pubsub_engine_s*) #0 {
  %2 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_pubsub_engine_s* %0, %struct.fio_pubsub_engine_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %3 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %4 = ptrtoint %struct.fio_pubsub_engine_s* %3 to i64
  %5 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %6 = call i32 @fio_engine_set_remove(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0), i64 %4, %struct.fio_pubsub_engine_s* %5, %struct.fio_pubsub_engine_s** null)
  %7 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_engine_set_remove(%struct.fio_engine_set_s*, i64, %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s**) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_engine_set_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.fio_pubsub_engine_s*, align 8
  %9 = alloca %struct.fio_pubsub_engine_s**, align 8
  %10 = alloca %struct.fio_engine_set__map_s_*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store %struct.fio_pubsub_engine_s* %2, %struct.fio_pubsub_engine_s** %8, align 8
  store %struct.fio_pubsub_engine_s** %3, %struct.fio_pubsub_engine_s*** %9, align 8
  %11 = load i64, i64* %7, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  store i32 -1, i32* %5, align 4
  br label %89

14:                                               ; preds = %4
  %15 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %16 = load i64, i64* %7, align 8
  %17 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %8, align 8
  %18 = call %struct.fio_engine_set__map_s_* @fio_engine_set__find_map_pos_(%struct.fio_engine_set_s* %15, i64 %16, %struct.fio_pubsub_engine_s* %17)
  store %struct.fio_engine_set__map_s_* %18, %struct.fio_engine_set__map_s_** %10, align 8
  %19 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %20 = icmp ne %struct.fio_engine_set__map_s_* %19, null
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %23 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %22, i32 0, i32 1
  %24 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %23, align 8
  %25 = icmp ne %struct.fio_engine_set__ordered_s_* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %21, %14
  store i32 -1, i32* %5, align 4
  br label %89

27:                                               ; preds = %21
  %28 = load %struct.fio_pubsub_engine_s**, %struct.fio_pubsub_engine_s*** %9, align 8
  %29 = icmp ne %struct.fio_pubsub_engine_s** %28, null
  br i1 %29, label %30, label %37

30:                                               ; preds = %27
  %31 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %32 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %31, i32 0, i32 1
  %33 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %32, align 8
  %34 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %33, i32 0, i32 1
  %35 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %34, align 8
  %36 = load %struct.fio_pubsub_engine_s**, %struct.fio_pubsub_engine_s*** %9, align 8
  store %struct.fio_pubsub_engine_s* %35, %struct.fio_pubsub_engine_s** %36, align 8
  br label %37

37:                                               ; preds = %30, %27
  %38 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %39 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, -1
  store i64 %41, i64* %39, align 8
  %42 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %43 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %42, i32 0, i32 1
  %44 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %43, align 8
  %45 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %44, i32 0, i32 0
  store i64 0, i64* %45, align 8
  %46 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %47 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %46, i32 0, i32 1
  %48 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %47, align 8
  %49 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %50 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %53 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %52, i32 0, i32 3
  %54 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %53, align 8
  %55 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %54, i64 %51
  %56 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %55, i64 -1
  %57 = icmp eq %struct.fio_engine_set__ordered_s_* %48, %56
  br i1 %57, label %58, label %86

58:                                               ; preds = %37
  %59 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %60 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %59, i32 0, i32 0
  store i64 0, i64* %60, align 8
  br label %61

61:                                               ; preds = %83, %58
  %62 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %63 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %62, i32 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, -1
  store i64 %65, i64* %63, align 8
  br label %66

66:                                               ; preds = %61
  %67 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %68 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %67, i32 0, i32 2
  %69 = load i64, i64* %68, align 8
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %66
  %72 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %73 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %72, i32 0, i32 3
  %74 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %73, align 8
  %75 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %6, align 8
  %76 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, 1
  %79 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %74, i64 %78
  %80 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %81, 0
  br label %83

83:                                               ; preds = %71, %66
  %84 = phi i1 [ false, %66 ], [ %82, %71 ]
  br i1 %84, label %61, label %85

85:                                               ; preds = %83
  br label %86

86:                                               ; preds = %85, %37
  %87 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %10, align 8
  %88 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %87, i32 0, i32 1
  store %struct.fio_engine_set__ordered_s_* null, %struct.fio_engine_set__ordered_s_** %88, align 8
  store i32 0, i32* %5, align 4
  br label %89

89:                                               ; preds = %86, %26, %13
  %90 = load i32, i32* %5, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_pubsub_is_attached(%struct.fio_pubsub_engine_s*) #0 {
  %2 = alloca %struct.fio_pubsub_engine_s*, align 8
  %3 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_pubsub_engine_s* %0, %struct.fio_pubsub_engine_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %4 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %5 = ptrtoint %struct.fio_pubsub_engine_s* %4 to i64
  %6 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  %7 = call %struct.fio_pubsub_engine_s* @fio_engine_set_find(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0), i64 %5, %struct.fio_pubsub_engine_s* %6)
  store %struct.fio_pubsub_engine_s* %7, %struct.fio_pubsub_engine_s** %3, align 8
  %8 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %9 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %3, align 8
  %10 = icmp ne %struct.fio_pubsub_engine_s* %9, null
  %11 = zext i1 %10 to i32
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_pubsub_engine_s* @fio_engine_set_find(%struct.fio_engine_set_s*, i64, %struct.fio_pubsub_engine_s*) #0 {
  %4 = alloca %struct.fio_pubsub_engine_s*, align 8
  %5 = alloca %struct.fio_engine_set_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_pubsub_engine_s*, align 8
  %8 = alloca %struct.fio_engine_set__map_s_*, align 8
  %9 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store %struct.fio_pubsub_engine_s* %2, %struct.fio_pubsub_engine_s** %7, align 8
  %10 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %11 = load i64, i64* %6, align 8
  %12 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %7, align 8
  %13 = call %struct.fio_engine_set__map_s_* @fio_engine_set__find_map_pos_(%struct.fio_engine_set_s* %10, i64 %11, %struct.fio_pubsub_engine_s* %12)
  store %struct.fio_engine_set__map_s_* %13, %struct.fio_engine_set__map_s_** %8, align 8
  %14 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %8, align 8
  %15 = icmp ne %struct.fio_engine_set__map_s_* %14, null
  br i1 %15, label %16, label %21

16:                                               ; preds = %3
  %17 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %8, align 8
  %18 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %17, i32 0, i32 1
  %19 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %18, align 8
  %20 = icmp ne %struct.fio_engine_set__ordered_s_* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %16, %3
  %22 = bitcast %struct.fio_pubsub_engine_s** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 8, i1 false)
  %23 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %9, align 8
  store %struct.fio_pubsub_engine_s* %23, %struct.fio_pubsub_engine_s** %4, align 8
  br label %30

24:                                               ; preds = %16
  %25 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %8, align 8
  %26 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %25, i32 0, i32 1
  %27 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %26, align 8
  %28 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %27, i32 0, i32 1
  %29 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %28, align 8
  store %struct.fio_pubsub_engine_s* %29, %struct.fio_pubsub_engine_s** %4, align 8
  br label %30

30:                                               ; preds = %24, %21
  %31 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %4, align 8
  ret %struct.fio_pubsub_engine_s* %31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_message_metadata_callback_set(void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, i32) #0 {
  %3 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, align 8
  %4 = alloca i32, align 4
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %0, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %3, align 8
  %6 = icmp ne void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  br label %18

8:                                                ; preds = %2
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 1))
  %9 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %3, align 8
  %10 = call i32 @fio_meta_ary_remove2(%struct.fio_meta_ary_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 0), void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %9, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** null)
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %3, align 8
  %15 = call i32 @fio_meta_ary_push(%struct.fio_meta_ary_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 0), void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %14)
  br label %16

16:                                               ; preds = %13, %8
  %17 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 1))
  br label %18

18:                                               ; preds = %16, %7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_meta_ary_remove2(%struct.fio_meta_ary_s*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_meta_ary_s*, align 8
  %6 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, align 8
  %7 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, align 8
  %8 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %5, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %1, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %6, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %2, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %7, align 8
  %9 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %10 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %6, align 8
  %11 = call i64 @fio_meta_ary_find(%struct.fio_meta_ary_s* %9, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %10)
  store i64 %11, i64* %8, align 8
  %12 = load i64, i64* %8, align 8
  %13 = icmp eq i64 %12, -1
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %20

15:                                               ; preds = %3
  %16 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %17 = load i64, i64* %8, align 8
  %18 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %7, align 8
  %19 = call i32 @fio_meta_ary_remove(%struct.fio_meta_ary_s* %16, i64 %17, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %18)
  store i32 %19, i32* %4, align 4
  br label %20

20:                                               ; preds = %15, %14
  %21 = load i32, i32* %4, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_meta_ary_push(%struct.fio_meta_ary_s*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.fio_meta_ary_s*, align 8
  %5 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %4, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %1, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %5, align 8
  %6 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %7 = icmp ne %struct.fio_meta_ary_s* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %45

9:                                                ; preds = %2
  %10 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %11 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %14 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ule i64 %12, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %9
  %18 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  call void @fio_meta_ary___require_on_top(%struct.fio_meta_ary_s* %18, i64 5)
  br label %19

19:                                               ; preds = %17, %9
  %20 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %21 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %24 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %23, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %22, %25
  br i1 %26, label %27, label %32

27:                                               ; preds = %19
  %28 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %29 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %28, i32 0, i32 1
  store i64 0, i64* %29, align 8
  %30 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %31 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %30, i32 0, i32 0
  store i64 0, i64* %31, align 8
  br label %32

32:                                               ; preds = %27, %19
  %33 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %5, align 8
  %34 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %35 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %34, i32 0, i32 3
  %36 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %35, align 8
  %37 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %38 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %36, i64 %39
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %33, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %40, align 8
  %41 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %42 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %41, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %42, align 8
  store i32 0, i32* %3, align 4
  br label %45

45:                                               ; preds = %32, %8
  %46 = load i32, i32* %3, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_message_metadata(%struct.fio_msg_s*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.fio_msg_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fio_msg_metadata_s*, align 8
  %7 = alloca i64, align 8
  store %struct.fio_msg_s* %0, %struct.fio_msg_s** %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = load %struct.fio_msg_s*, %struct.fio_msg_s** %4, align 8
  %9 = bitcast %struct.fio_msg_s* %8 to %struct.fio_msg_client_s*
  %10 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %9, i32 0, i32 3
  %11 = load %struct.fio_msg_metadata_s*, %struct.fio_msg_metadata_s** %10, align 8
  store %struct.fio_msg_metadata_s* %11, %struct.fio_msg_metadata_s** %6, align 8
  %12 = load %struct.fio_msg_s*, %struct.fio_msg_s** %4, align 8
  %13 = bitcast %struct.fio_msg_s* %12 to %struct.fio_msg_client_s*
  %14 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %13, i32 0, i32 2
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %7, align 8
  br label %16

16:                                               ; preds = %35, %2
  %17 = load i64, i64* %7, align 8
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %36

19:                                               ; preds = %16
  %20 = load i64, i64* %7, align 8
  %21 = add i64 %20, -1
  store i64 %21, i64* %7, align 8
  %22 = load %struct.fio_msg_metadata_s*, %struct.fio_msg_metadata_s** %6, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %22, i64 %23
  %25 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = load i64, i64* %5, align 8
  %28 = icmp eq i64 %26, %27
  br i1 %28, label %29, label %35

29:                                               ; preds = %19
  %30 = load %struct.fio_msg_metadata_s*, %struct.fio_msg_metadata_s** %6, align 8
  %31 = load i64, i64* %7, align 8
  %32 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %30, i64 %31
  %33 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %32, i32 0, i32 2
  %34 = load i8*, i8** %33, align 8
  store i8* %34, i8** %3, align 8
  br label %37

35:                                               ; preds = %19
  br label %16

36:                                               ; preds = %16
  store i8* null, i8** %3, align 8
  br label %37

37:                                               ; preds = %36, %29
  %38 = load i8*, i8** %3, align 8
  ret i8* %38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_message_defer(%struct.fio_msg_s*) #0 {
  %2 = alloca %struct.fio_msg_s*, align 8
  %3 = alloca %struct.fio_msg_client_s*, align 8
  store %struct.fio_msg_s* %0, %struct.fio_msg_s** %2, align 8
  %4 = load %struct.fio_msg_s*, %struct.fio_msg_s** %2, align 8
  %5 = bitcast %struct.fio_msg_s* %4 to %struct.fio_msg_client_s*
  store %struct.fio_msg_client_s* %5, %struct.fio_msg_client_s** %3, align 8
  %6 = load %struct.fio_msg_client_s*, %struct.fio_msg_client_s** %3, align 8
  %7 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %6, i32 0, i32 1
  store i64 1, i64* %7, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_publish(%struct.fio_publish_args_s* byval(%struct.fio_publish_args_s) align 8) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  %3 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  %8 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %7, align 8
  %9 = icmp ne %struct.fio_pubsub_engine_s* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  store %struct.fio_pubsub_engine_s* inttoptr (i64 1 to %struct.fio_pubsub_engine_s*), %struct.fio_pubsub_engine_s** %11, align 8
  br label %20

12:                                               ; preds = %6, %1
  %13 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  %14 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %13, align 8
  %15 = icmp ne %struct.fio_pubsub_engine_s* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** @FIO_PUBSUB_DEFAULT, align 8
  %18 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  store %struct.fio_pubsub_engine_s* %17, %struct.fio_pubsub_engine_s** %18, align 8
  br label %19

19:                                               ; preds = %16, %12
  br label %20

20:                                               ; preds = %19, %10
  store %struct.fio_msg_internal_s* null, %struct.fio_msg_internal_s** %2, align 8
  %21 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  %22 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %21, align 8
  %23 = ptrtoint %struct.fio_pubsub_engine_s* %22 to i64
  switch i64 %23, label %96 [
    i64 0, label %24
    i64 1, label %24
    i64 2, label %40
    i64 3, label %49
    i64 4, label %65
  ]

24:                                               ; preds = %20, %20
  %25 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %28 = load i8, i8* %27, align 8
  %29 = zext i8 %28 to i32
  %30 = icmp ne i32 %29, 0
  %31 = zext i1 %30 to i64
  %32 = select i1 %30, i32 1, i32 0
  %33 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 2
  %34 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 3
  %35 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %36 = load i8, i8* %35, align 8
  %37 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 %26, i32 %32, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %33, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %34, i8 signext %36, i8 signext 1)
  store %struct.fio_msg_internal_s* %37, %struct.fio_msg_internal_s** %2, align 8
  %38 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_send2cluster(%struct.fio_msg_internal_s* %38)
  %39 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_publish2process(%struct.fio_msg_internal_s* %39)
  br label %118

40:                                               ; preds = %20
  %41 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 2
  %44 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 3
  %45 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %46 = load i8, i8* %45, align 8
  %47 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 %42, i32 0, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %43, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %44, i8 signext %46, i8 signext 1)
  store %struct.fio_msg_internal_s* %47, %struct.fio_msg_internal_s** %2, align 8
  %48 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_publish2process(%struct.fio_msg_internal_s* %48)
  br label %118

49:                                               ; preds = %20
  %50 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %53 = load i8, i8* %52, align 8
  %54 = zext i8 %53 to i32
  %55 = icmp ne i32 %54, 0
  %56 = zext i1 %55 to i64
  %57 = select i1 %55, i32 1, i32 0
  %58 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 2
  %59 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 3
  %60 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %61 = load i8, i8* %60, align 8
  %62 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 %51, i32 %57, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %58, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %59, i8 signext %61, i8 signext 1)
  store %struct.fio_msg_internal_s* %62, %struct.fio_msg_internal_s** %2, align 8
  %63 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_send2cluster(%struct.fio_msg_internal_s* %63)
  %64 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %64)
  store %struct.fio_msg_internal_s* null, %struct.fio_msg_internal_s** %2, align 8
  br label %118

65:                                               ; preds = %20
  %66 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %69 = load i8, i8* %68, align 8
  %70 = zext i8 %69 to i32
  %71 = icmp ne i32 %70, 0
  %72 = zext i1 %71 to i64
  %73 = select i1 %71, i32 3, i32 2
  %74 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 2
  %75 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 3
  %76 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %77 = load i8, i8* %76, align 8
  %78 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 %67, i32 %73, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %74, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %75, i8 signext %77, i8 signext 1)
  store %struct.fio_msg_internal_s* %78, %struct.fio_msg_internal_s** %2, align 8
  %79 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %80 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %79, i32 0, i32 8
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %90, label %84

84:                                               ; preds = %65
  %85 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %86 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %85, i32 0, i32 4
  %87 = load i16, i16* %86, align 8
  %88 = zext i16 %87 to i32
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %92

90:                                               ; preds = %84, %65
  %91 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_publish2process(%struct.fio_msg_internal_s* %91)
  br label %95

92:                                               ; preds = %84
  %93 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %94 = bitcast %struct.fio_msg_internal_s* %93 to i8*
  call void @fio_cluster_client_sender(i8* %94, i64 -1)
  br label %95

95:                                               ; preds = %92, %90
  br label %118

96:                                               ; preds = %20
  %97 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %107

100:                                              ; preds = %96
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %103 = icmp sle i32 2, %102
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.37, i64 0, i64 0))
  br label %105

105:                                              ; preds = %104, %101
  br label %106

106:                                              ; preds = %105
  br label %119

107:                                              ; preds = %96
  %108 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  %109 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %108, align 8
  %110 = getelementptr inbounds %struct.fio_pubsub_engine_s, %struct.fio_pubsub_engine_s* %109, i32 0, i32 2
  %111 = load void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %110, align 8
  %112 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 0
  %113 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %112, align 8
  %114 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 2
  %115 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 3
  %116 = getelementptr inbounds %struct.fio_publish_args_s, %struct.fio_publish_args_s* %0, i32 0, i32 4
  %117 = load i8, i8* %116, align 8
  call void %111(%struct.fio_pubsub_engine_s* %113, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %114, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %115, i8 zeroext %117)
  br label %118

118:                                              ; preds = %107, %95, %49, %40, %24
  br label %119

119:                                              ; preds = %118, %106
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_msg_internal_s* @fio_msg_internal_create(i32, i32, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8, i8 signext, i8 signext) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %struct.fio_meta_ary_s, align 8
  %12 = alloca %struct.fio_meta_ary_s, align 8
  %13 = alloca %struct.fio_msg_internal_s*, align 8
  %14 = alloca %struct.fio_msg_internal_s, align 8
  %15 = alloca %struct.fio_msg_metadata_s, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i8 %4, i8* %9, align 1
  store i8 %5, i8* %10, align 1
  %16 = bitcast %struct.fio_meta_ary_s* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 32, i1 false)
  %17 = load i32, i32* %7, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %6
  call void @fio_postoffice_meta_copy_new(%struct.fio_meta_ary_s* sret %12)
  %20 = bitcast %struct.fio_meta_ary_s* %11 to i8*
  %21 = bitcast %struct.fio_meta_ary_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 32, i1 false)
  br label %22

22:                                               ; preds = %19, %6
  %23 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = mul i64 24, %24
  %26 = add i64 72, %25
  %27 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %26, %28
  %30 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %29, %31
  %33 = add i64 %32, 16
  %34 = add i64 %33, 2
  %35 = call noalias i8* @fio_malloc(i64 %34)
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 15
  %38 = icmp eq i64 %37, 0
  call void @llvm.assume(i1 %38)
  %39 = bitcast i8* %35 to %struct.fio_msg_internal_s*
  store %struct.fio_msg_internal_s* %39, %struct.fio_msg_internal_s** %13, align 8
  %40 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %41 = icmp ne %struct.fio_msg_internal_s* %40, null
  br i1 %41, label %52, label %42

42:                                               ; preds = %22
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %45 = icmp sle i32 1, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.87, i64 0, i64 0))
  br label %47

47:                                               ; preds = %46, %43
  br label %48

48:                                               ; preds = %47
  %49 = call i32 @kill(i32 0, i32 2) #1
  %50 = call i32* @__errno_location() #9
  %51 = load i32, i32* %50, align 4
  call void @exit(i32 %51) #11
  unreachable

52:                                               ; preds = %22
  %53 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %54 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 0
  %55 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %54, i32 0, i32 0
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %54, i32 0, i32 1
  %57 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %56, align 8
  %59 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %54, i32 0, i32 2
  %60 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %61 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %60, i32 0, i32 6
  %62 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %61, i64 0, i64 0
  %63 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %62, i64 %64
  %66 = bitcast %struct.fio_msg_metadata_s* %65 to i8*
  %67 = getelementptr inbounds i8, i8* %66, i64 16
  store i8* %67, i8** %59, align 8
  %68 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 1
  %69 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %68, i32 0, i32 0
  store i64 0, i64* %69, align 8
  %70 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %68, i32 0, i32 1
  %71 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %70, align 8
  %73 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %68, i32 0, i32 2
  %74 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %75 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %74, i32 0, i32 6
  %76 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %75, i64 0, i64 0
  %77 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %76, i64 %78
  %80 = bitcast %struct.fio_msg_metadata_s* %79 to i8*
  %81 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = getelementptr inbounds i8, i8* %83, i64 16
  %85 = getelementptr inbounds i8, i8* %84, i64 1
  store i8* %85, i8** %73, align 8
  %86 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 2
  store i64 1, i64* %86, align 8
  %87 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 3
  %88 = load i32, i32* %7, align 4
  store i32 %88, i32* %87, align 8
  %89 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 4
  %90 = load i8, i8* %9, align 1
  store i8 %90, i8* %89, align 4
  %91 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 5
  %92 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %91, align 8
  %94 = bitcast %struct.fio_msg_internal_s* %53 to i8*
  %95 = bitcast %struct.fio_msg_internal_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 72, i1 false)
  br label %96

96:                                               ; preds = %52
  %97 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = trunc i64 %98 to i32
  %100 = lshr i32 %99, 24
  %101 = and i32 %100, 255
  %102 = trunc i32 %101 to i8
  %103 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %104 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %103, i64 1
  %105 = bitcast %struct.fio_msg_internal_s* %104 to i8*
  %106 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = mul i64 24, %107
  %109 = getelementptr inbounds i8, i8* %105, i64 %108
  %110 = getelementptr inbounds i8, i8* %109, i64 0
  store i8 %102, i8* %110, align 1
  %111 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = trunc i64 %112 to i32
  %114 = lshr i32 %113, 16
  %115 = and i32 %114, 255
  %116 = trunc i32 %115 to i8
  %117 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %118 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %117, i64 1
  %119 = bitcast %struct.fio_msg_internal_s* %118 to i8*
  %120 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = mul i64 24, %121
  %123 = getelementptr inbounds i8, i8* %119, i64 %122
  %124 = getelementptr inbounds i8, i8* %123, i64 1
  store i8 %116, i8* %124, align 1
  %125 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = trunc i64 %126 to i32
  %128 = lshr i32 %127, 8
  %129 = and i32 %128, 255
  %130 = trunc i32 %129 to i8
  %131 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %132 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %131, i64 1
  %133 = bitcast %struct.fio_msg_internal_s* %132 to i8*
  %134 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = mul i64 24, %135
  %137 = getelementptr inbounds i8, i8* %133, i64 %136
  %138 = getelementptr inbounds i8, i8* %137, i64 2
  store i8 %130, i8* %138, align 1
  %139 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %140 = load i64, i64* %139, align 8
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 255
  %143 = trunc i32 %142 to i8
  %144 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %145 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %144, i64 1
  %146 = bitcast %struct.fio_msg_internal_s* %145 to i8*
  %147 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %148 = load i64, i64* %147, align 8
  %149 = mul i64 24, %148
  %150 = getelementptr inbounds i8, i8* %146, i64 %149
  %151 = getelementptr inbounds i8, i8* %150, i64 3
  store i8 %143, i8* %151, align 1
  br label %152

152:                                              ; preds = %96
  br label %153

153:                                              ; preds = %152
  %154 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %155 = load i64, i64* %154, align 8
  %156 = trunc i64 %155 to i32
  %157 = lshr i32 %156, 24
  %158 = and i32 %157, 255
  %159 = trunc i32 %158 to i8
  %160 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %161 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %160, i64 1
  %162 = bitcast %struct.fio_msg_internal_s* %161 to i8*
  %163 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = mul i64 24, %164
  %166 = getelementptr inbounds i8, i8* %162, i64 %165
  %167 = getelementptr inbounds i8, i8* %166, i64 4
  %168 = getelementptr inbounds i8, i8* %167, i64 0
  store i8 %159, i8* %168, align 1
  %169 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = trunc i64 %170 to i32
  %172 = lshr i32 %171, 16
  %173 = and i32 %172, 255
  %174 = trunc i32 %173 to i8
  %175 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %176 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %175, i64 1
  %177 = bitcast %struct.fio_msg_internal_s* %176 to i8*
  %178 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %179 = load i64, i64* %178, align 8
  %180 = mul i64 24, %179
  %181 = getelementptr inbounds i8, i8* %177, i64 %180
  %182 = getelementptr inbounds i8, i8* %181, i64 4
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  store i8 %174, i8* %183, align 1
  %184 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %185 = load i64, i64* %184, align 8
  %186 = trunc i64 %185 to i32
  %187 = lshr i32 %186, 8
  %188 = and i32 %187, 255
  %189 = trunc i32 %188 to i8
  %190 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %191 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %190, i64 1
  %192 = bitcast %struct.fio_msg_internal_s* %191 to i8*
  %193 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %194 = load i64, i64* %193, align 8
  %195 = mul i64 24, %194
  %196 = getelementptr inbounds i8, i8* %192, i64 %195
  %197 = getelementptr inbounds i8, i8* %196, i64 4
  %198 = getelementptr inbounds i8, i8* %197, i64 2
  store i8 %189, i8* %198, align 1
  %199 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %200 = load i64, i64* %199, align 8
  %201 = trunc i64 %200 to i32
  %202 = and i32 %201, 255
  %203 = trunc i32 %202 to i8
  %204 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %205 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %204, i64 1
  %206 = bitcast %struct.fio_msg_internal_s* %205 to i8*
  %207 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %208 = load i64, i64* %207, align 8
  %209 = mul i64 24, %208
  %210 = getelementptr inbounds i8, i8* %206, i64 %209
  %211 = getelementptr inbounds i8, i8* %210, i64 4
  %212 = getelementptr inbounds i8, i8* %211, i64 3
  store i8 %203, i8* %212, align 1
  br label %213

213:                                              ; preds = %153
  br label %214

214:                                              ; preds = %213
  %215 = load i32, i32* %8, align 4
  %216 = lshr i32 %215, 24
  %217 = and i32 %216, 255
  %218 = trunc i32 %217 to i8
  %219 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %220 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %219, i64 1
  %221 = bitcast %struct.fio_msg_internal_s* %220 to i8*
  %222 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = mul i64 24, %223
  %225 = getelementptr inbounds i8, i8* %221, i64 %224
  %226 = getelementptr inbounds i8, i8* %225, i64 8
  %227 = getelementptr inbounds i8, i8* %226, i64 0
  store i8 %218, i8* %227, align 1
  %228 = load i32, i32* %8, align 4
  %229 = lshr i32 %228, 16
  %230 = and i32 %229, 255
  %231 = trunc i32 %230 to i8
  %232 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %233 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %232, i64 1
  %234 = bitcast %struct.fio_msg_internal_s* %233 to i8*
  %235 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = mul i64 24, %236
  %238 = getelementptr inbounds i8, i8* %234, i64 %237
  %239 = getelementptr inbounds i8, i8* %238, i64 8
  %240 = getelementptr inbounds i8, i8* %239, i64 1
  store i8 %231, i8* %240, align 1
  %241 = load i32, i32* %8, align 4
  %242 = lshr i32 %241, 8
  %243 = and i32 %242, 255
  %244 = trunc i32 %243 to i8
  %245 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %246 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %245, i64 1
  %247 = bitcast %struct.fio_msg_internal_s* %246 to i8*
  %248 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %249 = load i64, i64* %248, align 8
  %250 = mul i64 24, %249
  %251 = getelementptr inbounds i8, i8* %247, i64 %250
  %252 = getelementptr inbounds i8, i8* %251, i64 8
  %253 = getelementptr inbounds i8, i8* %252, i64 2
  store i8 %244, i8* %253, align 1
  %254 = load i32, i32* %8, align 4
  %255 = and i32 %254, 255
  %256 = trunc i32 %255 to i8
  %257 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %258 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %257, i64 1
  %259 = bitcast %struct.fio_msg_internal_s* %258 to i8*
  %260 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %261 = load i64, i64* %260, align 8
  %262 = mul i64 24, %261
  %263 = getelementptr inbounds i8, i8* %259, i64 %262
  %264 = getelementptr inbounds i8, i8* %263, i64 8
  %265 = getelementptr inbounds i8, i8* %264, i64 3
  store i8 %256, i8* %265, align 1
  br label %266

266:                                              ; preds = %214
  br label %267

267:                                              ; preds = %266
  %268 = load i32, i32* %7, align 4
  %269 = lshr i32 %268, 24
  %270 = and i32 %269, 255
  %271 = trunc i32 %270 to i8
  %272 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %273 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %272, i64 1
  %274 = bitcast %struct.fio_msg_internal_s* %273 to i8*
  %275 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %276 = load i64, i64* %275, align 8
  %277 = mul i64 24, %276
  %278 = getelementptr inbounds i8, i8* %274, i64 %277
  %279 = getelementptr inbounds i8, i8* %278, i64 12
  %280 = getelementptr inbounds i8, i8* %279, i64 0
  store i8 %271, i8* %280, align 1
  %281 = load i32, i32* %7, align 4
  %282 = lshr i32 %281, 16
  %283 = and i32 %282, 255
  %284 = trunc i32 %283 to i8
  %285 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %286 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %285, i64 1
  %287 = bitcast %struct.fio_msg_internal_s* %286 to i8*
  %288 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %289 = load i64, i64* %288, align 8
  %290 = mul i64 24, %289
  %291 = getelementptr inbounds i8, i8* %287, i64 %290
  %292 = getelementptr inbounds i8, i8* %291, i64 12
  %293 = getelementptr inbounds i8, i8* %292, i64 1
  store i8 %284, i8* %293, align 1
  %294 = load i32, i32* %7, align 4
  %295 = lshr i32 %294, 8
  %296 = and i32 %295, 255
  %297 = trunc i32 %296 to i8
  %298 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %299 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %298, i64 1
  %300 = bitcast %struct.fio_msg_internal_s* %299 to i8*
  %301 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %302 = load i64, i64* %301, align 8
  %303 = mul i64 24, %302
  %304 = getelementptr inbounds i8, i8* %300, i64 %303
  %305 = getelementptr inbounds i8, i8* %304, i64 12
  %306 = getelementptr inbounds i8, i8* %305, i64 2
  store i8 %297, i8* %306, align 1
  %307 = load i32, i32* %7, align 4
  %308 = and i32 %307, 255
  %309 = trunc i32 %308 to i8
  %310 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %311 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %310, i64 1
  %312 = bitcast %struct.fio_msg_internal_s* %311 to i8*
  %313 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %314 = load i64, i64* %313, align 8
  %315 = mul i64 24, %314
  %316 = getelementptr inbounds i8, i8* %312, i64 %315
  %317 = getelementptr inbounds i8, i8* %316, i64 12
  %318 = getelementptr inbounds i8, i8* %317, i64 3
  store i8 %309, i8* %318, align 1
  br label %319

319:                                              ; preds = %267
  %320 = load i8, i8* %10, align 1
  %321 = icmp ne i8 %320, 0
  br i1 %321, label %322, label %366

322:                                              ; preds = %319
  %323 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %324 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %323, i32 0, i32 0
  %325 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %324, i32 0, i32 2
  %326 = load i8*, i8** %325, align 8
  %327 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 2
  %328 = load i8*, i8** %327, align 8
  %329 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  %330 = load i64, i64* %329, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %326, i8* align 1 %328, i64 %330, i1 false)
  %331 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %332 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %331, i32 0, i32 1
  %333 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %332, i32 0, i32 2
  %334 = load i8*, i8** %333, align 8
  %335 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 2
  %336 = load i8*, i8** %335, align 8
  %337 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %3, i32 0, i32 1
  %338 = load i64, i64* %337, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %334, i8* align 1 %336, i64 %338, i1 false)
  br label %339

339:                                              ; preds = %343, %322
  %340 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %341 = load i64, i64* %340, align 8
  %342 = icmp ne i64 %341, 0
  br i1 %342, label %343, label %365

343:                                              ; preds = %339
  %344 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = add i64 %345, -1
  store i64 %346, i64* %344, align 8
  %347 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %348 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %347, i32 0, i32 6
  %349 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %350 = load i64, i64* %349, align 8
  %351 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %348, i64 0, i64 %350
  %352 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 3
  %353 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %352, align 8
  %354 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %355 = load i64, i64* %354, align 8
  %356 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %353, i64 %355
  %357 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %356, align 8
  %358 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %359 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %358, i32 0, i32 0
  %360 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  %361 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %360, i32 0, i32 1
  %362 = load i8, i8* %9, align 1
  call void %357(%struct.fio_msg_metadata_s* sret %15, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %359, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %361, i8 zeroext %362)
  %363 = bitcast %struct.fio_msg_metadata_s* %351 to i8*
  %364 = bitcast %struct.fio_msg_metadata_s* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %363, i8* align 8 %364, i64 24, i1 false)
  br label %339

365:                                              ; preds = %339
  br label %366

366:                                              ; preds = %365, %319
  call void @fio_postoffice_meta_copy_free(%struct.fio_meta_ary_s* %11)
  %367 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %13, align 8
  ret %struct.fio_msg_internal_s* %367
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_send2cluster(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %3 = call signext i16 @fio_is_running()
  %4 = icmp ne i16 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %5
  %7 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %8 = icmp sle i32 2, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.88, i64 0, i64 0))
  br label %10

10:                                               ; preds = %9, %6
  br label %11

11:                                               ; preds = %10
  br label %30

12:                                               ; preds = %1
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 4
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %19

18:                                               ; preds = %12
  br label %30

19:                                               ; preds = %12
  %20 = call i32 @fio_is_master()
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %19
  %23 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %24 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %23)
  %25 = bitcast %struct.fio_msg_internal_s* %24 to i8*
  call void @fio_cluster_server_sender(i8* %25, i64 -1)
  br label %30

26:                                               ; preds = %19
  %27 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %28 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %27)
  %29 = bitcast %struct.fio_msg_internal_s* %28 to i8*
  call void @fio_cluster_client_sender(i8* %29, i64 -1)
  br label %30

30:                                               ; preds = %11, %18, %26, %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_publish2process(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.fio_defer_task_s, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_defer_task_s, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %8 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_msg_internal_finalize(%struct.fio_msg_internal_s* %8)
  %9 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %1
  %14 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %15 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = call %struct.channel_s* @fio_filter_find_dup(i32 %16)
  store %struct.channel_s* %17, %struct.channel_s** %3, align 8
  %18 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %19 = icmp ne %struct.channel_s* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %13
  br label %106

21:                                               ; preds = %13
  br label %26

22:                                               ; preds = %1
  %23 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %24 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %23, i32 0, i32 0
  %25 = call %struct.channel_s* @fio_channel_find_dup(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %24)
  store %struct.channel_s* %25, %struct.channel_s** %3, align 8
  br label %26

26:                                               ; preds = %22, %21
  %27 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %28 = icmp ne %struct.channel_s* %27, null
  br i1 %28, label %29, label %38

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 0
  store void (i8*, i8*)* @fio_publish2channel_task, void (i8*, i8*)** %30, align 8
  %31 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 1
  %32 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %33 = bitcast %struct.channel_s* %32 to i8*
  store i8* %33, i8** %31, align 8
  %34 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %4, i32 0, i32 2
  %35 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %36 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %35)
  %37 = bitcast %struct.fio_msg_internal_s* %36 to i8*
  store i8* %37, i8** %34, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %4, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %38

38:                                               ; preds = %29, %26
  %39 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %40 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %39, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %105

43:                                               ; preds = %38
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  %44 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %44, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %45

45:                                               ; preds = %100, %43
  %46 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %47 = icmp ne %struct.fio_ch_set__ordered_s_* %46, null
  br i1 %47, label %48, label %54

48:                                               ; preds = %45
  %49 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %50 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  %51 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 2), align 8
  %52 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %50, i64 %51
  %53 = icmp ult %struct.fio_ch_set__ordered_s_* %49, %52
  br label %54

54:                                               ; preds = %48, %45
  %55 = phi i1 [ false, %45 ], [ %53, %48 ]
  br i1 %55, label %56, label %103

56:                                               ; preds = %54
  %57 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %58 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %56
  br label %100

62:                                               ; preds = %56
  %63 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %64 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %63, i32 0, i32 1
  %65 = load %struct.channel_s*, %struct.channel_s** %64, align 8
  %66 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %65, i32 0, i32 5
  %67 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %66, align 8
  %68 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 0
  store i64 0, i64* %68, align 8
  %69 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %70 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %71 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %70, i32 0, i32 1
  %72 = load %struct.channel_s*, %struct.channel_s** %71, align 8
  %73 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %69, align 8
  %75 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  %76 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %77 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %76, i32 0, i32 1
  %78 = load %struct.channel_s*, %struct.channel_s** %77, align 8
  %79 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %78, i32 0, i32 1
  %80 = load i8*, i8** %79, align 8
  store i8* %80, i8** %75, align 8
  %81 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %82 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %81, i32 0, i32 0
  %83 = call i32 %67(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %6, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %82)
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %99

85:                                               ; preds = %62
  %86 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %87 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %86, i32 0, i32 1
  %88 = load %struct.channel_s*, %struct.channel_s** %87, align 8
  call void @fio_channel_dup(%struct.channel_s* %88)
  %89 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 0
  store void (i8*, i8*)* @fio_publish2channel_task, void (i8*, i8*)** %89, align 8
  %90 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 1
  %91 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %92 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %91, i32 0, i32 1
  %93 = load %struct.channel_s*, %struct.channel_s** %92, align 8
  %94 = bitcast %struct.channel_s* %93 to i8*
  store i8* %94, i8** %90, align 8
  %95 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %7, i32 0, i32 2
  %96 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %97 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %96)
  %98 = bitcast %struct.fio_msg_internal_s* %97 to i8*
  store i8* %98, i8** %95, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %7, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %99

99:                                               ; preds = %85, %62
  br label %100

100:                                              ; preds = %99, %61
  %101 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %102 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %101, i32 1
  store %struct.fio_ch_set__ordered_s_* %102, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %45

103:                                              ; preds = %54
  %104 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  br label %105

105:                                              ; preds = %103, %38
  br label %106

106:                                              ; preds = %105, %20
  %107 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %107)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_msg_internal_free(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_msg_s, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %6 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %6, i32 0, i32 2
  store i64 1, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  %9 = atomicrmw sub i64* %7, i64 %8 seq_cst
  %10 = sub i64 %9, %8
  store i64 %10, i64* %4, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  br label %69

14:                                               ; preds = %1
  br label %15

15:                                               ; preds = %65, %14
  %16 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %17 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %16, i32 0, i32 5
  %18 = load i64, i64* %17, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %66

20:                                               ; preds = %15
  %21 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %21, i32 0, i32 5
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, -1
  store i64 %24, i64* %22, align 8
  %25 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %26 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %25, i32 0, i32 6
  %27 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %28 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %27, i32 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %26, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %30, i32 0, i32 1
  %32 = load void (%struct.fio_msg_s*, i8*)*, void (%struct.fio_msg_s*, i8*)** %31, align 8
  %33 = icmp ne void (%struct.fio_msg_s*, i8*)* %32, null
  br i1 %33, label %34, label %65

34:                                               ; preds = %20
  %35 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 0
  store i32 0, i32* %35, align 8
  %36 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 1
  %37 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %38 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %37, i32 0, i32 0
  %39 = bitcast %struct.fio_str_info_s* %36 to i8*
  %40 = bitcast %struct.fio_str_info_s* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false)
  %41 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 2
  %42 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %43 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %42, i32 0, i32 1
  %44 = bitcast %struct.fio_str_info_s* %41 to i8*
  %45 = bitcast %struct.fio_str_info_s* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false)
  %46 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 3
  store i8* null, i8** %46, align 8
  %47 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 4
  store i8* null, i8** %47, align 8
  %48 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %5, i32 0, i32 5
  store i8 0, i8* %48, align 8
  %49 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %49, i32 0, i32 6
  %51 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %52 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %51, i32 0, i32 5
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %50, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %54, i32 0, i32 1
  %56 = load void (%struct.fio_msg_s*, i8*)*, void (%struct.fio_msg_s*, i8*)** %55, align 8
  %57 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %58 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %57, i32 0, i32 6
  %59 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %60 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %59, i32 0, i32 5
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %58, i64 0, i64 %61
  %63 = getelementptr inbounds %struct.fio_msg_metadata_s, %struct.fio_msg_metadata_s* %62, i32 0, i32 2
  %64 = load i8*, i8** %63, align 8
  call void %56(%struct.fio_msg_s* %5, i8* %64)
  br label %65

65:                                               ; preds = %34, %20
  br label %15

66:                                               ; preds = %15
  %67 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %68 = bitcast %struct.fio_msg_internal_s* %67 to i8*
  call void @fio_free(i8* %68)
  br label %69

69:                                               ; preds = %66, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_client_sender(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_msg_internal_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fio_msg_internal_s*
  store %struct.fio_msg_internal_s* %8, %struct.fio_msg_internal_s** %5, align 8
  %9 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %10 = icmp sge i64 %9, 0
  br i1 %10, label %11, label %33

11:                                               ; preds = %2
  %12 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %13 = lshr i64 %12, 8
  %14 = trunc i64 %13 to i32
  %15 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %16 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %33

19:                                               ; preds = %11
  %20 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %21 = and i64 %20, 255
  %22 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %23 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %22, i32 0, i32 12
  %24 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %25 = lshr i64 %24, 8
  %26 = trunc i64 %25 to i32
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %23, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %28, i32 0, i32 9
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = icmp eq i64 %21, %31
  br i1 %32, label %48, label %33

33:                                               ; preds = %19, %11, %2
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 7
  %36 = load volatile i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %48

39:                                               ; preds = %33
  br label %40

40:                                               ; preds = %39
  %41 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* bitcast (void (i8*, i64)* @fio_cluster_client_sender to void (i8*, i8*)*), void (i8*, i8*)** %41, align 8
  %42 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %43 = load i8*, i8** %3, align 8
  store i8* %43, i8** %42, align 8
  %44 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  %45 = load i64, i64* %4, align 8
  %46 = inttoptr i64 %45 to i8*
  store i8* %46, i8** %44, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %47

47:                                               ; preds = %40
  br label %53

48:                                               ; preds = %33, %19
  %49 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %50 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  %51 = call i64 @fio_msg_internal_send_dup(i64 %49, %struct.fio_msg_internal_s* %50)
  %52 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %52)
  br label %53

53:                                               ; preds = %48, %47
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_glob_match(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  store i8* null, i8** %4, align 8
  %16 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 2
  %17 = load i8*, i8** %16, align 8
  store i8* %17, i8** %5, align 8
  store i64 0, i64* %6, align 8
  %18 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %7, align 8
  br label %20

20:                                               ; preds = %179, %2
  %21 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %180

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 2
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %27, i8** %25, align 8
  %28 = load i8, i8* %26, align 1
  store i8 %28, i8* %8, align 1
  %29 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %31, i8** %29, align 8
  %32 = load i8, i8* %30, align 1
  store i8 %32, i8* %9, align 1
  %33 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, -1
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, -1
  store i64 %38, i64* %36, align 8
  %39 = load i8, i8* %9, align 1
  %40 = zext i8 %39 to i32
  switch i32 %40, label %156 [
    i32 63, label %41
    i32 42, label %42
    i32 91, label %58
    i32 92, label %148
  ]

41:                                               ; preds = %24
  br label %179

42:                                               ; preds = %24
  %43 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %47, label %46

46:                                               ; preds = %42
  store i32 1, i32* %3, align 4
  br label %192

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %49 = load i8*, i8** %48, align 8
  store i8* %49, i8** %4, align 8
  %50 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %6, align 8
  %52 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 2
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 -1
  store i8* %54, i8** %52, align 8
  store i8* %54, i8** %5, align 8
  %55 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %55, align 8
  store i64 %57, i64* %7, align 8
  br label %179

58:                                               ; preds = %24
  store i8 0, i8* %10, align 1
  %59 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %62, 94
  %64 = zext i1 %63 to i32
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %11, align 1
  %66 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %67 = load i8*, i8** %66, align 8
  %68 = load i8, i8* %11, align 1
  %69 = zext i8 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  store i8* %71, i8** %12, align 8
  %72 = load i8*, i8** %12, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %12, align 8
  %74 = load i8, i8* %72, align 1
  store i8 %74, i8* %13, align 1
  br label %75

75:                                               ; preds = %123, %58
  %76 = load i8, i8* %13, align 1
  store i8 %76, i8* %14, align 1
  %77 = load i8*, i8** %12, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 0
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp eq i32 %80, 45
  br i1 %81, label %82, label %104

82:                                               ; preds = %75
  %83 = load i8*, i8** %12, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp ne i32 %86, 93
  br i1 %87, label %88, label %104

88:                                               ; preds = %82
  %89 = load i8*, i8** %12, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 1
  %91 = load i8, i8* %90, align 1
  store i8 %91, i8* %14, align 1
  %92 = load i8*, i8** %12, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 2
  store i8* %93, i8** %12, align 8
  %94 = load i8, i8* %13, align 1
  %95 = zext i8 %94 to i32
  %96 = load i8, i8* %14, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp sgt i32 %95, %97
  br i1 %98, label %99, label %103

99:                                               ; preds = %88
  %100 = load i8, i8* %13, align 1
  store i8 %100, i8* %15, align 1
  %101 = load i8, i8* %14, align 1
  store i8 %101, i8* %13, align 1
  %102 = load i8, i8* %15, align 1
  store i8 %102, i8* %14, align 1
  br label %103

103:                                              ; preds = %99, %88
  br label %104

104:                                              ; preds = %103, %82, %75
  %105 = load i8, i8* %13, align 1
  %106 = zext i8 %105 to i32
  %107 = load i8, i8* %8, align 1
  %108 = zext i8 %107 to i32
  %109 = icmp sle i32 %106, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %104
  %111 = load i8, i8* %8, align 1
  %112 = zext i8 %111 to i32
  %113 = load i8, i8* %14, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp sle i32 %112, %114
  br label %116

116:                                              ; preds = %110, %104
  %117 = phi i1 [ false, %104 ], [ %115, %110 ]
  %118 = zext i1 %117 to i32
  %119 = load i8, i8* %10, align 1
  %120 = zext i8 %119 to i32
  %121 = or i32 %120, %118
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %10, align 1
  br label %123

123:                                              ; preds = %116
  %124 = load i8*, i8** %12, align 8
  %125 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %125, i8** %12, align 8
  %126 = load i8, i8* %124, align 1
  store i8 %126, i8* %13, align 1
  %127 = zext i8 %126 to i32
  %128 = icmp ne i32 %127, 93
  br i1 %128, label %75, label %129

129:                                              ; preds = %123
  %130 = load i8, i8* %10, align 1
  %131 = zext i8 %130 to i32
  %132 = load i8, i8* %11, align 1
  %133 = zext i8 %132 to i32
  %134 = icmp eq i32 %131, %133
  br i1 %134, label %135, label %136

135:                                              ; preds = %129
  br label %164

136:                                              ; preds = %129
  %137 = load i8*, i8** %12, align 8
  %138 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %139 = load i8*, i8** %138, align 8
  %140 = ptrtoint i8* %137 to i64
  %141 = ptrtoint i8* %139 to i64
  %142 = sub i64 %140, %141
  %143 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = sub i64 %144, %142
  store i64 %145, i64* %143, align 8
  %146 = load i8*, i8** %12, align 8
  %147 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  store i8* %146, i8** %147, align 8
  br label %179

148:                                              ; preds = %24
  %149 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %151, i8** %149, align 8
  %152 = load i8, i8* %150, align 1
  store i8 %152, i8* %9, align 1
  %153 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, -1
  store i64 %155, i64* %153, align 8
  br label %156

156:                                              ; preds = %24, %148
  %157 = load i8, i8* %8, align 1
  %158 = zext i8 %157 to i32
  %159 = load i8, i8* %9, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp eq i32 %158, %160
  br i1 %161, label %162, label %163

162:                                              ; preds = %156
  br label %179

163:                                              ; preds = %156
  br label %164

164:                                              ; preds = %163, %135
  %165 = load i8*, i8** %4, align 8
  %166 = icmp ne i8* %165, null
  br i1 %166, label %168, label %167

167:                                              ; preds = %164
  store i32 0, i32* %3, align 4
  br label %192

168:                                              ; preds = %164
  %169 = load i8*, i8** %4, align 8
  %170 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  store i8* %169, i8** %170, align 8
  %171 = load i8*, i8** %5, align 8
  %172 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %172, i8** %5, align 8
  %173 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 2
  store i8* %172, i8** %173, align 8
  %174 = load i64, i64* %7, align 8
  %175 = add i64 %174, -1
  store i64 %175, i64* %7, align 8
  %176 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  store i64 %175, i64* %176, align 8
  %177 = load i64, i64* %6, align 8
  %178 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  store i64 %177, i64* %178, align 8
  br label %179

179:                                              ; preds = %168, %162, %136, %47, %41
  br label %20

180:                                              ; preds = %20
  %181 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp ne i64 %182, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = icmp ne i64 %186, 0
  %188 = xor i1 %187, true
  br label %189

189:                                              ; preds = %184, %180
  %190 = phi i1 [ false, %180 ], [ %188, %184 ]
  %191 = zext i1 %190 to i32
  store i32 %191, i32* %3, align 4
  br label %192

192:                                              ; preds = %189, %167, %46
  %193 = load i32, i32* %3, align 4
  ret i32 %193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_malloc_after_fork() #0 {
  %1 = alloca i64, align 8
  store %struct.arena_s* null, %struct.arena_s** @arena_last_used, align 8
  %2 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %3 = icmp ne %struct.arena_s* %2, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %0
  br label %18

5:                                                ; preds = %0
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2), align 8
  store i8 1, i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 3), align 1
  store i64 0, i64* %1, align 8
  br label %6

6:                                                ; preds = %15, %5
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 1), align 8
  %9 = icmp ult i64 %7, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %12 = load i64, i64* %1, align 8
  %13 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %11, i64 %12
  %14 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %13, i32 0, i32 1
  store volatile i8 0, i8* %14, align 8
  br label %15

15:                                               ; preds = %10
  %16 = load i64, i64* %1, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %1, align 8
  br label %6

18:                                               ; preds = %4, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @big_alloc(i64) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = add i64 %5, 16
  %7 = call i64 @sys_round_size(i64 %6)
  store i64 %7, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i8* @sys_alloc(i64 %8, i8 zeroext 1)
  %10 = bitcast i8* %9 to i64*
  store i64* %10, i64** %4, align 8
  %11 = load i64*, i64** %4, align 8
  %12 = icmp ne i64* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  br label %21

14:                                               ; preds = %1
  %15 = load i64, i64* %3, align 8
  %16 = load i64*, i64** %4, align 8
  store i64 %15, i64* %16, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = ptrtoint i64* %17 to i64
  %19 = add i64 %18, 16
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %2, align 8
  br label %22

21:                                               ; preds = %13
  store i8* null, i8** %2, align 8
  br label %22

22:                                               ; preds = %21, %14
  %23 = load i8*, i8** %2, align 8
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arena_enter() #0 {
  %1 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %2 = call %struct.arena_s* @arena_lock(%struct.arena_s* %1)
  store %struct.arena_s* %2, %struct.arena_s** @arena_last_used, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @block_slice(i16 zeroext) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i16, align 2
  %4 = alloca %struct.block_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %3, align 2
  %8 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %9 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %8, i32 0, i32 0
  %10 = load %struct.block_s*, %struct.block_s** %9, align 8
  store %struct.block_s* %10, %struct.block_s** %4, align 8
  %11 = load %struct.block_s*, %struct.block_s** %4, align 8
  %12 = icmp ne %struct.block_s* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %1
  %14 = call %struct.block_s* @block_new()
  store %struct.block_s* %14, %struct.block_s** %4, align 8
  %15 = load %struct.block_s*, %struct.block_s** %4, align 8
  %16 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %17 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %16, i32 0, i32 0
  store %struct.block_s* %15, %struct.block_s** %17, align 8
  br label %35

18:                                               ; preds = %1
  %19 = load %struct.block_s*, %struct.block_s** %4, align 8
  %20 = getelementptr inbounds %struct.block_s, %struct.block_s* %19, i32 0, i32 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = load i16, i16* %3, align 2
  %24 = zext i16 %23 to i32
  %25 = add nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = icmp ugt i64 %26, 2046
  br i1 %27, label %28, label %34

28:                                               ; preds = %18
  %29 = load %struct.block_s*, %struct.block_s** %4, align 8
  call void @block_free(%struct.block_s* %29)
  %30 = call %struct.block_s* @block_new()
  store %struct.block_s* %30, %struct.block_s** %4, align 8
  %31 = load %struct.block_s*, %struct.block_s** %4, align 8
  %32 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %33 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %32, i32 0, i32 0
  store %struct.block_s* %31, %struct.block_s** %33, align 8
  br label %34

34:                                               ; preds = %28, %18
  br label %35

35:                                               ; preds = %34, %13
  %36 = load %struct.block_s*, %struct.block_s** %4, align 8
  %37 = icmp ne %struct.block_s* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %35
  %39 = call i32* @__errno_location() #9
  store i32 12, i32* %39, align 4
  store i8* null, i8** %2, align 8
  br label %75

40:                                               ; preds = %35
  %41 = load %struct.block_s*, %struct.block_s** %4, align 8
  %42 = ptrtoint %struct.block_s* %41 to i64
  %43 = load %struct.block_s*, %struct.block_s** %4, align 8
  %44 = getelementptr inbounds %struct.block_s, %struct.block_s* %43, i32 0, i32 2
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i64
  %47 = shl i64 %46, 4
  %48 = add i64 %42, %47
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %5, align 8
  %50 = load %struct.block_s*, %struct.block_s** %4, align 8
  %51 = getelementptr inbounds %struct.block_s, %struct.block_s* %50, i32 0, i32 1
  store i16 1, i16* %6, align 2
  %52 = load i16, i16* %6, align 2
  %53 = atomicrmw add i16* %51, i16 %52 seq_cst
  %54 = add i16 %53, %52
  store i16 %54, i16* %7, align 2
  %55 = load i16, i16* %7, align 2
  %56 = load i16, i16* %3, align 2
  %57 = zext i16 %56 to i32
  %58 = load %struct.block_s*, %struct.block_s** %4, align 8
  %59 = getelementptr inbounds %struct.block_s, %struct.block_s* %58, i32 0, i32 2
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nsw i32 %61, %57
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* %59, align 2
  %64 = load %struct.block_s*, %struct.block_s** %4, align 8
  %65 = getelementptr inbounds %struct.block_s, %struct.block_s* %64, i32 0, i32 2
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i64
  %68 = icmp uge i64 %67, 2046
  br i1 %68, label %69, label %73

69:                                               ; preds = %40
  %70 = load %struct.block_s*, %struct.block_s** %4, align 8
  call void @block_free(%struct.block_s* %70)
  %71 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %72 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %71, i32 0, i32 0
  store %struct.block_s* null, %struct.block_s** %72, align 8
  br label %73

73:                                               ; preds = %69, %40
  %74 = load i8*, i8** %5, align 8
  store i8* %74, i8** %2, align 8
  br label %75

75:                                               ; preds = %73, %38
  %76 = load i8*, i8** %2, align 8
  ret i8* %76
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arena_exit() #0 {
  %1 = load %struct.arena_s*, %struct.arena_s** @arena_last_used, align 8
  %2 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %1, i32 0, i32 1
  %3 = call i32 @fio_unlock(i8* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @fio_calloc(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = mul i64 %5, %6
  %8 = call noalias i8* @fio_malloc(i64 %7)
  %9 = ptrtoint i8* %8 to i64
  %10 = and i64 %9, 15
  %11 = icmp eq i64 %10, 0
  call void @llvm.assume(i1 %11)
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @big_free(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = sub i64 %5, 16
  %7 = inttoptr i64 %6 to i8*
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %3, align 8
  %9 = load i64*, i64** %3, align 8
  %10 = bitcast i64* %9 to i8*
  %11 = load i64*, i64** %3, align 8
  %12 = load i64, i64* %11, align 8
  call void @sys_free(i8* %10, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @block_slice_free(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.block_s*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = and i64 %5, -32768
  %7 = inttoptr i64 %6 to %struct.block_s*
  store %struct.block_s* %7, %struct.block_s** %3, align 8
  %8 = load %struct.block_s*, %struct.block_s** %3, align 8
  call void @block_free(%struct.block_s* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_realloc2(i8*, i64, i64) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %3
  %12 = load i8*, i8** %5, align 8
  %13 = icmp eq i8* %12, bitcast (x86_fp80* @on_malloc_zero to i8*)
  br i1 %13, label %14, label %20

14:                                               ; preds = %11, %3
  %15 = load i64, i64* %6, align 8
  %16 = call noalias i8* @fio_malloc(i64 %15)
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 15
  %19 = icmp eq i64 %18, 0
  call void @llvm.assume(i1 %19)
  store i8* %16, i8** %4, align 8
  br label %82

20:                                               ; preds = %11
  %21 = load i64, i64* %6, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  br label %76

24:                                               ; preds = %20
  %25 = load i8*, i8** %5, align 8
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 32767
  %28 = icmp eq i64 %27, 16
  br i1 %28, label %29, label %33

29:                                               ; preds = %24
  %30 = load i8*, i8** %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = call i8* @big_realloc(i8* %30, i64 %31)
  store i8* %32, i8** %4, align 8
  br label %82

33:                                               ; preds = %24
  %34 = load i64, i64* %6, align 8
  %35 = call noalias i8* @fio_malloc(i64 %34)
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 15
  %38 = icmp eq i64 %37, 0
  call void @llvm.assume(i1 %38)
  store i8* %35, i8** %8, align 8
  %39 = load i8*, i8** %8, align 8
  %40 = icmp ne i8* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %33
  store i8* null, i8** %4, align 8
  br label %82

42:                                               ; preds = %33
  %43 = load i64, i64* %6, align 8
  %44 = lshr i64 %43, 4
  %45 = load i64, i64* %6, align 8
  %46 = and i64 %45, 15
  %47 = icmp ne i64 %46, 0
  %48 = xor i1 %47, true
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i32
  %51 = sext i32 %50 to i64
  %52 = add i64 %44, %51
  store i64 %52, i64* %6, align 8
  %53 = load i64, i64* %7, align 8
  %54 = lshr i64 %53, 4
  %55 = load i64, i64* %7, align 8
  %56 = and i64 %55, 15
  %57 = icmp ne i64 %56, 0
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = add i64 %54, %61
  store i64 %62, i64* %7, align 8
  %63 = load i8*, i8** %8, align 8
  %64 = load i8*, i8** %5, align 8
  %65 = load i64, i64* %7, align 8
  %66 = load i64, i64* %6, align 8
  %67 = icmp ugt i64 %65, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %42
  %69 = load i64, i64* %6, align 8
  br label %72

70:                                               ; preds = %42
  %71 = load i64, i64* %7, align 8
  br label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ %69, %68 ], [ %71, %70 ]
  call void @fio_memcpy(i8* %63, i8* %64, i64 %73)
  %74 = load i8*, i8** %5, align 8
  call void @block_slice_free(i8* %74)
  %75 = load i8*, i8** %8, align 8
  store i8* %75, i8** %4, align 8
  br label %82

76:                                               ; preds = %23
  %77 = load i8*, i8** %5, align 8
  call void @fio_free(i8* %77)
  %78 = call noalias i8* @fio_malloc(i64 0)
  %79 = ptrtoint i8* %78 to i64
  %80 = and i64 %79, 15
  %81 = icmp eq i64 %80, 0
  call void @llvm.assume(i1 %81)
  store i8* %78, i8** %4, align 8
  br label %82

82:                                               ; preds = %76, %72, %41, %29, %14
  %83 = load i8*, i8** %4, align 8
  ret i8* %83
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @big_realloc(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = sub i64 %8, 16
  %10 = inttoptr i64 %9 to i8*
  %11 = bitcast i8* %10 to i64*
  store i64* %11, i64** %6, align 8
  %12 = load i64, i64* %5, align 8
  %13 = add i64 %12, 16
  %14 = call i64 @sys_round_size(i64 %13)
  store i64 %14, i64* %5, align 8
  %15 = load i64*, i64** %6, align 8
  %16 = bitcast i64* %15 to i8*
  %17 = load i64*, i64** %6, align 8
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %5, align 8
  %20 = call i8* @sys_realloc(i8* %16, i64 %18, i64 %19)
  %21 = bitcast i8* %20 to i64*
  store i64* %21, i64** %6, align 8
  %22 = load i64*, i64** %6, align 8
  %23 = icmp ne i64* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %2
  br label %32

25:                                               ; preds = %2
  %26 = load i64, i64* %5, align 8
  %27 = load i64*, i64** %6, align 8
  store i64 %26, i64* %27, align 8
  %28 = load i64*, i64** %6, align 8
  %29 = ptrtoint i64* %28 to i64
  %30 = add i64 %29, 16
  %31 = inttoptr i64 %30 to i8*
  store i8* %31, i8** %3, align 8
  br label %33

32:                                               ; preds = %24
  store i8* null, i8** %3, align 8
  br label %33

33:                                               ; preds = %32, %25
  %34 = load i8*, i8** %3, align 8
  ret i8* %34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_memcpy(i8* noalias, i8* noalias, i64) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to i64*
  store i64* %10, i64** %7, align 8
  %11 = load i8*, i8** %5, align 8
  %12 = bitcast i8* %11 to i64*
  store i64* %12, i64** %8, align 8
  %13 = load i64, i64* %6, align 8
  %14 = shl i64 %13, 1
  store i64 %14, i64* %6, align 8
  br label %15

15:                                               ; preds = %18, %3
  %16 = load i64, i64* %6, align 8
  %17 = icmp uge i64 %16, 16
  br i1 %17, label %18, label %105

18:                                               ; preds = %15
  %19 = load i64*, i64** %8, align 8
  %20 = getelementptr inbounds i64, i64* %19, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = load i64*, i64** %7, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  store i64 %21, i64* %23, align 8
  %24 = load i64*, i64** %8, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 1
  %26 = load i64, i64* %25, align 8
  %27 = load i64*, i64** %7, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 1
  store i64 %26, i64* %28, align 8
  %29 = load i64*, i64** %8, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 2
  %31 = load i64, i64* %30, align 8
  %32 = load i64*, i64** %7, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 2
  store i64 %31, i64* %33, align 8
  %34 = load i64*, i64** %8, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 3
  %36 = load i64, i64* %35, align 8
  %37 = load i64*, i64** %7, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 3
  store i64 %36, i64* %38, align 8
  %39 = load i64*, i64** %8, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 4
  %41 = load i64, i64* %40, align 8
  %42 = load i64*, i64** %7, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 4
  store i64 %41, i64* %43, align 8
  %44 = load i64*, i64** %8, align 8
  %45 = getelementptr inbounds i64, i64* %44, i64 5
  %46 = load i64, i64* %45, align 8
  %47 = load i64*, i64** %7, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 5
  store i64 %46, i64* %48, align 8
  %49 = load i64*, i64** %8, align 8
  %50 = getelementptr inbounds i64, i64* %49, i64 6
  %51 = load i64, i64* %50, align 8
  %52 = load i64*, i64** %7, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 6
  store i64 %51, i64* %53, align 8
  %54 = load i64*, i64** %8, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 7
  %56 = load i64, i64* %55, align 8
  %57 = load i64*, i64** %7, align 8
  %58 = getelementptr inbounds i64, i64* %57, i64 7
  store i64 %56, i64* %58, align 8
  %59 = load i64*, i64** %8, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 8
  %61 = load i64, i64* %60, align 8
  %62 = load i64*, i64** %7, align 8
  %63 = getelementptr inbounds i64, i64* %62, i64 8
  store i64 %61, i64* %63, align 8
  %64 = load i64*, i64** %8, align 8
  %65 = getelementptr inbounds i64, i64* %64, i64 9
  %66 = load i64, i64* %65, align 8
  %67 = load i64*, i64** %7, align 8
  %68 = getelementptr inbounds i64, i64* %67, i64 9
  store i64 %66, i64* %68, align 8
  %69 = load i64*, i64** %8, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 10
  %71 = load i64, i64* %70, align 8
  %72 = load i64*, i64** %7, align 8
  %73 = getelementptr inbounds i64, i64* %72, i64 10
  store i64 %71, i64* %73, align 8
  %74 = load i64*, i64** %8, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 11
  %76 = load i64, i64* %75, align 8
  %77 = load i64*, i64** %7, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 11
  store i64 %76, i64* %78, align 8
  %79 = load i64*, i64** %8, align 8
  %80 = getelementptr inbounds i64, i64* %79, i64 12
  %81 = load i64, i64* %80, align 8
  %82 = load i64*, i64** %7, align 8
  %83 = getelementptr inbounds i64, i64* %82, i64 12
  store i64 %81, i64* %83, align 8
  %84 = load i64*, i64** %8, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 13
  %86 = load i64, i64* %85, align 8
  %87 = load i64*, i64** %7, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 13
  store i64 %86, i64* %88, align 8
  %89 = load i64*, i64** %8, align 8
  %90 = getelementptr inbounds i64, i64* %89, i64 14
  %91 = load i64, i64* %90, align 8
  %92 = load i64*, i64** %7, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 14
  store i64 %91, i64* %93, align 8
  %94 = load i64*, i64** %8, align 8
  %95 = getelementptr inbounds i64, i64* %94, i64 15
  %96 = load i64, i64* %95, align 8
  %97 = load i64*, i64** %7, align 8
  %98 = getelementptr inbounds i64, i64* %97, i64 15
  store i64 %96, i64* %98, align 8
  %99 = load i64*, i64** %7, align 8
  %100 = getelementptr inbounds i64, i64* %99, i64 16
  store i64* %100, i64** %7, align 8
  %101 = load i64*, i64** %8, align 8
  %102 = getelementptr inbounds i64, i64* %101, i64 16
  store i64* %102, i64** %8, align 8
  %103 = load i64, i64* %6, align 8
  %104 = sub i64 %103, 16
  store i64 %104, i64* %6, align 8
  br label %15

105:                                              ; preds = %15
  %106 = load i64, i64* %6, align 8
  switch i64 %106, label %197 [
    i64 15, label %107
    i64 14, label %113
    i64 13, label %119
    i64 12, label %125
    i64 11, label %131
    i64 10, label %137
    i64 9, label %143
    i64 8, label %149
    i64 7, label %155
    i64 6, label %161
    i64 5, label %167
    i64 4, label %173
    i64 3, label %179
    i64 2, label %185
    i64 1, label %191
  ]

107:                                              ; preds = %105
  %108 = load i64*, i64** %8, align 8
  %109 = getelementptr inbounds i64, i64* %108, i32 1
  store i64* %109, i64** %8, align 8
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %7, align 8
  %112 = getelementptr inbounds i64, i64* %111, i32 1
  store i64* %112, i64** %7, align 8
  store i64 %110, i64* %111, align 8
  br label %113

113:                                              ; preds = %105, %107
  %114 = load i64*, i64** %8, align 8
  %115 = getelementptr inbounds i64, i64* %114, i32 1
  store i64* %115, i64** %8, align 8
  %116 = load i64, i64* %114, align 8
  %117 = load i64*, i64** %7, align 8
  %118 = getelementptr inbounds i64, i64* %117, i32 1
  store i64* %118, i64** %7, align 8
  store i64 %116, i64* %117, align 8
  br label %119

119:                                              ; preds = %105, %113
  %120 = load i64*, i64** %8, align 8
  %121 = getelementptr inbounds i64, i64* %120, i32 1
  store i64* %121, i64** %8, align 8
  %122 = load i64, i64* %120, align 8
  %123 = load i64*, i64** %7, align 8
  %124 = getelementptr inbounds i64, i64* %123, i32 1
  store i64* %124, i64** %7, align 8
  store i64 %122, i64* %123, align 8
  br label %125

125:                                              ; preds = %105, %119
  %126 = load i64*, i64** %8, align 8
  %127 = getelementptr inbounds i64, i64* %126, i32 1
  store i64* %127, i64** %8, align 8
  %128 = load i64, i64* %126, align 8
  %129 = load i64*, i64** %7, align 8
  %130 = getelementptr inbounds i64, i64* %129, i32 1
  store i64* %130, i64** %7, align 8
  store i64 %128, i64* %129, align 8
  br label %131

131:                                              ; preds = %105, %125
  %132 = load i64*, i64** %8, align 8
  %133 = getelementptr inbounds i64, i64* %132, i32 1
  store i64* %133, i64** %8, align 8
  %134 = load i64, i64* %132, align 8
  %135 = load i64*, i64** %7, align 8
  %136 = getelementptr inbounds i64, i64* %135, i32 1
  store i64* %136, i64** %7, align 8
  store i64 %134, i64* %135, align 8
  br label %137

137:                                              ; preds = %105, %131
  %138 = load i64*, i64** %8, align 8
  %139 = getelementptr inbounds i64, i64* %138, i32 1
  store i64* %139, i64** %8, align 8
  %140 = load i64, i64* %138, align 8
  %141 = load i64*, i64** %7, align 8
  %142 = getelementptr inbounds i64, i64* %141, i32 1
  store i64* %142, i64** %7, align 8
  store i64 %140, i64* %141, align 8
  br label %143

143:                                              ; preds = %105, %137
  %144 = load i64*, i64** %8, align 8
  %145 = getelementptr inbounds i64, i64* %144, i32 1
  store i64* %145, i64** %8, align 8
  %146 = load i64, i64* %144, align 8
  %147 = load i64*, i64** %7, align 8
  %148 = getelementptr inbounds i64, i64* %147, i32 1
  store i64* %148, i64** %7, align 8
  store i64 %146, i64* %147, align 8
  br label %149

149:                                              ; preds = %105, %143
  %150 = load i64*, i64** %8, align 8
  %151 = getelementptr inbounds i64, i64* %150, i32 1
  store i64* %151, i64** %8, align 8
  %152 = load i64, i64* %150, align 8
  %153 = load i64*, i64** %7, align 8
  %154 = getelementptr inbounds i64, i64* %153, i32 1
  store i64* %154, i64** %7, align 8
  store i64 %152, i64* %153, align 8
  br label %155

155:                                              ; preds = %105, %149
  %156 = load i64*, i64** %8, align 8
  %157 = getelementptr inbounds i64, i64* %156, i32 1
  store i64* %157, i64** %8, align 8
  %158 = load i64, i64* %156, align 8
  %159 = load i64*, i64** %7, align 8
  %160 = getelementptr inbounds i64, i64* %159, i32 1
  store i64* %160, i64** %7, align 8
  store i64 %158, i64* %159, align 8
  br label %161

161:                                              ; preds = %105, %155
  %162 = load i64*, i64** %8, align 8
  %163 = getelementptr inbounds i64, i64* %162, i32 1
  store i64* %163, i64** %8, align 8
  %164 = load i64, i64* %162, align 8
  %165 = load i64*, i64** %7, align 8
  %166 = getelementptr inbounds i64, i64* %165, i32 1
  store i64* %166, i64** %7, align 8
  store i64 %164, i64* %165, align 8
  br label %167

167:                                              ; preds = %105, %161
  %168 = load i64*, i64** %8, align 8
  %169 = getelementptr inbounds i64, i64* %168, i32 1
  store i64* %169, i64** %8, align 8
  %170 = load i64, i64* %168, align 8
  %171 = load i64*, i64** %7, align 8
  %172 = getelementptr inbounds i64, i64* %171, i32 1
  store i64* %172, i64** %7, align 8
  store i64 %170, i64* %171, align 8
  br label %173

173:                                              ; preds = %105, %167
  %174 = load i64*, i64** %8, align 8
  %175 = getelementptr inbounds i64, i64* %174, i32 1
  store i64* %175, i64** %8, align 8
  %176 = load i64, i64* %174, align 8
  %177 = load i64*, i64** %7, align 8
  %178 = getelementptr inbounds i64, i64* %177, i32 1
  store i64* %178, i64** %7, align 8
  store i64 %176, i64* %177, align 8
  br label %179

179:                                              ; preds = %105, %173
  %180 = load i64*, i64** %8, align 8
  %181 = getelementptr inbounds i64, i64* %180, i32 1
  store i64* %181, i64** %8, align 8
  %182 = load i64, i64* %180, align 8
  %183 = load i64*, i64** %7, align 8
  %184 = getelementptr inbounds i64, i64* %183, i32 1
  store i64* %184, i64** %7, align 8
  store i64 %182, i64* %183, align 8
  br label %185

185:                                              ; preds = %105, %179
  %186 = load i64*, i64** %8, align 8
  %187 = getelementptr inbounds i64, i64* %186, i32 1
  store i64* %187, i64** %8, align 8
  %188 = load i64, i64* %186, align 8
  %189 = load i64*, i64** %7, align 8
  %190 = getelementptr inbounds i64, i64* %189, i32 1
  store i64* %190, i64** %7, align 8
  store i64 %188, i64* %189, align 8
  br label %191

191:                                              ; preds = %105, %185
  %192 = load i64*, i64** %8, align 8
  %193 = getelementptr inbounds i64, i64* %192, i32 1
  store i64* %193, i64** %8, align 8
  %194 = load i64, i64* %192, align 8
  %195 = load i64*, i64** %7, align 8
  %196 = getelementptr inbounds i64, i64* %195, i32 1
  store i64* %196, i64** %7, align 8
  store i64 %194, i64* %195, align 8
  br label %197

197:                                              ; preds = %191, %105
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_realloc(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = ptrtoint i8* %6 to i64
  %8 = and i64 %7, 32767
  %9 = sub i64 32768, %8
  store i64 %9, i64* %5, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = load i64, i64* %5, align 8
  %13 = call i8* @fio_realloc2(i8* %10, i64 %11, i64 %12)
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 15
  %16 = icmp eq i64 %15, 0
  call void @llvm.assume(i1 %16)
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_rand64() #0 {
  %1 = alloca [2 x i64], align 16
  %2 = alloca %struct.rusage, align 8
  %3 = bitcast [2 x i64]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %3, i8* align 16 bitcast ([2 x i64]* @__const.fio_rand64.P to i8*), i64 16, i1 false)
  %4 = load i16, i16* @fio_rand64.c, align 2
  %5 = add i16 %4, 1
  store i16 %5, i16* @fio_rand64.c, align 2
  %6 = zext i16 %4 to i32
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %0
  %9 = call i32 @getrusage(i32 0, %struct.rusage* %2) #1
  %10 = bitcast %struct.rusage* %2 to i8*
  %11 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %12 = call i64 @fio_risky_hash(i8* %10, i64 144, i64 %11)
  store i64 %12, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %13 = bitcast %struct.rusage* %2 to i8*
  %14 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %15 = call i64 @fio_risky_hash(i8* %13, i64 144, i64 %14)
  store i64 %15, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  br label %16

16:                                               ; preds = %8, %0
  %17 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %18 = shl i64 %17, 33
  %19 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %20 = lshr i64 %19, 31
  %21 = or i64 %18, %20
  %22 = getelementptr inbounds [2 x i64], [2 x i64]* %1, i64 0, i64 0
  %23 = load i64, i64* %22, align 16
  %24 = mul i64 %21, %23
  %25 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %26 = add i64 %25, %24
  store i64 %26, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %27 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %28 = shl i64 %27, 33
  %29 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %30 = lshr i64 %29, 31
  %31 = or i64 %28, %30
  %32 = getelementptr inbounds [2 x i64], [2 x i64]* %1, i64 0, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = mul i64 %31, %33
  %35 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %36 = add i64 %35, %34
  store i64 %36, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %37 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %38 = shl i64 %37, 31
  %39 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 0), align 16
  %40 = lshr i64 %39, 33
  %41 = or i64 %38, %40
  %42 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %43 = shl i64 %42, 29
  %44 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @fio_rand64.s, i64 0, i64 1), align 8
  %45 = lshr i64 %44, 35
  %46 = or i64 %43, %45
  %47 = add i64 %41, %46
  ret i64 %47
}

; Function Attrs: nounwind
declare dso_local i32 @getrusage(i32, %struct.rusage*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_risky_hash(i8*, i64, i64) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %15 = load i8*, i8** %4, align 8
  store i8* %15, i8** %7, align 8
  %16 = load i64, i64* %6, align 8
  %17 = xor i64 %16, -6119419677951424823
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %6, align 8
  %19 = xor i64 %18, -1
  %20 = add i64 %19, -6119419677951424823
  store i64 %20, i64* %9, align 8
  %21 = load i64, i64* %6, align 8
  %22 = shl i64 %21, 17
  %23 = load i64, i64* %6, align 8
  %24 = lshr i64 %23, 47
  %25 = or i64 %22, %24
  %26 = xor i64 %25, 5811556015681210993
  store i64 %26, i64* %10, align 8
  %27 = load i64, i64* %6, align 8
  %28 = shl i64 %27, 33
  %29 = load i64, i64* %6, align 8
  %30 = lshr i64 %29, 31
  %31 = or i64 %28, %30
  %32 = add i64 %31, 6119419677951424822
  store i64 %32, i64* %11, align 8
  %33 = load i64, i64* %5, align 8
  %34 = lshr i64 %33, 5
  store i64 %34, i64* %12, align 8
  br label %35

35:                                               ; preds = %501, %3
  %36 = load i64, i64* %12, align 8
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %504

38:                                               ; preds = %35
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 0
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = shl i64 %42, 56
  %44 = load i8*, i8** %7, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, 48
  %49 = or i64 %43, %48
  %50 = load i8*, i8** %7, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = shl i64 %53, 40
  %55 = or i64 %49, %54
  %56 = load i8*, i8** %7, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 3
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = shl i64 %59, 32
  %61 = or i64 %55, %60
  %62 = load i8*, i8** %7, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 4
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = shl i64 %65, 24
  %67 = or i64 %61, %66
  %68 = load i8*, i8** %7, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 5
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = shl i64 %71, 16
  %73 = or i64 %67, %72
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = shl i64 %77, 8
  %79 = or i64 %73, %78
  %80 = load i8*, i8** %7, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i64
  %84 = or i64 %79, %83
  %85 = load i64, i64* %8, align 8
  %86 = add i64 %85, %84
  store i64 %86, i64* %8, align 8
  %87 = load i64, i64* %8, align 8
  %88 = shl i64 %87, 33
  %89 = load i64, i64* %8, align 8
  %90 = lshr i64 %89, 31
  %91 = or i64 %88, %90
  store i64 %91, i64* %8, align 8
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 0
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = shl i64 %95, 56
  %97 = load i8*, i8** %7, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = shl i64 %100, 48
  %102 = or i64 %96, %101
  %103 = load i8*, i8** %7, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 2
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = shl i64 %106, 40
  %108 = or i64 %102, %107
  %109 = load i8*, i8** %7, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 3
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = shl i64 %112, 32
  %114 = or i64 %108, %113
  %115 = load i8*, i8** %7, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 4
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = shl i64 %118, 24
  %120 = or i64 %114, %119
  %121 = load i8*, i8** %7, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 5
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = shl i64 %124, 16
  %126 = or i64 %120, %125
  %127 = load i8*, i8** %7, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 6
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = shl i64 %130, 8
  %132 = or i64 %126, %131
  %133 = load i8*, i8** %7, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 7
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = or i64 %132, %136
  %138 = load i64, i64* %8, align 8
  %139 = add i64 %138, %137
  store i64 %139, i64* %8, align 8
  %140 = load i64, i64* %8, align 8
  %141 = mul i64 %140, -307863662270213829
  store i64 %141, i64* %8, align 8
  %142 = load i8*, i8** %7, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 8
  %144 = getelementptr inbounds i8, i8* %143, i64 0
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = shl i64 %146, 56
  %148 = load i8*, i8** %7, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 8
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = shl i64 %152, 48
  %154 = or i64 %147, %153
  %155 = load i8*, i8** %7, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 8
  %157 = getelementptr inbounds i8, i8* %156, i64 2
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i64
  %160 = shl i64 %159, 40
  %161 = or i64 %154, %160
  %162 = load i8*, i8** %7, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 8
  %164 = getelementptr inbounds i8, i8* %163, i64 3
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = shl i64 %166, 32
  %168 = or i64 %161, %167
  %169 = load i8*, i8** %7, align 8
  %170 = getelementptr inbounds i8, i8* %169, i64 8
  %171 = getelementptr inbounds i8, i8* %170, i64 4
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i64
  %174 = shl i64 %173, 24
  %175 = or i64 %168, %174
  %176 = load i8*, i8** %7, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 8
  %178 = getelementptr inbounds i8, i8* %177, i64 5
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = shl i64 %180, 16
  %182 = or i64 %175, %181
  %183 = load i8*, i8** %7, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 8
  %185 = getelementptr inbounds i8, i8* %184, i64 6
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i64
  %188 = shl i64 %187, 8
  %189 = or i64 %182, %188
  %190 = load i8*, i8** %7, align 8
  %191 = getelementptr inbounds i8, i8* %190, i64 8
  %192 = getelementptr inbounds i8, i8* %191, i64 7
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i64
  %195 = or i64 %189, %194
  %196 = load i64, i64* %9, align 8
  %197 = add i64 %196, %195
  store i64 %197, i64* %9, align 8
  %198 = load i64, i64* %9, align 8
  %199 = shl i64 %198, 33
  %200 = load i64, i64* %9, align 8
  %201 = lshr i64 %200, 31
  %202 = or i64 %199, %201
  store i64 %202, i64* %9, align 8
  %203 = load i8*, i8** %7, align 8
  %204 = getelementptr inbounds i8, i8* %203, i64 8
  %205 = getelementptr inbounds i8, i8* %204, i64 0
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i64
  %208 = shl i64 %207, 56
  %209 = load i8*, i8** %7, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 8
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i64
  %214 = shl i64 %213, 48
  %215 = or i64 %208, %214
  %216 = load i8*, i8** %7, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 8
  %218 = getelementptr inbounds i8, i8* %217, i64 2
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i64
  %221 = shl i64 %220, 40
  %222 = or i64 %215, %221
  %223 = load i8*, i8** %7, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 8
  %225 = getelementptr inbounds i8, i8* %224, i64 3
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i64
  %228 = shl i64 %227, 32
  %229 = or i64 %222, %228
  %230 = load i8*, i8** %7, align 8
  %231 = getelementptr inbounds i8, i8* %230, i64 8
  %232 = getelementptr inbounds i8, i8* %231, i64 4
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = shl i64 %234, 24
  %236 = or i64 %229, %235
  %237 = load i8*, i8** %7, align 8
  %238 = getelementptr inbounds i8, i8* %237, i64 8
  %239 = getelementptr inbounds i8, i8* %238, i64 5
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = shl i64 %241, 16
  %243 = or i64 %236, %242
  %244 = load i8*, i8** %7, align 8
  %245 = getelementptr inbounds i8, i8* %244, i64 8
  %246 = getelementptr inbounds i8, i8* %245, i64 6
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = shl i64 %248, 8
  %250 = or i64 %243, %249
  %251 = load i8*, i8** %7, align 8
  %252 = getelementptr inbounds i8, i8* %251, i64 8
  %253 = getelementptr inbounds i8, i8* %252, i64 7
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i64
  %256 = or i64 %250, %255
  %257 = load i64, i64* %9, align 8
  %258 = add i64 %257, %256
  store i64 %258, i64* %9, align 8
  %259 = load i64, i64* %9, align 8
  %260 = mul i64 %259, -307863662270213829
  store i64 %260, i64* %9, align 8
  %261 = load i8*, i8** %7, align 8
  %262 = getelementptr inbounds i8, i8* %261, i64 16
  %263 = getelementptr inbounds i8, i8* %262, i64 0
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i64
  %266 = shl i64 %265, 56
  %267 = load i8*, i8** %7, align 8
  %268 = getelementptr inbounds i8, i8* %267, i64 16
  %269 = getelementptr inbounds i8, i8* %268, i64 1
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i64
  %272 = shl i64 %271, 48
  %273 = or i64 %266, %272
  %274 = load i8*, i8** %7, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 16
  %276 = getelementptr inbounds i8, i8* %275, i64 2
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i64
  %279 = shl i64 %278, 40
  %280 = or i64 %273, %279
  %281 = load i8*, i8** %7, align 8
  %282 = getelementptr inbounds i8, i8* %281, i64 16
  %283 = getelementptr inbounds i8, i8* %282, i64 3
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = shl i64 %285, 32
  %287 = or i64 %280, %286
  %288 = load i8*, i8** %7, align 8
  %289 = getelementptr inbounds i8, i8* %288, i64 16
  %290 = getelementptr inbounds i8, i8* %289, i64 4
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i64
  %293 = shl i64 %292, 24
  %294 = or i64 %287, %293
  %295 = load i8*, i8** %7, align 8
  %296 = getelementptr inbounds i8, i8* %295, i64 16
  %297 = getelementptr inbounds i8, i8* %296, i64 5
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i64
  %300 = shl i64 %299, 16
  %301 = or i64 %294, %300
  %302 = load i8*, i8** %7, align 8
  %303 = getelementptr inbounds i8, i8* %302, i64 16
  %304 = getelementptr inbounds i8, i8* %303, i64 6
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i64
  %307 = shl i64 %306, 8
  %308 = or i64 %301, %307
  %309 = load i8*, i8** %7, align 8
  %310 = getelementptr inbounds i8, i8* %309, i64 16
  %311 = getelementptr inbounds i8, i8* %310, i64 7
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i64
  %314 = or i64 %308, %313
  %315 = load i64, i64* %10, align 8
  %316 = add i64 %315, %314
  store i64 %316, i64* %10, align 8
  %317 = load i64, i64* %10, align 8
  %318 = shl i64 %317, 33
  %319 = load i64, i64* %10, align 8
  %320 = lshr i64 %319, 31
  %321 = or i64 %318, %320
  store i64 %321, i64* %10, align 8
  %322 = load i8*, i8** %7, align 8
  %323 = getelementptr inbounds i8, i8* %322, i64 16
  %324 = getelementptr inbounds i8, i8* %323, i64 0
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i64
  %327 = shl i64 %326, 56
  %328 = load i8*, i8** %7, align 8
  %329 = getelementptr inbounds i8, i8* %328, i64 16
  %330 = getelementptr inbounds i8, i8* %329, i64 1
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i64
  %333 = shl i64 %332, 48
  %334 = or i64 %327, %333
  %335 = load i8*, i8** %7, align 8
  %336 = getelementptr inbounds i8, i8* %335, i64 16
  %337 = getelementptr inbounds i8, i8* %336, i64 2
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i64
  %340 = shl i64 %339, 40
  %341 = or i64 %334, %340
  %342 = load i8*, i8** %7, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 16
  %344 = getelementptr inbounds i8, i8* %343, i64 3
  %345 = load i8, i8* %344, align 1
  %346 = zext i8 %345 to i64
  %347 = shl i64 %346, 32
  %348 = or i64 %341, %347
  %349 = load i8*, i8** %7, align 8
  %350 = getelementptr inbounds i8, i8* %349, i64 16
  %351 = getelementptr inbounds i8, i8* %350, i64 4
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i64
  %354 = shl i64 %353, 24
  %355 = or i64 %348, %354
  %356 = load i8*, i8** %7, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 16
  %358 = getelementptr inbounds i8, i8* %357, i64 5
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i64
  %361 = shl i64 %360, 16
  %362 = or i64 %355, %361
  %363 = load i8*, i8** %7, align 8
  %364 = getelementptr inbounds i8, i8* %363, i64 16
  %365 = getelementptr inbounds i8, i8* %364, i64 6
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i64
  %368 = shl i64 %367, 8
  %369 = or i64 %362, %368
  %370 = load i8*, i8** %7, align 8
  %371 = getelementptr inbounds i8, i8* %370, i64 16
  %372 = getelementptr inbounds i8, i8* %371, i64 7
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i64
  %375 = or i64 %369, %374
  %376 = load i64, i64* %10, align 8
  %377 = add i64 %376, %375
  store i64 %377, i64* %10, align 8
  %378 = load i64, i64* %10, align 8
  %379 = mul i64 %378, -307863662270213829
  store i64 %379, i64* %10, align 8
  %380 = load i8*, i8** %7, align 8
  %381 = getelementptr inbounds i8, i8* %380, i64 24
  %382 = getelementptr inbounds i8, i8* %381, i64 0
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i64
  %385 = shl i64 %384, 56
  %386 = load i8*, i8** %7, align 8
  %387 = getelementptr inbounds i8, i8* %386, i64 24
  %388 = getelementptr inbounds i8, i8* %387, i64 1
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i64
  %391 = shl i64 %390, 48
  %392 = or i64 %385, %391
  %393 = load i8*, i8** %7, align 8
  %394 = getelementptr inbounds i8, i8* %393, i64 24
  %395 = getelementptr inbounds i8, i8* %394, i64 2
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i64
  %398 = shl i64 %397, 40
  %399 = or i64 %392, %398
  %400 = load i8*, i8** %7, align 8
  %401 = getelementptr inbounds i8, i8* %400, i64 24
  %402 = getelementptr inbounds i8, i8* %401, i64 3
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i64
  %405 = shl i64 %404, 32
  %406 = or i64 %399, %405
  %407 = load i8*, i8** %7, align 8
  %408 = getelementptr inbounds i8, i8* %407, i64 24
  %409 = getelementptr inbounds i8, i8* %408, i64 4
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i64
  %412 = shl i64 %411, 24
  %413 = or i64 %406, %412
  %414 = load i8*, i8** %7, align 8
  %415 = getelementptr inbounds i8, i8* %414, i64 24
  %416 = getelementptr inbounds i8, i8* %415, i64 5
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i64
  %419 = shl i64 %418, 16
  %420 = or i64 %413, %419
  %421 = load i8*, i8** %7, align 8
  %422 = getelementptr inbounds i8, i8* %421, i64 24
  %423 = getelementptr inbounds i8, i8* %422, i64 6
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i64
  %426 = shl i64 %425, 8
  %427 = or i64 %420, %426
  %428 = load i8*, i8** %7, align 8
  %429 = getelementptr inbounds i8, i8* %428, i64 24
  %430 = getelementptr inbounds i8, i8* %429, i64 7
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i64
  %433 = or i64 %427, %432
  %434 = load i64, i64* %11, align 8
  %435 = add i64 %434, %433
  store i64 %435, i64* %11, align 8
  %436 = load i64, i64* %11, align 8
  %437 = shl i64 %436, 33
  %438 = load i64, i64* %11, align 8
  %439 = lshr i64 %438, 31
  %440 = or i64 %437, %439
  store i64 %440, i64* %11, align 8
  %441 = load i8*, i8** %7, align 8
  %442 = getelementptr inbounds i8, i8* %441, i64 24
  %443 = getelementptr inbounds i8, i8* %442, i64 0
  %444 = load i8, i8* %443, align 1
  %445 = zext i8 %444 to i64
  %446 = shl i64 %445, 56
  %447 = load i8*, i8** %7, align 8
  %448 = getelementptr inbounds i8, i8* %447, i64 24
  %449 = getelementptr inbounds i8, i8* %448, i64 1
  %450 = load i8, i8* %449, align 1
  %451 = zext i8 %450 to i64
  %452 = shl i64 %451, 48
  %453 = or i64 %446, %452
  %454 = load i8*, i8** %7, align 8
  %455 = getelementptr inbounds i8, i8* %454, i64 24
  %456 = getelementptr inbounds i8, i8* %455, i64 2
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i64
  %459 = shl i64 %458, 40
  %460 = or i64 %453, %459
  %461 = load i8*, i8** %7, align 8
  %462 = getelementptr inbounds i8, i8* %461, i64 24
  %463 = getelementptr inbounds i8, i8* %462, i64 3
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i64
  %466 = shl i64 %465, 32
  %467 = or i64 %460, %466
  %468 = load i8*, i8** %7, align 8
  %469 = getelementptr inbounds i8, i8* %468, i64 24
  %470 = getelementptr inbounds i8, i8* %469, i64 4
  %471 = load i8, i8* %470, align 1
  %472 = zext i8 %471 to i64
  %473 = shl i64 %472, 24
  %474 = or i64 %467, %473
  %475 = load i8*, i8** %7, align 8
  %476 = getelementptr inbounds i8, i8* %475, i64 24
  %477 = getelementptr inbounds i8, i8* %476, i64 5
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i64
  %480 = shl i64 %479, 16
  %481 = or i64 %474, %480
  %482 = load i8*, i8** %7, align 8
  %483 = getelementptr inbounds i8, i8* %482, i64 24
  %484 = getelementptr inbounds i8, i8* %483, i64 6
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i64
  %487 = shl i64 %486, 8
  %488 = or i64 %481, %487
  %489 = load i8*, i8** %7, align 8
  %490 = getelementptr inbounds i8, i8* %489, i64 24
  %491 = getelementptr inbounds i8, i8* %490, i64 7
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i64
  %494 = or i64 %488, %493
  %495 = load i64, i64* %11, align 8
  %496 = add i64 %495, %494
  store i64 %496, i64* %11, align 8
  %497 = load i64, i64* %11, align 8
  %498 = mul i64 %497, -307863662270213829
  store i64 %498, i64* %11, align 8
  %499 = load i8*, i8** %7, align 8
  %500 = getelementptr inbounds i8, i8* %499, i64 32
  store i8* %500, i8** %7, align 8
  br label %501

501:                                              ; preds = %38
  %502 = load i64, i64* %12, align 8
  %503 = add i64 %502, -1
  store i64 %503, i64* %12, align 8
  br label %35

504:                                              ; preds = %35
  %505 = load i64, i64* %5, align 8
  %506 = and i64 %505, 24
  switch i64 %506, label %855 [
    i64 24, label %507
    i64 16, label %627
    i64 8, label %747
  ]

507:                                              ; preds = %504
  %508 = load i8*, i8** %7, align 8
  %509 = getelementptr inbounds i8, i8* %508, i64 16
  %510 = getelementptr inbounds i8, i8* %509, i64 0
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i64
  %513 = shl i64 %512, 56
  %514 = load i8*, i8** %7, align 8
  %515 = getelementptr inbounds i8, i8* %514, i64 16
  %516 = getelementptr inbounds i8, i8* %515, i64 1
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i64
  %519 = shl i64 %518, 48
  %520 = or i64 %513, %519
  %521 = load i8*, i8** %7, align 8
  %522 = getelementptr inbounds i8, i8* %521, i64 16
  %523 = getelementptr inbounds i8, i8* %522, i64 2
  %524 = load i8, i8* %523, align 1
  %525 = zext i8 %524 to i64
  %526 = shl i64 %525, 40
  %527 = or i64 %520, %526
  %528 = load i8*, i8** %7, align 8
  %529 = getelementptr inbounds i8, i8* %528, i64 16
  %530 = getelementptr inbounds i8, i8* %529, i64 3
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i64
  %533 = shl i64 %532, 32
  %534 = or i64 %527, %533
  %535 = load i8*, i8** %7, align 8
  %536 = getelementptr inbounds i8, i8* %535, i64 16
  %537 = getelementptr inbounds i8, i8* %536, i64 4
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i64
  %540 = shl i64 %539, 24
  %541 = or i64 %534, %540
  %542 = load i8*, i8** %7, align 8
  %543 = getelementptr inbounds i8, i8* %542, i64 16
  %544 = getelementptr inbounds i8, i8* %543, i64 5
  %545 = load i8, i8* %544, align 1
  %546 = zext i8 %545 to i64
  %547 = shl i64 %546, 16
  %548 = or i64 %541, %547
  %549 = load i8*, i8** %7, align 8
  %550 = getelementptr inbounds i8, i8* %549, i64 16
  %551 = getelementptr inbounds i8, i8* %550, i64 6
  %552 = load i8, i8* %551, align 1
  %553 = zext i8 %552 to i64
  %554 = shl i64 %553, 8
  %555 = or i64 %548, %554
  %556 = load i8*, i8** %7, align 8
  %557 = getelementptr inbounds i8, i8* %556, i64 16
  %558 = getelementptr inbounds i8, i8* %557, i64 7
  %559 = load i8, i8* %558, align 1
  %560 = zext i8 %559 to i64
  %561 = or i64 %555, %560
  %562 = load i64, i64* %10, align 8
  %563 = add i64 %562, %561
  store i64 %563, i64* %10, align 8
  %564 = load i64, i64* %10, align 8
  %565 = shl i64 %564, 33
  %566 = load i64, i64* %10, align 8
  %567 = lshr i64 %566, 31
  %568 = or i64 %565, %567
  store i64 %568, i64* %10, align 8
  %569 = load i8*, i8** %7, align 8
  %570 = getelementptr inbounds i8, i8* %569, i64 16
  %571 = getelementptr inbounds i8, i8* %570, i64 0
  %572 = load i8, i8* %571, align 1
  %573 = zext i8 %572 to i64
  %574 = shl i64 %573, 56
  %575 = load i8*, i8** %7, align 8
  %576 = getelementptr inbounds i8, i8* %575, i64 16
  %577 = getelementptr inbounds i8, i8* %576, i64 1
  %578 = load i8, i8* %577, align 1
  %579 = zext i8 %578 to i64
  %580 = shl i64 %579, 48
  %581 = or i64 %574, %580
  %582 = load i8*, i8** %7, align 8
  %583 = getelementptr inbounds i8, i8* %582, i64 16
  %584 = getelementptr inbounds i8, i8* %583, i64 2
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  %587 = shl i64 %586, 40
  %588 = or i64 %581, %587
  %589 = load i8*, i8** %7, align 8
  %590 = getelementptr inbounds i8, i8* %589, i64 16
  %591 = getelementptr inbounds i8, i8* %590, i64 3
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i64
  %594 = shl i64 %593, 32
  %595 = or i64 %588, %594
  %596 = load i8*, i8** %7, align 8
  %597 = getelementptr inbounds i8, i8* %596, i64 16
  %598 = getelementptr inbounds i8, i8* %597, i64 4
  %599 = load i8, i8* %598, align 1
  %600 = zext i8 %599 to i64
  %601 = shl i64 %600, 24
  %602 = or i64 %595, %601
  %603 = load i8*, i8** %7, align 8
  %604 = getelementptr inbounds i8, i8* %603, i64 16
  %605 = getelementptr inbounds i8, i8* %604, i64 5
  %606 = load i8, i8* %605, align 1
  %607 = zext i8 %606 to i64
  %608 = shl i64 %607, 16
  %609 = or i64 %602, %608
  %610 = load i8*, i8** %7, align 8
  %611 = getelementptr inbounds i8, i8* %610, i64 16
  %612 = getelementptr inbounds i8, i8* %611, i64 6
  %613 = load i8, i8* %612, align 1
  %614 = zext i8 %613 to i64
  %615 = shl i64 %614, 8
  %616 = or i64 %609, %615
  %617 = load i8*, i8** %7, align 8
  %618 = getelementptr inbounds i8, i8* %617, i64 16
  %619 = getelementptr inbounds i8, i8* %618, i64 7
  %620 = load i8, i8* %619, align 1
  %621 = zext i8 %620 to i64
  %622 = or i64 %616, %621
  %623 = load i64, i64* %10, align 8
  %624 = add i64 %623, %622
  store i64 %624, i64* %10, align 8
  %625 = load i64, i64* %10, align 8
  %626 = mul i64 %625, -307863662270213829
  store i64 %626, i64* %10, align 8
  br label %627

627:                                              ; preds = %504, %507
  %628 = load i8*, i8** %7, align 8
  %629 = getelementptr inbounds i8, i8* %628, i64 8
  %630 = getelementptr inbounds i8, i8* %629, i64 0
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i64
  %633 = shl i64 %632, 56
  %634 = load i8*, i8** %7, align 8
  %635 = getelementptr inbounds i8, i8* %634, i64 8
  %636 = getelementptr inbounds i8, i8* %635, i64 1
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = shl i64 %638, 48
  %640 = or i64 %633, %639
  %641 = load i8*, i8** %7, align 8
  %642 = getelementptr inbounds i8, i8* %641, i64 8
  %643 = getelementptr inbounds i8, i8* %642, i64 2
  %644 = load i8, i8* %643, align 1
  %645 = zext i8 %644 to i64
  %646 = shl i64 %645, 40
  %647 = or i64 %640, %646
  %648 = load i8*, i8** %7, align 8
  %649 = getelementptr inbounds i8, i8* %648, i64 8
  %650 = getelementptr inbounds i8, i8* %649, i64 3
  %651 = load i8, i8* %650, align 1
  %652 = zext i8 %651 to i64
  %653 = shl i64 %652, 32
  %654 = or i64 %647, %653
  %655 = load i8*, i8** %7, align 8
  %656 = getelementptr inbounds i8, i8* %655, i64 8
  %657 = getelementptr inbounds i8, i8* %656, i64 4
  %658 = load i8, i8* %657, align 1
  %659 = zext i8 %658 to i64
  %660 = shl i64 %659, 24
  %661 = or i64 %654, %660
  %662 = load i8*, i8** %7, align 8
  %663 = getelementptr inbounds i8, i8* %662, i64 8
  %664 = getelementptr inbounds i8, i8* %663, i64 5
  %665 = load i8, i8* %664, align 1
  %666 = zext i8 %665 to i64
  %667 = shl i64 %666, 16
  %668 = or i64 %661, %667
  %669 = load i8*, i8** %7, align 8
  %670 = getelementptr inbounds i8, i8* %669, i64 8
  %671 = getelementptr inbounds i8, i8* %670, i64 6
  %672 = load i8, i8* %671, align 1
  %673 = zext i8 %672 to i64
  %674 = shl i64 %673, 8
  %675 = or i64 %668, %674
  %676 = load i8*, i8** %7, align 8
  %677 = getelementptr inbounds i8, i8* %676, i64 8
  %678 = getelementptr inbounds i8, i8* %677, i64 7
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i64
  %681 = or i64 %675, %680
  %682 = load i64, i64* %9, align 8
  %683 = add i64 %682, %681
  store i64 %683, i64* %9, align 8
  %684 = load i64, i64* %9, align 8
  %685 = shl i64 %684, 33
  %686 = load i64, i64* %9, align 8
  %687 = lshr i64 %686, 31
  %688 = or i64 %685, %687
  store i64 %688, i64* %9, align 8
  %689 = load i8*, i8** %7, align 8
  %690 = getelementptr inbounds i8, i8* %689, i64 8
  %691 = getelementptr inbounds i8, i8* %690, i64 0
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i64
  %694 = shl i64 %693, 56
  %695 = load i8*, i8** %7, align 8
  %696 = getelementptr inbounds i8, i8* %695, i64 8
  %697 = getelementptr inbounds i8, i8* %696, i64 1
  %698 = load i8, i8* %697, align 1
  %699 = zext i8 %698 to i64
  %700 = shl i64 %699, 48
  %701 = or i64 %694, %700
  %702 = load i8*, i8** %7, align 8
  %703 = getelementptr inbounds i8, i8* %702, i64 8
  %704 = getelementptr inbounds i8, i8* %703, i64 2
  %705 = load i8, i8* %704, align 1
  %706 = zext i8 %705 to i64
  %707 = shl i64 %706, 40
  %708 = or i64 %701, %707
  %709 = load i8*, i8** %7, align 8
  %710 = getelementptr inbounds i8, i8* %709, i64 8
  %711 = getelementptr inbounds i8, i8* %710, i64 3
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i64
  %714 = shl i64 %713, 32
  %715 = or i64 %708, %714
  %716 = load i8*, i8** %7, align 8
  %717 = getelementptr inbounds i8, i8* %716, i64 8
  %718 = getelementptr inbounds i8, i8* %717, i64 4
  %719 = load i8, i8* %718, align 1
  %720 = zext i8 %719 to i64
  %721 = shl i64 %720, 24
  %722 = or i64 %715, %721
  %723 = load i8*, i8** %7, align 8
  %724 = getelementptr inbounds i8, i8* %723, i64 8
  %725 = getelementptr inbounds i8, i8* %724, i64 5
  %726 = load i8, i8* %725, align 1
  %727 = zext i8 %726 to i64
  %728 = shl i64 %727, 16
  %729 = or i64 %722, %728
  %730 = load i8*, i8** %7, align 8
  %731 = getelementptr inbounds i8, i8* %730, i64 8
  %732 = getelementptr inbounds i8, i8* %731, i64 6
  %733 = load i8, i8* %732, align 1
  %734 = zext i8 %733 to i64
  %735 = shl i64 %734, 8
  %736 = or i64 %729, %735
  %737 = load i8*, i8** %7, align 8
  %738 = getelementptr inbounds i8, i8* %737, i64 8
  %739 = getelementptr inbounds i8, i8* %738, i64 7
  %740 = load i8, i8* %739, align 1
  %741 = zext i8 %740 to i64
  %742 = or i64 %736, %741
  %743 = load i64, i64* %9, align 8
  %744 = add i64 %743, %742
  store i64 %744, i64* %9, align 8
  %745 = load i64, i64* %9, align 8
  %746 = mul i64 %745, -307863662270213829
  store i64 %746, i64* %9, align 8
  br label %747

747:                                              ; preds = %504, %627
  %748 = load i8*, i8** %7, align 8
  %749 = getelementptr inbounds i8, i8* %748, i64 0
  %750 = load i8, i8* %749, align 1
  %751 = zext i8 %750 to i64
  %752 = shl i64 %751, 56
  %753 = load i8*, i8** %7, align 8
  %754 = getelementptr inbounds i8, i8* %753, i64 1
  %755 = load i8, i8* %754, align 1
  %756 = zext i8 %755 to i64
  %757 = shl i64 %756, 48
  %758 = or i64 %752, %757
  %759 = load i8*, i8** %7, align 8
  %760 = getelementptr inbounds i8, i8* %759, i64 2
  %761 = load i8, i8* %760, align 1
  %762 = zext i8 %761 to i64
  %763 = shl i64 %762, 40
  %764 = or i64 %758, %763
  %765 = load i8*, i8** %7, align 8
  %766 = getelementptr inbounds i8, i8* %765, i64 3
  %767 = load i8, i8* %766, align 1
  %768 = zext i8 %767 to i64
  %769 = shl i64 %768, 32
  %770 = or i64 %764, %769
  %771 = load i8*, i8** %7, align 8
  %772 = getelementptr inbounds i8, i8* %771, i64 4
  %773 = load i8, i8* %772, align 1
  %774 = zext i8 %773 to i64
  %775 = shl i64 %774, 24
  %776 = or i64 %770, %775
  %777 = load i8*, i8** %7, align 8
  %778 = getelementptr inbounds i8, i8* %777, i64 5
  %779 = load i8, i8* %778, align 1
  %780 = zext i8 %779 to i64
  %781 = shl i64 %780, 16
  %782 = or i64 %776, %781
  %783 = load i8*, i8** %7, align 8
  %784 = getelementptr inbounds i8, i8* %783, i64 6
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i64
  %787 = shl i64 %786, 8
  %788 = or i64 %782, %787
  %789 = load i8*, i8** %7, align 8
  %790 = getelementptr inbounds i8, i8* %789, i64 7
  %791 = load i8, i8* %790, align 1
  %792 = zext i8 %791 to i64
  %793 = or i64 %788, %792
  %794 = load i64, i64* %8, align 8
  %795 = add i64 %794, %793
  store i64 %795, i64* %8, align 8
  %796 = load i64, i64* %8, align 8
  %797 = shl i64 %796, 33
  %798 = load i64, i64* %8, align 8
  %799 = lshr i64 %798, 31
  %800 = or i64 %797, %799
  store i64 %800, i64* %8, align 8
  %801 = load i8*, i8** %7, align 8
  %802 = getelementptr inbounds i8, i8* %801, i64 0
  %803 = load i8, i8* %802, align 1
  %804 = zext i8 %803 to i64
  %805 = shl i64 %804, 56
  %806 = load i8*, i8** %7, align 8
  %807 = getelementptr inbounds i8, i8* %806, i64 1
  %808 = load i8, i8* %807, align 1
  %809 = zext i8 %808 to i64
  %810 = shl i64 %809, 48
  %811 = or i64 %805, %810
  %812 = load i8*, i8** %7, align 8
  %813 = getelementptr inbounds i8, i8* %812, i64 2
  %814 = load i8, i8* %813, align 1
  %815 = zext i8 %814 to i64
  %816 = shl i64 %815, 40
  %817 = or i64 %811, %816
  %818 = load i8*, i8** %7, align 8
  %819 = getelementptr inbounds i8, i8* %818, i64 3
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = shl i64 %821, 32
  %823 = or i64 %817, %822
  %824 = load i8*, i8** %7, align 8
  %825 = getelementptr inbounds i8, i8* %824, i64 4
  %826 = load i8, i8* %825, align 1
  %827 = zext i8 %826 to i64
  %828 = shl i64 %827, 24
  %829 = or i64 %823, %828
  %830 = load i8*, i8** %7, align 8
  %831 = getelementptr inbounds i8, i8* %830, i64 5
  %832 = load i8, i8* %831, align 1
  %833 = zext i8 %832 to i64
  %834 = shl i64 %833, 16
  %835 = or i64 %829, %834
  %836 = load i8*, i8** %7, align 8
  %837 = getelementptr inbounds i8, i8* %836, i64 6
  %838 = load i8, i8* %837, align 1
  %839 = zext i8 %838 to i64
  %840 = shl i64 %839, 8
  %841 = or i64 %835, %840
  %842 = load i8*, i8** %7, align 8
  %843 = getelementptr inbounds i8, i8* %842, i64 7
  %844 = load i8, i8* %843, align 1
  %845 = zext i8 %844 to i64
  %846 = or i64 %841, %845
  %847 = load i64, i64* %8, align 8
  %848 = add i64 %847, %846
  store i64 %848, i64* %8, align 8
  %849 = load i64, i64* %8, align 8
  %850 = mul i64 %849, -307863662270213829
  store i64 %850, i64* %8, align 8
  %851 = load i64, i64* %5, align 8
  %852 = and i64 %851, 24
  %853 = load i8*, i8** %7, align 8
  %854 = getelementptr inbounds i8, i8* %853, i64 %852
  store i8* %854, i8** %7, align 8
  br label %855

855:                                              ; preds = %747, %504
  store i64 0, i64* %13, align 8
  %856 = load i64, i64* %5, align 8
  %857 = and i64 %856, 7
  switch i64 %857, label %974 [
    i64 7, label %858
    i64 6, label %866
    i64 5, label %874
    i64 4, label %882
    i64 3, label %890
    i64 2, label %898
    i64 1, label %906
  ]

858:                                              ; preds = %855
  %859 = load i8*, i8** %7, align 8
  %860 = getelementptr inbounds i8, i8* %859, i64 6
  %861 = load i8, i8* %860, align 1
  %862 = zext i8 %861 to i64
  %863 = shl i64 %862, 8
  %864 = load i64, i64* %13, align 8
  %865 = or i64 %864, %863
  store i64 %865, i64* %13, align 8
  br label %866

866:                                              ; preds = %855, %858
  %867 = load i8*, i8** %7, align 8
  %868 = getelementptr inbounds i8, i8* %867, i64 5
  %869 = load i8, i8* %868, align 1
  %870 = zext i8 %869 to i64
  %871 = shl i64 %870, 16
  %872 = load i64, i64* %13, align 8
  %873 = or i64 %872, %871
  store i64 %873, i64* %13, align 8
  br label %874

874:                                              ; preds = %855, %866
  %875 = load i8*, i8** %7, align 8
  %876 = getelementptr inbounds i8, i8* %875, i64 4
  %877 = load i8, i8* %876, align 1
  %878 = zext i8 %877 to i64
  %879 = shl i64 %878, 24
  %880 = load i64, i64* %13, align 8
  %881 = or i64 %880, %879
  store i64 %881, i64* %13, align 8
  br label %882

882:                                              ; preds = %855, %874
  %883 = load i8*, i8** %7, align 8
  %884 = getelementptr inbounds i8, i8* %883, i64 3
  %885 = load i8, i8* %884, align 1
  %886 = zext i8 %885 to i64
  %887 = shl i64 %886, 32
  %888 = load i64, i64* %13, align 8
  %889 = or i64 %888, %887
  store i64 %889, i64* %13, align 8
  br label %890

890:                                              ; preds = %855, %882
  %891 = load i8*, i8** %7, align 8
  %892 = getelementptr inbounds i8, i8* %891, i64 2
  %893 = load i8, i8* %892, align 1
  %894 = zext i8 %893 to i64
  %895 = shl i64 %894, 40
  %896 = load i64, i64* %13, align 8
  %897 = or i64 %896, %895
  store i64 %897, i64* %13, align 8
  br label %898

898:                                              ; preds = %855, %890
  %899 = load i8*, i8** %7, align 8
  %900 = getelementptr inbounds i8, i8* %899, i64 1
  %901 = load i8, i8* %900, align 1
  %902 = zext i8 %901 to i64
  %903 = shl i64 %902, 48
  %904 = load i64, i64* %13, align 8
  %905 = or i64 %904, %903
  store i64 %905, i64* %13, align 8
  br label %906

906:                                              ; preds = %855, %898
  %907 = load i8*, i8** %7, align 8
  %908 = getelementptr inbounds i8, i8* %907, i64 0
  %909 = load i8, i8* %908, align 1
  %910 = zext i8 %909 to i64
  %911 = shl i64 %910, 56
  %912 = load i64, i64* %13, align 8
  %913 = or i64 %912, %911
  store i64 %913, i64* %13, align 8
  %914 = load i64, i64* %5, align 8
  %915 = lshr i64 %914, 3
  %916 = and i64 %915, 3
  switch i64 %916, label %973 [
    i64 3, label %917
    i64 2, label %931
    i64 1, label %945
    i64 0, label %959
  ]

917:                                              ; preds = %906
  %918 = load i64, i64* %13, align 8
  %919 = load i64, i64* %11, align 8
  %920 = add i64 %919, %918
  store i64 %920, i64* %11, align 8
  %921 = load i64, i64* %11, align 8
  %922 = shl i64 %921, 33
  %923 = load i64, i64* %11, align 8
  %924 = lshr i64 %923, 31
  %925 = or i64 %922, %924
  store i64 %925, i64* %11, align 8
  %926 = load i64, i64* %13, align 8
  %927 = load i64, i64* %11, align 8
  %928 = add i64 %927, %926
  store i64 %928, i64* %11, align 8
  %929 = load i64, i64* %11, align 8
  %930 = mul i64 %929, -307863662270213829
  store i64 %930, i64* %11, align 8
  br label %973

931:                                              ; preds = %906
  %932 = load i64, i64* %13, align 8
  %933 = load i64, i64* %10, align 8
  %934 = add i64 %933, %932
  store i64 %934, i64* %10, align 8
  %935 = load i64, i64* %10, align 8
  %936 = shl i64 %935, 33
  %937 = load i64, i64* %10, align 8
  %938 = lshr i64 %937, 31
  %939 = or i64 %936, %938
  store i64 %939, i64* %10, align 8
  %940 = load i64, i64* %13, align 8
  %941 = load i64, i64* %10, align 8
  %942 = add i64 %941, %940
  store i64 %942, i64* %10, align 8
  %943 = load i64, i64* %10, align 8
  %944 = mul i64 %943, -307863662270213829
  store i64 %944, i64* %10, align 8
  br label %973

945:                                              ; preds = %906
  %946 = load i64, i64* %13, align 8
  %947 = load i64, i64* %9, align 8
  %948 = add i64 %947, %946
  store i64 %948, i64* %9, align 8
  %949 = load i64, i64* %9, align 8
  %950 = shl i64 %949, 33
  %951 = load i64, i64* %9, align 8
  %952 = lshr i64 %951, 31
  %953 = or i64 %950, %952
  store i64 %953, i64* %9, align 8
  %954 = load i64, i64* %13, align 8
  %955 = load i64, i64* %9, align 8
  %956 = add i64 %955, %954
  store i64 %956, i64* %9, align 8
  %957 = load i64, i64* %9, align 8
  %958 = mul i64 %957, -307863662270213829
  store i64 %958, i64* %9, align 8
  br label %973

959:                                              ; preds = %906
  %960 = load i64, i64* %13, align 8
  %961 = load i64, i64* %8, align 8
  %962 = add i64 %961, %960
  store i64 %962, i64* %8, align 8
  %963 = load i64, i64* %8, align 8
  %964 = shl i64 %963, 33
  %965 = load i64, i64* %8, align 8
  %966 = lshr i64 %965, 31
  %967 = or i64 %964, %966
  store i64 %967, i64* %8, align 8
  %968 = load i64, i64* %13, align 8
  %969 = load i64, i64* %8, align 8
  %970 = add i64 %969, %968
  store i64 %970, i64* %8, align 8
  %971 = load i64, i64* %8, align 8
  %972 = mul i64 %971, -307863662270213829
  store i64 %972, i64* %8, align 8
  br label %973

973:                                              ; preds = %906, %959, %945, %931, %917
  br label %974

974:                                              ; preds = %973, %855
  %975 = load i64, i64* %8, align 8
  %976 = shl i64 %975, 17
  %977 = load i64, i64* %8, align 8
  %978 = lshr i64 %977, 47
  %979 = or i64 %976, %978
  %980 = load i64, i64* %9, align 8
  %981 = shl i64 %980, 13
  %982 = load i64, i64* %9, align 8
  %983 = lshr i64 %982, 51
  %984 = or i64 %981, %983
  %985 = add i64 %979, %984
  %986 = load i64, i64* %10, align 8
  %987 = shl i64 %986, 47
  %988 = load i64, i64* %10, align 8
  %989 = lshr i64 %988, 17
  %990 = or i64 %987, %989
  %991 = add i64 %985, %990
  %992 = load i64, i64* %11, align 8
  %993 = shl i64 %992, 57
  %994 = load i64, i64* %11, align 8
  %995 = lshr i64 %994, 7
  %996 = or i64 %993, %995
  %997 = add i64 %991, %996
  store i64 %997, i64* %14, align 8
  %998 = load i64, i64* %5, align 8
  %999 = shl i64 %998, 33
  %1000 = load i64, i64* %5, align 8
  %1001 = xor i64 %1000, %999
  store i64 %1001, i64* %5, align 8
  %1002 = load i64, i64* %5, align 8
  %1003 = load i64, i64* %14, align 8
  %1004 = add i64 %1003, %1002
  store i64 %1004, i64* %14, align 8
  %1005 = load i64, i64* %8, align 8
  %1006 = mul i64 %1005, -6119419677951424823
  %1007 = load i64, i64* %14, align 8
  %1008 = add i64 %1007, %1006
  store i64 %1008, i64* %14, align 8
  %1009 = load i64, i64* %14, align 8
  %1010 = shl i64 %1009, 13
  %1011 = load i64, i64* %14, align 8
  %1012 = lshr i64 %1011, 51
  %1013 = or i64 %1010, %1012
  %1014 = load i64, i64* %14, align 8
  %1015 = xor i64 %1014, %1013
  store i64 %1015, i64* %14, align 8
  %1016 = load i64, i64* %9, align 8
  %1017 = mul i64 %1016, -6119419677951424823
  %1018 = load i64, i64* %14, align 8
  %1019 = add i64 %1018, %1017
  store i64 %1019, i64* %14, align 8
  %1020 = load i64, i64* %14, align 8
  %1021 = shl i64 %1020, 29
  %1022 = load i64, i64* %14, align 8
  %1023 = lshr i64 %1022, 35
  %1024 = or i64 %1021, %1023
  %1025 = load i64, i64* %14, align 8
  %1026 = xor i64 %1025, %1024
  store i64 %1026, i64* %14, align 8
  %1027 = load i64, i64* %10, align 8
  %1028 = mul i64 %1027, -6119419677951424823
  %1029 = load i64, i64* %14, align 8
  %1030 = add i64 %1029, %1028
  store i64 %1030, i64* %14, align 8
  %1031 = load i64, i64* %14, align 8
  %1032 = shl i64 %1031, 33
  %1033 = load i64, i64* %14, align 8
  %1034 = lshr i64 %1033, 31
  %1035 = or i64 %1032, %1034
  %1036 = load i64, i64* %14, align 8
  %1037 = xor i64 %1036, %1035
  store i64 %1037, i64* %14, align 8
  %1038 = load i64, i64* %11, align 8
  %1039 = mul i64 %1038, -6119419677951424823
  %1040 = load i64, i64* %14, align 8
  %1041 = add i64 %1040, %1039
  store i64 %1041, i64* %14, align 8
  %1042 = load i64, i64* %14, align 8
  %1043 = shl i64 %1042, 51
  %1044 = load i64, i64* %14, align 8
  %1045 = lshr i64 %1044, 13
  %1046 = or i64 %1043, %1045
  %1047 = load i64, i64* %14, align 8
  %1048 = xor i64 %1047, %1046
  store i64 %1048, i64* %14, align 8
  %1049 = load i64, i64* %14, align 8
  %1050 = lshr i64 %1049, 29
  %1051 = mul i64 %1050, -307863662270213829
  %1052 = load i64, i64* %14, align 8
  %1053 = xor i64 %1052, %1051
  store i64 %1053, i64* %14, align 8
  %1054 = load i64, i64* %14, align 8
  ret i64 %1054
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_rand_bytes(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %12 = load i8*, i8** %3, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = load i64, i64* %4, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14, %2
  br label %489

18:                                               ; preds = %14
  %19 = load i8*, i8** %3, align 8
  store i8* %19, i8** %5, align 8
  %20 = load i64, i64* %4, align 8
  %21 = lshr i64 %20, 5
  store i64 %21, i64* %6, align 8
  br label %22

22:                                               ; preds = %252, %18
  %23 = load i64, i64* %6, align 8
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %255

25:                                               ; preds = %22
  %26 = call i64 @fio_rand64()
  store i64 %26, i64* %7, align 8
  %27 = call i64 @fio_rand64()
  store i64 %27, i64* %8, align 8
  %28 = call i64 @fio_rand64()
  store i64 %28, i64* %9, align 8
  %29 = call i64 @fio_rand64()
  store i64 %29, i64* %10, align 8
  br label %30

30:                                               ; preds = %25
  %31 = load i64, i64* %7, align 8
  %32 = lshr i64 %31, 56
  %33 = and i64 %32, 255
  %34 = trunc i64 %33 to i8
  %35 = load i8*, i8** %5, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 0
  store i8 %34, i8* %36, align 1
  %37 = load i64, i64* %7, align 8
  %38 = lshr i64 %37, 48
  %39 = and i64 %38, 255
  %40 = trunc i64 %39 to i8
  %41 = load i8*, i8** %5, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %40, i8* %42, align 1
  %43 = load i64, i64* %7, align 8
  %44 = lshr i64 %43, 40
  %45 = and i64 %44, 255
  %46 = trunc i64 %45 to i8
  %47 = load i8*, i8** %5, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 2
  store i8 %46, i8* %48, align 1
  %49 = load i64, i64* %7, align 8
  %50 = lshr i64 %49, 32
  %51 = and i64 %50, 255
  %52 = trunc i64 %51 to i8
  %53 = load i8*, i8** %5, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %52, i8* %54, align 1
  %55 = load i64, i64* %7, align 8
  %56 = lshr i64 %55, 24
  %57 = and i64 %56, 255
  %58 = trunc i64 %57 to i8
  %59 = load i8*, i8** %5, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 4
  store i8 %58, i8* %60, align 1
  %61 = load i64, i64* %7, align 8
  %62 = lshr i64 %61, 16
  %63 = and i64 %62, 255
  %64 = trunc i64 %63 to i8
  %65 = load i8*, i8** %5, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 5
  store i8 %64, i8* %66, align 1
  %67 = load i64, i64* %7, align 8
  %68 = lshr i64 %67, 8
  %69 = and i64 %68, 255
  %70 = trunc i64 %69 to i8
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 6
  store i8 %70, i8* %72, align 1
  %73 = load i64, i64* %7, align 8
  %74 = and i64 %73, 255
  %75 = trunc i64 %74 to i8
  %76 = load i8*, i8** %5, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 7
  store i8 %75, i8* %77, align 1
  br label %78

78:                                               ; preds = %30
  br label %79

79:                                               ; preds = %78
  %80 = load i64, i64* %8, align 8
  %81 = lshr i64 %80, 56
  %82 = and i64 %81, 255
  %83 = trunc i64 %82 to i8
  %84 = load i8*, i8** %5, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 8
  %86 = getelementptr inbounds i8, i8* %85, i64 0
  store i8 %83, i8* %86, align 1
  %87 = load i64, i64* %8, align 8
  %88 = lshr i64 %87, 48
  %89 = and i64 %88, 255
  %90 = trunc i64 %89 to i8
  %91 = load i8*, i8** %5, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 8
  %93 = getelementptr inbounds i8, i8* %92, i64 1
  store i8 %90, i8* %93, align 1
  %94 = load i64, i64* %8, align 8
  %95 = lshr i64 %94, 40
  %96 = and i64 %95, 255
  %97 = trunc i64 %96 to i8
  %98 = load i8*, i8** %5, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 8
  %100 = getelementptr inbounds i8, i8* %99, i64 2
  store i8 %97, i8* %100, align 1
  %101 = load i64, i64* %8, align 8
  %102 = lshr i64 %101, 32
  %103 = and i64 %102, 255
  %104 = trunc i64 %103 to i8
  %105 = load i8*, i8** %5, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 8
  %107 = getelementptr inbounds i8, i8* %106, i64 3
  store i8 %104, i8* %107, align 1
  %108 = load i64, i64* %8, align 8
  %109 = lshr i64 %108, 24
  %110 = and i64 %109, 255
  %111 = trunc i64 %110 to i8
  %112 = load i8*, i8** %5, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 8
  %114 = getelementptr inbounds i8, i8* %113, i64 4
  store i8 %111, i8* %114, align 1
  %115 = load i64, i64* %8, align 8
  %116 = lshr i64 %115, 16
  %117 = and i64 %116, 255
  %118 = trunc i64 %117 to i8
  %119 = load i8*, i8** %5, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 8
  %121 = getelementptr inbounds i8, i8* %120, i64 5
  store i8 %118, i8* %121, align 1
  %122 = load i64, i64* %8, align 8
  %123 = lshr i64 %122, 8
  %124 = and i64 %123, 255
  %125 = trunc i64 %124 to i8
  %126 = load i8*, i8** %5, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 8
  %128 = getelementptr inbounds i8, i8* %127, i64 6
  store i8 %125, i8* %128, align 1
  %129 = load i64, i64* %8, align 8
  %130 = and i64 %129, 255
  %131 = trunc i64 %130 to i8
  %132 = load i8*, i8** %5, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 8
  %134 = getelementptr inbounds i8, i8* %133, i64 7
  store i8 %131, i8* %134, align 1
  br label %135

135:                                              ; preds = %79
  br label %136

136:                                              ; preds = %135
  %137 = load i64, i64* %9, align 8
  %138 = lshr i64 %137, 56
  %139 = and i64 %138, 255
  %140 = trunc i64 %139 to i8
  %141 = load i8*, i8** %5, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 16
  %143 = getelementptr inbounds i8, i8* %142, i64 0
  store i8 %140, i8* %143, align 1
  %144 = load i64, i64* %9, align 8
  %145 = lshr i64 %144, 48
  %146 = and i64 %145, 255
  %147 = trunc i64 %146 to i8
  %148 = load i8*, i8** %5, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 16
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  store i8 %147, i8* %150, align 1
  %151 = load i64, i64* %9, align 8
  %152 = lshr i64 %151, 40
  %153 = and i64 %152, 255
  %154 = trunc i64 %153 to i8
  %155 = load i8*, i8** %5, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 16
  %157 = getelementptr inbounds i8, i8* %156, i64 2
  store i8 %154, i8* %157, align 1
  %158 = load i64, i64* %9, align 8
  %159 = lshr i64 %158, 32
  %160 = and i64 %159, 255
  %161 = trunc i64 %160 to i8
  %162 = load i8*, i8** %5, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 16
  %164 = getelementptr inbounds i8, i8* %163, i64 3
  store i8 %161, i8* %164, align 1
  %165 = load i64, i64* %9, align 8
  %166 = lshr i64 %165, 24
  %167 = and i64 %166, 255
  %168 = trunc i64 %167 to i8
  %169 = load i8*, i8** %5, align 8
  %170 = getelementptr inbounds i8, i8* %169, i64 16
  %171 = getelementptr inbounds i8, i8* %170, i64 4
  store i8 %168, i8* %171, align 1
  %172 = load i64, i64* %9, align 8
  %173 = lshr i64 %172, 16
  %174 = and i64 %173, 255
  %175 = trunc i64 %174 to i8
  %176 = load i8*, i8** %5, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 16
  %178 = getelementptr inbounds i8, i8* %177, i64 5
  store i8 %175, i8* %178, align 1
  %179 = load i64, i64* %9, align 8
  %180 = lshr i64 %179, 8
  %181 = and i64 %180, 255
  %182 = trunc i64 %181 to i8
  %183 = load i8*, i8** %5, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 16
  %185 = getelementptr inbounds i8, i8* %184, i64 6
  store i8 %182, i8* %185, align 1
  %186 = load i64, i64* %9, align 8
  %187 = and i64 %186, 255
  %188 = trunc i64 %187 to i8
  %189 = load i8*, i8** %5, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 16
  %191 = getelementptr inbounds i8, i8* %190, i64 7
  store i8 %188, i8* %191, align 1
  br label %192

192:                                              ; preds = %136
  br label %193

193:                                              ; preds = %192
  %194 = load i64, i64* %10, align 8
  %195 = lshr i64 %194, 56
  %196 = and i64 %195, 255
  %197 = trunc i64 %196 to i8
  %198 = load i8*, i8** %5, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 24
  %200 = getelementptr inbounds i8, i8* %199, i64 0
  store i8 %197, i8* %200, align 1
  %201 = load i64, i64* %10, align 8
  %202 = lshr i64 %201, 48
  %203 = and i64 %202, 255
  %204 = trunc i64 %203 to i8
  %205 = load i8*, i8** %5, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 24
  %207 = getelementptr inbounds i8, i8* %206, i64 1
  store i8 %204, i8* %207, align 1
  %208 = load i64, i64* %10, align 8
  %209 = lshr i64 %208, 40
  %210 = and i64 %209, 255
  %211 = trunc i64 %210 to i8
  %212 = load i8*, i8** %5, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 24
  %214 = getelementptr inbounds i8, i8* %213, i64 2
  store i8 %211, i8* %214, align 1
  %215 = load i64, i64* %10, align 8
  %216 = lshr i64 %215, 32
  %217 = and i64 %216, 255
  %218 = trunc i64 %217 to i8
  %219 = load i8*, i8** %5, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 24
  %221 = getelementptr inbounds i8, i8* %220, i64 3
  store i8 %218, i8* %221, align 1
  %222 = load i64, i64* %10, align 8
  %223 = lshr i64 %222, 24
  %224 = and i64 %223, 255
  %225 = trunc i64 %224 to i8
  %226 = load i8*, i8** %5, align 8
  %227 = getelementptr inbounds i8, i8* %226, i64 24
  %228 = getelementptr inbounds i8, i8* %227, i64 4
  store i8 %225, i8* %228, align 1
  %229 = load i64, i64* %10, align 8
  %230 = lshr i64 %229, 16
  %231 = and i64 %230, 255
  %232 = trunc i64 %231 to i8
  %233 = load i8*, i8** %5, align 8
  %234 = getelementptr inbounds i8, i8* %233, i64 24
  %235 = getelementptr inbounds i8, i8* %234, i64 5
  store i8 %232, i8* %235, align 1
  %236 = load i64, i64* %10, align 8
  %237 = lshr i64 %236, 8
  %238 = and i64 %237, 255
  %239 = trunc i64 %238 to i8
  %240 = load i8*, i8** %5, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 24
  %242 = getelementptr inbounds i8, i8* %241, i64 6
  store i8 %239, i8* %242, align 1
  %243 = load i64, i64* %10, align 8
  %244 = and i64 %243, 255
  %245 = trunc i64 %244 to i8
  %246 = load i8*, i8** %5, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 24
  %248 = getelementptr inbounds i8, i8* %247, i64 7
  store i8 %245, i8* %248, align 1
  br label %249

249:                                              ; preds = %193
  %250 = load i8*, i8** %5, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 32
  store i8* %251, i8** %5, align 8
  br label %252

252:                                              ; preds = %249
  %253 = load i64, i64* %6, align 8
  %254 = add i64 %253, -1
  store i64 %254, i64* %6, align 8
  br label %22

255:                                              ; preds = %22
  %256 = load i64, i64* %4, align 8
  %257 = and i64 %256, 24
  switch i64 %257, label %431 [
    i64 24, label %258
    i64 16, label %317
    i64 8, label %376
  ]

258:                                              ; preds = %255
  %259 = call i64 @fio_rand64()
  store i64 %259, i64* %11, align 8
  br label %260

260:                                              ; preds = %258
  %261 = load i64, i64* %11, align 8
  %262 = lshr i64 %261, 56
  %263 = and i64 %262, 255
  %264 = trunc i64 %263 to i8
  %265 = load i8*, i8** %5, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 16
  %267 = getelementptr inbounds i8, i8* %266, i64 0
  store i8 %264, i8* %267, align 1
  %268 = load i64, i64* %11, align 8
  %269 = lshr i64 %268, 48
  %270 = and i64 %269, 255
  %271 = trunc i64 %270 to i8
  %272 = load i8*, i8** %5, align 8
  %273 = getelementptr inbounds i8, i8* %272, i64 16
  %274 = getelementptr inbounds i8, i8* %273, i64 1
  store i8 %271, i8* %274, align 1
  %275 = load i64, i64* %11, align 8
  %276 = lshr i64 %275, 40
  %277 = and i64 %276, 255
  %278 = trunc i64 %277 to i8
  %279 = load i8*, i8** %5, align 8
  %280 = getelementptr inbounds i8, i8* %279, i64 16
  %281 = getelementptr inbounds i8, i8* %280, i64 2
  store i8 %278, i8* %281, align 1
  %282 = load i64, i64* %11, align 8
  %283 = lshr i64 %282, 32
  %284 = and i64 %283, 255
  %285 = trunc i64 %284 to i8
  %286 = load i8*, i8** %5, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 16
  %288 = getelementptr inbounds i8, i8* %287, i64 3
  store i8 %285, i8* %288, align 1
  %289 = load i64, i64* %11, align 8
  %290 = lshr i64 %289, 24
  %291 = and i64 %290, 255
  %292 = trunc i64 %291 to i8
  %293 = load i8*, i8** %5, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 16
  %295 = getelementptr inbounds i8, i8* %294, i64 4
  store i8 %292, i8* %295, align 1
  %296 = load i64, i64* %11, align 8
  %297 = lshr i64 %296, 16
  %298 = and i64 %297, 255
  %299 = trunc i64 %298 to i8
  %300 = load i8*, i8** %5, align 8
  %301 = getelementptr inbounds i8, i8* %300, i64 16
  %302 = getelementptr inbounds i8, i8* %301, i64 5
  store i8 %299, i8* %302, align 1
  %303 = load i64, i64* %11, align 8
  %304 = lshr i64 %303, 8
  %305 = and i64 %304, 255
  %306 = trunc i64 %305 to i8
  %307 = load i8*, i8** %5, align 8
  %308 = getelementptr inbounds i8, i8* %307, i64 16
  %309 = getelementptr inbounds i8, i8* %308, i64 6
  store i8 %306, i8* %309, align 1
  %310 = load i64, i64* %11, align 8
  %311 = and i64 %310, 255
  %312 = trunc i64 %311 to i8
  %313 = load i8*, i8** %5, align 8
  %314 = getelementptr inbounds i8, i8* %313, i64 16
  %315 = getelementptr inbounds i8, i8* %314, i64 7
  store i8 %312, i8* %315, align 1
  br label %316

316:                                              ; preds = %260
  br label %317

317:                                              ; preds = %255, %316
  %318 = call i64 @fio_rand64()
  store i64 %318, i64* %11, align 8
  br label %319

319:                                              ; preds = %317
  %320 = load i64, i64* %11, align 8
  %321 = lshr i64 %320, 56
  %322 = and i64 %321, 255
  %323 = trunc i64 %322 to i8
  %324 = load i8*, i8** %5, align 8
  %325 = getelementptr inbounds i8, i8* %324, i64 8
  %326 = getelementptr inbounds i8, i8* %325, i64 0
  store i8 %323, i8* %326, align 1
  %327 = load i64, i64* %11, align 8
  %328 = lshr i64 %327, 48
  %329 = and i64 %328, 255
  %330 = trunc i64 %329 to i8
  %331 = load i8*, i8** %5, align 8
  %332 = getelementptr inbounds i8, i8* %331, i64 8
  %333 = getelementptr inbounds i8, i8* %332, i64 1
  store i8 %330, i8* %333, align 1
  %334 = load i64, i64* %11, align 8
  %335 = lshr i64 %334, 40
  %336 = and i64 %335, 255
  %337 = trunc i64 %336 to i8
  %338 = load i8*, i8** %5, align 8
  %339 = getelementptr inbounds i8, i8* %338, i64 8
  %340 = getelementptr inbounds i8, i8* %339, i64 2
  store i8 %337, i8* %340, align 1
  %341 = load i64, i64* %11, align 8
  %342 = lshr i64 %341, 32
  %343 = and i64 %342, 255
  %344 = trunc i64 %343 to i8
  %345 = load i8*, i8** %5, align 8
  %346 = getelementptr inbounds i8, i8* %345, i64 8
  %347 = getelementptr inbounds i8, i8* %346, i64 3
  store i8 %344, i8* %347, align 1
  %348 = load i64, i64* %11, align 8
  %349 = lshr i64 %348, 24
  %350 = and i64 %349, 255
  %351 = trunc i64 %350 to i8
  %352 = load i8*, i8** %5, align 8
  %353 = getelementptr inbounds i8, i8* %352, i64 8
  %354 = getelementptr inbounds i8, i8* %353, i64 4
  store i8 %351, i8* %354, align 1
  %355 = load i64, i64* %11, align 8
  %356 = lshr i64 %355, 16
  %357 = and i64 %356, 255
  %358 = trunc i64 %357 to i8
  %359 = load i8*, i8** %5, align 8
  %360 = getelementptr inbounds i8, i8* %359, i64 8
  %361 = getelementptr inbounds i8, i8* %360, i64 5
  store i8 %358, i8* %361, align 1
  %362 = load i64, i64* %11, align 8
  %363 = lshr i64 %362, 8
  %364 = and i64 %363, 255
  %365 = trunc i64 %364 to i8
  %366 = load i8*, i8** %5, align 8
  %367 = getelementptr inbounds i8, i8* %366, i64 8
  %368 = getelementptr inbounds i8, i8* %367, i64 6
  store i8 %365, i8* %368, align 1
  %369 = load i64, i64* %11, align 8
  %370 = and i64 %369, 255
  %371 = trunc i64 %370 to i8
  %372 = load i8*, i8** %5, align 8
  %373 = getelementptr inbounds i8, i8* %372, i64 8
  %374 = getelementptr inbounds i8, i8* %373, i64 7
  store i8 %371, i8* %374, align 1
  br label %375

375:                                              ; preds = %319
  br label %376

376:                                              ; preds = %255, %375
  %377 = call i64 @fio_rand64()
  store i64 %377, i64* %11, align 8
  br label %378

378:                                              ; preds = %376
  %379 = load i64, i64* %11, align 8
  %380 = lshr i64 %379, 56
  %381 = and i64 %380, 255
  %382 = trunc i64 %381 to i8
  %383 = load i8*, i8** %5, align 8
  %384 = getelementptr inbounds i8, i8* %383, i64 0
  store i8 %382, i8* %384, align 1
  %385 = load i64, i64* %11, align 8
  %386 = lshr i64 %385, 48
  %387 = and i64 %386, 255
  %388 = trunc i64 %387 to i8
  %389 = load i8*, i8** %5, align 8
  %390 = getelementptr inbounds i8, i8* %389, i64 1
  store i8 %388, i8* %390, align 1
  %391 = load i64, i64* %11, align 8
  %392 = lshr i64 %391, 40
  %393 = and i64 %392, 255
  %394 = trunc i64 %393 to i8
  %395 = load i8*, i8** %5, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 2
  store i8 %394, i8* %396, align 1
  %397 = load i64, i64* %11, align 8
  %398 = lshr i64 %397, 32
  %399 = and i64 %398, 255
  %400 = trunc i64 %399 to i8
  %401 = load i8*, i8** %5, align 8
  %402 = getelementptr inbounds i8, i8* %401, i64 3
  store i8 %400, i8* %402, align 1
  %403 = load i64, i64* %11, align 8
  %404 = lshr i64 %403, 24
  %405 = and i64 %404, 255
  %406 = trunc i64 %405 to i8
  %407 = load i8*, i8** %5, align 8
  %408 = getelementptr inbounds i8, i8* %407, i64 4
  store i8 %406, i8* %408, align 1
  %409 = load i64, i64* %11, align 8
  %410 = lshr i64 %409, 16
  %411 = and i64 %410, 255
  %412 = trunc i64 %411 to i8
  %413 = load i8*, i8** %5, align 8
  %414 = getelementptr inbounds i8, i8* %413, i64 5
  store i8 %412, i8* %414, align 1
  %415 = load i64, i64* %11, align 8
  %416 = lshr i64 %415, 8
  %417 = and i64 %416, 255
  %418 = trunc i64 %417 to i8
  %419 = load i8*, i8** %5, align 8
  %420 = getelementptr inbounds i8, i8* %419, i64 6
  store i8 %418, i8* %420, align 1
  %421 = load i64, i64* %11, align 8
  %422 = and i64 %421, 255
  %423 = trunc i64 %422 to i8
  %424 = load i8*, i8** %5, align 8
  %425 = getelementptr inbounds i8, i8* %424, i64 7
  store i8 %423, i8* %425, align 1
  br label %426

426:                                              ; preds = %378
  %427 = load i64, i64* %4, align 8
  %428 = and i64 %427, 24
  %429 = load i8*, i8** %5, align 8
  %430 = getelementptr inbounds i8, i8* %429, i64 %428
  store i8* %430, i8** %5, align 8
  br label %431

431:                                              ; preds = %426, %255
  %432 = load i64, i64* %4, align 8
  %433 = and i64 %432, 7
  %434 = icmp ne i64 %433, 0
  br i1 %434, label %435, label %489

435:                                              ; preds = %431
  %436 = call i64 @fio_rand64()
  store i64 %436, i64* %11, align 8
  %437 = load i64, i64* %4, align 8
  %438 = and i64 %437, 7
  switch i64 %438, label %488 [
    i64 7, label %439
    i64 6, label %446
    i64 5, label %453
    i64 4, label %460
    i64 3, label %467
    i64 2, label %474
    i64 1, label %481
  ]

439:                                              ; preds = %435
  %440 = load i64, i64* %11, align 8
  %441 = lshr i64 %440, 8
  %442 = and i64 %441, 255
  %443 = trunc i64 %442 to i8
  %444 = load i8*, i8** %5, align 8
  %445 = getelementptr inbounds i8, i8* %444, i64 6
  store i8 %443, i8* %445, align 1
  br label %446

446:                                              ; preds = %435, %439
  %447 = load i64, i64* %11, align 8
  %448 = lshr i64 %447, 16
  %449 = and i64 %448, 255
  %450 = trunc i64 %449 to i8
  %451 = load i8*, i8** %5, align 8
  %452 = getelementptr inbounds i8, i8* %451, i64 5
  store i8 %450, i8* %452, align 1
  br label %453

453:                                              ; preds = %435, %446
  %454 = load i64, i64* %11, align 8
  %455 = lshr i64 %454, 24
  %456 = and i64 %455, 255
  %457 = trunc i64 %456 to i8
  %458 = load i8*, i8** %5, align 8
  %459 = getelementptr inbounds i8, i8* %458, i64 4
  store i8 %457, i8* %459, align 1
  br label %460

460:                                              ; preds = %435, %453
  %461 = load i64, i64* %11, align 8
  %462 = lshr i64 %461, 32
  %463 = and i64 %462, 255
  %464 = trunc i64 %463 to i8
  %465 = load i8*, i8** %5, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 3
  store i8 %464, i8* %466, align 1
  br label %467

467:                                              ; preds = %435, %460
  %468 = load i64, i64* %11, align 8
  %469 = lshr i64 %468, 40
  %470 = and i64 %469, 255
  %471 = trunc i64 %470 to i8
  %472 = load i8*, i8** %5, align 8
  %473 = getelementptr inbounds i8, i8* %472, i64 2
  store i8 %471, i8* %473, align 1
  br label %474

474:                                              ; preds = %435, %467
  %475 = load i64, i64* %11, align 8
  %476 = lshr i64 %475, 48
  %477 = and i64 %476, 255
  %478 = trunc i64 %477 to i8
  %479 = load i8*, i8** %5, align 8
  %480 = getelementptr inbounds i8, i8* %479, i64 1
  store i8 %478, i8* %480, align 1
  br label %481

481:                                              ; preds = %435, %474
  %482 = load i64, i64* %11, align 8
  %483 = lshr i64 %482, 56
  %484 = and i64 %483, 255
  %485 = trunc i64 %484 to i8
  %486 = load i8*, i8** %5, align 8
  %487 = getelementptr inbounds i8, i8* %486, i64 0
  store i8 %485, i8* %487, align 1
  br label %488

488:                                              ; preds = %481, %435
  br label %489

489:                                              ; preds = %17, %488, %431
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @fio_siphash24(i8*, i64, i64, i64) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %8, align 8
  %13 = call i64 @fio_siphash_xy(i8* %9, i64 %10, i64 2, i64 4, i64 %11, i64 %12)
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_siphash_xy(i8*, i64, i64, i64, i64, i64) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca %union.anon.34, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %23 = load i64, i64* %11, align 8
  %24 = xor i64 8388350548712186997, %23
  store i64 %24, i64* %13, align 8
  %25 = load i64, i64* %12, align 8
  %26 = xor i64 7737605742629119589, %25
  store i64 %26, i64* %14, align 8
  %27 = load i64, i64* %11, align 8
  %28 = xor i64 7746018054687388513, %27
  store i64 %28, i64* %15, align 8
  %29 = load i64, i64* %12, align 8
  %30 = xor i64 8893317812261383291, %29
  store i64 %30, i64* %16, align 8
  %31 = load i8*, i8** %7, align 8
  store i8* %31, i8** %17, align 8
  %32 = load i64, i64* %8, align 8
  %33 = and i64 %32, 255
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %18, align 1
  br label %35

35:                                               ; preds = %150, %6
  %36 = load i64, i64* %8, align 8
  %37 = icmp uge i64 %36, 8
  br i1 %37, label %38, label %159

38:                                               ; preds = %35
  %39 = load i8*, i8** %17, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 0
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = shl i64 %42, 56
  %44 = load i8*, i8** %17, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, 48
  %49 = or i64 %43, %48
  %50 = load i8*, i8** %17, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = shl i64 %53, 40
  %55 = or i64 %49, %54
  %56 = load i8*, i8** %17, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 3
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = shl i64 %59, 32
  %61 = or i64 %55, %60
  %62 = load i8*, i8** %17, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 4
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = shl i64 %65, 24
  %67 = or i64 %61, %66
  %68 = load i8*, i8** %17, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 5
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = shl i64 %71, 16
  %73 = or i64 %67, %72
  %74 = load i8*, i8** %17, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = shl i64 %77, 8
  %79 = or i64 %73, %78
  %80 = load i8*, i8** %17, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i64
  %84 = or i64 %79, %83
  %85 = bitcast %union.anon.34* %19 to i64*
  store i64 %84, i64* %85, align 8
  %86 = bitcast %union.anon.34* %19 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = load i64, i64* %16, align 8
  %89 = xor i64 %88, %87
  store i64 %89, i64* %16, align 8
  store i64 0, i64* %20, align 8
  br label %90

90:                                               ; preds = %147, %38
  %91 = load i64, i64* %20, align 8
  %92 = load i64, i64* %9, align 8
  %93 = icmp ult i64 %91, %92
  br i1 %93, label %94, label %150

94:                                               ; preds = %90
  br label %95

95:                                               ; preds = %94
  %96 = load i64, i64* %16, align 8
  %97 = load i64, i64* %15, align 8
  %98 = add i64 %97, %96
  store i64 %98, i64* %15, align 8
  %99 = load i64, i64* %16, align 8
  %100 = shl i64 %99, 16
  %101 = load i64, i64* %16, align 8
  %102 = lshr i64 %101, 48
  %103 = or i64 %100, %102
  %104 = load i64, i64* %15, align 8
  %105 = xor i64 %103, %104
  store i64 %105, i64* %16, align 8
  %106 = load i64, i64* %14, align 8
  %107 = load i64, i64* %13, align 8
  %108 = add i64 %107, %106
  store i64 %108, i64* %13, align 8
  %109 = load i64, i64* %14, align 8
  %110 = shl i64 %109, 13
  %111 = load i64, i64* %14, align 8
  %112 = lshr i64 %111, 51
  %113 = or i64 %110, %112
  %114 = load i64, i64* %13, align 8
  %115 = xor i64 %113, %114
  store i64 %115, i64* %14, align 8
  %116 = load i64, i64* %13, align 8
  %117 = shl i64 %116, 32
  %118 = load i64, i64* %13, align 8
  %119 = lshr i64 %118, 32
  %120 = or i64 %117, %119
  store i64 %120, i64* %13, align 8
  %121 = load i64, i64* %14, align 8
  %122 = load i64, i64* %15, align 8
  %123 = add i64 %122, %121
  store i64 %123, i64* %15, align 8
  %124 = load i64, i64* %16, align 8
  %125 = load i64, i64* %13, align 8
  %126 = add i64 %125, %124
  store i64 %126, i64* %13, align 8
  %127 = load i64, i64* %14, align 8
  %128 = shl i64 %127, 17
  %129 = load i64, i64* %14, align 8
  %130 = lshr i64 %129, 47
  %131 = or i64 %128, %130
  %132 = load i64, i64* %15, align 8
  %133 = xor i64 %131, %132
  store i64 %133, i64* %14, align 8
  %134 = load i64, i64* %16, align 8
  %135 = shl i64 %134, 21
  %136 = load i64, i64* %16, align 8
  %137 = lshr i64 %136, 43
  %138 = or i64 %135, %137
  %139 = load i64, i64* %13, align 8
  %140 = xor i64 %138, %139
  store i64 %140, i64* %16, align 8
  %141 = load i64, i64* %15, align 8
  %142 = shl i64 %141, 32
  %143 = load i64, i64* %15, align 8
  %144 = lshr i64 %143, 32
  %145 = or i64 %142, %144
  store i64 %145, i64* %15, align 8
  br label %146

146:                                              ; preds = %95
  br label %147

147:                                              ; preds = %146
  %148 = load i64, i64* %20, align 8
  %149 = add i64 %148, 1
  store i64 %149, i64* %20, align 8
  br label %90

150:                                              ; preds = %90
  %151 = bitcast %union.anon.34* %19 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = load i64, i64* %13, align 8
  %154 = xor i64 %153, %152
  store i64 %154, i64* %13, align 8
  %155 = load i8*, i8** %17, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 8
  store i8* %156, i8** %17, align 8
  %157 = load i64, i64* %8, align 8
  %158 = sub i64 %157, 8
  store i64 %158, i64* %8, align 8
  br label %35

159:                                              ; preds = %35
  %160 = bitcast %union.anon.34* %19 to i64*
  store i64 0, i64* %160, align 8
  %161 = bitcast %union.anon.34* %19 to [8 x i8]*
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %161, i64 0, i64 0
  store i8* %162, i8** %21, align 8
  %163 = load i64, i64* %8, align 8
  switch i64 %163, label %206 [
    i64 7, label %164
    i64 6, label %170
    i64 5, label %176
    i64 4, label %182
    i64 3, label %188
    i64 2, label %194
    i64 1, label %200
  ]

164:                                              ; preds = %159
  %165 = load i8*, i8** %17, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 6
  %167 = load i8, i8* %166, align 1
  %168 = load i8*, i8** %21, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 6
  store i8 %167, i8* %169, align 1
  br label %170

170:                                              ; preds = %159, %164
  %171 = load i8*, i8** %17, align 8
  %172 = getelementptr inbounds i8, i8* %171, i64 5
  %173 = load i8, i8* %172, align 1
  %174 = load i8*, i8** %21, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 5
  store i8 %173, i8* %175, align 1
  br label %176

176:                                              ; preds = %159, %170
  %177 = load i8*, i8** %17, align 8
  %178 = getelementptr inbounds i8, i8* %177, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = load i8*, i8** %21, align 8
  %181 = getelementptr inbounds i8, i8* %180, i64 4
  store i8 %179, i8* %181, align 1
  br label %182

182:                                              ; preds = %159, %176
  %183 = load i8*, i8** %17, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 3
  %185 = load i8, i8* %184, align 1
  %186 = load i8*, i8** %21, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 3
  store i8 %185, i8* %187, align 1
  br label %188

188:                                              ; preds = %159, %182
  %189 = load i8*, i8** %17, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 2
  %191 = load i8, i8* %190, align 1
  %192 = load i8*, i8** %21, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 2
  store i8 %191, i8* %193, align 1
  br label %194

194:                                              ; preds = %159, %188
  %195 = load i8*, i8** %17, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  %197 = load i8, i8* %196, align 1
  %198 = load i8*, i8** %21, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  store i8 %197, i8* %199, align 1
  br label %200

200:                                              ; preds = %159, %194
  %201 = load i8*, i8** %17, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 0
  %203 = load i8, i8* %202, align 1
  %204 = load i8*, i8** %21, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 0
  store i8 %203, i8* %205, align 1
  br label %206

206:                                              ; preds = %200, %159
  %207 = load i8, i8* %18, align 1
  %208 = bitcast %union.anon.34* %19 to [8 x i8]*
  %209 = getelementptr inbounds [8 x i8], [8 x i8]* %208, i64 0, i64 7
  store i8 %207, i8* %209, align 1
  %210 = bitcast %union.anon.34* %19 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = load i64, i64* %16, align 8
  %213 = xor i64 %212, %211
  store i64 %213, i64* %16, align 8
  br label %214

214:                                              ; preds = %206
  %215 = load i64, i64* %16, align 8
  %216 = load i64, i64* %15, align 8
  %217 = add i64 %216, %215
  store i64 %217, i64* %15, align 8
  %218 = load i64, i64* %16, align 8
  %219 = shl i64 %218, 16
  %220 = load i64, i64* %16, align 8
  %221 = lshr i64 %220, 48
  %222 = or i64 %219, %221
  %223 = load i64, i64* %15, align 8
  %224 = xor i64 %222, %223
  store i64 %224, i64* %16, align 8
  %225 = load i64, i64* %14, align 8
  %226 = load i64, i64* %13, align 8
  %227 = add i64 %226, %225
  store i64 %227, i64* %13, align 8
  %228 = load i64, i64* %14, align 8
  %229 = shl i64 %228, 13
  %230 = load i64, i64* %14, align 8
  %231 = lshr i64 %230, 51
  %232 = or i64 %229, %231
  %233 = load i64, i64* %13, align 8
  %234 = xor i64 %232, %233
  store i64 %234, i64* %14, align 8
  %235 = load i64, i64* %13, align 8
  %236 = shl i64 %235, 32
  %237 = load i64, i64* %13, align 8
  %238 = lshr i64 %237, 32
  %239 = or i64 %236, %238
  store i64 %239, i64* %13, align 8
  %240 = load i64, i64* %14, align 8
  %241 = load i64, i64* %15, align 8
  %242 = add i64 %241, %240
  store i64 %242, i64* %15, align 8
  %243 = load i64, i64* %16, align 8
  %244 = load i64, i64* %13, align 8
  %245 = add i64 %244, %243
  store i64 %245, i64* %13, align 8
  %246 = load i64, i64* %14, align 8
  %247 = shl i64 %246, 17
  %248 = load i64, i64* %14, align 8
  %249 = lshr i64 %248, 47
  %250 = or i64 %247, %249
  %251 = load i64, i64* %15, align 8
  %252 = xor i64 %250, %251
  store i64 %252, i64* %14, align 8
  %253 = load i64, i64* %16, align 8
  %254 = shl i64 %253, 21
  %255 = load i64, i64* %16, align 8
  %256 = lshr i64 %255, 43
  %257 = or i64 %254, %256
  %258 = load i64, i64* %13, align 8
  %259 = xor i64 %257, %258
  store i64 %259, i64* %16, align 8
  %260 = load i64, i64* %15, align 8
  %261 = shl i64 %260, 32
  %262 = load i64, i64* %15, align 8
  %263 = lshr i64 %262, 32
  %264 = or i64 %261, %263
  store i64 %264, i64* %15, align 8
  br label %265

265:                                              ; preds = %214
  br label %266

266:                                              ; preds = %265
  %267 = load i64, i64* %16, align 8
  %268 = load i64, i64* %15, align 8
  %269 = add i64 %268, %267
  store i64 %269, i64* %15, align 8
  %270 = load i64, i64* %16, align 8
  %271 = shl i64 %270, 16
  %272 = load i64, i64* %16, align 8
  %273 = lshr i64 %272, 48
  %274 = or i64 %271, %273
  %275 = load i64, i64* %15, align 8
  %276 = xor i64 %274, %275
  store i64 %276, i64* %16, align 8
  %277 = load i64, i64* %14, align 8
  %278 = load i64, i64* %13, align 8
  %279 = add i64 %278, %277
  store i64 %279, i64* %13, align 8
  %280 = load i64, i64* %14, align 8
  %281 = shl i64 %280, 13
  %282 = load i64, i64* %14, align 8
  %283 = lshr i64 %282, 51
  %284 = or i64 %281, %283
  %285 = load i64, i64* %13, align 8
  %286 = xor i64 %284, %285
  store i64 %286, i64* %14, align 8
  %287 = load i64, i64* %13, align 8
  %288 = shl i64 %287, 32
  %289 = load i64, i64* %13, align 8
  %290 = lshr i64 %289, 32
  %291 = or i64 %288, %290
  store i64 %291, i64* %13, align 8
  %292 = load i64, i64* %14, align 8
  %293 = load i64, i64* %15, align 8
  %294 = add i64 %293, %292
  store i64 %294, i64* %15, align 8
  %295 = load i64, i64* %16, align 8
  %296 = load i64, i64* %13, align 8
  %297 = add i64 %296, %295
  store i64 %297, i64* %13, align 8
  %298 = load i64, i64* %14, align 8
  %299 = shl i64 %298, 17
  %300 = load i64, i64* %14, align 8
  %301 = lshr i64 %300, 47
  %302 = or i64 %299, %301
  %303 = load i64, i64* %15, align 8
  %304 = xor i64 %302, %303
  store i64 %304, i64* %14, align 8
  %305 = load i64, i64* %16, align 8
  %306 = shl i64 %305, 21
  %307 = load i64, i64* %16, align 8
  %308 = lshr i64 %307, 43
  %309 = or i64 %306, %308
  %310 = load i64, i64* %13, align 8
  %311 = xor i64 %309, %310
  store i64 %311, i64* %16, align 8
  %312 = load i64, i64* %15, align 8
  %313 = shl i64 %312, 32
  %314 = load i64, i64* %15, align 8
  %315 = lshr i64 %314, 32
  %316 = or i64 %313, %315
  store i64 %316, i64* %15, align 8
  br label %317

317:                                              ; preds = %266
  %318 = bitcast %union.anon.34* %19 to i64*
  %319 = load i64, i64* %318, align 8
  %320 = load i64, i64* %13, align 8
  %321 = xor i64 %320, %319
  store i64 %321, i64* %13, align 8
  %322 = load i64, i64* %15, align 8
  %323 = xor i64 %322, 255
  store i64 %323, i64* %15, align 8
  store i64 0, i64* %22, align 8
  br label %324

324:                                              ; preds = %381, %317
  %325 = load i64, i64* %22, align 8
  %326 = load i64, i64* %10, align 8
  %327 = icmp ult i64 %325, %326
  br i1 %327, label %328, label %384

328:                                              ; preds = %324
  br label %329

329:                                              ; preds = %328
  %330 = load i64, i64* %16, align 8
  %331 = load i64, i64* %15, align 8
  %332 = add i64 %331, %330
  store i64 %332, i64* %15, align 8
  %333 = load i64, i64* %16, align 8
  %334 = shl i64 %333, 16
  %335 = load i64, i64* %16, align 8
  %336 = lshr i64 %335, 48
  %337 = or i64 %334, %336
  %338 = load i64, i64* %15, align 8
  %339 = xor i64 %337, %338
  store i64 %339, i64* %16, align 8
  %340 = load i64, i64* %14, align 8
  %341 = load i64, i64* %13, align 8
  %342 = add i64 %341, %340
  store i64 %342, i64* %13, align 8
  %343 = load i64, i64* %14, align 8
  %344 = shl i64 %343, 13
  %345 = load i64, i64* %14, align 8
  %346 = lshr i64 %345, 51
  %347 = or i64 %344, %346
  %348 = load i64, i64* %13, align 8
  %349 = xor i64 %347, %348
  store i64 %349, i64* %14, align 8
  %350 = load i64, i64* %13, align 8
  %351 = shl i64 %350, 32
  %352 = load i64, i64* %13, align 8
  %353 = lshr i64 %352, 32
  %354 = or i64 %351, %353
  store i64 %354, i64* %13, align 8
  %355 = load i64, i64* %14, align 8
  %356 = load i64, i64* %15, align 8
  %357 = add i64 %356, %355
  store i64 %357, i64* %15, align 8
  %358 = load i64, i64* %16, align 8
  %359 = load i64, i64* %13, align 8
  %360 = add i64 %359, %358
  store i64 %360, i64* %13, align 8
  %361 = load i64, i64* %14, align 8
  %362 = shl i64 %361, 17
  %363 = load i64, i64* %14, align 8
  %364 = lshr i64 %363, 47
  %365 = or i64 %362, %364
  %366 = load i64, i64* %15, align 8
  %367 = xor i64 %365, %366
  store i64 %367, i64* %14, align 8
  %368 = load i64, i64* %16, align 8
  %369 = shl i64 %368, 21
  %370 = load i64, i64* %16, align 8
  %371 = lshr i64 %370, 43
  %372 = or i64 %369, %371
  %373 = load i64, i64* %13, align 8
  %374 = xor i64 %372, %373
  store i64 %374, i64* %16, align 8
  %375 = load i64, i64* %15, align 8
  %376 = shl i64 %375, 32
  %377 = load i64, i64* %15, align 8
  %378 = lshr i64 %377, 32
  %379 = or i64 %376, %378
  store i64 %379, i64* %15, align 8
  br label %380

380:                                              ; preds = %329
  br label %381

381:                                              ; preds = %380
  %382 = load i64, i64* %22, align 8
  %383 = add i64 %382, 1
  store i64 %383, i64* %22, align 8
  br label %324

384:                                              ; preds = %324
  br label %385

385:                                              ; preds = %384
  %386 = load i64, i64* %16, align 8
  %387 = load i64, i64* %15, align 8
  %388 = add i64 %387, %386
  store i64 %388, i64* %15, align 8
  %389 = load i64, i64* %16, align 8
  %390 = shl i64 %389, 16
  %391 = load i64, i64* %16, align 8
  %392 = lshr i64 %391, 48
  %393 = or i64 %390, %392
  %394 = load i64, i64* %15, align 8
  %395 = xor i64 %393, %394
  store i64 %395, i64* %16, align 8
  %396 = load i64, i64* %14, align 8
  %397 = load i64, i64* %13, align 8
  %398 = add i64 %397, %396
  store i64 %398, i64* %13, align 8
  %399 = load i64, i64* %14, align 8
  %400 = shl i64 %399, 13
  %401 = load i64, i64* %14, align 8
  %402 = lshr i64 %401, 51
  %403 = or i64 %400, %402
  %404 = load i64, i64* %13, align 8
  %405 = xor i64 %403, %404
  store i64 %405, i64* %14, align 8
  %406 = load i64, i64* %13, align 8
  %407 = shl i64 %406, 32
  %408 = load i64, i64* %13, align 8
  %409 = lshr i64 %408, 32
  %410 = or i64 %407, %409
  store i64 %410, i64* %13, align 8
  %411 = load i64, i64* %14, align 8
  %412 = load i64, i64* %15, align 8
  %413 = add i64 %412, %411
  store i64 %413, i64* %15, align 8
  %414 = load i64, i64* %16, align 8
  %415 = load i64, i64* %13, align 8
  %416 = add i64 %415, %414
  store i64 %416, i64* %13, align 8
  %417 = load i64, i64* %14, align 8
  %418 = shl i64 %417, 17
  %419 = load i64, i64* %14, align 8
  %420 = lshr i64 %419, 47
  %421 = or i64 %418, %420
  %422 = load i64, i64* %15, align 8
  %423 = xor i64 %421, %422
  store i64 %423, i64* %14, align 8
  %424 = load i64, i64* %16, align 8
  %425 = shl i64 %424, 21
  %426 = load i64, i64* %16, align 8
  %427 = lshr i64 %426, 43
  %428 = or i64 %425, %427
  %429 = load i64, i64* %13, align 8
  %430 = xor i64 %428, %429
  store i64 %430, i64* %16, align 8
  %431 = load i64, i64* %15, align 8
  %432 = shl i64 %431, 32
  %433 = load i64, i64* %15, align 8
  %434 = lshr i64 %433, 32
  %435 = or i64 %432, %434
  store i64 %435, i64* %15, align 8
  br label %436

436:                                              ; preds = %385
  br label %437

437:                                              ; preds = %436
  %438 = load i64, i64* %16, align 8
  %439 = load i64, i64* %15, align 8
  %440 = add i64 %439, %438
  store i64 %440, i64* %15, align 8
  %441 = load i64, i64* %16, align 8
  %442 = shl i64 %441, 16
  %443 = load i64, i64* %16, align 8
  %444 = lshr i64 %443, 48
  %445 = or i64 %442, %444
  %446 = load i64, i64* %15, align 8
  %447 = xor i64 %445, %446
  store i64 %447, i64* %16, align 8
  %448 = load i64, i64* %14, align 8
  %449 = load i64, i64* %13, align 8
  %450 = add i64 %449, %448
  store i64 %450, i64* %13, align 8
  %451 = load i64, i64* %14, align 8
  %452 = shl i64 %451, 13
  %453 = load i64, i64* %14, align 8
  %454 = lshr i64 %453, 51
  %455 = or i64 %452, %454
  %456 = load i64, i64* %13, align 8
  %457 = xor i64 %455, %456
  store i64 %457, i64* %14, align 8
  %458 = load i64, i64* %13, align 8
  %459 = shl i64 %458, 32
  %460 = load i64, i64* %13, align 8
  %461 = lshr i64 %460, 32
  %462 = or i64 %459, %461
  store i64 %462, i64* %13, align 8
  %463 = load i64, i64* %14, align 8
  %464 = load i64, i64* %15, align 8
  %465 = add i64 %464, %463
  store i64 %465, i64* %15, align 8
  %466 = load i64, i64* %16, align 8
  %467 = load i64, i64* %13, align 8
  %468 = add i64 %467, %466
  store i64 %468, i64* %13, align 8
  %469 = load i64, i64* %14, align 8
  %470 = shl i64 %469, 17
  %471 = load i64, i64* %14, align 8
  %472 = lshr i64 %471, 47
  %473 = or i64 %470, %472
  %474 = load i64, i64* %15, align 8
  %475 = xor i64 %473, %474
  store i64 %475, i64* %14, align 8
  %476 = load i64, i64* %16, align 8
  %477 = shl i64 %476, 21
  %478 = load i64, i64* %16, align 8
  %479 = lshr i64 %478, 43
  %480 = or i64 %477, %479
  %481 = load i64, i64* %13, align 8
  %482 = xor i64 %480, %481
  store i64 %482, i64* %16, align 8
  %483 = load i64, i64* %15, align 8
  %484 = shl i64 %483, 32
  %485 = load i64, i64* %15, align 8
  %486 = lshr i64 %485, 32
  %487 = or i64 %484, %486
  store i64 %487, i64* %15, align 8
  br label %488

488:                                              ; preds = %437
  br label %489

489:                                              ; preds = %488
  %490 = load i64, i64* %16, align 8
  %491 = load i64, i64* %15, align 8
  %492 = add i64 %491, %490
  store i64 %492, i64* %15, align 8
  %493 = load i64, i64* %16, align 8
  %494 = shl i64 %493, 16
  %495 = load i64, i64* %16, align 8
  %496 = lshr i64 %495, 48
  %497 = or i64 %494, %496
  %498 = load i64, i64* %15, align 8
  %499 = xor i64 %497, %498
  store i64 %499, i64* %16, align 8
  %500 = load i64, i64* %14, align 8
  %501 = load i64, i64* %13, align 8
  %502 = add i64 %501, %500
  store i64 %502, i64* %13, align 8
  %503 = load i64, i64* %14, align 8
  %504 = shl i64 %503, 13
  %505 = load i64, i64* %14, align 8
  %506 = lshr i64 %505, 51
  %507 = or i64 %504, %506
  %508 = load i64, i64* %13, align 8
  %509 = xor i64 %507, %508
  store i64 %509, i64* %14, align 8
  %510 = load i64, i64* %13, align 8
  %511 = shl i64 %510, 32
  %512 = load i64, i64* %13, align 8
  %513 = lshr i64 %512, 32
  %514 = or i64 %511, %513
  store i64 %514, i64* %13, align 8
  %515 = load i64, i64* %14, align 8
  %516 = load i64, i64* %15, align 8
  %517 = add i64 %516, %515
  store i64 %517, i64* %15, align 8
  %518 = load i64, i64* %16, align 8
  %519 = load i64, i64* %13, align 8
  %520 = add i64 %519, %518
  store i64 %520, i64* %13, align 8
  %521 = load i64, i64* %14, align 8
  %522 = shl i64 %521, 17
  %523 = load i64, i64* %14, align 8
  %524 = lshr i64 %523, 47
  %525 = or i64 %522, %524
  %526 = load i64, i64* %15, align 8
  %527 = xor i64 %525, %526
  store i64 %527, i64* %14, align 8
  %528 = load i64, i64* %16, align 8
  %529 = shl i64 %528, 21
  %530 = load i64, i64* %16, align 8
  %531 = lshr i64 %530, 43
  %532 = or i64 %529, %531
  %533 = load i64, i64* %13, align 8
  %534 = xor i64 %532, %533
  store i64 %534, i64* %16, align 8
  %535 = load i64, i64* %15, align 8
  %536 = shl i64 %535, 32
  %537 = load i64, i64* %15, align 8
  %538 = lshr i64 %537, 32
  %539 = or i64 %536, %538
  store i64 %539, i64* %15, align 8
  br label %540

540:                                              ; preds = %489
  br label %541

541:                                              ; preds = %540
  %542 = load i64, i64* %16, align 8
  %543 = load i64, i64* %15, align 8
  %544 = add i64 %543, %542
  store i64 %544, i64* %15, align 8
  %545 = load i64, i64* %16, align 8
  %546 = shl i64 %545, 16
  %547 = load i64, i64* %16, align 8
  %548 = lshr i64 %547, 48
  %549 = or i64 %546, %548
  %550 = load i64, i64* %15, align 8
  %551 = xor i64 %549, %550
  store i64 %551, i64* %16, align 8
  %552 = load i64, i64* %14, align 8
  %553 = load i64, i64* %13, align 8
  %554 = add i64 %553, %552
  store i64 %554, i64* %13, align 8
  %555 = load i64, i64* %14, align 8
  %556 = shl i64 %555, 13
  %557 = load i64, i64* %14, align 8
  %558 = lshr i64 %557, 51
  %559 = or i64 %556, %558
  %560 = load i64, i64* %13, align 8
  %561 = xor i64 %559, %560
  store i64 %561, i64* %14, align 8
  %562 = load i64, i64* %13, align 8
  %563 = shl i64 %562, 32
  %564 = load i64, i64* %13, align 8
  %565 = lshr i64 %564, 32
  %566 = or i64 %563, %565
  store i64 %566, i64* %13, align 8
  %567 = load i64, i64* %14, align 8
  %568 = load i64, i64* %15, align 8
  %569 = add i64 %568, %567
  store i64 %569, i64* %15, align 8
  %570 = load i64, i64* %16, align 8
  %571 = load i64, i64* %13, align 8
  %572 = add i64 %571, %570
  store i64 %572, i64* %13, align 8
  %573 = load i64, i64* %14, align 8
  %574 = shl i64 %573, 17
  %575 = load i64, i64* %14, align 8
  %576 = lshr i64 %575, 47
  %577 = or i64 %574, %576
  %578 = load i64, i64* %15, align 8
  %579 = xor i64 %577, %578
  store i64 %579, i64* %14, align 8
  %580 = load i64, i64* %16, align 8
  %581 = shl i64 %580, 21
  %582 = load i64, i64* %16, align 8
  %583 = lshr i64 %582, 43
  %584 = or i64 %581, %583
  %585 = load i64, i64* %13, align 8
  %586 = xor i64 %584, %585
  store i64 %586, i64* %16, align 8
  %587 = load i64, i64* %15, align 8
  %588 = shl i64 %587, 32
  %589 = load i64, i64* %15, align 8
  %590 = lshr i64 %589, 32
  %591 = or i64 %588, %590
  store i64 %591, i64* %15, align 8
  br label %592

592:                                              ; preds = %541
  %593 = load i64, i64* %14, align 8
  %594 = load i64, i64* %15, align 8
  %595 = xor i64 %593, %594
  %596 = load i64, i64* %16, align 8
  %597 = xor i64 %595, %596
  %598 = load i64, i64* %13, align 8
  %599 = xor i64 %598, %597
  store i64 %599, i64* %13, align 8
  %600 = load i64, i64* %13, align 8
  ret i64 %600
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_sha1_init(%struct.fio_sha1_s* noalias sret) #0 {
  %2 = bitcast %struct.fio_sha1_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 96, i1 false)
  %3 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %0, i32 0, i32 2
  %4 = bitcast %union.anon.31* %3 to [5 x i32]*
  %5 = getelementptr inbounds [5 x i32], [5 x i32]* %4, i64 0, i64 0
  %6 = bitcast [5 x i32]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 bitcast ([5 x i32]* @constinit to i8*), i64 20, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_sha1_write(%struct.fio_sha1_s*, i8*, i64) #0 {
  %4 = alloca %struct.fio_sha1_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store %struct.fio_sha1_s* %0, %struct.fio_sha1_s** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %10 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 63
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = sub i64 64, %13
  store i64 %14, i64* %8, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %17 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %16, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %15
  store i64 %19, i64* %17, align 8
  %20 = load i64, i64* %8, align 8
  %21 = load i64, i64* %6, align 8
  %22 = icmp ugt i64 %20, %21
  br i1 %22, label %23, label %31

23:                                               ; preds = %3
  %24 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %25 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %24, i32 0, i32 1
  %26 = getelementptr inbounds [64 x i8], [64 x i8]* %25, i64 0, i64 0
  %27 = load i64, i64* %7, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8*, i8** %5, align 8
  %30 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %30, i1 false)
  br label %79

31:                                               ; preds = %3
  %32 = load i64, i64* %7, align 8
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %54

34:                                               ; preds = %31
  %35 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %36 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %35, i32 0, i32 1
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %36, i64 0, i64 0
  %38 = load i64, i64* %7, align 8
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = load i8*, i8** %5, align 8
  %41 = load i64, i64* %8, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %40, i64 %41, i1 false)
  %42 = load i64, i64* %8, align 8
  %43 = load i64, i64* %6, align 8
  %44 = sub i64 %43, %42
  store i64 %44, i64* %6, align 8
  %45 = load i8*, i8** %5, align 8
  %46 = ptrtoint i8* %45 to i64
  %47 = load i64, i64* %8, align 8
  %48 = add i64 %46, %47
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %5, align 8
  %50 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %51 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %52 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds [64 x i8], [64 x i8]* %52, i64 0, i64 0
  call void @fio_sha1_perform_all_rounds(%struct.fio_sha1_s* %50, i8* %53)
  br label %54

54:                                               ; preds = %34, %31
  br label %55

55:                                               ; preds = %58, %54
  %56 = load i64, i64* %6, align 8
  %57 = icmp uge i64 %56, 64
  br i1 %57, label %58, label %67

58:                                               ; preds = %55
  %59 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %60 = load i8*, i8** %5, align 8
  call void @fio_sha1_perform_all_rounds(%struct.fio_sha1_s* %59, i8* %60)
  %61 = load i8*, i8** %5, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = add i64 %62, 64
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** %5, align 8
  %65 = load i64, i64* %6, align 8
  %66 = sub i64 %65, 64
  store i64 %66, i64* %6, align 8
  br label %55

67:                                               ; preds = %55
  %68 = load i64, i64* %6, align 8
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %78

70:                                               ; preds = %67
  %71 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %4, align 8
  %72 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %71, i32 0, i32 1
  %73 = getelementptr inbounds [64 x i8], [64 x i8]* %72, i64 0, i64 0
  %74 = load i64, i64* %7, align 8
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  %76 = load i8*, i8** %5, align 8
  %77 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 1 %76, i64 %77, i1 false)
  br label %78

78:                                               ; preds = %70, %67
  br label %79

79:                                               ; preds = %78, %23
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sha1_perform_all_rounds(%struct.fio_sha1_s*, i8*) #0 {
  %3 = alloca %struct.fio_sha1_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [16 x i32], align 16
  store %struct.fio_sha1_s* %0, %struct.fio_sha1_s** %3, align 8
  store i8* %1, i8** %4, align 8
  %12 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %13 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %12, i32 0, i32 2
  %14 = bitcast %union.anon.31* %13 to [5 x i32]*
  %15 = getelementptr inbounds [5 x i32], [5 x i32]* %14, i64 0, i64 0
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %5, align 4
  %17 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %18 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %17, i32 0, i32 2
  %19 = bitcast %union.anon.31* %18 to [5 x i32]*
  %20 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %6, align 4
  %22 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %23 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %22, i32 0, i32 2
  %24 = bitcast %union.anon.31* %23 to [5 x i32]*
  %25 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i64 0, i64 2
  %26 = load i32, i32* %25, align 8
  store i32 %26, i32* %7, align 4
  %27 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %28 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %27, i32 0, i32 2
  %29 = bitcast %union.anon.31* %28 to [5 x i32]*
  %30 = getelementptr inbounds [5 x i32], [5 x i32]* %29, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %8, align 4
  %32 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %33 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %32, i32 0, i32 2
  %34 = bitcast %union.anon.31* %33 to [5 x i32]*
  %35 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 4
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %9, align 4
  %37 = load i8*, i8** %4, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 0
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl i32 %40, 24
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 16
  %47 = or i32 %41, %46
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = shl i32 %51, 8
  %53 = or i32 %47, %52
  %54 = load i8*, i8** %4, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %53, %57
  %59 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  store i32 %58, i32* %59, align 16
  %60 = load i8*, i8** %4, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 4
  %62 = getelementptr inbounds i8, i8* %61, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %64, 24
  %66 = load i8*, i8** %4, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 4
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = shl i32 %70, 16
  %72 = or i32 %65, %71
  %73 = load i8*, i8** %4, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 4
  %75 = getelementptr inbounds i8, i8* %74, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl i32 %77, 8
  %79 = or i32 %72, %78
  %80 = load i8*, i8** %4, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 4
  %82 = getelementptr inbounds i8, i8* %81, i64 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = or i32 %79, %84
  %86 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  store i32 %85, i32* %86, align 4
  %87 = load i8*, i8** %4, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 8
  %89 = getelementptr inbounds i8, i8* %88, i64 0
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = shl i32 %91, 24
  %93 = load i8*, i8** %4, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 8
  %95 = getelementptr inbounds i8, i8* %94, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = shl i32 %97, 16
  %99 = or i32 %92, %98
  %100 = load i8*, i8** %4, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 8
  %102 = getelementptr inbounds i8, i8* %101, i64 2
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = shl i32 %104, 8
  %106 = or i32 %99, %105
  %107 = load i8*, i8** %4, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 8
  %109 = getelementptr inbounds i8, i8* %108, i64 3
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = or i32 %106, %111
  %113 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  store i32 %112, i32* %113, align 8
  %114 = load i8*, i8** %4, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 12
  %116 = getelementptr inbounds i8, i8* %115, i64 0
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl i32 %118, 24
  %120 = load i8*, i8** %4, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 12
  %122 = getelementptr inbounds i8, i8* %121, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = shl i32 %124, 16
  %126 = or i32 %119, %125
  %127 = load i8*, i8** %4, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 12
  %129 = getelementptr inbounds i8, i8* %128, i64 2
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = shl i32 %131, 8
  %133 = or i32 %126, %132
  %134 = load i8*, i8** %4, align 8
  %135 = getelementptr inbounds i8, i8* %134, i64 12
  %136 = getelementptr inbounds i8, i8* %135, i64 3
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = or i32 %133, %138
  %140 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  store i32 %139, i32* %140, align 4
  %141 = load i8*, i8** %4, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 16
  %143 = getelementptr inbounds i8, i8* %142, i64 0
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl i32 %145, 24
  %147 = load i8*, i8** %4, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 16
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl i32 %151, 16
  %153 = or i32 %146, %152
  %154 = load i8*, i8** %4, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 16
  %156 = getelementptr inbounds i8, i8* %155, i64 2
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = shl i32 %158, 8
  %160 = or i32 %153, %159
  %161 = load i8*, i8** %4, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 16
  %163 = getelementptr inbounds i8, i8* %162, i64 3
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = or i32 %160, %165
  %167 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  store i32 %166, i32* %167, align 16
  %168 = load i8*, i8** %4, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 20
  %170 = getelementptr inbounds i8, i8* %169, i64 0
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = shl i32 %172, 24
  %174 = load i8*, i8** %4, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 20
  %176 = getelementptr inbounds i8, i8* %175, i64 1
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = shl i32 %178, 16
  %180 = or i32 %173, %179
  %181 = load i8*, i8** %4, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 20
  %183 = getelementptr inbounds i8, i8* %182, i64 2
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = shl i32 %185, 8
  %187 = or i32 %180, %186
  %188 = load i8*, i8** %4, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 20
  %190 = getelementptr inbounds i8, i8* %189, i64 3
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = or i32 %187, %192
  %194 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  store i32 %193, i32* %194, align 4
  %195 = load i8*, i8** %4, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 24
  %197 = getelementptr inbounds i8, i8* %196, i64 0
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = shl i32 %199, 24
  %201 = load i8*, i8** %4, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 24
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = shl i32 %205, 16
  %207 = or i32 %200, %206
  %208 = load i8*, i8** %4, align 8
  %209 = getelementptr inbounds i8, i8* %208, i64 24
  %210 = getelementptr inbounds i8, i8* %209, i64 2
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = shl i32 %212, 8
  %214 = or i32 %207, %213
  %215 = load i8*, i8** %4, align 8
  %216 = getelementptr inbounds i8, i8* %215, i64 24
  %217 = getelementptr inbounds i8, i8* %216, i64 3
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = or i32 %214, %219
  %221 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  store i32 %220, i32* %221, align 8
  %222 = load i8*, i8** %4, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 28
  %224 = getelementptr inbounds i8, i8* %223, i64 0
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl i32 %226, 24
  %228 = load i8*, i8** %4, align 8
  %229 = getelementptr inbounds i8, i8* %228, i64 28
  %230 = getelementptr inbounds i8, i8* %229, i64 1
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = shl i32 %232, 16
  %234 = or i32 %227, %233
  %235 = load i8*, i8** %4, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 28
  %237 = getelementptr inbounds i8, i8* %236, i64 2
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = shl i32 %239, 8
  %241 = or i32 %234, %240
  %242 = load i8*, i8** %4, align 8
  %243 = getelementptr inbounds i8, i8* %242, i64 28
  %244 = getelementptr inbounds i8, i8* %243, i64 3
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = or i32 %241, %246
  %248 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  store i32 %247, i32* %248, align 4
  %249 = load i8*, i8** %4, align 8
  %250 = getelementptr inbounds i8, i8* %249, i64 32
  %251 = getelementptr inbounds i8, i8* %250, i64 0
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = shl i32 %253, 24
  %255 = load i8*, i8** %4, align 8
  %256 = getelementptr inbounds i8, i8* %255, i64 32
  %257 = getelementptr inbounds i8, i8* %256, i64 1
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = shl i32 %259, 16
  %261 = or i32 %254, %260
  %262 = load i8*, i8** %4, align 8
  %263 = getelementptr inbounds i8, i8* %262, i64 32
  %264 = getelementptr inbounds i8, i8* %263, i64 2
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = shl i32 %266, 8
  %268 = or i32 %261, %267
  %269 = load i8*, i8** %4, align 8
  %270 = getelementptr inbounds i8, i8* %269, i64 32
  %271 = getelementptr inbounds i8, i8* %270, i64 3
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = or i32 %268, %273
  %275 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  store i32 %274, i32* %275, align 16
  %276 = load i8*, i8** %4, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 36
  %278 = getelementptr inbounds i8, i8* %277, i64 0
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = shl i32 %280, 24
  %282 = load i8*, i8** %4, align 8
  %283 = getelementptr inbounds i8, i8* %282, i64 36
  %284 = getelementptr inbounds i8, i8* %283, i64 1
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = shl i32 %286, 16
  %288 = or i32 %281, %287
  %289 = load i8*, i8** %4, align 8
  %290 = getelementptr inbounds i8, i8* %289, i64 36
  %291 = getelementptr inbounds i8, i8* %290, i64 2
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = shl i32 %293, 8
  %295 = or i32 %288, %294
  %296 = load i8*, i8** %4, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 36
  %298 = getelementptr inbounds i8, i8* %297, i64 3
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = or i32 %295, %300
  %302 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  store i32 %301, i32* %302, align 4
  %303 = load i8*, i8** %4, align 8
  %304 = getelementptr inbounds i8, i8* %303, i64 40
  %305 = getelementptr inbounds i8, i8* %304, i64 0
  %306 = load i8, i8* %305, align 1
  %307 = zext i8 %306 to i32
  %308 = shl i32 %307, 24
  %309 = load i8*, i8** %4, align 8
  %310 = getelementptr inbounds i8, i8* %309, i64 40
  %311 = getelementptr inbounds i8, i8* %310, i64 1
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i32
  %314 = shl i32 %313, 16
  %315 = or i32 %308, %314
  %316 = load i8*, i8** %4, align 8
  %317 = getelementptr inbounds i8, i8* %316, i64 40
  %318 = getelementptr inbounds i8, i8* %317, i64 2
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = shl i32 %320, 8
  %322 = or i32 %315, %321
  %323 = load i8*, i8** %4, align 8
  %324 = getelementptr inbounds i8, i8* %323, i64 40
  %325 = getelementptr inbounds i8, i8* %324, i64 3
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i32
  %328 = or i32 %322, %327
  %329 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  store i32 %328, i32* %329, align 8
  %330 = load i8*, i8** %4, align 8
  %331 = getelementptr inbounds i8, i8* %330, i64 44
  %332 = getelementptr inbounds i8, i8* %331, i64 0
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = shl i32 %334, 24
  %336 = load i8*, i8** %4, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 44
  %338 = getelementptr inbounds i8, i8* %337, i64 1
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = shl i32 %340, 16
  %342 = or i32 %335, %341
  %343 = load i8*, i8** %4, align 8
  %344 = getelementptr inbounds i8, i8* %343, i64 44
  %345 = getelementptr inbounds i8, i8* %344, i64 2
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = shl i32 %347, 8
  %349 = or i32 %342, %348
  %350 = load i8*, i8** %4, align 8
  %351 = getelementptr inbounds i8, i8* %350, i64 44
  %352 = getelementptr inbounds i8, i8* %351, i64 3
  %353 = load i8, i8* %352, align 1
  %354 = zext i8 %353 to i32
  %355 = or i32 %349, %354
  %356 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  store i32 %355, i32* %356, align 4
  %357 = load i8*, i8** %4, align 8
  %358 = getelementptr inbounds i8, i8* %357, i64 48
  %359 = getelementptr inbounds i8, i8* %358, i64 0
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = shl i32 %361, 24
  %363 = load i8*, i8** %4, align 8
  %364 = getelementptr inbounds i8, i8* %363, i64 48
  %365 = getelementptr inbounds i8, i8* %364, i64 1
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  %368 = shl i32 %367, 16
  %369 = or i32 %362, %368
  %370 = load i8*, i8** %4, align 8
  %371 = getelementptr inbounds i8, i8* %370, i64 48
  %372 = getelementptr inbounds i8, i8* %371, i64 2
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = shl i32 %374, 8
  %376 = or i32 %369, %375
  %377 = load i8*, i8** %4, align 8
  %378 = getelementptr inbounds i8, i8* %377, i64 48
  %379 = getelementptr inbounds i8, i8* %378, i64 3
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i32
  %382 = or i32 %376, %381
  %383 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  store i32 %382, i32* %383, align 16
  %384 = load i8*, i8** %4, align 8
  %385 = getelementptr inbounds i8, i8* %384, i64 52
  %386 = getelementptr inbounds i8, i8* %385, i64 0
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = shl i32 %388, 24
  %390 = load i8*, i8** %4, align 8
  %391 = getelementptr inbounds i8, i8* %390, i64 52
  %392 = getelementptr inbounds i8, i8* %391, i64 1
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i32
  %395 = shl i32 %394, 16
  %396 = or i32 %389, %395
  %397 = load i8*, i8** %4, align 8
  %398 = getelementptr inbounds i8, i8* %397, i64 52
  %399 = getelementptr inbounds i8, i8* %398, i64 2
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i32
  %402 = shl i32 %401, 8
  %403 = or i32 %396, %402
  %404 = load i8*, i8** %4, align 8
  %405 = getelementptr inbounds i8, i8* %404, i64 52
  %406 = getelementptr inbounds i8, i8* %405, i64 3
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = or i32 %403, %408
  %410 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  store i32 %409, i32* %410, align 4
  %411 = load i8*, i8** %4, align 8
  %412 = getelementptr inbounds i8, i8* %411, i64 56
  %413 = getelementptr inbounds i8, i8* %412, i64 0
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i32
  %416 = shl i32 %415, 24
  %417 = load i8*, i8** %4, align 8
  %418 = getelementptr inbounds i8, i8* %417, i64 56
  %419 = getelementptr inbounds i8, i8* %418, i64 1
  %420 = load i8, i8* %419, align 1
  %421 = zext i8 %420 to i32
  %422 = shl i32 %421, 16
  %423 = or i32 %416, %422
  %424 = load i8*, i8** %4, align 8
  %425 = getelementptr inbounds i8, i8* %424, i64 56
  %426 = getelementptr inbounds i8, i8* %425, i64 2
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = shl i32 %428, 8
  %430 = or i32 %423, %429
  %431 = load i8*, i8** %4, align 8
  %432 = getelementptr inbounds i8, i8* %431, i64 56
  %433 = getelementptr inbounds i8, i8* %432, i64 3
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = or i32 %430, %435
  %437 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  store i32 %436, i32* %437, align 8
  %438 = load i8*, i8** %4, align 8
  %439 = getelementptr inbounds i8, i8* %438, i64 60
  %440 = getelementptr inbounds i8, i8* %439, i64 0
  %441 = load i8, i8* %440, align 1
  %442 = zext i8 %441 to i32
  %443 = shl i32 %442, 24
  %444 = load i8*, i8** %4, align 8
  %445 = getelementptr inbounds i8, i8* %444, i64 60
  %446 = getelementptr inbounds i8, i8* %445, i64 1
  %447 = load i8, i8* %446, align 1
  %448 = zext i8 %447 to i32
  %449 = shl i32 %448, 16
  %450 = or i32 %443, %449
  %451 = load i8*, i8** %4, align 8
  %452 = getelementptr inbounds i8, i8* %451, i64 60
  %453 = getelementptr inbounds i8, i8* %452, i64 2
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = shl i32 %455, 8
  %457 = or i32 %450, %456
  %458 = load i8*, i8** %4, align 8
  %459 = getelementptr inbounds i8, i8* %458, i64 60
  %460 = getelementptr inbounds i8, i8* %459, i64 3
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i32
  %463 = or i32 %457, %462
  %464 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  store i32 %463, i32* %464, align 4
  %465 = load i32, i32* %5, align 4
  %466 = shl i32 %465, 5
  %467 = load i32, i32* %5, align 4
  %468 = lshr i32 %467, 27
  %469 = or i32 %466, %468
  %470 = load i32, i32* %9, align 4
  %471 = add i32 %469, %470
  %472 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %473 = load i32, i32* %472, align 16
  %474 = add i32 %471, %473
  %475 = load i32, i32* %6, align 4
  %476 = load i32, i32* %7, align 4
  %477 = and i32 %475, %476
  %478 = load i32, i32* %6, align 4
  %479 = xor i32 %478, -1
  %480 = load i32, i32* %8, align 4
  %481 = and i32 %479, %480
  %482 = or i32 %477, %481
  %483 = add i32 %474, %482
  %484 = add i32 %483, 1518500249
  store i32 %484, i32* %10, align 4
  %485 = load i32, i32* %8, align 4
  store i32 %485, i32* %9, align 4
  %486 = load i32, i32* %7, align 4
  store i32 %486, i32* %8, align 4
  %487 = load i32, i32* %6, align 4
  %488 = shl i32 %487, 30
  %489 = load i32, i32* %6, align 4
  %490 = lshr i32 %489, 2
  %491 = or i32 %488, %490
  store i32 %491, i32* %7, align 4
  %492 = load i32, i32* %5, align 4
  store i32 %492, i32* %6, align 4
  %493 = load i32, i32* %10, align 4
  store i32 %493, i32* %5, align 4
  %494 = load i32, i32* %5, align 4
  %495 = shl i32 %494, 5
  %496 = load i32, i32* %5, align 4
  %497 = lshr i32 %496, 27
  %498 = or i32 %495, %497
  %499 = load i32, i32* %9, align 4
  %500 = add i32 %498, %499
  %501 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %502 = load i32, i32* %501, align 4
  %503 = add i32 %500, %502
  %504 = load i32, i32* %6, align 4
  %505 = load i32, i32* %7, align 4
  %506 = and i32 %504, %505
  %507 = load i32, i32* %6, align 4
  %508 = xor i32 %507, -1
  %509 = load i32, i32* %8, align 4
  %510 = and i32 %508, %509
  %511 = or i32 %506, %510
  %512 = add i32 %503, %511
  %513 = add i32 %512, 1518500249
  store i32 %513, i32* %10, align 4
  %514 = load i32, i32* %8, align 4
  store i32 %514, i32* %9, align 4
  %515 = load i32, i32* %7, align 4
  store i32 %515, i32* %8, align 4
  %516 = load i32, i32* %6, align 4
  %517 = shl i32 %516, 30
  %518 = load i32, i32* %6, align 4
  %519 = lshr i32 %518, 2
  %520 = or i32 %517, %519
  store i32 %520, i32* %7, align 4
  %521 = load i32, i32* %5, align 4
  store i32 %521, i32* %6, align 4
  %522 = load i32, i32* %10, align 4
  store i32 %522, i32* %5, align 4
  %523 = load i32, i32* %5, align 4
  %524 = shl i32 %523, 5
  %525 = load i32, i32* %5, align 4
  %526 = lshr i32 %525, 27
  %527 = or i32 %524, %526
  %528 = load i32, i32* %9, align 4
  %529 = add i32 %527, %528
  %530 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %531 = load i32, i32* %530, align 8
  %532 = add i32 %529, %531
  %533 = load i32, i32* %6, align 4
  %534 = load i32, i32* %7, align 4
  %535 = and i32 %533, %534
  %536 = load i32, i32* %6, align 4
  %537 = xor i32 %536, -1
  %538 = load i32, i32* %8, align 4
  %539 = and i32 %537, %538
  %540 = or i32 %535, %539
  %541 = add i32 %532, %540
  %542 = add i32 %541, 1518500249
  store i32 %542, i32* %10, align 4
  %543 = load i32, i32* %8, align 4
  store i32 %543, i32* %9, align 4
  %544 = load i32, i32* %7, align 4
  store i32 %544, i32* %8, align 4
  %545 = load i32, i32* %6, align 4
  %546 = shl i32 %545, 30
  %547 = load i32, i32* %6, align 4
  %548 = lshr i32 %547, 2
  %549 = or i32 %546, %548
  store i32 %549, i32* %7, align 4
  %550 = load i32, i32* %5, align 4
  store i32 %550, i32* %6, align 4
  %551 = load i32, i32* %10, align 4
  store i32 %551, i32* %5, align 4
  %552 = load i32, i32* %5, align 4
  %553 = shl i32 %552, 5
  %554 = load i32, i32* %5, align 4
  %555 = lshr i32 %554, 27
  %556 = or i32 %553, %555
  %557 = load i32, i32* %9, align 4
  %558 = add i32 %556, %557
  %559 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %560 = load i32, i32* %559, align 4
  %561 = add i32 %558, %560
  %562 = load i32, i32* %6, align 4
  %563 = load i32, i32* %7, align 4
  %564 = and i32 %562, %563
  %565 = load i32, i32* %6, align 4
  %566 = xor i32 %565, -1
  %567 = load i32, i32* %8, align 4
  %568 = and i32 %566, %567
  %569 = or i32 %564, %568
  %570 = add i32 %561, %569
  %571 = add i32 %570, 1518500249
  store i32 %571, i32* %10, align 4
  %572 = load i32, i32* %8, align 4
  store i32 %572, i32* %9, align 4
  %573 = load i32, i32* %7, align 4
  store i32 %573, i32* %8, align 4
  %574 = load i32, i32* %6, align 4
  %575 = shl i32 %574, 30
  %576 = load i32, i32* %6, align 4
  %577 = lshr i32 %576, 2
  %578 = or i32 %575, %577
  store i32 %578, i32* %7, align 4
  %579 = load i32, i32* %5, align 4
  store i32 %579, i32* %6, align 4
  %580 = load i32, i32* %10, align 4
  store i32 %580, i32* %5, align 4
  %581 = load i32, i32* %5, align 4
  %582 = shl i32 %581, 5
  %583 = load i32, i32* %5, align 4
  %584 = lshr i32 %583, 27
  %585 = or i32 %582, %584
  %586 = load i32, i32* %9, align 4
  %587 = add i32 %585, %586
  %588 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %589 = load i32, i32* %588, align 16
  %590 = add i32 %587, %589
  %591 = load i32, i32* %6, align 4
  %592 = load i32, i32* %7, align 4
  %593 = and i32 %591, %592
  %594 = load i32, i32* %6, align 4
  %595 = xor i32 %594, -1
  %596 = load i32, i32* %8, align 4
  %597 = and i32 %595, %596
  %598 = or i32 %593, %597
  %599 = add i32 %590, %598
  %600 = add i32 %599, 1518500249
  store i32 %600, i32* %10, align 4
  %601 = load i32, i32* %8, align 4
  store i32 %601, i32* %9, align 4
  %602 = load i32, i32* %7, align 4
  store i32 %602, i32* %8, align 4
  %603 = load i32, i32* %6, align 4
  %604 = shl i32 %603, 30
  %605 = load i32, i32* %6, align 4
  %606 = lshr i32 %605, 2
  %607 = or i32 %604, %606
  store i32 %607, i32* %7, align 4
  %608 = load i32, i32* %5, align 4
  store i32 %608, i32* %6, align 4
  %609 = load i32, i32* %10, align 4
  store i32 %609, i32* %5, align 4
  %610 = load i32, i32* %5, align 4
  %611 = shl i32 %610, 5
  %612 = load i32, i32* %5, align 4
  %613 = lshr i32 %612, 27
  %614 = or i32 %611, %613
  %615 = load i32, i32* %9, align 4
  %616 = add i32 %614, %615
  %617 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %618 = load i32, i32* %617, align 4
  %619 = add i32 %616, %618
  %620 = load i32, i32* %6, align 4
  %621 = load i32, i32* %7, align 4
  %622 = and i32 %620, %621
  %623 = load i32, i32* %6, align 4
  %624 = xor i32 %623, -1
  %625 = load i32, i32* %8, align 4
  %626 = and i32 %624, %625
  %627 = or i32 %622, %626
  %628 = add i32 %619, %627
  %629 = add i32 %628, 1518500249
  store i32 %629, i32* %10, align 4
  %630 = load i32, i32* %8, align 4
  store i32 %630, i32* %9, align 4
  %631 = load i32, i32* %7, align 4
  store i32 %631, i32* %8, align 4
  %632 = load i32, i32* %6, align 4
  %633 = shl i32 %632, 30
  %634 = load i32, i32* %6, align 4
  %635 = lshr i32 %634, 2
  %636 = or i32 %633, %635
  store i32 %636, i32* %7, align 4
  %637 = load i32, i32* %5, align 4
  store i32 %637, i32* %6, align 4
  %638 = load i32, i32* %10, align 4
  store i32 %638, i32* %5, align 4
  %639 = load i32, i32* %5, align 4
  %640 = shl i32 %639, 5
  %641 = load i32, i32* %5, align 4
  %642 = lshr i32 %641, 27
  %643 = or i32 %640, %642
  %644 = load i32, i32* %9, align 4
  %645 = add i32 %643, %644
  %646 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %647 = load i32, i32* %646, align 8
  %648 = add i32 %645, %647
  %649 = load i32, i32* %6, align 4
  %650 = load i32, i32* %7, align 4
  %651 = and i32 %649, %650
  %652 = load i32, i32* %6, align 4
  %653 = xor i32 %652, -1
  %654 = load i32, i32* %8, align 4
  %655 = and i32 %653, %654
  %656 = or i32 %651, %655
  %657 = add i32 %648, %656
  %658 = add i32 %657, 1518500249
  store i32 %658, i32* %10, align 4
  %659 = load i32, i32* %8, align 4
  store i32 %659, i32* %9, align 4
  %660 = load i32, i32* %7, align 4
  store i32 %660, i32* %8, align 4
  %661 = load i32, i32* %6, align 4
  %662 = shl i32 %661, 30
  %663 = load i32, i32* %6, align 4
  %664 = lshr i32 %663, 2
  %665 = or i32 %662, %664
  store i32 %665, i32* %7, align 4
  %666 = load i32, i32* %5, align 4
  store i32 %666, i32* %6, align 4
  %667 = load i32, i32* %10, align 4
  store i32 %667, i32* %5, align 4
  %668 = load i32, i32* %5, align 4
  %669 = shl i32 %668, 5
  %670 = load i32, i32* %5, align 4
  %671 = lshr i32 %670, 27
  %672 = or i32 %669, %671
  %673 = load i32, i32* %9, align 4
  %674 = add i32 %672, %673
  %675 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %676 = load i32, i32* %675, align 4
  %677 = add i32 %674, %676
  %678 = load i32, i32* %6, align 4
  %679 = load i32, i32* %7, align 4
  %680 = and i32 %678, %679
  %681 = load i32, i32* %6, align 4
  %682 = xor i32 %681, -1
  %683 = load i32, i32* %8, align 4
  %684 = and i32 %682, %683
  %685 = or i32 %680, %684
  %686 = add i32 %677, %685
  %687 = add i32 %686, 1518500249
  store i32 %687, i32* %10, align 4
  %688 = load i32, i32* %8, align 4
  store i32 %688, i32* %9, align 4
  %689 = load i32, i32* %7, align 4
  store i32 %689, i32* %8, align 4
  %690 = load i32, i32* %6, align 4
  %691 = shl i32 %690, 30
  %692 = load i32, i32* %6, align 4
  %693 = lshr i32 %692, 2
  %694 = or i32 %691, %693
  store i32 %694, i32* %7, align 4
  %695 = load i32, i32* %5, align 4
  store i32 %695, i32* %6, align 4
  %696 = load i32, i32* %10, align 4
  store i32 %696, i32* %5, align 4
  %697 = load i32, i32* %5, align 4
  %698 = shl i32 %697, 5
  %699 = load i32, i32* %5, align 4
  %700 = lshr i32 %699, 27
  %701 = or i32 %698, %700
  %702 = load i32, i32* %9, align 4
  %703 = add i32 %701, %702
  %704 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %705 = load i32, i32* %704, align 16
  %706 = add i32 %703, %705
  %707 = load i32, i32* %6, align 4
  %708 = load i32, i32* %7, align 4
  %709 = and i32 %707, %708
  %710 = load i32, i32* %6, align 4
  %711 = xor i32 %710, -1
  %712 = load i32, i32* %8, align 4
  %713 = and i32 %711, %712
  %714 = or i32 %709, %713
  %715 = add i32 %706, %714
  %716 = add i32 %715, 1518500249
  store i32 %716, i32* %10, align 4
  %717 = load i32, i32* %8, align 4
  store i32 %717, i32* %9, align 4
  %718 = load i32, i32* %7, align 4
  store i32 %718, i32* %8, align 4
  %719 = load i32, i32* %6, align 4
  %720 = shl i32 %719, 30
  %721 = load i32, i32* %6, align 4
  %722 = lshr i32 %721, 2
  %723 = or i32 %720, %722
  store i32 %723, i32* %7, align 4
  %724 = load i32, i32* %5, align 4
  store i32 %724, i32* %6, align 4
  %725 = load i32, i32* %10, align 4
  store i32 %725, i32* %5, align 4
  %726 = load i32, i32* %5, align 4
  %727 = shl i32 %726, 5
  %728 = load i32, i32* %5, align 4
  %729 = lshr i32 %728, 27
  %730 = or i32 %727, %729
  %731 = load i32, i32* %9, align 4
  %732 = add i32 %730, %731
  %733 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %734 = load i32, i32* %733, align 4
  %735 = add i32 %732, %734
  %736 = load i32, i32* %6, align 4
  %737 = load i32, i32* %7, align 4
  %738 = and i32 %736, %737
  %739 = load i32, i32* %6, align 4
  %740 = xor i32 %739, -1
  %741 = load i32, i32* %8, align 4
  %742 = and i32 %740, %741
  %743 = or i32 %738, %742
  %744 = add i32 %735, %743
  %745 = add i32 %744, 1518500249
  store i32 %745, i32* %10, align 4
  %746 = load i32, i32* %8, align 4
  store i32 %746, i32* %9, align 4
  %747 = load i32, i32* %7, align 4
  store i32 %747, i32* %8, align 4
  %748 = load i32, i32* %6, align 4
  %749 = shl i32 %748, 30
  %750 = load i32, i32* %6, align 4
  %751 = lshr i32 %750, 2
  %752 = or i32 %749, %751
  store i32 %752, i32* %7, align 4
  %753 = load i32, i32* %5, align 4
  store i32 %753, i32* %6, align 4
  %754 = load i32, i32* %10, align 4
  store i32 %754, i32* %5, align 4
  %755 = load i32, i32* %5, align 4
  %756 = shl i32 %755, 5
  %757 = load i32, i32* %5, align 4
  %758 = lshr i32 %757, 27
  %759 = or i32 %756, %758
  %760 = load i32, i32* %9, align 4
  %761 = add i32 %759, %760
  %762 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %763 = load i32, i32* %762, align 8
  %764 = add i32 %761, %763
  %765 = load i32, i32* %6, align 4
  %766 = load i32, i32* %7, align 4
  %767 = and i32 %765, %766
  %768 = load i32, i32* %6, align 4
  %769 = xor i32 %768, -1
  %770 = load i32, i32* %8, align 4
  %771 = and i32 %769, %770
  %772 = or i32 %767, %771
  %773 = add i32 %764, %772
  %774 = add i32 %773, 1518500249
  store i32 %774, i32* %10, align 4
  %775 = load i32, i32* %8, align 4
  store i32 %775, i32* %9, align 4
  %776 = load i32, i32* %7, align 4
  store i32 %776, i32* %8, align 4
  %777 = load i32, i32* %6, align 4
  %778 = shl i32 %777, 30
  %779 = load i32, i32* %6, align 4
  %780 = lshr i32 %779, 2
  %781 = or i32 %778, %780
  store i32 %781, i32* %7, align 4
  %782 = load i32, i32* %5, align 4
  store i32 %782, i32* %6, align 4
  %783 = load i32, i32* %10, align 4
  store i32 %783, i32* %5, align 4
  %784 = load i32, i32* %5, align 4
  %785 = shl i32 %784, 5
  %786 = load i32, i32* %5, align 4
  %787 = lshr i32 %786, 27
  %788 = or i32 %785, %787
  %789 = load i32, i32* %9, align 4
  %790 = add i32 %788, %789
  %791 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %792 = load i32, i32* %791, align 4
  %793 = add i32 %790, %792
  %794 = load i32, i32* %6, align 4
  %795 = load i32, i32* %7, align 4
  %796 = and i32 %794, %795
  %797 = load i32, i32* %6, align 4
  %798 = xor i32 %797, -1
  %799 = load i32, i32* %8, align 4
  %800 = and i32 %798, %799
  %801 = or i32 %796, %800
  %802 = add i32 %793, %801
  %803 = add i32 %802, 1518500249
  store i32 %803, i32* %10, align 4
  %804 = load i32, i32* %8, align 4
  store i32 %804, i32* %9, align 4
  %805 = load i32, i32* %7, align 4
  store i32 %805, i32* %8, align 4
  %806 = load i32, i32* %6, align 4
  %807 = shl i32 %806, 30
  %808 = load i32, i32* %6, align 4
  %809 = lshr i32 %808, 2
  %810 = or i32 %807, %809
  store i32 %810, i32* %7, align 4
  %811 = load i32, i32* %5, align 4
  store i32 %811, i32* %6, align 4
  %812 = load i32, i32* %10, align 4
  store i32 %812, i32* %5, align 4
  %813 = load i32, i32* %5, align 4
  %814 = shl i32 %813, 5
  %815 = load i32, i32* %5, align 4
  %816 = lshr i32 %815, 27
  %817 = or i32 %814, %816
  %818 = load i32, i32* %9, align 4
  %819 = add i32 %817, %818
  %820 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %821 = load i32, i32* %820, align 16
  %822 = add i32 %819, %821
  %823 = load i32, i32* %6, align 4
  %824 = load i32, i32* %7, align 4
  %825 = and i32 %823, %824
  %826 = load i32, i32* %6, align 4
  %827 = xor i32 %826, -1
  %828 = load i32, i32* %8, align 4
  %829 = and i32 %827, %828
  %830 = or i32 %825, %829
  %831 = add i32 %822, %830
  %832 = add i32 %831, 1518500249
  store i32 %832, i32* %10, align 4
  %833 = load i32, i32* %8, align 4
  store i32 %833, i32* %9, align 4
  %834 = load i32, i32* %7, align 4
  store i32 %834, i32* %8, align 4
  %835 = load i32, i32* %6, align 4
  %836 = shl i32 %835, 30
  %837 = load i32, i32* %6, align 4
  %838 = lshr i32 %837, 2
  %839 = or i32 %836, %838
  store i32 %839, i32* %7, align 4
  %840 = load i32, i32* %5, align 4
  store i32 %840, i32* %6, align 4
  %841 = load i32, i32* %10, align 4
  store i32 %841, i32* %5, align 4
  %842 = load i32, i32* %5, align 4
  %843 = shl i32 %842, 5
  %844 = load i32, i32* %5, align 4
  %845 = lshr i32 %844, 27
  %846 = or i32 %843, %845
  %847 = load i32, i32* %9, align 4
  %848 = add i32 %846, %847
  %849 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %850 = load i32, i32* %849, align 4
  %851 = add i32 %848, %850
  %852 = load i32, i32* %6, align 4
  %853 = load i32, i32* %7, align 4
  %854 = and i32 %852, %853
  %855 = load i32, i32* %6, align 4
  %856 = xor i32 %855, -1
  %857 = load i32, i32* %8, align 4
  %858 = and i32 %856, %857
  %859 = or i32 %854, %858
  %860 = add i32 %851, %859
  %861 = add i32 %860, 1518500249
  store i32 %861, i32* %10, align 4
  %862 = load i32, i32* %8, align 4
  store i32 %862, i32* %9, align 4
  %863 = load i32, i32* %7, align 4
  store i32 %863, i32* %8, align 4
  %864 = load i32, i32* %6, align 4
  %865 = shl i32 %864, 30
  %866 = load i32, i32* %6, align 4
  %867 = lshr i32 %866, 2
  %868 = or i32 %865, %867
  store i32 %868, i32* %7, align 4
  %869 = load i32, i32* %5, align 4
  store i32 %869, i32* %6, align 4
  %870 = load i32, i32* %10, align 4
  store i32 %870, i32* %5, align 4
  %871 = load i32, i32* %5, align 4
  %872 = shl i32 %871, 5
  %873 = load i32, i32* %5, align 4
  %874 = lshr i32 %873, 27
  %875 = or i32 %872, %874
  %876 = load i32, i32* %9, align 4
  %877 = add i32 %875, %876
  %878 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %879 = load i32, i32* %878, align 8
  %880 = add i32 %877, %879
  %881 = load i32, i32* %6, align 4
  %882 = load i32, i32* %7, align 4
  %883 = and i32 %881, %882
  %884 = load i32, i32* %6, align 4
  %885 = xor i32 %884, -1
  %886 = load i32, i32* %8, align 4
  %887 = and i32 %885, %886
  %888 = or i32 %883, %887
  %889 = add i32 %880, %888
  %890 = add i32 %889, 1518500249
  store i32 %890, i32* %10, align 4
  %891 = load i32, i32* %8, align 4
  store i32 %891, i32* %9, align 4
  %892 = load i32, i32* %7, align 4
  store i32 %892, i32* %8, align 4
  %893 = load i32, i32* %6, align 4
  %894 = shl i32 %893, 30
  %895 = load i32, i32* %6, align 4
  %896 = lshr i32 %895, 2
  %897 = or i32 %894, %896
  store i32 %897, i32* %7, align 4
  %898 = load i32, i32* %5, align 4
  store i32 %898, i32* %6, align 4
  %899 = load i32, i32* %10, align 4
  store i32 %899, i32* %5, align 4
  %900 = load i32, i32* %5, align 4
  %901 = shl i32 %900, 5
  %902 = load i32, i32* %5, align 4
  %903 = lshr i32 %902, 27
  %904 = or i32 %901, %903
  %905 = load i32, i32* %9, align 4
  %906 = add i32 %904, %905
  %907 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %908 = load i32, i32* %907, align 4
  %909 = add i32 %906, %908
  %910 = load i32, i32* %6, align 4
  %911 = load i32, i32* %7, align 4
  %912 = and i32 %910, %911
  %913 = load i32, i32* %6, align 4
  %914 = xor i32 %913, -1
  %915 = load i32, i32* %8, align 4
  %916 = and i32 %914, %915
  %917 = or i32 %912, %916
  %918 = add i32 %909, %917
  %919 = add i32 %918, 1518500249
  store i32 %919, i32* %10, align 4
  %920 = load i32, i32* %8, align 4
  store i32 %920, i32* %9, align 4
  %921 = load i32, i32* %7, align 4
  store i32 %921, i32* %8, align 4
  %922 = load i32, i32* %6, align 4
  %923 = shl i32 %922, 30
  %924 = load i32, i32* %6, align 4
  %925 = lshr i32 %924, 2
  %926 = or i32 %923, %925
  store i32 %926, i32* %7, align 4
  %927 = load i32, i32* %5, align 4
  store i32 %927, i32* %6, align 4
  %928 = load i32, i32* %10, align 4
  store i32 %928, i32* %5, align 4
  %929 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %930 = load i32, i32* %929, align 4
  %931 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %932 = load i32, i32* %931, align 16
  %933 = xor i32 %930, %932
  %934 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %935 = load i32, i32* %934, align 8
  %936 = xor i32 %933, %935
  %937 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %938 = load i32, i32* %937, align 16
  %939 = xor i32 %936, %938
  %940 = shl i32 %939, 1
  %941 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %942 = load i32, i32* %941, align 4
  %943 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %944 = load i32, i32* %943, align 16
  %945 = xor i32 %942, %944
  %946 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %947 = load i32, i32* %946, align 8
  %948 = xor i32 %945, %947
  %949 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %950 = load i32, i32* %949, align 16
  %951 = xor i32 %948, %950
  %952 = lshr i32 %951, 31
  %953 = or i32 %940, %952
  %954 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  store i32 %953, i32* %954, align 16
  %955 = load i32, i32* %5, align 4
  %956 = shl i32 %955, 5
  %957 = load i32, i32* %5, align 4
  %958 = lshr i32 %957, 27
  %959 = or i32 %956, %958
  %960 = load i32, i32* %9, align 4
  %961 = add i32 %959, %960
  %962 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %963 = load i32, i32* %962, align 16
  %964 = add i32 %961, %963
  %965 = load i32, i32* %6, align 4
  %966 = load i32, i32* %7, align 4
  %967 = and i32 %965, %966
  %968 = load i32, i32* %6, align 4
  %969 = xor i32 %968, -1
  %970 = load i32, i32* %8, align 4
  %971 = and i32 %969, %970
  %972 = or i32 %967, %971
  %973 = add i32 %964, %972
  %974 = add i32 %973, 1518500249
  store i32 %974, i32* %10, align 4
  %975 = load i32, i32* %8, align 4
  store i32 %975, i32* %9, align 4
  %976 = load i32, i32* %7, align 4
  store i32 %976, i32* %8, align 4
  %977 = load i32, i32* %6, align 4
  %978 = shl i32 %977, 30
  %979 = load i32, i32* %6, align 4
  %980 = lshr i32 %979, 2
  %981 = or i32 %978, %980
  store i32 %981, i32* %7, align 4
  %982 = load i32, i32* %5, align 4
  store i32 %982, i32* %6, align 4
  %983 = load i32, i32* %10, align 4
  store i32 %983, i32* %5, align 4
  %984 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %985 = load i32, i32* %984, align 8
  %986 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %987 = load i32, i32* %986, align 4
  %988 = xor i32 %985, %987
  %989 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %990 = load i32, i32* %989, align 4
  %991 = xor i32 %988, %990
  %992 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %993 = load i32, i32* %992, align 4
  %994 = xor i32 %991, %993
  %995 = shl i32 %994, 1
  %996 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %997 = load i32, i32* %996, align 8
  %998 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %999 = load i32, i32* %998, align 4
  %1000 = xor i32 %997, %999
  %1001 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1002 = load i32, i32* %1001, align 4
  %1003 = xor i32 %1000, %1002
  %1004 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1005 = load i32, i32* %1004, align 4
  %1006 = xor i32 %1003, %1005
  %1007 = lshr i32 %1006, 31
  %1008 = or i32 %995, %1007
  %1009 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  store i32 %1008, i32* %1009, align 4
  %1010 = load i32, i32* %5, align 4
  %1011 = shl i32 %1010, 5
  %1012 = load i32, i32* %5, align 4
  %1013 = lshr i32 %1012, 27
  %1014 = or i32 %1011, %1013
  %1015 = load i32, i32* %9, align 4
  %1016 = add i32 %1014, %1015
  %1017 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1018 = load i32, i32* %1017, align 4
  %1019 = add i32 %1016, %1018
  %1020 = load i32, i32* %6, align 4
  %1021 = load i32, i32* %7, align 4
  %1022 = and i32 %1020, %1021
  %1023 = load i32, i32* %6, align 4
  %1024 = xor i32 %1023, -1
  %1025 = load i32, i32* %8, align 4
  %1026 = and i32 %1024, %1025
  %1027 = or i32 %1022, %1026
  %1028 = add i32 %1019, %1027
  %1029 = add i32 %1028, 1518500249
  store i32 %1029, i32* %10, align 4
  %1030 = load i32, i32* %8, align 4
  store i32 %1030, i32* %9, align 4
  %1031 = load i32, i32* %7, align 4
  store i32 %1031, i32* %8, align 4
  %1032 = load i32, i32* %6, align 4
  %1033 = shl i32 %1032, 30
  %1034 = load i32, i32* %6, align 4
  %1035 = lshr i32 %1034, 2
  %1036 = or i32 %1033, %1035
  store i32 %1036, i32* %7, align 4
  %1037 = load i32, i32* %5, align 4
  store i32 %1037, i32* %6, align 4
  %1038 = load i32, i32* %10, align 4
  store i32 %1038, i32* %5, align 4
  %1039 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1040 = load i32, i32* %1039, align 4
  %1041 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1042 = load i32, i32* %1041, align 8
  %1043 = xor i32 %1040, %1042
  %1044 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1045 = load i32, i32* %1044, align 16
  %1046 = xor i32 %1043, %1045
  %1047 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1048 = load i32, i32* %1047, align 8
  %1049 = xor i32 %1046, %1048
  %1050 = shl i32 %1049, 1
  %1051 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1052 = load i32, i32* %1051, align 4
  %1053 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1054 = load i32, i32* %1053, align 8
  %1055 = xor i32 %1052, %1054
  %1056 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1057 = load i32, i32* %1056, align 16
  %1058 = xor i32 %1055, %1057
  %1059 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1060 = load i32, i32* %1059, align 8
  %1061 = xor i32 %1058, %1060
  %1062 = lshr i32 %1061, 31
  %1063 = or i32 %1050, %1062
  %1064 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  store i32 %1063, i32* %1064, align 8
  %1065 = load i32, i32* %5, align 4
  %1066 = shl i32 %1065, 5
  %1067 = load i32, i32* %5, align 4
  %1068 = lshr i32 %1067, 27
  %1069 = or i32 %1066, %1068
  %1070 = load i32, i32* %9, align 4
  %1071 = add i32 %1069, %1070
  %1072 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1073 = load i32, i32* %1072, align 8
  %1074 = add i32 %1071, %1073
  %1075 = load i32, i32* %6, align 4
  %1076 = load i32, i32* %7, align 4
  %1077 = and i32 %1075, %1076
  %1078 = load i32, i32* %6, align 4
  %1079 = xor i32 %1078, -1
  %1080 = load i32, i32* %8, align 4
  %1081 = and i32 %1079, %1080
  %1082 = or i32 %1077, %1081
  %1083 = add i32 %1074, %1082
  %1084 = add i32 %1083, 1518500249
  store i32 %1084, i32* %10, align 4
  %1085 = load i32, i32* %8, align 4
  store i32 %1085, i32* %9, align 4
  %1086 = load i32, i32* %7, align 4
  store i32 %1086, i32* %8, align 4
  %1087 = load i32, i32* %6, align 4
  %1088 = shl i32 %1087, 30
  %1089 = load i32, i32* %6, align 4
  %1090 = lshr i32 %1089, 2
  %1091 = or i32 %1088, %1090
  store i32 %1091, i32* %7, align 4
  %1092 = load i32, i32* %5, align 4
  store i32 %1092, i32* %6, align 4
  %1093 = load i32, i32* %10, align 4
  store i32 %1093, i32* %5, align 4
  %1094 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1095 = load i32, i32* %1094, align 16
  %1096 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1097 = load i32, i32* %1096, align 4
  %1098 = xor i32 %1095, %1097
  %1099 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1100 = load i32, i32* %1099, align 4
  %1101 = xor i32 %1098, %1100
  %1102 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1103 = load i32, i32* %1102, align 4
  %1104 = xor i32 %1101, %1103
  %1105 = shl i32 %1104, 1
  %1106 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1107 = load i32, i32* %1106, align 16
  %1108 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1109 = load i32, i32* %1108, align 4
  %1110 = xor i32 %1107, %1109
  %1111 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1112 = load i32, i32* %1111, align 4
  %1113 = xor i32 %1110, %1112
  %1114 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1115 = load i32, i32* %1114, align 4
  %1116 = xor i32 %1113, %1115
  %1117 = lshr i32 %1116, 31
  %1118 = or i32 %1105, %1117
  %1119 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  store i32 %1118, i32* %1119, align 4
  %1120 = load i32, i32* %5, align 4
  %1121 = shl i32 %1120, 5
  %1122 = load i32, i32* %5, align 4
  %1123 = lshr i32 %1122, 27
  %1124 = or i32 %1121, %1123
  %1125 = load i32, i32* %9, align 4
  %1126 = add i32 %1124, %1125
  %1127 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1128 = load i32, i32* %1127, align 4
  %1129 = add i32 %1126, %1128
  %1130 = load i32, i32* %6, align 4
  %1131 = load i32, i32* %7, align 4
  %1132 = and i32 %1130, %1131
  %1133 = load i32, i32* %6, align 4
  %1134 = xor i32 %1133, -1
  %1135 = load i32, i32* %8, align 4
  %1136 = and i32 %1134, %1135
  %1137 = or i32 %1132, %1136
  %1138 = add i32 %1129, %1137
  %1139 = add i32 %1138, 1518500249
  store i32 %1139, i32* %10, align 4
  %1140 = load i32, i32* %8, align 4
  store i32 %1140, i32* %9, align 4
  %1141 = load i32, i32* %7, align 4
  store i32 %1141, i32* %8, align 4
  %1142 = load i32, i32* %6, align 4
  %1143 = shl i32 %1142, 30
  %1144 = load i32, i32* %6, align 4
  %1145 = lshr i32 %1144, 2
  %1146 = or i32 %1143, %1145
  store i32 %1146, i32* %7, align 4
  %1147 = load i32, i32* %5, align 4
  store i32 %1147, i32* %6, align 4
  %1148 = load i32, i32* %10, align 4
  store i32 %1148, i32* %5, align 4
  %1149 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1150 = load i32, i32* %1149, align 4
  %1151 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1152 = load i32, i32* %1151, align 16
  %1153 = xor i32 %1150, %1152
  %1154 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1155 = load i32, i32* %1154, align 8
  %1156 = xor i32 %1153, %1155
  %1157 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1158 = load i32, i32* %1157, align 16
  %1159 = xor i32 %1156, %1158
  %1160 = shl i32 %1159, 1
  %1161 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1162 = load i32, i32* %1161, align 4
  %1163 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1164 = load i32, i32* %1163, align 16
  %1165 = xor i32 %1162, %1164
  %1166 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1167 = load i32, i32* %1166, align 8
  %1168 = xor i32 %1165, %1167
  %1169 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1170 = load i32, i32* %1169, align 16
  %1171 = xor i32 %1168, %1170
  %1172 = lshr i32 %1171, 31
  %1173 = or i32 %1160, %1172
  %1174 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  store i32 %1173, i32* %1174, align 16
  %1175 = load i32, i32* %5, align 4
  %1176 = shl i32 %1175, 5
  %1177 = load i32, i32* %5, align 4
  %1178 = lshr i32 %1177, 27
  %1179 = or i32 %1176, %1178
  %1180 = load i32, i32* %9, align 4
  %1181 = add i32 %1179, %1180
  %1182 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1183 = load i32, i32* %1182, align 16
  %1184 = add i32 %1181, %1183
  %1185 = load i32, i32* %6, align 4
  %1186 = load i32, i32* %7, align 4
  %1187 = xor i32 %1185, %1186
  %1188 = load i32, i32* %8, align 4
  %1189 = xor i32 %1187, %1188
  %1190 = add i32 %1184, %1189
  %1191 = add i32 %1190, 1859775393
  store i32 %1191, i32* %10, align 4
  %1192 = load i32, i32* %8, align 4
  store i32 %1192, i32* %9, align 4
  %1193 = load i32, i32* %7, align 4
  store i32 %1193, i32* %8, align 4
  %1194 = load i32, i32* %6, align 4
  %1195 = shl i32 %1194, 30
  %1196 = load i32, i32* %6, align 4
  %1197 = lshr i32 %1196, 2
  %1198 = or i32 %1195, %1197
  store i32 %1198, i32* %7, align 4
  %1199 = load i32, i32* %5, align 4
  store i32 %1199, i32* %6, align 4
  %1200 = load i32, i32* %10, align 4
  store i32 %1200, i32* %5, align 4
  %1201 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1202 = load i32, i32* %1201, align 8
  %1203 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1204 = load i32, i32* %1203, align 4
  %1205 = xor i32 %1202, %1204
  %1206 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1207 = load i32, i32* %1206, align 4
  %1208 = xor i32 %1205, %1207
  %1209 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1210 = load i32, i32* %1209, align 4
  %1211 = xor i32 %1208, %1210
  %1212 = shl i32 %1211, 1
  %1213 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1214 = load i32, i32* %1213, align 8
  %1215 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1216 = load i32, i32* %1215, align 4
  %1217 = xor i32 %1214, %1216
  %1218 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1219 = load i32, i32* %1218, align 4
  %1220 = xor i32 %1217, %1219
  %1221 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1222 = load i32, i32* %1221, align 4
  %1223 = xor i32 %1220, %1222
  %1224 = lshr i32 %1223, 31
  %1225 = or i32 %1212, %1224
  %1226 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  store i32 %1225, i32* %1226, align 4
  %1227 = load i32, i32* %5, align 4
  %1228 = shl i32 %1227, 5
  %1229 = load i32, i32* %5, align 4
  %1230 = lshr i32 %1229, 27
  %1231 = or i32 %1228, %1230
  %1232 = load i32, i32* %9, align 4
  %1233 = add i32 %1231, %1232
  %1234 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1235 = load i32, i32* %1234, align 4
  %1236 = add i32 %1233, %1235
  %1237 = load i32, i32* %6, align 4
  %1238 = load i32, i32* %7, align 4
  %1239 = xor i32 %1237, %1238
  %1240 = load i32, i32* %8, align 4
  %1241 = xor i32 %1239, %1240
  %1242 = add i32 %1236, %1241
  %1243 = add i32 %1242, 1859775393
  store i32 %1243, i32* %10, align 4
  %1244 = load i32, i32* %8, align 4
  store i32 %1244, i32* %9, align 4
  %1245 = load i32, i32* %7, align 4
  store i32 %1245, i32* %8, align 4
  %1246 = load i32, i32* %6, align 4
  %1247 = shl i32 %1246, 30
  %1248 = load i32, i32* %6, align 4
  %1249 = lshr i32 %1248, 2
  %1250 = or i32 %1247, %1249
  store i32 %1250, i32* %7, align 4
  %1251 = load i32, i32* %5, align 4
  store i32 %1251, i32* %6, align 4
  %1252 = load i32, i32* %10, align 4
  store i32 %1252, i32* %5, align 4
  %1253 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1254 = load i32, i32* %1253, align 4
  %1255 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1256 = load i32, i32* %1255, align 8
  %1257 = xor i32 %1254, %1256
  %1258 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1259 = load i32, i32* %1258, align 16
  %1260 = xor i32 %1257, %1259
  %1261 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1262 = load i32, i32* %1261, align 8
  %1263 = xor i32 %1260, %1262
  %1264 = shl i32 %1263, 1
  %1265 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1266 = load i32, i32* %1265, align 4
  %1267 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1268 = load i32, i32* %1267, align 8
  %1269 = xor i32 %1266, %1268
  %1270 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1271 = load i32, i32* %1270, align 16
  %1272 = xor i32 %1269, %1271
  %1273 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1274 = load i32, i32* %1273, align 8
  %1275 = xor i32 %1272, %1274
  %1276 = lshr i32 %1275, 31
  %1277 = or i32 %1264, %1276
  %1278 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  store i32 %1277, i32* %1278, align 8
  %1279 = load i32, i32* %5, align 4
  %1280 = shl i32 %1279, 5
  %1281 = load i32, i32* %5, align 4
  %1282 = lshr i32 %1281, 27
  %1283 = or i32 %1280, %1282
  %1284 = load i32, i32* %9, align 4
  %1285 = add i32 %1283, %1284
  %1286 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1287 = load i32, i32* %1286, align 8
  %1288 = add i32 %1285, %1287
  %1289 = load i32, i32* %6, align 4
  %1290 = load i32, i32* %7, align 4
  %1291 = xor i32 %1289, %1290
  %1292 = load i32, i32* %8, align 4
  %1293 = xor i32 %1291, %1292
  %1294 = add i32 %1288, %1293
  %1295 = add i32 %1294, 1859775393
  store i32 %1295, i32* %10, align 4
  %1296 = load i32, i32* %8, align 4
  store i32 %1296, i32* %9, align 4
  %1297 = load i32, i32* %7, align 4
  store i32 %1297, i32* %8, align 4
  %1298 = load i32, i32* %6, align 4
  %1299 = shl i32 %1298, 30
  %1300 = load i32, i32* %6, align 4
  %1301 = lshr i32 %1300, 2
  %1302 = or i32 %1299, %1301
  store i32 %1302, i32* %7, align 4
  %1303 = load i32, i32* %5, align 4
  store i32 %1303, i32* %6, align 4
  %1304 = load i32, i32* %10, align 4
  store i32 %1304, i32* %5, align 4
  %1305 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1306 = load i32, i32* %1305, align 16
  %1307 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1308 = load i32, i32* %1307, align 4
  %1309 = xor i32 %1306, %1308
  %1310 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1311 = load i32, i32* %1310, align 4
  %1312 = xor i32 %1309, %1311
  %1313 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1314 = load i32, i32* %1313, align 4
  %1315 = xor i32 %1312, %1314
  %1316 = shl i32 %1315, 1
  %1317 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1318 = load i32, i32* %1317, align 16
  %1319 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1320 = load i32, i32* %1319, align 4
  %1321 = xor i32 %1318, %1320
  %1322 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1323 = load i32, i32* %1322, align 4
  %1324 = xor i32 %1321, %1323
  %1325 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1326 = load i32, i32* %1325, align 4
  %1327 = xor i32 %1324, %1326
  %1328 = lshr i32 %1327, 31
  %1329 = or i32 %1316, %1328
  %1330 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  store i32 %1329, i32* %1330, align 4
  %1331 = load i32, i32* %5, align 4
  %1332 = shl i32 %1331, 5
  %1333 = load i32, i32* %5, align 4
  %1334 = lshr i32 %1333, 27
  %1335 = or i32 %1332, %1334
  %1336 = load i32, i32* %9, align 4
  %1337 = add i32 %1335, %1336
  %1338 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1339 = load i32, i32* %1338, align 4
  %1340 = add i32 %1337, %1339
  %1341 = load i32, i32* %6, align 4
  %1342 = load i32, i32* %7, align 4
  %1343 = xor i32 %1341, %1342
  %1344 = load i32, i32* %8, align 4
  %1345 = xor i32 %1343, %1344
  %1346 = add i32 %1340, %1345
  %1347 = add i32 %1346, 1859775393
  store i32 %1347, i32* %10, align 4
  %1348 = load i32, i32* %8, align 4
  store i32 %1348, i32* %9, align 4
  %1349 = load i32, i32* %7, align 4
  store i32 %1349, i32* %8, align 4
  %1350 = load i32, i32* %6, align 4
  %1351 = shl i32 %1350, 30
  %1352 = load i32, i32* %6, align 4
  %1353 = lshr i32 %1352, 2
  %1354 = or i32 %1351, %1353
  store i32 %1354, i32* %7, align 4
  %1355 = load i32, i32* %5, align 4
  store i32 %1355, i32* %6, align 4
  %1356 = load i32, i32* %10, align 4
  store i32 %1356, i32* %5, align 4
  %1357 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1358 = load i32, i32* %1357, align 4
  %1359 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1360 = load i32, i32* %1359, align 16
  %1361 = xor i32 %1358, %1360
  %1362 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1363 = load i32, i32* %1362, align 8
  %1364 = xor i32 %1361, %1363
  %1365 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1366 = load i32, i32* %1365, align 16
  %1367 = xor i32 %1364, %1366
  %1368 = shl i32 %1367, 1
  %1369 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1370 = load i32, i32* %1369, align 4
  %1371 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1372 = load i32, i32* %1371, align 16
  %1373 = xor i32 %1370, %1372
  %1374 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1375 = load i32, i32* %1374, align 8
  %1376 = xor i32 %1373, %1375
  %1377 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1378 = load i32, i32* %1377, align 16
  %1379 = xor i32 %1376, %1378
  %1380 = lshr i32 %1379, 31
  %1381 = or i32 %1368, %1380
  %1382 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  store i32 %1381, i32* %1382, align 16
  %1383 = load i32, i32* %5, align 4
  %1384 = shl i32 %1383, 5
  %1385 = load i32, i32* %5, align 4
  %1386 = lshr i32 %1385, 27
  %1387 = or i32 %1384, %1386
  %1388 = load i32, i32* %9, align 4
  %1389 = add i32 %1387, %1388
  %1390 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1391 = load i32, i32* %1390, align 16
  %1392 = add i32 %1389, %1391
  %1393 = load i32, i32* %6, align 4
  %1394 = load i32, i32* %7, align 4
  %1395 = xor i32 %1393, %1394
  %1396 = load i32, i32* %8, align 4
  %1397 = xor i32 %1395, %1396
  %1398 = add i32 %1392, %1397
  %1399 = add i32 %1398, 1859775393
  store i32 %1399, i32* %10, align 4
  %1400 = load i32, i32* %8, align 4
  store i32 %1400, i32* %9, align 4
  %1401 = load i32, i32* %7, align 4
  store i32 %1401, i32* %8, align 4
  %1402 = load i32, i32* %6, align 4
  %1403 = shl i32 %1402, 30
  %1404 = load i32, i32* %6, align 4
  %1405 = lshr i32 %1404, 2
  %1406 = or i32 %1403, %1405
  store i32 %1406, i32* %7, align 4
  %1407 = load i32, i32* %5, align 4
  store i32 %1407, i32* %6, align 4
  %1408 = load i32, i32* %10, align 4
  store i32 %1408, i32* %5, align 4
  %1409 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1410 = load i32, i32* %1409, align 8
  %1411 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1412 = load i32, i32* %1411, align 4
  %1413 = xor i32 %1410, %1412
  %1414 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1415 = load i32, i32* %1414, align 4
  %1416 = xor i32 %1413, %1415
  %1417 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1418 = load i32, i32* %1417, align 4
  %1419 = xor i32 %1416, %1418
  %1420 = shl i32 %1419, 1
  %1421 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1422 = load i32, i32* %1421, align 8
  %1423 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1424 = load i32, i32* %1423, align 4
  %1425 = xor i32 %1422, %1424
  %1426 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1427 = load i32, i32* %1426, align 4
  %1428 = xor i32 %1425, %1427
  %1429 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1430 = load i32, i32* %1429, align 4
  %1431 = xor i32 %1428, %1430
  %1432 = lshr i32 %1431, 31
  %1433 = or i32 %1420, %1432
  %1434 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  store i32 %1433, i32* %1434, align 4
  %1435 = load i32, i32* %5, align 4
  %1436 = shl i32 %1435, 5
  %1437 = load i32, i32* %5, align 4
  %1438 = lshr i32 %1437, 27
  %1439 = or i32 %1436, %1438
  %1440 = load i32, i32* %9, align 4
  %1441 = add i32 %1439, %1440
  %1442 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1443 = load i32, i32* %1442, align 4
  %1444 = add i32 %1441, %1443
  %1445 = load i32, i32* %6, align 4
  %1446 = load i32, i32* %7, align 4
  %1447 = xor i32 %1445, %1446
  %1448 = load i32, i32* %8, align 4
  %1449 = xor i32 %1447, %1448
  %1450 = add i32 %1444, %1449
  %1451 = add i32 %1450, 1859775393
  store i32 %1451, i32* %10, align 4
  %1452 = load i32, i32* %8, align 4
  store i32 %1452, i32* %9, align 4
  %1453 = load i32, i32* %7, align 4
  store i32 %1453, i32* %8, align 4
  %1454 = load i32, i32* %6, align 4
  %1455 = shl i32 %1454, 30
  %1456 = load i32, i32* %6, align 4
  %1457 = lshr i32 %1456, 2
  %1458 = or i32 %1455, %1457
  store i32 %1458, i32* %7, align 4
  %1459 = load i32, i32* %5, align 4
  store i32 %1459, i32* %6, align 4
  %1460 = load i32, i32* %10, align 4
  store i32 %1460, i32* %5, align 4
  %1461 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1462 = load i32, i32* %1461, align 4
  %1463 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1464 = load i32, i32* %1463, align 8
  %1465 = xor i32 %1462, %1464
  %1466 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1467 = load i32, i32* %1466, align 16
  %1468 = xor i32 %1465, %1467
  %1469 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1470 = load i32, i32* %1469, align 8
  %1471 = xor i32 %1468, %1470
  %1472 = shl i32 %1471, 1
  %1473 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1474 = load i32, i32* %1473, align 4
  %1475 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1476 = load i32, i32* %1475, align 8
  %1477 = xor i32 %1474, %1476
  %1478 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1479 = load i32, i32* %1478, align 16
  %1480 = xor i32 %1477, %1479
  %1481 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1482 = load i32, i32* %1481, align 8
  %1483 = xor i32 %1480, %1482
  %1484 = lshr i32 %1483, 31
  %1485 = or i32 %1472, %1484
  %1486 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  store i32 %1485, i32* %1486, align 8
  %1487 = load i32, i32* %5, align 4
  %1488 = shl i32 %1487, 5
  %1489 = load i32, i32* %5, align 4
  %1490 = lshr i32 %1489, 27
  %1491 = or i32 %1488, %1490
  %1492 = load i32, i32* %9, align 4
  %1493 = add i32 %1491, %1492
  %1494 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1495 = load i32, i32* %1494, align 8
  %1496 = add i32 %1493, %1495
  %1497 = load i32, i32* %6, align 4
  %1498 = load i32, i32* %7, align 4
  %1499 = xor i32 %1497, %1498
  %1500 = load i32, i32* %8, align 4
  %1501 = xor i32 %1499, %1500
  %1502 = add i32 %1496, %1501
  %1503 = add i32 %1502, 1859775393
  store i32 %1503, i32* %10, align 4
  %1504 = load i32, i32* %8, align 4
  store i32 %1504, i32* %9, align 4
  %1505 = load i32, i32* %7, align 4
  store i32 %1505, i32* %8, align 4
  %1506 = load i32, i32* %6, align 4
  %1507 = shl i32 %1506, 30
  %1508 = load i32, i32* %6, align 4
  %1509 = lshr i32 %1508, 2
  %1510 = or i32 %1507, %1509
  store i32 %1510, i32* %7, align 4
  %1511 = load i32, i32* %5, align 4
  store i32 %1511, i32* %6, align 4
  %1512 = load i32, i32* %10, align 4
  store i32 %1512, i32* %5, align 4
  %1513 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1514 = load i32, i32* %1513, align 16
  %1515 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1516 = load i32, i32* %1515, align 4
  %1517 = xor i32 %1514, %1516
  %1518 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1519 = load i32, i32* %1518, align 4
  %1520 = xor i32 %1517, %1519
  %1521 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1522 = load i32, i32* %1521, align 4
  %1523 = xor i32 %1520, %1522
  %1524 = shl i32 %1523, 1
  %1525 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1526 = load i32, i32* %1525, align 16
  %1527 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1528 = load i32, i32* %1527, align 4
  %1529 = xor i32 %1526, %1528
  %1530 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1531 = load i32, i32* %1530, align 4
  %1532 = xor i32 %1529, %1531
  %1533 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1534 = load i32, i32* %1533, align 4
  %1535 = xor i32 %1532, %1534
  %1536 = lshr i32 %1535, 31
  %1537 = or i32 %1524, %1536
  %1538 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  store i32 %1537, i32* %1538, align 4
  %1539 = load i32, i32* %5, align 4
  %1540 = shl i32 %1539, 5
  %1541 = load i32, i32* %5, align 4
  %1542 = lshr i32 %1541, 27
  %1543 = or i32 %1540, %1542
  %1544 = load i32, i32* %9, align 4
  %1545 = add i32 %1543, %1544
  %1546 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1547 = load i32, i32* %1546, align 4
  %1548 = add i32 %1545, %1547
  %1549 = load i32, i32* %6, align 4
  %1550 = load i32, i32* %7, align 4
  %1551 = xor i32 %1549, %1550
  %1552 = load i32, i32* %8, align 4
  %1553 = xor i32 %1551, %1552
  %1554 = add i32 %1548, %1553
  %1555 = add i32 %1554, 1859775393
  store i32 %1555, i32* %10, align 4
  %1556 = load i32, i32* %8, align 4
  store i32 %1556, i32* %9, align 4
  %1557 = load i32, i32* %7, align 4
  store i32 %1557, i32* %8, align 4
  %1558 = load i32, i32* %6, align 4
  %1559 = shl i32 %1558, 30
  %1560 = load i32, i32* %6, align 4
  %1561 = lshr i32 %1560, 2
  %1562 = or i32 %1559, %1561
  store i32 %1562, i32* %7, align 4
  %1563 = load i32, i32* %5, align 4
  store i32 %1563, i32* %6, align 4
  %1564 = load i32, i32* %10, align 4
  store i32 %1564, i32* %5, align 4
  %1565 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1566 = load i32, i32* %1565, align 4
  %1567 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1568 = load i32, i32* %1567, align 16
  %1569 = xor i32 %1566, %1568
  %1570 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1571 = load i32, i32* %1570, align 8
  %1572 = xor i32 %1569, %1571
  %1573 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1574 = load i32, i32* %1573, align 16
  %1575 = xor i32 %1572, %1574
  %1576 = shl i32 %1575, 1
  %1577 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1578 = load i32, i32* %1577, align 4
  %1579 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1580 = load i32, i32* %1579, align 16
  %1581 = xor i32 %1578, %1580
  %1582 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1583 = load i32, i32* %1582, align 8
  %1584 = xor i32 %1581, %1583
  %1585 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1586 = load i32, i32* %1585, align 16
  %1587 = xor i32 %1584, %1586
  %1588 = lshr i32 %1587, 31
  %1589 = or i32 %1576, %1588
  %1590 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  store i32 %1589, i32* %1590, align 16
  %1591 = load i32, i32* %5, align 4
  %1592 = shl i32 %1591, 5
  %1593 = load i32, i32* %5, align 4
  %1594 = lshr i32 %1593, 27
  %1595 = or i32 %1592, %1594
  %1596 = load i32, i32* %9, align 4
  %1597 = add i32 %1595, %1596
  %1598 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1599 = load i32, i32* %1598, align 16
  %1600 = add i32 %1597, %1599
  %1601 = load i32, i32* %6, align 4
  %1602 = load i32, i32* %7, align 4
  %1603 = xor i32 %1601, %1602
  %1604 = load i32, i32* %8, align 4
  %1605 = xor i32 %1603, %1604
  %1606 = add i32 %1600, %1605
  %1607 = add i32 %1606, 1859775393
  store i32 %1607, i32* %10, align 4
  %1608 = load i32, i32* %8, align 4
  store i32 %1608, i32* %9, align 4
  %1609 = load i32, i32* %7, align 4
  store i32 %1609, i32* %8, align 4
  %1610 = load i32, i32* %6, align 4
  %1611 = shl i32 %1610, 30
  %1612 = load i32, i32* %6, align 4
  %1613 = lshr i32 %1612, 2
  %1614 = or i32 %1611, %1613
  store i32 %1614, i32* %7, align 4
  %1615 = load i32, i32* %5, align 4
  store i32 %1615, i32* %6, align 4
  %1616 = load i32, i32* %10, align 4
  store i32 %1616, i32* %5, align 4
  %1617 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1618 = load i32, i32* %1617, align 8
  %1619 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1620 = load i32, i32* %1619, align 4
  %1621 = xor i32 %1618, %1620
  %1622 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1623 = load i32, i32* %1622, align 4
  %1624 = xor i32 %1621, %1623
  %1625 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1626 = load i32, i32* %1625, align 4
  %1627 = xor i32 %1624, %1626
  %1628 = shl i32 %1627, 1
  %1629 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1630 = load i32, i32* %1629, align 8
  %1631 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1632 = load i32, i32* %1631, align 4
  %1633 = xor i32 %1630, %1632
  %1634 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1635 = load i32, i32* %1634, align 4
  %1636 = xor i32 %1633, %1635
  %1637 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1638 = load i32, i32* %1637, align 4
  %1639 = xor i32 %1636, %1638
  %1640 = lshr i32 %1639, 31
  %1641 = or i32 %1628, %1640
  %1642 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  store i32 %1641, i32* %1642, align 4
  %1643 = load i32, i32* %5, align 4
  %1644 = shl i32 %1643, 5
  %1645 = load i32, i32* %5, align 4
  %1646 = lshr i32 %1645, 27
  %1647 = or i32 %1644, %1646
  %1648 = load i32, i32* %9, align 4
  %1649 = add i32 %1647, %1648
  %1650 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1651 = load i32, i32* %1650, align 4
  %1652 = add i32 %1649, %1651
  %1653 = load i32, i32* %6, align 4
  %1654 = load i32, i32* %7, align 4
  %1655 = xor i32 %1653, %1654
  %1656 = load i32, i32* %8, align 4
  %1657 = xor i32 %1655, %1656
  %1658 = add i32 %1652, %1657
  %1659 = add i32 %1658, 1859775393
  store i32 %1659, i32* %10, align 4
  %1660 = load i32, i32* %8, align 4
  store i32 %1660, i32* %9, align 4
  %1661 = load i32, i32* %7, align 4
  store i32 %1661, i32* %8, align 4
  %1662 = load i32, i32* %6, align 4
  %1663 = shl i32 %1662, 30
  %1664 = load i32, i32* %6, align 4
  %1665 = lshr i32 %1664, 2
  %1666 = or i32 %1663, %1665
  store i32 %1666, i32* %7, align 4
  %1667 = load i32, i32* %5, align 4
  store i32 %1667, i32* %6, align 4
  %1668 = load i32, i32* %10, align 4
  store i32 %1668, i32* %5, align 4
  %1669 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1670 = load i32, i32* %1669, align 4
  %1671 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1672 = load i32, i32* %1671, align 8
  %1673 = xor i32 %1670, %1672
  %1674 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1675 = load i32, i32* %1674, align 16
  %1676 = xor i32 %1673, %1675
  %1677 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1678 = load i32, i32* %1677, align 8
  %1679 = xor i32 %1676, %1678
  %1680 = shl i32 %1679, 1
  %1681 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1682 = load i32, i32* %1681, align 4
  %1683 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1684 = load i32, i32* %1683, align 8
  %1685 = xor i32 %1682, %1684
  %1686 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1687 = load i32, i32* %1686, align 16
  %1688 = xor i32 %1685, %1687
  %1689 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1690 = load i32, i32* %1689, align 8
  %1691 = xor i32 %1688, %1690
  %1692 = lshr i32 %1691, 31
  %1693 = or i32 %1680, %1692
  %1694 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  store i32 %1693, i32* %1694, align 8
  %1695 = load i32, i32* %5, align 4
  %1696 = shl i32 %1695, 5
  %1697 = load i32, i32* %5, align 4
  %1698 = lshr i32 %1697, 27
  %1699 = or i32 %1696, %1698
  %1700 = load i32, i32* %9, align 4
  %1701 = add i32 %1699, %1700
  %1702 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1703 = load i32, i32* %1702, align 8
  %1704 = add i32 %1701, %1703
  %1705 = load i32, i32* %6, align 4
  %1706 = load i32, i32* %7, align 4
  %1707 = xor i32 %1705, %1706
  %1708 = load i32, i32* %8, align 4
  %1709 = xor i32 %1707, %1708
  %1710 = add i32 %1704, %1709
  %1711 = add i32 %1710, 1859775393
  store i32 %1711, i32* %10, align 4
  %1712 = load i32, i32* %8, align 4
  store i32 %1712, i32* %9, align 4
  %1713 = load i32, i32* %7, align 4
  store i32 %1713, i32* %8, align 4
  %1714 = load i32, i32* %6, align 4
  %1715 = shl i32 %1714, 30
  %1716 = load i32, i32* %6, align 4
  %1717 = lshr i32 %1716, 2
  %1718 = or i32 %1715, %1717
  store i32 %1718, i32* %7, align 4
  %1719 = load i32, i32* %5, align 4
  store i32 %1719, i32* %6, align 4
  %1720 = load i32, i32* %10, align 4
  store i32 %1720, i32* %5, align 4
  %1721 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1722 = load i32, i32* %1721, align 16
  %1723 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1724 = load i32, i32* %1723, align 4
  %1725 = xor i32 %1722, %1724
  %1726 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1727 = load i32, i32* %1726, align 4
  %1728 = xor i32 %1725, %1727
  %1729 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1730 = load i32, i32* %1729, align 4
  %1731 = xor i32 %1728, %1730
  %1732 = shl i32 %1731, 1
  %1733 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1734 = load i32, i32* %1733, align 16
  %1735 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %1736 = load i32, i32* %1735, align 4
  %1737 = xor i32 %1734, %1736
  %1738 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1739 = load i32, i32* %1738, align 4
  %1740 = xor i32 %1737, %1739
  %1741 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1742 = load i32, i32* %1741, align 4
  %1743 = xor i32 %1740, %1742
  %1744 = lshr i32 %1743, 31
  %1745 = or i32 %1732, %1744
  %1746 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  store i32 %1745, i32* %1746, align 4
  %1747 = load i32, i32* %5, align 4
  %1748 = shl i32 %1747, 5
  %1749 = load i32, i32* %5, align 4
  %1750 = lshr i32 %1749, 27
  %1751 = or i32 %1748, %1750
  %1752 = load i32, i32* %9, align 4
  %1753 = add i32 %1751, %1752
  %1754 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1755 = load i32, i32* %1754, align 4
  %1756 = add i32 %1753, %1755
  %1757 = load i32, i32* %6, align 4
  %1758 = load i32, i32* %7, align 4
  %1759 = xor i32 %1757, %1758
  %1760 = load i32, i32* %8, align 4
  %1761 = xor i32 %1759, %1760
  %1762 = add i32 %1756, %1761
  %1763 = add i32 %1762, 1859775393
  store i32 %1763, i32* %10, align 4
  %1764 = load i32, i32* %8, align 4
  store i32 %1764, i32* %9, align 4
  %1765 = load i32, i32* %7, align 4
  store i32 %1765, i32* %8, align 4
  %1766 = load i32, i32* %6, align 4
  %1767 = shl i32 %1766, 30
  %1768 = load i32, i32* %6, align 4
  %1769 = lshr i32 %1768, 2
  %1770 = or i32 %1767, %1769
  store i32 %1770, i32* %7, align 4
  %1771 = load i32, i32* %5, align 4
  store i32 %1771, i32* %6, align 4
  %1772 = load i32, i32* %10, align 4
  store i32 %1772, i32* %5, align 4
  %1773 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1774 = load i32, i32* %1773, align 4
  %1775 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1776 = load i32, i32* %1775, align 16
  %1777 = xor i32 %1774, %1776
  %1778 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1779 = load i32, i32* %1778, align 8
  %1780 = xor i32 %1777, %1779
  %1781 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1782 = load i32, i32* %1781, align 16
  %1783 = xor i32 %1780, %1782
  %1784 = shl i32 %1783, 1
  %1785 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %1786 = load i32, i32* %1785, align 4
  %1787 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %1788 = load i32, i32* %1787, align 16
  %1789 = xor i32 %1786, %1788
  %1790 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1791 = load i32, i32* %1790, align 8
  %1792 = xor i32 %1789, %1791
  %1793 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1794 = load i32, i32* %1793, align 16
  %1795 = xor i32 %1792, %1794
  %1796 = lshr i32 %1795, 31
  %1797 = or i32 %1784, %1796
  %1798 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  store i32 %1797, i32* %1798, align 16
  %1799 = load i32, i32* %5, align 4
  %1800 = shl i32 %1799, 5
  %1801 = load i32, i32* %5, align 4
  %1802 = lshr i32 %1801, 27
  %1803 = or i32 %1800, %1802
  %1804 = load i32, i32* %9, align 4
  %1805 = add i32 %1803, %1804
  %1806 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1807 = load i32, i32* %1806, align 16
  %1808 = add i32 %1805, %1807
  %1809 = load i32, i32* %6, align 4
  %1810 = load i32, i32* %7, align 4
  %1811 = xor i32 %1809, %1810
  %1812 = load i32, i32* %8, align 4
  %1813 = xor i32 %1811, %1812
  %1814 = add i32 %1808, %1813
  %1815 = add i32 %1814, 1859775393
  store i32 %1815, i32* %10, align 4
  %1816 = load i32, i32* %8, align 4
  store i32 %1816, i32* %9, align 4
  %1817 = load i32, i32* %7, align 4
  store i32 %1817, i32* %8, align 4
  %1818 = load i32, i32* %6, align 4
  %1819 = shl i32 %1818, 30
  %1820 = load i32, i32* %6, align 4
  %1821 = lshr i32 %1820, 2
  %1822 = or i32 %1819, %1821
  store i32 %1822, i32* %7, align 4
  %1823 = load i32, i32* %5, align 4
  store i32 %1823, i32* %6, align 4
  %1824 = load i32, i32* %10, align 4
  store i32 %1824, i32* %5, align 4
  %1825 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1826 = load i32, i32* %1825, align 8
  %1827 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1828 = load i32, i32* %1827, align 4
  %1829 = xor i32 %1826, %1828
  %1830 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1831 = load i32, i32* %1830, align 4
  %1832 = xor i32 %1829, %1831
  %1833 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1834 = load i32, i32* %1833, align 4
  %1835 = xor i32 %1832, %1834
  %1836 = shl i32 %1835, 1
  %1837 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %1838 = load i32, i32* %1837, align 8
  %1839 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %1840 = load i32, i32* %1839, align 4
  %1841 = xor i32 %1838, %1840
  %1842 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1843 = load i32, i32* %1842, align 4
  %1844 = xor i32 %1841, %1843
  %1845 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1846 = load i32, i32* %1845, align 4
  %1847 = xor i32 %1844, %1846
  %1848 = lshr i32 %1847, 31
  %1849 = or i32 %1836, %1848
  %1850 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  store i32 %1849, i32* %1850, align 4
  %1851 = load i32, i32* %5, align 4
  %1852 = shl i32 %1851, 5
  %1853 = load i32, i32* %5, align 4
  %1854 = lshr i32 %1853, 27
  %1855 = or i32 %1852, %1854
  %1856 = load i32, i32* %9, align 4
  %1857 = add i32 %1855, %1856
  %1858 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1859 = load i32, i32* %1858, align 4
  %1860 = add i32 %1857, %1859
  %1861 = load i32, i32* %6, align 4
  %1862 = load i32, i32* %7, align 4
  %1863 = xor i32 %1861, %1862
  %1864 = load i32, i32* %8, align 4
  %1865 = xor i32 %1863, %1864
  %1866 = add i32 %1860, %1865
  %1867 = add i32 %1866, 1859775393
  store i32 %1867, i32* %10, align 4
  %1868 = load i32, i32* %8, align 4
  store i32 %1868, i32* %9, align 4
  %1869 = load i32, i32* %7, align 4
  store i32 %1869, i32* %8, align 4
  %1870 = load i32, i32* %6, align 4
  %1871 = shl i32 %1870, 30
  %1872 = load i32, i32* %6, align 4
  %1873 = lshr i32 %1872, 2
  %1874 = or i32 %1871, %1873
  store i32 %1874, i32* %7, align 4
  %1875 = load i32, i32* %5, align 4
  store i32 %1875, i32* %6, align 4
  %1876 = load i32, i32* %10, align 4
  store i32 %1876, i32* %5, align 4
  %1877 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1878 = load i32, i32* %1877, align 4
  %1879 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1880 = load i32, i32* %1879, align 8
  %1881 = xor i32 %1878, %1880
  %1882 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1883 = load i32, i32* %1882, align 16
  %1884 = xor i32 %1881, %1883
  %1885 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1886 = load i32, i32* %1885, align 8
  %1887 = xor i32 %1884, %1886
  %1888 = shl i32 %1887, 1
  %1889 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %1890 = load i32, i32* %1889, align 4
  %1891 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %1892 = load i32, i32* %1891, align 8
  %1893 = xor i32 %1890, %1892
  %1894 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1895 = load i32, i32* %1894, align 16
  %1896 = xor i32 %1893, %1895
  %1897 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1898 = load i32, i32* %1897, align 8
  %1899 = xor i32 %1896, %1898
  %1900 = lshr i32 %1899, 31
  %1901 = or i32 %1888, %1900
  %1902 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  store i32 %1901, i32* %1902, align 8
  %1903 = load i32, i32* %5, align 4
  %1904 = shl i32 %1903, 5
  %1905 = load i32, i32* %5, align 4
  %1906 = lshr i32 %1905, 27
  %1907 = or i32 %1904, %1906
  %1908 = load i32, i32* %9, align 4
  %1909 = add i32 %1907, %1908
  %1910 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %1911 = load i32, i32* %1910, align 8
  %1912 = add i32 %1909, %1911
  %1913 = load i32, i32* %6, align 4
  %1914 = load i32, i32* %7, align 4
  %1915 = xor i32 %1913, %1914
  %1916 = load i32, i32* %8, align 4
  %1917 = xor i32 %1915, %1916
  %1918 = add i32 %1912, %1917
  %1919 = add i32 %1918, 1859775393
  store i32 %1919, i32* %10, align 4
  %1920 = load i32, i32* %8, align 4
  store i32 %1920, i32* %9, align 4
  %1921 = load i32, i32* %7, align 4
  store i32 %1921, i32* %8, align 4
  %1922 = load i32, i32* %6, align 4
  %1923 = shl i32 %1922, 30
  %1924 = load i32, i32* %6, align 4
  %1925 = lshr i32 %1924, 2
  %1926 = or i32 %1923, %1925
  store i32 %1926, i32* %7, align 4
  %1927 = load i32, i32* %5, align 4
  store i32 %1927, i32* %6, align 4
  %1928 = load i32, i32* %10, align 4
  store i32 %1928, i32* %5, align 4
  %1929 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1930 = load i32, i32* %1929, align 16
  %1931 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1932 = load i32, i32* %1931, align 4
  %1933 = xor i32 %1930, %1932
  %1934 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1935 = load i32, i32* %1934, align 4
  %1936 = xor i32 %1933, %1935
  %1937 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1938 = load i32, i32* %1937, align 4
  %1939 = xor i32 %1936, %1938
  %1940 = shl i32 %1939, 1
  %1941 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %1942 = load i32, i32* %1941, align 16
  %1943 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %1944 = load i32, i32* %1943, align 4
  %1945 = xor i32 %1942, %1944
  %1946 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %1947 = load i32, i32* %1946, align 4
  %1948 = xor i32 %1945, %1947
  %1949 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1950 = load i32, i32* %1949, align 4
  %1951 = xor i32 %1948, %1950
  %1952 = lshr i32 %1951, 31
  %1953 = or i32 %1940, %1952
  %1954 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  store i32 %1953, i32* %1954, align 4
  %1955 = load i32, i32* %5, align 4
  %1956 = shl i32 %1955, 5
  %1957 = load i32, i32* %5, align 4
  %1958 = lshr i32 %1957, 27
  %1959 = or i32 %1956, %1958
  %1960 = load i32, i32* %9, align 4
  %1961 = add i32 %1959, %1960
  %1962 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %1963 = load i32, i32* %1962, align 4
  %1964 = add i32 %1961, %1963
  %1965 = load i32, i32* %6, align 4
  %1966 = load i32, i32* %7, align 4
  %1967 = xor i32 %1965, %1966
  %1968 = load i32, i32* %8, align 4
  %1969 = xor i32 %1967, %1968
  %1970 = add i32 %1964, %1969
  %1971 = add i32 %1970, 1859775393
  store i32 %1971, i32* %10, align 4
  %1972 = load i32, i32* %8, align 4
  store i32 %1972, i32* %9, align 4
  %1973 = load i32, i32* %7, align 4
  store i32 %1973, i32* %8, align 4
  %1974 = load i32, i32* %6, align 4
  %1975 = shl i32 %1974, 30
  %1976 = load i32, i32* %6, align 4
  %1977 = lshr i32 %1976, 2
  %1978 = or i32 %1975, %1977
  store i32 %1978, i32* %7, align 4
  %1979 = load i32, i32* %5, align 4
  store i32 %1979, i32* %6, align 4
  %1980 = load i32, i32* %10, align 4
  store i32 %1980, i32* %5, align 4
  %1981 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1982 = load i32, i32* %1981, align 4
  %1983 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1984 = load i32, i32* %1983, align 16
  %1985 = xor i32 %1982, %1984
  %1986 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1987 = load i32, i32* %1986, align 8
  %1988 = xor i32 %1985, %1987
  %1989 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %1990 = load i32, i32* %1989, align 16
  %1991 = xor i32 %1988, %1990
  %1992 = shl i32 %1991, 1
  %1993 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %1994 = load i32, i32* %1993, align 4
  %1995 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %1996 = load i32, i32* %1995, align 16
  %1997 = xor i32 %1994, %1996
  %1998 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %1999 = load i32, i32* %1998, align 8
  %2000 = xor i32 %1997, %1999
  %2001 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2002 = load i32, i32* %2001, align 16
  %2003 = xor i32 %2000, %2002
  %2004 = lshr i32 %2003, 31
  %2005 = or i32 %1992, %2004
  %2006 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  store i32 %2005, i32* %2006, align 16
  %2007 = load i32, i32* %5, align 4
  %2008 = shl i32 %2007, 5
  %2009 = load i32, i32* %5, align 4
  %2010 = lshr i32 %2009, 27
  %2011 = or i32 %2008, %2010
  %2012 = load i32, i32* %9, align 4
  %2013 = add i32 %2011, %2012
  %2014 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2015 = load i32, i32* %2014, align 16
  %2016 = add i32 %2013, %2015
  %2017 = load i32, i32* %6, align 4
  %2018 = load i32, i32* %7, align 4
  %2019 = xor i32 %2017, %2018
  %2020 = load i32, i32* %8, align 4
  %2021 = xor i32 %2019, %2020
  %2022 = add i32 %2016, %2021
  %2023 = add i32 %2022, 1859775393
  store i32 %2023, i32* %10, align 4
  %2024 = load i32, i32* %8, align 4
  store i32 %2024, i32* %9, align 4
  %2025 = load i32, i32* %7, align 4
  store i32 %2025, i32* %8, align 4
  %2026 = load i32, i32* %6, align 4
  %2027 = shl i32 %2026, 30
  %2028 = load i32, i32* %6, align 4
  %2029 = lshr i32 %2028, 2
  %2030 = or i32 %2027, %2029
  store i32 %2030, i32* %7, align 4
  %2031 = load i32, i32* %5, align 4
  store i32 %2031, i32* %6, align 4
  %2032 = load i32, i32* %10, align 4
  store i32 %2032, i32* %5, align 4
  %2033 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2034 = load i32, i32* %2033, align 8
  %2035 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2036 = load i32, i32* %2035, align 4
  %2037 = xor i32 %2034, %2036
  %2038 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2039 = load i32, i32* %2038, align 4
  %2040 = xor i32 %2037, %2039
  %2041 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2042 = load i32, i32* %2041, align 4
  %2043 = xor i32 %2040, %2042
  %2044 = shl i32 %2043, 1
  %2045 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2046 = load i32, i32* %2045, align 8
  %2047 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2048 = load i32, i32* %2047, align 4
  %2049 = xor i32 %2046, %2048
  %2050 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2051 = load i32, i32* %2050, align 4
  %2052 = xor i32 %2049, %2051
  %2053 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2054 = load i32, i32* %2053, align 4
  %2055 = xor i32 %2052, %2054
  %2056 = lshr i32 %2055, 31
  %2057 = or i32 %2044, %2056
  %2058 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  store i32 %2057, i32* %2058, align 4
  %2059 = load i32, i32* %5, align 4
  %2060 = shl i32 %2059, 5
  %2061 = load i32, i32* %5, align 4
  %2062 = lshr i32 %2061, 27
  %2063 = or i32 %2060, %2062
  %2064 = load i32, i32* %9, align 4
  %2065 = add i32 %2063, %2064
  %2066 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2067 = load i32, i32* %2066, align 4
  %2068 = add i32 %2065, %2067
  %2069 = load i32, i32* %6, align 4
  %2070 = load i32, i32* %7, align 4
  %2071 = xor i32 %2069, %2070
  %2072 = load i32, i32* %8, align 4
  %2073 = xor i32 %2071, %2072
  %2074 = add i32 %2068, %2073
  %2075 = add i32 %2074, 1859775393
  store i32 %2075, i32* %10, align 4
  %2076 = load i32, i32* %8, align 4
  store i32 %2076, i32* %9, align 4
  %2077 = load i32, i32* %7, align 4
  store i32 %2077, i32* %8, align 4
  %2078 = load i32, i32* %6, align 4
  %2079 = shl i32 %2078, 30
  %2080 = load i32, i32* %6, align 4
  %2081 = lshr i32 %2080, 2
  %2082 = or i32 %2079, %2081
  store i32 %2082, i32* %7, align 4
  %2083 = load i32, i32* %5, align 4
  store i32 %2083, i32* %6, align 4
  %2084 = load i32, i32* %10, align 4
  store i32 %2084, i32* %5, align 4
  %2085 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2086 = load i32, i32* %2085, align 4
  %2087 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2088 = load i32, i32* %2087, align 8
  %2089 = xor i32 %2086, %2088
  %2090 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2091 = load i32, i32* %2090, align 16
  %2092 = xor i32 %2089, %2091
  %2093 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2094 = load i32, i32* %2093, align 8
  %2095 = xor i32 %2092, %2094
  %2096 = shl i32 %2095, 1
  %2097 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2098 = load i32, i32* %2097, align 4
  %2099 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2100 = load i32, i32* %2099, align 8
  %2101 = xor i32 %2098, %2100
  %2102 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2103 = load i32, i32* %2102, align 16
  %2104 = xor i32 %2101, %2103
  %2105 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2106 = load i32, i32* %2105, align 8
  %2107 = xor i32 %2104, %2106
  %2108 = lshr i32 %2107, 31
  %2109 = or i32 %2096, %2108
  %2110 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  store i32 %2109, i32* %2110, align 8
  %2111 = load i32, i32* %5, align 4
  %2112 = shl i32 %2111, 5
  %2113 = load i32, i32* %5, align 4
  %2114 = lshr i32 %2113, 27
  %2115 = or i32 %2112, %2114
  %2116 = load i32, i32* %9, align 4
  %2117 = add i32 %2115, %2116
  %2118 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2119 = load i32, i32* %2118, align 8
  %2120 = add i32 %2117, %2119
  %2121 = load i32, i32* %6, align 4
  %2122 = load i32, i32* %7, align 4
  %2123 = xor i32 %2121, %2122
  %2124 = load i32, i32* %8, align 4
  %2125 = xor i32 %2123, %2124
  %2126 = add i32 %2120, %2125
  %2127 = add i32 %2126, 1859775393
  store i32 %2127, i32* %10, align 4
  %2128 = load i32, i32* %8, align 4
  store i32 %2128, i32* %9, align 4
  %2129 = load i32, i32* %7, align 4
  store i32 %2129, i32* %8, align 4
  %2130 = load i32, i32* %6, align 4
  %2131 = shl i32 %2130, 30
  %2132 = load i32, i32* %6, align 4
  %2133 = lshr i32 %2132, 2
  %2134 = or i32 %2131, %2133
  store i32 %2134, i32* %7, align 4
  %2135 = load i32, i32* %5, align 4
  store i32 %2135, i32* %6, align 4
  %2136 = load i32, i32* %10, align 4
  store i32 %2136, i32* %5, align 4
  %2137 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2138 = load i32, i32* %2137, align 16
  %2139 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2140 = load i32, i32* %2139, align 4
  %2141 = xor i32 %2138, %2140
  %2142 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2143 = load i32, i32* %2142, align 4
  %2144 = xor i32 %2141, %2143
  %2145 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2146 = load i32, i32* %2145, align 4
  %2147 = xor i32 %2144, %2146
  %2148 = shl i32 %2147, 1
  %2149 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2150 = load i32, i32* %2149, align 16
  %2151 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2152 = load i32, i32* %2151, align 4
  %2153 = xor i32 %2150, %2152
  %2154 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2155 = load i32, i32* %2154, align 4
  %2156 = xor i32 %2153, %2155
  %2157 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2158 = load i32, i32* %2157, align 4
  %2159 = xor i32 %2156, %2158
  %2160 = lshr i32 %2159, 31
  %2161 = or i32 %2148, %2160
  %2162 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  store i32 %2161, i32* %2162, align 4
  %2163 = load i32, i32* %5, align 4
  %2164 = shl i32 %2163, 5
  %2165 = load i32, i32* %5, align 4
  %2166 = lshr i32 %2165, 27
  %2167 = or i32 %2164, %2166
  %2168 = load i32, i32* %9, align 4
  %2169 = add i32 %2167, %2168
  %2170 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2171 = load i32, i32* %2170, align 4
  %2172 = add i32 %2169, %2171
  %2173 = load i32, i32* %6, align 4
  %2174 = load i32, i32* %7, align 4
  %2175 = xor i32 %2173, %2174
  %2176 = load i32, i32* %8, align 4
  %2177 = xor i32 %2175, %2176
  %2178 = add i32 %2172, %2177
  %2179 = add i32 %2178, 1859775393
  store i32 %2179, i32* %10, align 4
  %2180 = load i32, i32* %8, align 4
  store i32 %2180, i32* %9, align 4
  %2181 = load i32, i32* %7, align 4
  store i32 %2181, i32* %8, align 4
  %2182 = load i32, i32* %6, align 4
  %2183 = shl i32 %2182, 30
  %2184 = load i32, i32* %6, align 4
  %2185 = lshr i32 %2184, 2
  %2186 = or i32 %2183, %2185
  store i32 %2186, i32* %7, align 4
  %2187 = load i32, i32* %5, align 4
  store i32 %2187, i32* %6, align 4
  %2188 = load i32, i32* %10, align 4
  store i32 %2188, i32* %5, align 4
  %2189 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2190 = load i32, i32* %2189, align 4
  %2191 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2192 = load i32, i32* %2191, align 16
  %2193 = xor i32 %2190, %2192
  %2194 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2195 = load i32, i32* %2194, align 8
  %2196 = xor i32 %2193, %2195
  %2197 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2198 = load i32, i32* %2197, align 16
  %2199 = xor i32 %2196, %2198
  %2200 = shl i32 %2199, 1
  %2201 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2202 = load i32, i32* %2201, align 4
  %2203 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2204 = load i32, i32* %2203, align 16
  %2205 = xor i32 %2202, %2204
  %2206 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2207 = load i32, i32* %2206, align 8
  %2208 = xor i32 %2205, %2207
  %2209 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2210 = load i32, i32* %2209, align 16
  %2211 = xor i32 %2208, %2210
  %2212 = lshr i32 %2211, 31
  %2213 = or i32 %2200, %2212
  %2214 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  store i32 %2213, i32* %2214, align 16
  %2215 = load i32, i32* %5, align 4
  %2216 = shl i32 %2215, 5
  %2217 = load i32, i32* %5, align 4
  %2218 = lshr i32 %2217, 27
  %2219 = or i32 %2216, %2218
  %2220 = load i32, i32* %9, align 4
  %2221 = add i32 %2219, %2220
  %2222 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2223 = load i32, i32* %2222, align 16
  %2224 = add i32 %2221, %2223
  %2225 = load i32, i32* %6, align 4
  %2226 = load i32, i32* %7, align 4
  %2227 = load i32, i32* %8, align 4
  %2228 = or i32 %2226, %2227
  %2229 = and i32 %2225, %2228
  %2230 = load i32, i32* %7, align 4
  %2231 = load i32, i32* %8, align 4
  %2232 = and i32 %2230, %2231
  %2233 = or i32 %2229, %2232
  %2234 = add i32 %2224, %2233
  %2235 = add i32 %2234, -1894007588
  store i32 %2235, i32* %10, align 4
  %2236 = load i32, i32* %8, align 4
  store i32 %2236, i32* %9, align 4
  %2237 = load i32, i32* %7, align 4
  store i32 %2237, i32* %8, align 4
  %2238 = load i32, i32* %6, align 4
  %2239 = shl i32 %2238, 30
  %2240 = load i32, i32* %6, align 4
  %2241 = lshr i32 %2240, 2
  %2242 = or i32 %2239, %2241
  store i32 %2242, i32* %7, align 4
  %2243 = load i32, i32* %5, align 4
  store i32 %2243, i32* %6, align 4
  %2244 = load i32, i32* %10, align 4
  store i32 %2244, i32* %5, align 4
  %2245 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2246 = load i32, i32* %2245, align 8
  %2247 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2248 = load i32, i32* %2247, align 4
  %2249 = xor i32 %2246, %2248
  %2250 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2251 = load i32, i32* %2250, align 4
  %2252 = xor i32 %2249, %2251
  %2253 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2254 = load i32, i32* %2253, align 4
  %2255 = xor i32 %2252, %2254
  %2256 = shl i32 %2255, 1
  %2257 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2258 = load i32, i32* %2257, align 8
  %2259 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2260 = load i32, i32* %2259, align 4
  %2261 = xor i32 %2258, %2260
  %2262 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2263 = load i32, i32* %2262, align 4
  %2264 = xor i32 %2261, %2263
  %2265 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2266 = load i32, i32* %2265, align 4
  %2267 = xor i32 %2264, %2266
  %2268 = lshr i32 %2267, 31
  %2269 = or i32 %2256, %2268
  %2270 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  store i32 %2269, i32* %2270, align 4
  %2271 = load i32, i32* %5, align 4
  %2272 = shl i32 %2271, 5
  %2273 = load i32, i32* %5, align 4
  %2274 = lshr i32 %2273, 27
  %2275 = or i32 %2272, %2274
  %2276 = load i32, i32* %9, align 4
  %2277 = add i32 %2275, %2276
  %2278 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2279 = load i32, i32* %2278, align 4
  %2280 = add i32 %2277, %2279
  %2281 = load i32, i32* %6, align 4
  %2282 = load i32, i32* %7, align 4
  %2283 = load i32, i32* %8, align 4
  %2284 = or i32 %2282, %2283
  %2285 = and i32 %2281, %2284
  %2286 = load i32, i32* %7, align 4
  %2287 = load i32, i32* %8, align 4
  %2288 = and i32 %2286, %2287
  %2289 = or i32 %2285, %2288
  %2290 = add i32 %2280, %2289
  %2291 = add i32 %2290, -1894007588
  store i32 %2291, i32* %10, align 4
  %2292 = load i32, i32* %8, align 4
  store i32 %2292, i32* %9, align 4
  %2293 = load i32, i32* %7, align 4
  store i32 %2293, i32* %8, align 4
  %2294 = load i32, i32* %6, align 4
  %2295 = shl i32 %2294, 30
  %2296 = load i32, i32* %6, align 4
  %2297 = lshr i32 %2296, 2
  %2298 = or i32 %2295, %2297
  store i32 %2298, i32* %7, align 4
  %2299 = load i32, i32* %5, align 4
  store i32 %2299, i32* %6, align 4
  %2300 = load i32, i32* %10, align 4
  store i32 %2300, i32* %5, align 4
  %2301 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2302 = load i32, i32* %2301, align 4
  %2303 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2304 = load i32, i32* %2303, align 8
  %2305 = xor i32 %2302, %2304
  %2306 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2307 = load i32, i32* %2306, align 16
  %2308 = xor i32 %2305, %2307
  %2309 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2310 = load i32, i32* %2309, align 8
  %2311 = xor i32 %2308, %2310
  %2312 = shl i32 %2311, 1
  %2313 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2314 = load i32, i32* %2313, align 4
  %2315 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2316 = load i32, i32* %2315, align 8
  %2317 = xor i32 %2314, %2316
  %2318 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2319 = load i32, i32* %2318, align 16
  %2320 = xor i32 %2317, %2319
  %2321 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2322 = load i32, i32* %2321, align 8
  %2323 = xor i32 %2320, %2322
  %2324 = lshr i32 %2323, 31
  %2325 = or i32 %2312, %2324
  %2326 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  store i32 %2325, i32* %2326, align 8
  %2327 = load i32, i32* %5, align 4
  %2328 = shl i32 %2327, 5
  %2329 = load i32, i32* %5, align 4
  %2330 = lshr i32 %2329, 27
  %2331 = or i32 %2328, %2330
  %2332 = load i32, i32* %9, align 4
  %2333 = add i32 %2331, %2332
  %2334 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2335 = load i32, i32* %2334, align 8
  %2336 = add i32 %2333, %2335
  %2337 = load i32, i32* %6, align 4
  %2338 = load i32, i32* %7, align 4
  %2339 = load i32, i32* %8, align 4
  %2340 = or i32 %2338, %2339
  %2341 = and i32 %2337, %2340
  %2342 = load i32, i32* %7, align 4
  %2343 = load i32, i32* %8, align 4
  %2344 = and i32 %2342, %2343
  %2345 = or i32 %2341, %2344
  %2346 = add i32 %2336, %2345
  %2347 = add i32 %2346, -1894007588
  store i32 %2347, i32* %10, align 4
  %2348 = load i32, i32* %8, align 4
  store i32 %2348, i32* %9, align 4
  %2349 = load i32, i32* %7, align 4
  store i32 %2349, i32* %8, align 4
  %2350 = load i32, i32* %6, align 4
  %2351 = shl i32 %2350, 30
  %2352 = load i32, i32* %6, align 4
  %2353 = lshr i32 %2352, 2
  %2354 = or i32 %2351, %2353
  store i32 %2354, i32* %7, align 4
  %2355 = load i32, i32* %5, align 4
  store i32 %2355, i32* %6, align 4
  %2356 = load i32, i32* %10, align 4
  store i32 %2356, i32* %5, align 4
  %2357 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2358 = load i32, i32* %2357, align 16
  %2359 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2360 = load i32, i32* %2359, align 4
  %2361 = xor i32 %2358, %2360
  %2362 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2363 = load i32, i32* %2362, align 4
  %2364 = xor i32 %2361, %2363
  %2365 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2366 = load i32, i32* %2365, align 4
  %2367 = xor i32 %2364, %2366
  %2368 = shl i32 %2367, 1
  %2369 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2370 = load i32, i32* %2369, align 16
  %2371 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2372 = load i32, i32* %2371, align 4
  %2373 = xor i32 %2370, %2372
  %2374 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2375 = load i32, i32* %2374, align 4
  %2376 = xor i32 %2373, %2375
  %2377 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2378 = load i32, i32* %2377, align 4
  %2379 = xor i32 %2376, %2378
  %2380 = lshr i32 %2379, 31
  %2381 = or i32 %2368, %2380
  %2382 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  store i32 %2381, i32* %2382, align 4
  %2383 = load i32, i32* %5, align 4
  %2384 = shl i32 %2383, 5
  %2385 = load i32, i32* %5, align 4
  %2386 = lshr i32 %2385, 27
  %2387 = or i32 %2384, %2386
  %2388 = load i32, i32* %9, align 4
  %2389 = add i32 %2387, %2388
  %2390 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2391 = load i32, i32* %2390, align 4
  %2392 = add i32 %2389, %2391
  %2393 = load i32, i32* %6, align 4
  %2394 = load i32, i32* %7, align 4
  %2395 = load i32, i32* %8, align 4
  %2396 = or i32 %2394, %2395
  %2397 = and i32 %2393, %2396
  %2398 = load i32, i32* %7, align 4
  %2399 = load i32, i32* %8, align 4
  %2400 = and i32 %2398, %2399
  %2401 = or i32 %2397, %2400
  %2402 = add i32 %2392, %2401
  %2403 = add i32 %2402, -1894007588
  store i32 %2403, i32* %10, align 4
  %2404 = load i32, i32* %8, align 4
  store i32 %2404, i32* %9, align 4
  %2405 = load i32, i32* %7, align 4
  store i32 %2405, i32* %8, align 4
  %2406 = load i32, i32* %6, align 4
  %2407 = shl i32 %2406, 30
  %2408 = load i32, i32* %6, align 4
  %2409 = lshr i32 %2408, 2
  %2410 = or i32 %2407, %2409
  store i32 %2410, i32* %7, align 4
  %2411 = load i32, i32* %5, align 4
  store i32 %2411, i32* %6, align 4
  %2412 = load i32, i32* %10, align 4
  store i32 %2412, i32* %5, align 4
  %2413 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2414 = load i32, i32* %2413, align 4
  %2415 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2416 = load i32, i32* %2415, align 16
  %2417 = xor i32 %2414, %2416
  %2418 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2419 = load i32, i32* %2418, align 8
  %2420 = xor i32 %2417, %2419
  %2421 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2422 = load i32, i32* %2421, align 16
  %2423 = xor i32 %2420, %2422
  %2424 = shl i32 %2423, 1
  %2425 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2426 = load i32, i32* %2425, align 4
  %2427 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2428 = load i32, i32* %2427, align 16
  %2429 = xor i32 %2426, %2428
  %2430 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2431 = load i32, i32* %2430, align 8
  %2432 = xor i32 %2429, %2431
  %2433 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2434 = load i32, i32* %2433, align 16
  %2435 = xor i32 %2432, %2434
  %2436 = lshr i32 %2435, 31
  %2437 = or i32 %2424, %2436
  %2438 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  store i32 %2437, i32* %2438, align 16
  %2439 = load i32, i32* %5, align 4
  %2440 = shl i32 %2439, 5
  %2441 = load i32, i32* %5, align 4
  %2442 = lshr i32 %2441, 27
  %2443 = or i32 %2440, %2442
  %2444 = load i32, i32* %9, align 4
  %2445 = add i32 %2443, %2444
  %2446 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2447 = load i32, i32* %2446, align 16
  %2448 = add i32 %2445, %2447
  %2449 = load i32, i32* %6, align 4
  %2450 = load i32, i32* %7, align 4
  %2451 = load i32, i32* %8, align 4
  %2452 = or i32 %2450, %2451
  %2453 = and i32 %2449, %2452
  %2454 = load i32, i32* %7, align 4
  %2455 = load i32, i32* %8, align 4
  %2456 = and i32 %2454, %2455
  %2457 = or i32 %2453, %2456
  %2458 = add i32 %2448, %2457
  %2459 = add i32 %2458, -1894007588
  store i32 %2459, i32* %10, align 4
  %2460 = load i32, i32* %8, align 4
  store i32 %2460, i32* %9, align 4
  %2461 = load i32, i32* %7, align 4
  store i32 %2461, i32* %8, align 4
  %2462 = load i32, i32* %6, align 4
  %2463 = shl i32 %2462, 30
  %2464 = load i32, i32* %6, align 4
  %2465 = lshr i32 %2464, 2
  %2466 = or i32 %2463, %2465
  store i32 %2466, i32* %7, align 4
  %2467 = load i32, i32* %5, align 4
  store i32 %2467, i32* %6, align 4
  %2468 = load i32, i32* %10, align 4
  store i32 %2468, i32* %5, align 4
  %2469 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2470 = load i32, i32* %2469, align 8
  %2471 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2472 = load i32, i32* %2471, align 4
  %2473 = xor i32 %2470, %2472
  %2474 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2475 = load i32, i32* %2474, align 4
  %2476 = xor i32 %2473, %2475
  %2477 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2478 = load i32, i32* %2477, align 4
  %2479 = xor i32 %2476, %2478
  %2480 = shl i32 %2479, 1
  %2481 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2482 = load i32, i32* %2481, align 8
  %2483 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2484 = load i32, i32* %2483, align 4
  %2485 = xor i32 %2482, %2484
  %2486 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2487 = load i32, i32* %2486, align 4
  %2488 = xor i32 %2485, %2487
  %2489 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2490 = load i32, i32* %2489, align 4
  %2491 = xor i32 %2488, %2490
  %2492 = lshr i32 %2491, 31
  %2493 = or i32 %2480, %2492
  %2494 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  store i32 %2493, i32* %2494, align 4
  %2495 = load i32, i32* %5, align 4
  %2496 = shl i32 %2495, 5
  %2497 = load i32, i32* %5, align 4
  %2498 = lshr i32 %2497, 27
  %2499 = or i32 %2496, %2498
  %2500 = load i32, i32* %9, align 4
  %2501 = add i32 %2499, %2500
  %2502 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2503 = load i32, i32* %2502, align 4
  %2504 = add i32 %2501, %2503
  %2505 = load i32, i32* %6, align 4
  %2506 = load i32, i32* %7, align 4
  %2507 = load i32, i32* %8, align 4
  %2508 = or i32 %2506, %2507
  %2509 = and i32 %2505, %2508
  %2510 = load i32, i32* %7, align 4
  %2511 = load i32, i32* %8, align 4
  %2512 = and i32 %2510, %2511
  %2513 = or i32 %2509, %2512
  %2514 = add i32 %2504, %2513
  %2515 = add i32 %2514, -1894007588
  store i32 %2515, i32* %10, align 4
  %2516 = load i32, i32* %8, align 4
  store i32 %2516, i32* %9, align 4
  %2517 = load i32, i32* %7, align 4
  store i32 %2517, i32* %8, align 4
  %2518 = load i32, i32* %6, align 4
  %2519 = shl i32 %2518, 30
  %2520 = load i32, i32* %6, align 4
  %2521 = lshr i32 %2520, 2
  %2522 = or i32 %2519, %2521
  store i32 %2522, i32* %7, align 4
  %2523 = load i32, i32* %5, align 4
  store i32 %2523, i32* %6, align 4
  %2524 = load i32, i32* %10, align 4
  store i32 %2524, i32* %5, align 4
  %2525 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2526 = load i32, i32* %2525, align 4
  %2527 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2528 = load i32, i32* %2527, align 8
  %2529 = xor i32 %2526, %2528
  %2530 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2531 = load i32, i32* %2530, align 16
  %2532 = xor i32 %2529, %2531
  %2533 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2534 = load i32, i32* %2533, align 8
  %2535 = xor i32 %2532, %2534
  %2536 = shl i32 %2535, 1
  %2537 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2538 = load i32, i32* %2537, align 4
  %2539 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2540 = load i32, i32* %2539, align 8
  %2541 = xor i32 %2538, %2540
  %2542 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2543 = load i32, i32* %2542, align 16
  %2544 = xor i32 %2541, %2543
  %2545 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2546 = load i32, i32* %2545, align 8
  %2547 = xor i32 %2544, %2546
  %2548 = lshr i32 %2547, 31
  %2549 = or i32 %2536, %2548
  %2550 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  store i32 %2549, i32* %2550, align 8
  %2551 = load i32, i32* %5, align 4
  %2552 = shl i32 %2551, 5
  %2553 = load i32, i32* %5, align 4
  %2554 = lshr i32 %2553, 27
  %2555 = or i32 %2552, %2554
  %2556 = load i32, i32* %9, align 4
  %2557 = add i32 %2555, %2556
  %2558 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2559 = load i32, i32* %2558, align 8
  %2560 = add i32 %2557, %2559
  %2561 = load i32, i32* %6, align 4
  %2562 = load i32, i32* %7, align 4
  %2563 = load i32, i32* %8, align 4
  %2564 = or i32 %2562, %2563
  %2565 = and i32 %2561, %2564
  %2566 = load i32, i32* %7, align 4
  %2567 = load i32, i32* %8, align 4
  %2568 = and i32 %2566, %2567
  %2569 = or i32 %2565, %2568
  %2570 = add i32 %2560, %2569
  %2571 = add i32 %2570, -1894007588
  store i32 %2571, i32* %10, align 4
  %2572 = load i32, i32* %8, align 4
  store i32 %2572, i32* %9, align 4
  %2573 = load i32, i32* %7, align 4
  store i32 %2573, i32* %8, align 4
  %2574 = load i32, i32* %6, align 4
  %2575 = shl i32 %2574, 30
  %2576 = load i32, i32* %6, align 4
  %2577 = lshr i32 %2576, 2
  %2578 = or i32 %2575, %2577
  store i32 %2578, i32* %7, align 4
  %2579 = load i32, i32* %5, align 4
  store i32 %2579, i32* %6, align 4
  %2580 = load i32, i32* %10, align 4
  store i32 %2580, i32* %5, align 4
  %2581 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2582 = load i32, i32* %2581, align 16
  %2583 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2584 = load i32, i32* %2583, align 4
  %2585 = xor i32 %2582, %2584
  %2586 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2587 = load i32, i32* %2586, align 4
  %2588 = xor i32 %2585, %2587
  %2589 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2590 = load i32, i32* %2589, align 4
  %2591 = xor i32 %2588, %2590
  %2592 = shl i32 %2591, 1
  %2593 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2594 = load i32, i32* %2593, align 16
  %2595 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2596 = load i32, i32* %2595, align 4
  %2597 = xor i32 %2594, %2596
  %2598 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2599 = load i32, i32* %2598, align 4
  %2600 = xor i32 %2597, %2599
  %2601 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2602 = load i32, i32* %2601, align 4
  %2603 = xor i32 %2600, %2602
  %2604 = lshr i32 %2603, 31
  %2605 = or i32 %2592, %2604
  %2606 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  store i32 %2605, i32* %2606, align 4
  %2607 = load i32, i32* %5, align 4
  %2608 = shl i32 %2607, 5
  %2609 = load i32, i32* %5, align 4
  %2610 = lshr i32 %2609, 27
  %2611 = or i32 %2608, %2610
  %2612 = load i32, i32* %9, align 4
  %2613 = add i32 %2611, %2612
  %2614 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2615 = load i32, i32* %2614, align 4
  %2616 = add i32 %2613, %2615
  %2617 = load i32, i32* %6, align 4
  %2618 = load i32, i32* %7, align 4
  %2619 = load i32, i32* %8, align 4
  %2620 = or i32 %2618, %2619
  %2621 = and i32 %2617, %2620
  %2622 = load i32, i32* %7, align 4
  %2623 = load i32, i32* %8, align 4
  %2624 = and i32 %2622, %2623
  %2625 = or i32 %2621, %2624
  %2626 = add i32 %2616, %2625
  %2627 = add i32 %2626, -1894007588
  store i32 %2627, i32* %10, align 4
  %2628 = load i32, i32* %8, align 4
  store i32 %2628, i32* %9, align 4
  %2629 = load i32, i32* %7, align 4
  store i32 %2629, i32* %8, align 4
  %2630 = load i32, i32* %6, align 4
  %2631 = shl i32 %2630, 30
  %2632 = load i32, i32* %6, align 4
  %2633 = lshr i32 %2632, 2
  %2634 = or i32 %2631, %2633
  store i32 %2634, i32* %7, align 4
  %2635 = load i32, i32* %5, align 4
  store i32 %2635, i32* %6, align 4
  %2636 = load i32, i32* %10, align 4
  store i32 %2636, i32* %5, align 4
  %2637 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2638 = load i32, i32* %2637, align 4
  %2639 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2640 = load i32, i32* %2639, align 16
  %2641 = xor i32 %2638, %2640
  %2642 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2643 = load i32, i32* %2642, align 8
  %2644 = xor i32 %2641, %2643
  %2645 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2646 = load i32, i32* %2645, align 16
  %2647 = xor i32 %2644, %2646
  %2648 = shl i32 %2647, 1
  %2649 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2650 = load i32, i32* %2649, align 4
  %2651 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2652 = load i32, i32* %2651, align 16
  %2653 = xor i32 %2650, %2652
  %2654 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2655 = load i32, i32* %2654, align 8
  %2656 = xor i32 %2653, %2655
  %2657 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2658 = load i32, i32* %2657, align 16
  %2659 = xor i32 %2656, %2658
  %2660 = lshr i32 %2659, 31
  %2661 = or i32 %2648, %2660
  %2662 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  store i32 %2661, i32* %2662, align 16
  %2663 = load i32, i32* %5, align 4
  %2664 = shl i32 %2663, 5
  %2665 = load i32, i32* %5, align 4
  %2666 = lshr i32 %2665, 27
  %2667 = or i32 %2664, %2666
  %2668 = load i32, i32* %9, align 4
  %2669 = add i32 %2667, %2668
  %2670 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2671 = load i32, i32* %2670, align 16
  %2672 = add i32 %2669, %2671
  %2673 = load i32, i32* %6, align 4
  %2674 = load i32, i32* %7, align 4
  %2675 = load i32, i32* %8, align 4
  %2676 = or i32 %2674, %2675
  %2677 = and i32 %2673, %2676
  %2678 = load i32, i32* %7, align 4
  %2679 = load i32, i32* %8, align 4
  %2680 = and i32 %2678, %2679
  %2681 = or i32 %2677, %2680
  %2682 = add i32 %2672, %2681
  %2683 = add i32 %2682, -1894007588
  store i32 %2683, i32* %10, align 4
  %2684 = load i32, i32* %8, align 4
  store i32 %2684, i32* %9, align 4
  %2685 = load i32, i32* %7, align 4
  store i32 %2685, i32* %8, align 4
  %2686 = load i32, i32* %6, align 4
  %2687 = shl i32 %2686, 30
  %2688 = load i32, i32* %6, align 4
  %2689 = lshr i32 %2688, 2
  %2690 = or i32 %2687, %2689
  store i32 %2690, i32* %7, align 4
  %2691 = load i32, i32* %5, align 4
  store i32 %2691, i32* %6, align 4
  %2692 = load i32, i32* %10, align 4
  store i32 %2692, i32* %5, align 4
  %2693 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2694 = load i32, i32* %2693, align 8
  %2695 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2696 = load i32, i32* %2695, align 4
  %2697 = xor i32 %2694, %2696
  %2698 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2699 = load i32, i32* %2698, align 4
  %2700 = xor i32 %2697, %2699
  %2701 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2702 = load i32, i32* %2701, align 4
  %2703 = xor i32 %2700, %2702
  %2704 = shl i32 %2703, 1
  %2705 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2706 = load i32, i32* %2705, align 8
  %2707 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %2708 = load i32, i32* %2707, align 4
  %2709 = xor i32 %2706, %2708
  %2710 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2711 = load i32, i32* %2710, align 4
  %2712 = xor i32 %2709, %2711
  %2713 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2714 = load i32, i32* %2713, align 4
  %2715 = xor i32 %2712, %2714
  %2716 = lshr i32 %2715, 31
  %2717 = or i32 %2704, %2716
  %2718 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  store i32 %2717, i32* %2718, align 4
  %2719 = load i32, i32* %5, align 4
  %2720 = shl i32 %2719, 5
  %2721 = load i32, i32* %5, align 4
  %2722 = lshr i32 %2721, 27
  %2723 = or i32 %2720, %2722
  %2724 = load i32, i32* %9, align 4
  %2725 = add i32 %2723, %2724
  %2726 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2727 = load i32, i32* %2726, align 4
  %2728 = add i32 %2725, %2727
  %2729 = load i32, i32* %6, align 4
  %2730 = load i32, i32* %7, align 4
  %2731 = load i32, i32* %8, align 4
  %2732 = or i32 %2730, %2731
  %2733 = and i32 %2729, %2732
  %2734 = load i32, i32* %7, align 4
  %2735 = load i32, i32* %8, align 4
  %2736 = and i32 %2734, %2735
  %2737 = or i32 %2733, %2736
  %2738 = add i32 %2728, %2737
  %2739 = add i32 %2738, -1894007588
  store i32 %2739, i32* %10, align 4
  %2740 = load i32, i32* %8, align 4
  store i32 %2740, i32* %9, align 4
  %2741 = load i32, i32* %7, align 4
  store i32 %2741, i32* %8, align 4
  %2742 = load i32, i32* %6, align 4
  %2743 = shl i32 %2742, 30
  %2744 = load i32, i32* %6, align 4
  %2745 = lshr i32 %2744, 2
  %2746 = or i32 %2743, %2745
  store i32 %2746, i32* %7, align 4
  %2747 = load i32, i32* %5, align 4
  store i32 %2747, i32* %6, align 4
  %2748 = load i32, i32* %10, align 4
  store i32 %2748, i32* %5, align 4
  %2749 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2750 = load i32, i32* %2749, align 4
  %2751 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2752 = load i32, i32* %2751, align 8
  %2753 = xor i32 %2750, %2752
  %2754 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2755 = load i32, i32* %2754, align 16
  %2756 = xor i32 %2753, %2755
  %2757 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2758 = load i32, i32* %2757, align 8
  %2759 = xor i32 %2756, %2758
  %2760 = shl i32 %2759, 1
  %2761 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %2762 = load i32, i32* %2761, align 4
  %2763 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %2764 = load i32, i32* %2763, align 8
  %2765 = xor i32 %2762, %2764
  %2766 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2767 = load i32, i32* %2766, align 16
  %2768 = xor i32 %2765, %2767
  %2769 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2770 = load i32, i32* %2769, align 8
  %2771 = xor i32 %2768, %2770
  %2772 = lshr i32 %2771, 31
  %2773 = or i32 %2760, %2772
  %2774 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  store i32 %2773, i32* %2774, align 8
  %2775 = load i32, i32* %5, align 4
  %2776 = shl i32 %2775, 5
  %2777 = load i32, i32* %5, align 4
  %2778 = lshr i32 %2777, 27
  %2779 = or i32 %2776, %2778
  %2780 = load i32, i32* %9, align 4
  %2781 = add i32 %2779, %2780
  %2782 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2783 = load i32, i32* %2782, align 8
  %2784 = add i32 %2781, %2783
  %2785 = load i32, i32* %6, align 4
  %2786 = load i32, i32* %7, align 4
  %2787 = load i32, i32* %8, align 4
  %2788 = or i32 %2786, %2787
  %2789 = and i32 %2785, %2788
  %2790 = load i32, i32* %7, align 4
  %2791 = load i32, i32* %8, align 4
  %2792 = and i32 %2790, %2791
  %2793 = or i32 %2789, %2792
  %2794 = add i32 %2784, %2793
  %2795 = add i32 %2794, -1894007588
  store i32 %2795, i32* %10, align 4
  %2796 = load i32, i32* %8, align 4
  store i32 %2796, i32* %9, align 4
  %2797 = load i32, i32* %7, align 4
  store i32 %2797, i32* %8, align 4
  %2798 = load i32, i32* %6, align 4
  %2799 = shl i32 %2798, 30
  %2800 = load i32, i32* %6, align 4
  %2801 = lshr i32 %2800, 2
  %2802 = or i32 %2799, %2801
  store i32 %2802, i32* %7, align 4
  %2803 = load i32, i32* %5, align 4
  store i32 %2803, i32* %6, align 4
  %2804 = load i32, i32* %10, align 4
  store i32 %2804, i32* %5, align 4
  %2805 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2806 = load i32, i32* %2805, align 16
  %2807 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2808 = load i32, i32* %2807, align 4
  %2809 = xor i32 %2806, %2808
  %2810 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2811 = load i32, i32* %2810, align 4
  %2812 = xor i32 %2809, %2811
  %2813 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2814 = load i32, i32* %2813, align 4
  %2815 = xor i32 %2812, %2814
  %2816 = shl i32 %2815, 1
  %2817 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %2818 = load i32, i32* %2817, align 16
  %2819 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %2820 = load i32, i32* %2819, align 4
  %2821 = xor i32 %2818, %2820
  %2822 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2823 = load i32, i32* %2822, align 4
  %2824 = xor i32 %2821, %2823
  %2825 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2826 = load i32, i32* %2825, align 4
  %2827 = xor i32 %2824, %2826
  %2828 = lshr i32 %2827, 31
  %2829 = or i32 %2816, %2828
  %2830 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  store i32 %2829, i32* %2830, align 4
  %2831 = load i32, i32* %5, align 4
  %2832 = shl i32 %2831, 5
  %2833 = load i32, i32* %5, align 4
  %2834 = lshr i32 %2833, 27
  %2835 = or i32 %2832, %2834
  %2836 = load i32, i32* %9, align 4
  %2837 = add i32 %2835, %2836
  %2838 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2839 = load i32, i32* %2838, align 4
  %2840 = add i32 %2837, %2839
  %2841 = load i32, i32* %6, align 4
  %2842 = load i32, i32* %7, align 4
  %2843 = load i32, i32* %8, align 4
  %2844 = or i32 %2842, %2843
  %2845 = and i32 %2841, %2844
  %2846 = load i32, i32* %7, align 4
  %2847 = load i32, i32* %8, align 4
  %2848 = and i32 %2846, %2847
  %2849 = or i32 %2845, %2848
  %2850 = add i32 %2840, %2849
  %2851 = add i32 %2850, -1894007588
  store i32 %2851, i32* %10, align 4
  %2852 = load i32, i32* %8, align 4
  store i32 %2852, i32* %9, align 4
  %2853 = load i32, i32* %7, align 4
  store i32 %2853, i32* %8, align 4
  %2854 = load i32, i32* %6, align 4
  %2855 = shl i32 %2854, 30
  %2856 = load i32, i32* %6, align 4
  %2857 = lshr i32 %2856, 2
  %2858 = or i32 %2855, %2857
  store i32 %2858, i32* %7, align 4
  %2859 = load i32, i32* %5, align 4
  store i32 %2859, i32* %6, align 4
  %2860 = load i32, i32* %10, align 4
  store i32 %2860, i32* %5, align 4
  %2861 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2862 = load i32, i32* %2861, align 4
  %2863 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2864 = load i32, i32* %2863, align 16
  %2865 = xor i32 %2862, %2864
  %2866 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2867 = load i32, i32* %2866, align 8
  %2868 = xor i32 %2865, %2867
  %2869 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2870 = load i32, i32* %2869, align 16
  %2871 = xor i32 %2868, %2870
  %2872 = shl i32 %2871, 1
  %2873 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %2874 = load i32, i32* %2873, align 4
  %2875 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %2876 = load i32, i32* %2875, align 16
  %2877 = xor i32 %2874, %2876
  %2878 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2879 = load i32, i32* %2878, align 8
  %2880 = xor i32 %2877, %2879
  %2881 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2882 = load i32, i32* %2881, align 16
  %2883 = xor i32 %2880, %2882
  %2884 = lshr i32 %2883, 31
  %2885 = or i32 %2872, %2884
  %2886 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  store i32 %2885, i32* %2886, align 16
  %2887 = load i32, i32* %5, align 4
  %2888 = shl i32 %2887, 5
  %2889 = load i32, i32* %5, align 4
  %2890 = lshr i32 %2889, 27
  %2891 = or i32 %2888, %2890
  %2892 = load i32, i32* %9, align 4
  %2893 = add i32 %2891, %2892
  %2894 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %2895 = load i32, i32* %2894, align 16
  %2896 = add i32 %2893, %2895
  %2897 = load i32, i32* %6, align 4
  %2898 = load i32, i32* %7, align 4
  %2899 = load i32, i32* %8, align 4
  %2900 = or i32 %2898, %2899
  %2901 = and i32 %2897, %2900
  %2902 = load i32, i32* %7, align 4
  %2903 = load i32, i32* %8, align 4
  %2904 = and i32 %2902, %2903
  %2905 = or i32 %2901, %2904
  %2906 = add i32 %2896, %2905
  %2907 = add i32 %2906, -1894007588
  store i32 %2907, i32* %10, align 4
  %2908 = load i32, i32* %8, align 4
  store i32 %2908, i32* %9, align 4
  %2909 = load i32, i32* %7, align 4
  store i32 %2909, i32* %8, align 4
  %2910 = load i32, i32* %6, align 4
  %2911 = shl i32 %2910, 30
  %2912 = load i32, i32* %6, align 4
  %2913 = lshr i32 %2912, 2
  %2914 = or i32 %2911, %2913
  store i32 %2914, i32* %7, align 4
  %2915 = load i32, i32* %5, align 4
  store i32 %2915, i32* %6, align 4
  %2916 = load i32, i32* %10, align 4
  store i32 %2916, i32* %5, align 4
  %2917 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2918 = load i32, i32* %2917, align 8
  %2919 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2920 = load i32, i32* %2919, align 4
  %2921 = xor i32 %2918, %2920
  %2922 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2923 = load i32, i32* %2922, align 4
  %2924 = xor i32 %2921, %2923
  %2925 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2926 = load i32, i32* %2925, align 4
  %2927 = xor i32 %2924, %2926
  %2928 = shl i32 %2927, 1
  %2929 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %2930 = load i32, i32* %2929, align 8
  %2931 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %2932 = load i32, i32* %2931, align 4
  %2933 = xor i32 %2930, %2932
  %2934 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %2935 = load i32, i32* %2934, align 4
  %2936 = xor i32 %2933, %2935
  %2937 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2938 = load i32, i32* %2937, align 4
  %2939 = xor i32 %2936, %2938
  %2940 = lshr i32 %2939, 31
  %2941 = or i32 %2928, %2940
  %2942 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  store i32 %2941, i32* %2942, align 4
  %2943 = load i32, i32* %5, align 4
  %2944 = shl i32 %2943, 5
  %2945 = load i32, i32* %5, align 4
  %2946 = lshr i32 %2945, 27
  %2947 = or i32 %2944, %2946
  %2948 = load i32, i32* %9, align 4
  %2949 = add i32 %2947, %2948
  %2950 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %2951 = load i32, i32* %2950, align 4
  %2952 = add i32 %2949, %2951
  %2953 = load i32, i32* %6, align 4
  %2954 = load i32, i32* %7, align 4
  %2955 = load i32, i32* %8, align 4
  %2956 = or i32 %2954, %2955
  %2957 = and i32 %2953, %2956
  %2958 = load i32, i32* %7, align 4
  %2959 = load i32, i32* %8, align 4
  %2960 = and i32 %2958, %2959
  %2961 = or i32 %2957, %2960
  %2962 = add i32 %2952, %2961
  %2963 = add i32 %2962, -1894007588
  store i32 %2963, i32* %10, align 4
  %2964 = load i32, i32* %8, align 4
  store i32 %2964, i32* %9, align 4
  %2965 = load i32, i32* %7, align 4
  store i32 %2965, i32* %8, align 4
  %2966 = load i32, i32* %6, align 4
  %2967 = shl i32 %2966, 30
  %2968 = load i32, i32* %6, align 4
  %2969 = lshr i32 %2968, 2
  %2970 = or i32 %2967, %2969
  store i32 %2970, i32* %7, align 4
  %2971 = load i32, i32* %5, align 4
  store i32 %2971, i32* %6, align 4
  %2972 = load i32, i32* %10, align 4
  store i32 %2972, i32* %5, align 4
  %2973 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2974 = load i32, i32* %2973, align 4
  %2975 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2976 = load i32, i32* %2975, align 8
  %2977 = xor i32 %2974, %2976
  %2978 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2979 = load i32, i32* %2978, align 16
  %2980 = xor i32 %2977, %2979
  %2981 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2982 = load i32, i32* %2981, align 8
  %2983 = xor i32 %2980, %2982
  %2984 = shl i32 %2983, 1
  %2985 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %2986 = load i32, i32* %2985, align 4
  %2987 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %2988 = load i32, i32* %2987, align 8
  %2989 = xor i32 %2986, %2988
  %2990 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %2991 = load i32, i32* %2990, align 16
  %2992 = xor i32 %2989, %2991
  %2993 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %2994 = load i32, i32* %2993, align 8
  %2995 = xor i32 %2992, %2994
  %2996 = lshr i32 %2995, 31
  %2997 = or i32 %2984, %2996
  %2998 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  store i32 %2997, i32* %2998, align 8
  %2999 = load i32, i32* %5, align 4
  %3000 = shl i32 %2999, 5
  %3001 = load i32, i32* %5, align 4
  %3002 = lshr i32 %3001, 27
  %3003 = or i32 %3000, %3002
  %3004 = load i32, i32* %9, align 4
  %3005 = add i32 %3003, %3004
  %3006 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3007 = load i32, i32* %3006, align 8
  %3008 = add i32 %3005, %3007
  %3009 = load i32, i32* %6, align 4
  %3010 = load i32, i32* %7, align 4
  %3011 = load i32, i32* %8, align 4
  %3012 = or i32 %3010, %3011
  %3013 = and i32 %3009, %3012
  %3014 = load i32, i32* %7, align 4
  %3015 = load i32, i32* %8, align 4
  %3016 = and i32 %3014, %3015
  %3017 = or i32 %3013, %3016
  %3018 = add i32 %3008, %3017
  %3019 = add i32 %3018, -1894007588
  store i32 %3019, i32* %10, align 4
  %3020 = load i32, i32* %8, align 4
  store i32 %3020, i32* %9, align 4
  %3021 = load i32, i32* %7, align 4
  store i32 %3021, i32* %8, align 4
  %3022 = load i32, i32* %6, align 4
  %3023 = shl i32 %3022, 30
  %3024 = load i32, i32* %6, align 4
  %3025 = lshr i32 %3024, 2
  %3026 = or i32 %3023, %3025
  store i32 %3026, i32* %7, align 4
  %3027 = load i32, i32* %5, align 4
  store i32 %3027, i32* %6, align 4
  %3028 = load i32, i32* %10, align 4
  store i32 %3028, i32* %5, align 4
  %3029 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3030 = load i32, i32* %3029, align 16
  %3031 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3032 = load i32, i32* %3031, align 4
  %3033 = xor i32 %3030, %3032
  %3034 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3035 = load i32, i32* %3034, align 4
  %3036 = xor i32 %3033, %3035
  %3037 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3038 = load i32, i32* %3037, align 4
  %3039 = xor i32 %3036, %3038
  %3040 = shl i32 %3039, 1
  %3041 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3042 = load i32, i32* %3041, align 16
  %3043 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3044 = load i32, i32* %3043, align 4
  %3045 = xor i32 %3042, %3044
  %3046 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3047 = load i32, i32* %3046, align 4
  %3048 = xor i32 %3045, %3047
  %3049 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3050 = load i32, i32* %3049, align 4
  %3051 = xor i32 %3048, %3050
  %3052 = lshr i32 %3051, 31
  %3053 = or i32 %3040, %3052
  %3054 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  store i32 %3053, i32* %3054, align 4
  %3055 = load i32, i32* %5, align 4
  %3056 = shl i32 %3055, 5
  %3057 = load i32, i32* %5, align 4
  %3058 = lshr i32 %3057, 27
  %3059 = or i32 %3056, %3058
  %3060 = load i32, i32* %9, align 4
  %3061 = add i32 %3059, %3060
  %3062 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3063 = load i32, i32* %3062, align 4
  %3064 = add i32 %3061, %3063
  %3065 = load i32, i32* %6, align 4
  %3066 = load i32, i32* %7, align 4
  %3067 = load i32, i32* %8, align 4
  %3068 = or i32 %3066, %3067
  %3069 = and i32 %3065, %3068
  %3070 = load i32, i32* %7, align 4
  %3071 = load i32, i32* %8, align 4
  %3072 = and i32 %3070, %3071
  %3073 = or i32 %3069, %3072
  %3074 = add i32 %3064, %3073
  %3075 = add i32 %3074, -1894007588
  store i32 %3075, i32* %10, align 4
  %3076 = load i32, i32* %8, align 4
  store i32 %3076, i32* %9, align 4
  %3077 = load i32, i32* %7, align 4
  store i32 %3077, i32* %8, align 4
  %3078 = load i32, i32* %6, align 4
  %3079 = shl i32 %3078, 30
  %3080 = load i32, i32* %6, align 4
  %3081 = lshr i32 %3080, 2
  %3082 = or i32 %3079, %3081
  store i32 %3082, i32* %7, align 4
  %3083 = load i32, i32* %5, align 4
  store i32 %3083, i32* %6, align 4
  %3084 = load i32, i32* %10, align 4
  store i32 %3084, i32* %5, align 4
  %3085 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3086 = load i32, i32* %3085, align 4
  %3087 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3088 = load i32, i32* %3087, align 16
  %3089 = xor i32 %3086, %3088
  %3090 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3091 = load i32, i32* %3090, align 8
  %3092 = xor i32 %3089, %3091
  %3093 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3094 = load i32, i32* %3093, align 16
  %3095 = xor i32 %3092, %3094
  %3096 = shl i32 %3095, 1
  %3097 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3098 = load i32, i32* %3097, align 4
  %3099 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3100 = load i32, i32* %3099, align 16
  %3101 = xor i32 %3098, %3100
  %3102 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3103 = load i32, i32* %3102, align 8
  %3104 = xor i32 %3101, %3103
  %3105 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3106 = load i32, i32* %3105, align 16
  %3107 = xor i32 %3104, %3106
  %3108 = lshr i32 %3107, 31
  %3109 = or i32 %3096, %3108
  %3110 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  store i32 %3109, i32* %3110, align 16
  %3111 = load i32, i32* %5, align 4
  %3112 = shl i32 %3111, 5
  %3113 = load i32, i32* %5, align 4
  %3114 = lshr i32 %3113, 27
  %3115 = or i32 %3112, %3114
  %3116 = load i32, i32* %9, align 4
  %3117 = add i32 %3115, %3116
  %3118 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3119 = load i32, i32* %3118, align 16
  %3120 = add i32 %3117, %3119
  %3121 = load i32, i32* %6, align 4
  %3122 = load i32, i32* %7, align 4
  %3123 = load i32, i32* %8, align 4
  %3124 = or i32 %3122, %3123
  %3125 = and i32 %3121, %3124
  %3126 = load i32, i32* %7, align 4
  %3127 = load i32, i32* %8, align 4
  %3128 = and i32 %3126, %3127
  %3129 = or i32 %3125, %3128
  %3130 = add i32 %3120, %3129
  %3131 = add i32 %3130, -1894007588
  store i32 %3131, i32* %10, align 4
  %3132 = load i32, i32* %8, align 4
  store i32 %3132, i32* %9, align 4
  %3133 = load i32, i32* %7, align 4
  store i32 %3133, i32* %8, align 4
  %3134 = load i32, i32* %6, align 4
  %3135 = shl i32 %3134, 30
  %3136 = load i32, i32* %6, align 4
  %3137 = lshr i32 %3136, 2
  %3138 = or i32 %3135, %3137
  store i32 %3138, i32* %7, align 4
  %3139 = load i32, i32* %5, align 4
  store i32 %3139, i32* %6, align 4
  %3140 = load i32, i32* %10, align 4
  store i32 %3140, i32* %5, align 4
  %3141 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3142 = load i32, i32* %3141, align 8
  %3143 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3144 = load i32, i32* %3143, align 4
  %3145 = xor i32 %3142, %3144
  %3146 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3147 = load i32, i32* %3146, align 4
  %3148 = xor i32 %3145, %3147
  %3149 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3150 = load i32, i32* %3149, align 4
  %3151 = xor i32 %3148, %3150
  %3152 = shl i32 %3151, 1
  %3153 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3154 = load i32, i32* %3153, align 8
  %3155 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3156 = load i32, i32* %3155, align 4
  %3157 = xor i32 %3154, %3156
  %3158 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3159 = load i32, i32* %3158, align 4
  %3160 = xor i32 %3157, %3159
  %3161 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3162 = load i32, i32* %3161, align 4
  %3163 = xor i32 %3160, %3162
  %3164 = lshr i32 %3163, 31
  %3165 = or i32 %3152, %3164
  %3166 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  store i32 %3165, i32* %3166, align 4
  %3167 = load i32, i32* %5, align 4
  %3168 = shl i32 %3167, 5
  %3169 = load i32, i32* %5, align 4
  %3170 = lshr i32 %3169, 27
  %3171 = or i32 %3168, %3170
  %3172 = load i32, i32* %9, align 4
  %3173 = add i32 %3171, %3172
  %3174 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3175 = load i32, i32* %3174, align 4
  %3176 = add i32 %3173, %3175
  %3177 = load i32, i32* %6, align 4
  %3178 = load i32, i32* %7, align 4
  %3179 = load i32, i32* %8, align 4
  %3180 = or i32 %3178, %3179
  %3181 = and i32 %3177, %3180
  %3182 = load i32, i32* %7, align 4
  %3183 = load i32, i32* %8, align 4
  %3184 = and i32 %3182, %3183
  %3185 = or i32 %3181, %3184
  %3186 = add i32 %3176, %3185
  %3187 = add i32 %3186, -1894007588
  store i32 %3187, i32* %10, align 4
  %3188 = load i32, i32* %8, align 4
  store i32 %3188, i32* %9, align 4
  %3189 = load i32, i32* %7, align 4
  store i32 %3189, i32* %8, align 4
  %3190 = load i32, i32* %6, align 4
  %3191 = shl i32 %3190, 30
  %3192 = load i32, i32* %6, align 4
  %3193 = lshr i32 %3192, 2
  %3194 = or i32 %3191, %3193
  store i32 %3194, i32* %7, align 4
  %3195 = load i32, i32* %5, align 4
  store i32 %3195, i32* %6, align 4
  %3196 = load i32, i32* %10, align 4
  store i32 %3196, i32* %5, align 4
  %3197 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3198 = load i32, i32* %3197, align 4
  %3199 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3200 = load i32, i32* %3199, align 8
  %3201 = xor i32 %3198, %3200
  %3202 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3203 = load i32, i32* %3202, align 16
  %3204 = xor i32 %3201, %3203
  %3205 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3206 = load i32, i32* %3205, align 8
  %3207 = xor i32 %3204, %3206
  %3208 = shl i32 %3207, 1
  %3209 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3210 = load i32, i32* %3209, align 4
  %3211 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3212 = load i32, i32* %3211, align 8
  %3213 = xor i32 %3210, %3212
  %3214 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3215 = load i32, i32* %3214, align 16
  %3216 = xor i32 %3213, %3215
  %3217 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3218 = load i32, i32* %3217, align 8
  %3219 = xor i32 %3216, %3218
  %3220 = lshr i32 %3219, 31
  %3221 = or i32 %3208, %3220
  %3222 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  store i32 %3221, i32* %3222, align 8
  %3223 = load i32, i32* %5, align 4
  %3224 = shl i32 %3223, 5
  %3225 = load i32, i32* %5, align 4
  %3226 = lshr i32 %3225, 27
  %3227 = or i32 %3224, %3226
  %3228 = load i32, i32* %9, align 4
  %3229 = add i32 %3227, %3228
  %3230 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3231 = load i32, i32* %3230, align 8
  %3232 = add i32 %3229, %3231
  %3233 = load i32, i32* %6, align 4
  %3234 = load i32, i32* %7, align 4
  %3235 = load i32, i32* %8, align 4
  %3236 = or i32 %3234, %3235
  %3237 = and i32 %3233, %3236
  %3238 = load i32, i32* %7, align 4
  %3239 = load i32, i32* %8, align 4
  %3240 = and i32 %3238, %3239
  %3241 = or i32 %3237, %3240
  %3242 = add i32 %3232, %3241
  %3243 = add i32 %3242, -1894007588
  store i32 %3243, i32* %10, align 4
  %3244 = load i32, i32* %8, align 4
  store i32 %3244, i32* %9, align 4
  %3245 = load i32, i32* %7, align 4
  store i32 %3245, i32* %8, align 4
  %3246 = load i32, i32* %6, align 4
  %3247 = shl i32 %3246, 30
  %3248 = load i32, i32* %6, align 4
  %3249 = lshr i32 %3248, 2
  %3250 = or i32 %3247, %3249
  store i32 %3250, i32* %7, align 4
  %3251 = load i32, i32* %5, align 4
  store i32 %3251, i32* %6, align 4
  %3252 = load i32, i32* %10, align 4
  store i32 %3252, i32* %5, align 4
  %3253 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3254 = load i32, i32* %3253, align 16
  %3255 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3256 = load i32, i32* %3255, align 4
  %3257 = xor i32 %3254, %3256
  %3258 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3259 = load i32, i32* %3258, align 4
  %3260 = xor i32 %3257, %3259
  %3261 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3262 = load i32, i32* %3261, align 4
  %3263 = xor i32 %3260, %3262
  %3264 = shl i32 %3263, 1
  %3265 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3266 = load i32, i32* %3265, align 16
  %3267 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3268 = load i32, i32* %3267, align 4
  %3269 = xor i32 %3266, %3268
  %3270 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3271 = load i32, i32* %3270, align 4
  %3272 = xor i32 %3269, %3271
  %3273 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3274 = load i32, i32* %3273, align 4
  %3275 = xor i32 %3272, %3274
  %3276 = lshr i32 %3275, 31
  %3277 = or i32 %3264, %3276
  %3278 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  store i32 %3277, i32* %3278, align 4
  %3279 = load i32, i32* %5, align 4
  %3280 = shl i32 %3279, 5
  %3281 = load i32, i32* %5, align 4
  %3282 = lshr i32 %3281, 27
  %3283 = or i32 %3280, %3282
  %3284 = load i32, i32* %9, align 4
  %3285 = add i32 %3283, %3284
  %3286 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3287 = load i32, i32* %3286, align 4
  %3288 = add i32 %3285, %3287
  %3289 = load i32, i32* %6, align 4
  %3290 = load i32, i32* %7, align 4
  %3291 = load i32, i32* %8, align 4
  %3292 = or i32 %3290, %3291
  %3293 = and i32 %3289, %3292
  %3294 = load i32, i32* %7, align 4
  %3295 = load i32, i32* %8, align 4
  %3296 = and i32 %3294, %3295
  %3297 = or i32 %3293, %3296
  %3298 = add i32 %3288, %3297
  %3299 = add i32 %3298, -1894007588
  store i32 %3299, i32* %10, align 4
  %3300 = load i32, i32* %8, align 4
  store i32 %3300, i32* %9, align 4
  %3301 = load i32, i32* %7, align 4
  store i32 %3301, i32* %8, align 4
  %3302 = load i32, i32* %6, align 4
  %3303 = shl i32 %3302, 30
  %3304 = load i32, i32* %6, align 4
  %3305 = lshr i32 %3304, 2
  %3306 = or i32 %3303, %3305
  store i32 %3306, i32* %7, align 4
  %3307 = load i32, i32* %5, align 4
  store i32 %3307, i32* %6, align 4
  %3308 = load i32, i32* %10, align 4
  store i32 %3308, i32* %5, align 4
  %3309 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3310 = load i32, i32* %3309, align 4
  %3311 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3312 = load i32, i32* %3311, align 16
  %3313 = xor i32 %3310, %3312
  %3314 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3315 = load i32, i32* %3314, align 8
  %3316 = xor i32 %3313, %3315
  %3317 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3318 = load i32, i32* %3317, align 16
  %3319 = xor i32 %3316, %3318
  %3320 = shl i32 %3319, 1
  %3321 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3322 = load i32, i32* %3321, align 4
  %3323 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3324 = load i32, i32* %3323, align 16
  %3325 = xor i32 %3322, %3324
  %3326 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3327 = load i32, i32* %3326, align 8
  %3328 = xor i32 %3325, %3327
  %3329 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3330 = load i32, i32* %3329, align 16
  %3331 = xor i32 %3328, %3330
  %3332 = lshr i32 %3331, 31
  %3333 = or i32 %3320, %3332
  %3334 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  store i32 %3333, i32* %3334, align 16
  %3335 = load i32, i32* %5, align 4
  %3336 = shl i32 %3335, 5
  %3337 = load i32, i32* %5, align 4
  %3338 = lshr i32 %3337, 27
  %3339 = or i32 %3336, %3338
  %3340 = load i32, i32* %9, align 4
  %3341 = add i32 %3339, %3340
  %3342 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3343 = load i32, i32* %3342, align 16
  %3344 = add i32 %3341, %3343
  %3345 = load i32, i32* %6, align 4
  %3346 = load i32, i32* %7, align 4
  %3347 = xor i32 %3345, %3346
  %3348 = load i32, i32* %8, align 4
  %3349 = xor i32 %3347, %3348
  %3350 = add i32 %3344, %3349
  %3351 = add i32 %3350, -899497514
  store i32 %3351, i32* %10, align 4
  %3352 = load i32, i32* %8, align 4
  store i32 %3352, i32* %9, align 4
  %3353 = load i32, i32* %7, align 4
  store i32 %3353, i32* %8, align 4
  %3354 = load i32, i32* %6, align 4
  %3355 = shl i32 %3354, 30
  %3356 = load i32, i32* %6, align 4
  %3357 = lshr i32 %3356, 2
  %3358 = or i32 %3355, %3357
  store i32 %3358, i32* %7, align 4
  %3359 = load i32, i32* %5, align 4
  store i32 %3359, i32* %6, align 4
  %3360 = load i32, i32* %10, align 4
  store i32 %3360, i32* %5, align 4
  %3361 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3362 = load i32, i32* %3361, align 8
  %3363 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3364 = load i32, i32* %3363, align 4
  %3365 = xor i32 %3362, %3364
  %3366 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3367 = load i32, i32* %3366, align 4
  %3368 = xor i32 %3365, %3367
  %3369 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3370 = load i32, i32* %3369, align 4
  %3371 = xor i32 %3368, %3370
  %3372 = shl i32 %3371, 1
  %3373 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3374 = load i32, i32* %3373, align 8
  %3375 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3376 = load i32, i32* %3375, align 4
  %3377 = xor i32 %3374, %3376
  %3378 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3379 = load i32, i32* %3378, align 4
  %3380 = xor i32 %3377, %3379
  %3381 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3382 = load i32, i32* %3381, align 4
  %3383 = xor i32 %3380, %3382
  %3384 = lshr i32 %3383, 31
  %3385 = or i32 %3372, %3384
  %3386 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  store i32 %3385, i32* %3386, align 4
  %3387 = load i32, i32* %5, align 4
  %3388 = shl i32 %3387, 5
  %3389 = load i32, i32* %5, align 4
  %3390 = lshr i32 %3389, 27
  %3391 = or i32 %3388, %3390
  %3392 = load i32, i32* %9, align 4
  %3393 = add i32 %3391, %3392
  %3394 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3395 = load i32, i32* %3394, align 4
  %3396 = add i32 %3393, %3395
  %3397 = load i32, i32* %6, align 4
  %3398 = load i32, i32* %7, align 4
  %3399 = xor i32 %3397, %3398
  %3400 = load i32, i32* %8, align 4
  %3401 = xor i32 %3399, %3400
  %3402 = add i32 %3396, %3401
  %3403 = add i32 %3402, -899497514
  store i32 %3403, i32* %10, align 4
  %3404 = load i32, i32* %8, align 4
  store i32 %3404, i32* %9, align 4
  %3405 = load i32, i32* %7, align 4
  store i32 %3405, i32* %8, align 4
  %3406 = load i32, i32* %6, align 4
  %3407 = shl i32 %3406, 30
  %3408 = load i32, i32* %6, align 4
  %3409 = lshr i32 %3408, 2
  %3410 = or i32 %3407, %3409
  store i32 %3410, i32* %7, align 4
  %3411 = load i32, i32* %5, align 4
  store i32 %3411, i32* %6, align 4
  %3412 = load i32, i32* %10, align 4
  store i32 %3412, i32* %5, align 4
  %3413 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3414 = load i32, i32* %3413, align 4
  %3415 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3416 = load i32, i32* %3415, align 8
  %3417 = xor i32 %3414, %3416
  %3418 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3419 = load i32, i32* %3418, align 16
  %3420 = xor i32 %3417, %3419
  %3421 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3422 = load i32, i32* %3421, align 8
  %3423 = xor i32 %3420, %3422
  %3424 = shl i32 %3423, 1
  %3425 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3426 = load i32, i32* %3425, align 4
  %3427 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3428 = load i32, i32* %3427, align 8
  %3429 = xor i32 %3426, %3428
  %3430 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3431 = load i32, i32* %3430, align 16
  %3432 = xor i32 %3429, %3431
  %3433 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3434 = load i32, i32* %3433, align 8
  %3435 = xor i32 %3432, %3434
  %3436 = lshr i32 %3435, 31
  %3437 = or i32 %3424, %3436
  %3438 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  store i32 %3437, i32* %3438, align 8
  %3439 = load i32, i32* %5, align 4
  %3440 = shl i32 %3439, 5
  %3441 = load i32, i32* %5, align 4
  %3442 = lshr i32 %3441, 27
  %3443 = or i32 %3440, %3442
  %3444 = load i32, i32* %9, align 4
  %3445 = add i32 %3443, %3444
  %3446 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3447 = load i32, i32* %3446, align 8
  %3448 = add i32 %3445, %3447
  %3449 = load i32, i32* %6, align 4
  %3450 = load i32, i32* %7, align 4
  %3451 = xor i32 %3449, %3450
  %3452 = load i32, i32* %8, align 4
  %3453 = xor i32 %3451, %3452
  %3454 = add i32 %3448, %3453
  %3455 = add i32 %3454, -899497514
  store i32 %3455, i32* %10, align 4
  %3456 = load i32, i32* %8, align 4
  store i32 %3456, i32* %9, align 4
  %3457 = load i32, i32* %7, align 4
  store i32 %3457, i32* %8, align 4
  %3458 = load i32, i32* %6, align 4
  %3459 = shl i32 %3458, 30
  %3460 = load i32, i32* %6, align 4
  %3461 = lshr i32 %3460, 2
  %3462 = or i32 %3459, %3461
  store i32 %3462, i32* %7, align 4
  %3463 = load i32, i32* %5, align 4
  store i32 %3463, i32* %6, align 4
  %3464 = load i32, i32* %10, align 4
  store i32 %3464, i32* %5, align 4
  %3465 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3466 = load i32, i32* %3465, align 16
  %3467 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3468 = load i32, i32* %3467, align 4
  %3469 = xor i32 %3466, %3468
  %3470 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3471 = load i32, i32* %3470, align 4
  %3472 = xor i32 %3469, %3471
  %3473 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3474 = load i32, i32* %3473, align 4
  %3475 = xor i32 %3472, %3474
  %3476 = shl i32 %3475, 1
  %3477 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3478 = load i32, i32* %3477, align 16
  %3479 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3480 = load i32, i32* %3479, align 4
  %3481 = xor i32 %3478, %3480
  %3482 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3483 = load i32, i32* %3482, align 4
  %3484 = xor i32 %3481, %3483
  %3485 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3486 = load i32, i32* %3485, align 4
  %3487 = xor i32 %3484, %3486
  %3488 = lshr i32 %3487, 31
  %3489 = or i32 %3476, %3488
  %3490 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  store i32 %3489, i32* %3490, align 4
  %3491 = load i32, i32* %5, align 4
  %3492 = shl i32 %3491, 5
  %3493 = load i32, i32* %5, align 4
  %3494 = lshr i32 %3493, 27
  %3495 = or i32 %3492, %3494
  %3496 = load i32, i32* %9, align 4
  %3497 = add i32 %3495, %3496
  %3498 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3499 = load i32, i32* %3498, align 4
  %3500 = add i32 %3497, %3499
  %3501 = load i32, i32* %6, align 4
  %3502 = load i32, i32* %7, align 4
  %3503 = xor i32 %3501, %3502
  %3504 = load i32, i32* %8, align 4
  %3505 = xor i32 %3503, %3504
  %3506 = add i32 %3500, %3505
  %3507 = add i32 %3506, -899497514
  store i32 %3507, i32* %10, align 4
  %3508 = load i32, i32* %8, align 4
  store i32 %3508, i32* %9, align 4
  %3509 = load i32, i32* %7, align 4
  store i32 %3509, i32* %8, align 4
  %3510 = load i32, i32* %6, align 4
  %3511 = shl i32 %3510, 30
  %3512 = load i32, i32* %6, align 4
  %3513 = lshr i32 %3512, 2
  %3514 = or i32 %3511, %3513
  store i32 %3514, i32* %7, align 4
  %3515 = load i32, i32* %5, align 4
  store i32 %3515, i32* %6, align 4
  %3516 = load i32, i32* %10, align 4
  store i32 %3516, i32* %5, align 4
  %3517 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3518 = load i32, i32* %3517, align 4
  %3519 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3520 = load i32, i32* %3519, align 16
  %3521 = xor i32 %3518, %3520
  %3522 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3523 = load i32, i32* %3522, align 8
  %3524 = xor i32 %3521, %3523
  %3525 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3526 = load i32, i32* %3525, align 16
  %3527 = xor i32 %3524, %3526
  %3528 = shl i32 %3527, 1
  %3529 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3530 = load i32, i32* %3529, align 4
  %3531 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3532 = load i32, i32* %3531, align 16
  %3533 = xor i32 %3530, %3532
  %3534 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3535 = load i32, i32* %3534, align 8
  %3536 = xor i32 %3533, %3535
  %3537 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3538 = load i32, i32* %3537, align 16
  %3539 = xor i32 %3536, %3538
  %3540 = lshr i32 %3539, 31
  %3541 = or i32 %3528, %3540
  %3542 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  store i32 %3541, i32* %3542, align 16
  %3543 = load i32, i32* %5, align 4
  %3544 = shl i32 %3543, 5
  %3545 = load i32, i32* %5, align 4
  %3546 = lshr i32 %3545, 27
  %3547 = or i32 %3544, %3546
  %3548 = load i32, i32* %9, align 4
  %3549 = add i32 %3547, %3548
  %3550 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3551 = load i32, i32* %3550, align 16
  %3552 = add i32 %3549, %3551
  %3553 = load i32, i32* %6, align 4
  %3554 = load i32, i32* %7, align 4
  %3555 = xor i32 %3553, %3554
  %3556 = load i32, i32* %8, align 4
  %3557 = xor i32 %3555, %3556
  %3558 = add i32 %3552, %3557
  %3559 = add i32 %3558, -899497514
  store i32 %3559, i32* %10, align 4
  %3560 = load i32, i32* %8, align 4
  store i32 %3560, i32* %9, align 4
  %3561 = load i32, i32* %7, align 4
  store i32 %3561, i32* %8, align 4
  %3562 = load i32, i32* %6, align 4
  %3563 = shl i32 %3562, 30
  %3564 = load i32, i32* %6, align 4
  %3565 = lshr i32 %3564, 2
  %3566 = or i32 %3563, %3565
  store i32 %3566, i32* %7, align 4
  %3567 = load i32, i32* %5, align 4
  store i32 %3567, i32* %6, align 4
  %3568 = load i32, i32* %10, align 4
  store i32 %3568, i32* %5, align 4
  %3569 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3570 = load i32, i32* %3569, align 8
  %3571 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3572 = load i32, i32* %3571, align 4
  %3573 = xor i32 %3570, %3572
  %3574 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3575 = load i32, i32* %3574, align 4
  %3576 = xor i32 %3573, %3575
  %3577 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3578 = load i32, i32* %3577, align 4
  %3579 = xor i32 %3576, %3578
  %3580 = shl i32 %3579, 1
  %3581 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3582 = load i32, i32* %3581, align 8
  %3583 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3584 = load i32, i32* %3583, align 4
  %3585 = xor i32 %3582, %3584
  %3586 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3587 = load i32, i32* %3586, align 4
  %3588 = xor i32 %3585, %3587
  %3589 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3590 = load i32, i32* %3589, align 4
  %3591 = xor i32 %3588, %3590
  %3592 = lshr i32 %3591, 31
  %3593 = or i32 %3580, %3592
  %3594 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  store i32 %3593, i32* %3594, align 4
  %3595 = load i32, i32* %5, align 4
  %3596 = shl i32 %3595, 5
  %3597 = load i32, i32* %5, align 4
  %3598 = lshr i32 %3597, 27
  %3599 = or i32 %3596, %3598
  %3600 = load i32, i32* %9, align 4
  %3601 = add i32 %3599, %3600
  %3602 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3603 = load i32, i32* %3602, align 4
  %3604 = add i32 %3601, %3603
  %3605 = load i32, i32* %6, align 4
  %3606 = load i32, i32* %7, align 4
  %3607 = xor i32 %3605, %3606
  %3608 = load i32, i32* %8, align 4
  %3609 = xor i32 %3607, %3608
  %3610 = add i32 %3604, %3609
  %3611 = add i32 %3610, -899497514
  store i32 %3611, i32* %10, align 4
  %3612 = load i32, i32* %8, align 4
  store i32 %3612, i32* %9, align 4
  %3613 = load i32, i32* %7, align 4
  store i32 %3613, i32* %8, align 4
  %3614 = load i32, i32* %6, align 4
  %3615 = shl i32 %3614, 30
  %3616 = load i32, i32* %6, align 4
  %3617 = lshr i32 %3616, 2
  %3618 = or i32 %3615, %3617
  store i32 %3618, i32* %7, align 4
  %3619 = load i32, i32* %5, align 4
  store i32 %3619, i32* %6, align 4
  %3620 = load i32, i32* %10, align 4
  store i32 %3620, i32* %5, align 4
  %3621 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3622 = load i32, i32* %3621, align 4
  %3623 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3624 = load i32, i32* %3623, align 8
  %3625 = xor i32 %3622, %3624
  %3626 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3627 = load i32, i32* %3626, align 16
  %3628 = xor i32 %3625, %3627
  %3629 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3630 = load i32, i32* %3629, align 8
  %3631 = xor i32 %3628, %3630
  %3632 = shl i32 %3631, 1
  %3633 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3634 = load i32, i32* %3633, align 4
  %3635 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3636 = load i32, i32* %3635, align 8
  %3637 = xor i32 %3634, %3636
  %3638 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3639 = load i32, i32* %3638, align 16
  %3640 = xor i32 %3637, %3639
  %3641 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3642 = load i32, i32* %3641, align 8
  %3643 = xor i32 %3640, %3642
  %3644 = lshr i32 %3643, 31
  %3645 = or i32 %3632, %3644
  %3646 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  store i32 %3645, i32* %3646, align 8
  %3647 = load i32, i32* %5, align 4
  %3648 = shl i32 %3647, 5
  %3649 = load i32, i32* %5, align 4
  %3650 = lshr i32 %3649, 27
  %3651 = or i32 %3648, %3650
  %3652 = load i32, i32* %9, align 4
  %3653 = add i32 %3651, %3652
  %3654 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3655 = load i32, i32* %3654, align 8
  %3656 = add i32 %3653, %3655
  %3657 = load i32, i32* %6, align 4
  %3658 = load i32, i32* %7, align 4
  %3659 = xor i32 %3657, %3658
  %3660 = load i32, i32* %8, align 4
  %3661 = xor i32 %3659, %3660
  %3662 = add i32 %3656, %3661
  %3663 = add i32 %3662, -899497514
  store i32 %3663, i32* %10, align 4
  %3664 = load i32, i32* %8, align 4
  store i32 %3664, i32* %9, align 4
  %3665 = load i32, i32* %7, align 4
  store i32 %3665, i32* %8, align 4
  %3666 = load i32, i32* %6, align 4
  %3667 = shl i32 %3666, 30
  %3668 = load i32, i32* %6, align 4
  %3669 = lshr i32 %3668, 2
  %3670 = or i32 %3667, %3669
  store i32 %3670, i32* %7, align 4
  %3671 = load i32, i32* %5, align 4
  store i32 %3671, i32* %6, align 4
  %3672 = load i32, i32* %10, align 4
  store i32 %3672, i32* %5, align 4
  %3673 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3674 = load i32, i32* %3673, align 16
  %3675 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3676 = load i32, i32* %3675, align 4
  %3677 = xor i32 %3674, %3676
  %3678 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3679 = load i32, i32* %3678, align 4
  %3680 = xor i32 %3677, %3679
  %3681 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3682 = load i32, i32* %3681, align 4
  %3683 = xor i32 %3680, %3682
  %3684 = shl i32 %3683, 1
  %3685 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3686 = load i32, i32* %3685, align 16
  %3687 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3688 = load i32, i32* %3687, align 4
  %3689 = xor i32 %3686, %3688
  %3690 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3691 = load i32, i32* %3690, align 4
  %3692 = xor i32 %3689, %3691
  %3693 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3694 = load i32, i32* %3693, align 4
  %3695 = xor i32 %3692, %3694
  %3696 = lshr i32 %3695, 31
  %3697 = or i32 %3684, %3696
  %3698 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  store i32 %3697, i32* %3698, align 4
  %3699 = load i32, i32* %5, align 4
  %3700 = shl i32 %3699, 5
  %3701 = load i32, i32* %5, align 4
  %3702 = lshr i32 %3701, 27
  %3703 = or i32 %3700, %3702
  %3704 = load i32, i32* %9, align 4
  %3705 = add i32 %3703, %3704
  %3706 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3707 = load i32, i32* %3706, align 4
  %3708 = add i32 %3705, %3707
  %3709 = load i32, i32* %6, align 4
  %3710 = load i32, i32* %7, align 4
  %3711 = xor i32 %3709, %3710
  %3712 = load i32, i32* %8, align 4
  %3713 = xor i32 %3711, %3712
  %3714 = add i32 %3708, %3713
  %3715 = add i32 %3714, -899497514
  store i32 %3715, i32* %10, align 4
  %3716 = load i32, i32* %8, align 4
  store i32 %3716, i32* %9, align 4
  %3717 = load i32, i32* %7, align 4
  store i32 %3717, i32* %8, align 4
  %3718 = load i32, i32* %6, align 4
  %3719 = shl i32 %3718, 30
  %3720 = load i32, i32* %6, align 4
  %3721 = lshr i32 %3720, 2
  %3722 = or i32 %3719, %3721
  store i32 %3722, i32* %7, align 4
  %3723 = load i32, i32* %5, align 4
  store i32 %3723, i32* %6, align 4
  %3724 = load i32, i32* %10, align 4
  store i32 %3724, i32* %5, align 4
  %3725 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3726 = load i32, i32* %3725, align 4
  %3727 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3728 = load i32, i32* %3727, align 16
  %3729 = xor i32 %3726, %3728
  %3730 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3731 = load i32, i32* %3730, align 8
  %3732 = xor i32 %3729, %3731
  %3733 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3734 = load i32, i32* %3733, align 16
  %3735 = xor i32 %3732, %3734
  %3736 = shl i32 %3735, 1
  %3737 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3738 = load i32, i32* %3737, align 4
  %3739 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %3740 = load i32, i32* %3739, align 16
  %3741 = xor i32 %3738, %3740
  %3742 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3743 = load i32, i32* %3742, align 8
  %3744 = xor i32 %3741, %3743
  %3745 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3746 = load i32, i32* %3745, align 16
  %3747 = xor i32 %3744, %3746
  %3748 = lshr i32 %3747, 31
  %3749 = or i32 %3736, %3748
  %3750 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  store i32 %3749, i32* %3750, align 16
  %3751 = load i32, i32* %5, align 4
  %3752 = shl i32 %3751, 5
  %3753 = load i32, i32* %5, align 4
  %3754 = lshr i32 %3753, 27
  %3755 = or i32 %3752, %3754
  %3756 = load i32, i32* %9, align 4
  %3757 = add i32 %3755, %3756
  %3758 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3759 = load i32, i32* %3758, align 16
  %3760 = add i32 %3757, %3759
  %3761 = load i32, i32* %6, align 4
  %3762 = load i32, i32* %7, align 4
  %3763 = xor i32 %3761, %3762
  %3764 = load i32, i32* %8, align 4
  %3765 = xor i32 %3763, %3764
  %3766 = add i32 %3760, %3765
  %3767 = add i32 %3766, -899497514
  store i32 %3767, i32* %10, align 4
  %3768 = load i32, i32* %8, align 4
  store i32 %3768, i32* %9, align 4
  %3769 = load i32, i32* %7, align 4
  store i32 %3769, i32* %8, align 4
  %3770 = load i32, i32* %6, align 4
  %3771 = shl i32 %3770, 30
  %3772 = load i32, i32* %6, align 4
  %3773 = lshr i32 %3772, 2
  %3774 = or i32 %3771, %3773
  store i32 %3774, i32* %7, align 4
  %3775 = load i32, i32* %5, align 4
  store i32 %3775, i32* %6, align 4
  %3776 = load i32, i32* %10, align 4
  store i32 %3776, i32* %5, align 4
  %3777 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3778 = load i32, i32* %3777, align 8
  %3779 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3780 = load i32, i32* %3779, align 4
  %3781 = xor i32 %3778, %3780
  %3782 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3783 = load i32, i32* %3782, align 4
  %3784 = xor i32 %3781, %3783
  %3785 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3786 = load i32, i32* %3785, align 4
  %3787 = xor i32 %3784, %3786
  %3788 = shl i32 %3787, 1
  %3789 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %3790 = load i32, i32* %3789, align 8
  %3791 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %3792 = load i32, i32* %3791, align 4
  %3793 = xor i32 %3790, %3792
  %3794 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3795 = load i32, i32* %3794, align 4
  %3796 = xor i32 %3793, %3795
  %3797 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3798 = load i32, i32* %3797, align 4
  %3799 = xor i32 %3796, %3798
  %3800 = lshr i32 %3799, 31
  %3801 = or i32 %3788, %3800
  %3802 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  store i32 %3801, i32* %3802, align 4
  %3803 = load i32, i32* %5, align 4
  %3804 = shl i32 %3803, 5
  %3805 = load i32, i32* %5, align 4
  %3806 = lshr i32 %3805, 27
  %3807 = or i32 %3804, %3806
  %3808 = load i32, i32* %9, align 4
  %3809 = add i32 %3807, %3808
  %3810 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3811 = load i32, i32* %3810, align 4
  %3812 = add i32 %3809, %3811
  %3813 = load i32, i32* %6, align 4
  %3814 = load i32, i32* %7, align 4
  %3815 = xor i32 %3813, %3814
  %3816 = load i32, i32* %8, align 4
  %3817 = xor i32 %3815, %3816
  %3818 = add i32 %3812, %3817
  %3819 = add i32 %3818, -899497514
  store i32 %3819, i32* %10, align 4
  %3820 = load i32, i32* %8, align 4
  store i32 %3820, i32* %9, align 4
  %3821 = load i32, i32* %7, align 4
  store i32 %3821, i32* %8, align 4
  %3822 = load i32, i32* %6, align 4
  %3823 = shl i32 %3822, 30
  %3824 = load i32, i32* %6, align 4
  %3825 = lshr i32 %3824, 2
  %3826 = or i32 %3823, %3825
  store i32 %3826, i32* %7, align 4
  %3827 = load i32, i32* %5, align 4
  store i32 %3827, i32* %6, align 4
  %3828 = load i32, i32* %10, align 4
  store i32 %3828, i32* %5, align 4
  %3829 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3830 = load i32, i32* %3829, align 4
  %3831 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3832 = load i32, i32* %3831, align 8
  %3833 = xor i32 %3830, %3832
  %3834 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3835 = load i32, i32* %3834, align 16
  %3836 = xor i32 %3833, %3835
  %3837 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3838 = load i32, i32* %3837, align 8
  %3839 = xor i32 %3836, %3838
  %3840 = shl i32 %3839, 1
  %3841 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %3842 = load i32, i32* %3841, align 4
  %3843 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %3844 = load i32, i32* %3843, align 8
  %3845 = xor i32 %3842, %3844
  %3846 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3847 = load i32, i32* %3846, align 16
  %3848 = xor i32 %3845, %3847
  %3849 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3850 = load i32, i32* %3849, align 8
  %3851 = xor i32 %3848, %3850
  %3852 = lshr i32 %3851, 31
  %3853 = or i32 %3840, %3852
  %3854 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  store i32 %3853, i32* %3854, align 8
  %3855 = load i32, i32* %5, align 4
  %3856 = shl i32 %3855, 5
  %3857 = load i32, i32* %5, align 4
  %3858 = lshr i32 %3857, 27
  %3859 = or i32 %3856, %3858
  %3860 = load i32, i32* %9, align 4
  %3861 = add i32 %3859, %3860
  %3862 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3863 = load i32, i32* %3862, align 8
  %3864 = add i32 %3861, %3863
  %3865 = load i32, i32* %6, align 4
  %3866 = load i32, i32* %7, align 4
  %3867 = xor i32 %3865, %3866
  %3868 = load i32, i32* %8, align 4
  %3869 = xor i32 %3867, %3868
  %3870 = add i32 %3864, %3869
  %3871 = add i32 %3870, -899497514
  store i32 %3871, i32* %10, align 4
  %3872 = load i32, i32* %8, align 4
  store i32 %3872, i32* %9, align 4
  %3873 = load i32, i32* %7, align 4
  store i32 %3873, i32* %8, align 4
  %3874 = load i32, i32* %6, align 4
  %3875 = shl i32 %3874, 30
  %3876 = load i32, i32* %6, align 4
  %3877 = lshr i32 %3876, 2
  %3878 = or i32 %3875, %3877
  store i32 %3878, i32* %7, align 4
  %3879 = load i32, i32* %5, align 4
  store i32 %3879, i32* %6, align 4
  %3880 = load i32, i32* %10, align 4
  store i32 %3880, i32* %5, align 4
  %3881 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3882 = load i32, i32* %3881, align 16
  %3883 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3884 = load i32, i32* %3883, align 4
  %3885 = xor i32 %3882, %3884
  %3886 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3887 = load i32, i32* %3886, align 4
  %3888 = xor i32 %3885, %3887
  %3889 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3890 = load i32, i32* %3889, align 4
  %3891 = xor i32 %3888, %3890
  %3892 = shl i32 %3891, 1
  %3893 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %3894 = load i32, i32* %3893, align 16
  %3895 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %3896 = load i32, i32* %3895, align 4
  %3897 = xor i32 %3894, %3896
  %3898 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3899 = load i32, i32* %3898, align 4
  %3900 = xor i32 %3897, %3899
  %3901 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3902 = load i32, i32* %3901, align 4
  %3903 = xor i32 %3900, %3902
  %3904 = lshr i32 %3903, 31
  %3905 = or i32 %3892, %3904
  %3906 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  store i32 %3905, i32* %3906, align 4
  %3907 = load i32, i32* %5, align 4
  %3908 = shl i32 %3907, 5
  %3909 = load i32, i32* %5, align 4
  %3910 = lshr i32 %3909, 27
  %3911 = or i32 %3908, %3910
  %3912 = load i32, i32* %9, align 4
  %3913 = add i32 %3911, %3912
  %3914 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %3915 = load i32, i32* %3914, align 4
  %3916 = add i32 %3913, %3915
  %3917 = load i32, i32* %6, align 4
  %3918 = load i32, i32* %7, align 4
  %3919 = xor i32 %3917, %3918
  %3920 = load i32, i32* %8, align 4
  %3921 = xor i32 %3919, %3920
  %3922 = add i32 %3916, %3921
  %3923 = add i32 %3922, -899497514
  store i32 %3923, i32* %10, align 4
  %3924 = load i32, i32* %8, align 4
  store i32 %3924, i32* %9, align 4
  %3925 = load i32, i32* %7, align 4
  store i32 %3925, i32* %8, align 4
  %3926 = load i32, i32* %6, align 4
  %3927 = shl i32 %3926, 30
  %3928 = load i32, i32* %6, align 4
  %3929 = lshr i32 %3928, 2
  %3930 = or i32 %3927, %3929
  store i32 %3930, i32* %7, align 4
  %3931 = load i32, i32* %5, align 4
  store i32 %3931, i32* %6, align 4
  %3932 = load i32, i32* %10, align 4
  store i32 %3932, i32* %5, align 4
  %3933 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3934 = load i32, i32* %3933, align 4
  %3935 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3936 = load i32, i32* %3935, align 16
  %3937 = xor i32 %3934, %3936
  %3938 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3939 = load i32, i32* %3938, align 8
  %3940 = xor i32 %3937, %3939
  %3941 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3942 = load i32, i32* %3941, align 16
  %3943 = xor i32 %3940, %3942
  %3944 = shl i32 %3943, 1
  %3945 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %3946 = load i32, i32* %3945, align 4
  %3947 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %3948 = load i32, i32* %3947, align 16
  %3949 = xor i32 %3946, %3948
  %3950 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %3951 = load i32, i32* %3950, align 8
  %3952 = xor i32 %3949, %3951
  %3953 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3954 = load i32, i32* %3953, align 16
  %3955 = xor i32 %3952, %3954
  %3956 = lshr i32 %3955, 31
  %3957 = or i32 %3944, %3956
  %3958 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  store i32 %3957, i32* %3958, align 16
  %3959 = load i32, i32* %5, align 4
  %3960 = shl i32 %3959, 5
  %3961 = load i32, i32* %5, align 4
  %3962 = lshr i32 %3961, 27
  %3963 = or i32 %3960, %3962
  %3964 = load i32, i32* %9, align 4
  %3965 = add i32 %3963, %3964
  %3966 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %3967 = load i32, i32* %3966, align 16
  %3968 = add i32 %3965, %3967
  %3969 = load i32, i32* %6, align 4
  %3970 = load i32, i32* %7, align 4
  %3971 = xor i32 %3969, %3970
  %3972 = load i32, i32* %8, align 4
  %3973 = xor i32 %3971, %3972
  %3974 = add i32 %3968, %3973
  %3975 = add i32 %3974, -899497514
  store i32 %3975, i32* %10, align 4
  %3976 = load i32, i32* %8, align 4
  store i32 %3976, i32* %9, align 4
  %3977 = load i32, i32* %7, align 4
  store i32 %3977, i32* %8, align 4
  %3978 = load i32, i32* %6, align 4
  %3979 = shl i32 %3978, 30
  %3980 = load i32, i32* %6, align 4
  %3981 = lshr i32 %3980, 2
  %3982 = or i32 %3979, %3981
  store i32 %3982, i32* %7, align 4
  %3983 = load i32, i32* %5, align 4
  store i32 %3983, i32* %6, align 4
  %3984 = load i32, i32* %10, align 4
  store i32 %3984, i32* %5, align 4
  %3985 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3986 = load i32, i32* %3985, align 8
  %3987 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %3988 = load i32, i32* %3987, align 4
  %3989 = xor i32 %3986, %3988
  %3990 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %3991 = load i32, i32* %3990, align 4
  %3992 = xor i32 %3989, %3991
  %3993 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %3994 = load i32, i32* %3993, align 4
  %3995 = xor i32 %3992, %3994
  %3996 = shl i32 %3995, 1
  %3997 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %3998 = load i32, i32* %3997, align 8
  %3999 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %4000 = load i32, i32* %3999, align 4
  %4001 = xor i32 %3998, %4000
  %4002 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4003 = load i32, i32* %4002, align 4
  %4004 = xor i32 %4001, %4003
  %4005 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %4006 = load i32, i32* %4005, align 4
  %4007 = xor i32 %4004, %4006
  %4008 = lshr i32 %4007, 31
  %4009 = or i32 %3996, %4008
  %4010 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  store i32 %4009, i32* %4010, align 4
  %4011 = load i32, i32* %5, align 4
  %4012 = shl i32 %4011, 5
  %4013 = load i32, i32* %5, align 4
  %4014 = lshr i32 %4013, 27
  %4015 = or i32 %4012, %4014
  %4016 = load i32, i32* %9, align 4
  %4017 = add i32 %4015, %4016
  %4018 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %4019 = load i32, i32* %4018, align 4
  %4020 = add i32 %4017, %4019
  %4021 = load i32, i32* %6, align 4
  %4022 = load i32, i32* %7, align 4
  %4023 = xor i32 %4021, %4022
  %4024 = load i32, i32* %8, align 4
  %4025 = xor i32 %4023, %4024
  %4026 = add i32 %4020, %4025
  %4027 = add i32 %4026, -899497514
  store i32 %4027, i32* %10, align 4
  %4028 = load i32, i32* %8, align 4
  store i32 %4028, i32* %9, align 4
  %4029 = load i32, i32* %7, align 4
  store i32 %4029, i32* %8, align 4
  %4030 = load i32, i32* %6, align 4
  %4031 = shl i32 %4030, 30
  %4032 = load i32, i32* %6, align 4
  %4033 = lshr i32 %4032, 2
  %4034 = or i32 %4031, %4033
  store i32 %4034, i32* %7, align 4
  %4035 = load i32, i32* %5, align 4
  store i32 %4035, i32* %6, align 4
  %4036 = load i32, i32* %10, align 4
  store i32 %4036, i32* %5, align 4
  %4037 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %4038 = load i32, i32* %4037, align 4
  %4039 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %4040 = load i32, i32* %4039, align 8
  %4041 = xor i32 %4038, %4040
  %4042 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4043 = load i32, i32* %4042, align 16
  %4044 = xor i32 %4041, %4043
  %4045 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %4046 = load i32, i32* %4045, align 8
  %4047 = xor i32 %4044, %4046
  %4048 = shl i32 %4047, 1
  %4049 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %4050 = load i32, i32* %4049, align 4
  %4051 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 2
  %4052 = load i32, i32* %4051, align 8
  %4053 = xor i32 %4050, %4052
  %4054 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4055 = load i32, i32* %4054, align 16
  %4056 = xor i32 %4053, %4055
  %4057 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %4058 = load i32, i32* %4057, align 8
  %4059 = xor i32 %4056, %4058
  %4060 = lshr i32 %4059, 31
  %4061 = or i32 %4048, %4060
  %4062 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  store i32 %4061, i32* %4062, align 8
  %4063 = load i32, i32* %5, align 4
  %4064 = shl i32 %4063, 5
  %4065 = load i32, i32* %5, align 4
  %4066 = lshr i32 %4065, 27
  %4067 = or i32 %4064, %4066
  %4068 = load i32, i32* %9, align 4
  %4069 = add i32 %4067, %4068
  %4070 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %4071 = load i32, i32* %4070, align 8
  %4072 = add i32 %4069, %4071
  %4073 = load i32, i32* %6, align 4
  %4074 = load i32, i32* %7, align 4
  %4075 = xor i32 %4073, %4074
  %4076 = load i32, i32* %8, align 4
  %4077 = xor i32 %4075, %4076
  %4078 = add i32 %4072, %4077
  %4079 = add i32 %4078, -899497514
  store i32 %4079, i32* %10, align 4
  %4080 = load i32, i32* %8, align 4
  store i32 %4080, i32* %9, align 4
  %4081 = load i32, i32* %7, align 4
  store i32 %4081, i32* %8, align 4
  %4082 = load i32, i32* %6, align 4
  %4083 = shl i32 %4082, 30
  %4084 = load i32, i32* %6, align 4
  %4085 = lshr i32 %4084, 2
  %4086 = or i32 %4083, %4085
  store i32 %4086, i32* %7, align 4
  %4087 = load i32, i32* %5, align 4
  store i32 %4087, i32* %6, align 4
  %4088 = load i32, i32* %10, align 4
  store i32 %4088, i32* %5, align 4
  %4089 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %4090 = load i32, i32* %4089, align 16
  %4091 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %4092 = load i32, i32* %4091, align 4
  %4093 = xor i32 %4090, %4092
  %4094 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %4095 = load i32, i32* %4094, align 4
  %4096 = xor i32 %4093, %4095
  %4097 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4098 = load i32, i32* %4097, align 4
  %4099 = xor i32 %4096, %4098
  %4100 = shl i32 %4099, 1
  %4101 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 8
  %4102 = load i32, i32* %4101, align 16
  %4103 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 3
  %4104 = load i32, i32* %4103, align 4
  %4105 = xor i32 %4102, %4104
  %4106 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %4107 = load i32, i32* %4106, align 4
  %4108 = xor i32 %4105, %4107
  %4109 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4110 = load i32, i32* %4109, align 4
  %4111 = xor i32 %4108, %4110
  %4112 = lshr i32 %4111, 31
  %4113 = or i32 %4100, %4112
  %4114 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  store i32 %4113, i32* %4114, align 4
  %4115 = load i32, i32* %5, align 4
  %4116 = shl i32 %4115, 5
  %4117 = load i32, i32* %5, align 4
  %4118 = lshr i32 %4117, 27
  %4119 = or i32 %4116, %4118
  %4120 = load i32, i32* %9, align 4
  %4121 = add i32 %4119, %4120
  %4122 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4123 = load i32, i32* %4122, align 4
  %4124 = add i32 %4121, %4123
  %4125 = load i32, i32* %6, align 4
  %4126 = load i32, i32* %7, align 4
  %4127 = xor i32 %4125, %4126
  %4128 = load i32, i32* %8, align 4
  %4129 = xor i32 %4127, %4128
  %4130 = add i32 %4124, %4129
  %4131 = add i32 %4130, -899497514
  store i32 %4131, i32* %10, align 4
  %4132 = load i32, i32* %8, align 4
  store i32 %4132, i32* %9, align 4
  %4133 = load i32, i32* %7, align 4
  store i32 %4133, i32* %8, align 4
  %4134 = load i32, i32* %6, align 4
  %4135 = shl i32 %4134, 30
  %4136 = load i32, i32* %6, align 4
  %4137 = lshr i32 %4136, 2
  %4138 = or i32 %4135, %4137
  store i32 %4138, i32* %7, align 4
  %4139 = load i32, i32* %5, align 4
  store i32 %4139, i32* %6, align 4
  %4140 = load i32, i32* %10, align 4
  store i32 %4140, i32* %5, align 4
  %4141 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %4142 = load i32, i32* %4141, align 4
  %4143 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %4144 = load i32, i32* %4143, align 16
  %4145 = xor i32 %4142, %4144
  %4146 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %4147 = load i32, i32* %4146, align 8
  %4148 = xor i32 %4145, %4147
  %4149 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4150 = load i32, i32* %4149, align 16
  %4151 = xor i32 %4148, %4150
  %4152 = shl i32 %4151, 1
  %4153 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 9
  %4154 = load i32, i32* %4153, align 4
  %4155 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 4
  %4156 = load i32, i32* %4155, align 16
  %4157 = xor i32 %4154, %4156
  %4158 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %4159 = load i32, i32* %4158, align 8
  %4160 = xor i32 %4157, %4159
  %4161 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4162 = load i32, i32* %4161, align 16
  %4163 = xor i32 %4160, %4162
  %4164 = lshr i32 %4163, 31
  %4165 = or i32 %4152, %4164
  %4166 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  store i32 %4165, i32* %4166, align 16
  %4167 = load i32, i32* %5, align 4
  %4168 = shl i32 %4167, 5
  %4169 = load i32, i32* %5, align 4
  %4170 = lshr i32 %4169, 27
  %4171 = or i32 %4168, %4170
  %4172 = load i32, i32* %9, align 4
  %4173 = add i32 %4171, %4172
  %4174 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4175 = load i32, i32* %4174, align 16
  %4176 = add i32 %4173, %4175
  %4177 = load i32, i32* %6, align 4
  %4178 = load i32, i32* %7, align 4
  %4179 = xor i32 %4177, %4178
  %4180 = load i32, i32* %8, align 4
  %4181 = xor i32 %4179, %4180
  %4182 = add i32 %4176, %4181
  %4183 = add i32 %4182, -899497514
  store i32 %4183, i32* %10, align 4
  %4184 = load i32, i32* %8, align 4
  store i32 %4184, i32* %9, align 4
  %4185 = load i32, i32* %7, align 4
  store i32 %4185, i32* %8, align 4
  %4186 = load i32, i32* %6, align 4
  %4187 = shl i32 %4186, 30
  %4188 = load i32, i32* %6, align 4
  %4189 = lshr i32 %4188, 2
  %4190 = or i32 %4187, %4189
  store i32 %4190, i32* %7, align 4
  %4191 = load i32, i32* %5, align 4
  store i32 %4191, i32* %6, align 4
  %4192 = load i32, i32* %10, align 4
  store i32 %4192, i32* %5, align 4
  %4193 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %4194 = load i32, i32* %4193, align 8
  %4195 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %4196 = load i32, i32* %4195, align 4
  %4197 = xor i32 %4194, %4196
  %4198 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %4199 = load i32, i32* %4198, align 4
  %4200 = xor i32 %4197, %4199
  %4201 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %4202 = load i32, i32* %4201, align 4
  %4203 = xor i32 %4200, %4202
  %4204 = shl i32 %4203, 1
  %4205 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 10
  %4206 = load i32, i32* %4205, align 8
  %4207 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 5
  %4208 = load i32, i32* %4207, align 4
  %4209 = xor i32 %4206, %4208
  %4210 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %4211 = load i32, i32* %4210, align 4
  %4212 = xor i32 %4209, %4211
  %4213 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %4214 = load i32, i32* %4213, align 4
  %4215 = xor i32 %4212, %4214
  %4216 = lshr i32 %4215, 31
  %4217 = or i32 %4204, %4216
  %4218 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  store i32 %4217, i32* %4218, align 4
  %4219 = load i32, i32* %5, align 4
  %4220 = shl i32 %4219, 5
  %4221 = load i32, i32* %5, align 4
  %4222 = lshr i32 %4221, 27
  %4223 = or i32 %4220, %4222
  %4224 = load i32, i32* %9, align 4
  %4225 = add i32 %4223, %4224
  %4226 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 13
  %4227 = load i32, i32* %4226, align 4
  %4228 = add i32 %4225, %4227
  %4229 = load i32, i32* %6, align 4
  %4230 = load i32, i32* %7, align 4
  %4231 = xor i32 %4229, %4230
  %4232 = load i32, i32* %8, align 4
  %4233 = xor i32 %4231, %4232
  %4234 = add i32 %4228, %4233
  %4235 = add i32 %4234, -899497514
  store i32 %4235, i32* %10, align 4
  %4236 = load i32, i32* %8, align 4
  store i32 %4236, i32* %9, align 4
  %4237 = load i32, i32* %7, align 4
  store i32 %4237, i32* %8, align 4
  %4238 = load i32, i32* %6, align 4
  %4239 = shl i32 %4238, 30
  %4240 = load i32, i32* %6, align 4
  %4241 = lshr i32 %4240, 2
  %4242 = or i32 %4239, %4241
  store i32 %4242, i32* %7, align 4
  %4243 = load i32, i32* %5, align 4
  store i32 %4243, i32* %6, align 4
  %4244 = load i32, i32* %10, align 4
  store i32 %4244, i32* %5, align 4
  %4245 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4246 = load i32, i32* %4245, align 4
  %4247 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %4248 = load i32, i32* %4247, align 8
  %4249 = xor i32 %4246, %4248
  %4250 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %4251 = load i32, i32* %4250, align 16
  %4252 = xor i32 %4249, %4251
  %4253 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %4254 = load i32, i32* %4253, align 8
  %4255 = xor i32 %4252, %4254
  %4256 = shl i32 %4255, 1
  %4257 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 11
  %4258 = load i32, i32* %4257, align 4
  %4259 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 6
  %4260 = load i32, i32* %4259, align 8
  %4261 = xor i32 %4258, %4260
  %4262 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %4263 = load i32, i32* %4262, align 16
  %4264 = xor i32 %4261, %4263
  %4265 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %4266 = load i32, i32* %4265, align 8
  %4267 = xor i32 %4264, %4266
  %4268 = lshr i32 %4267, 31
  %4269 = or i32 %4256, %4268
  %4270 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  store i32 %4269, i32* %4270, align 8
  %4271 = load i32, i32* %5, align 4
  %4272 = shl i32 %4271, 5
  %4273 = load i32, i32* %5, align 4
  %4274 = lshr i32 %4273, 27
  %4275 = or i32 %4272, %4274
  %4276 = load i32, i32* %9, align 4
  %4277 = add i32 %4275, %4276
  %4278 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 14
  %4279 = load i32, i32* %4278, align 8
  %4280 = add i32 %4277, %4279
  %4281 = load i32, i32* %6, align 4
  %4282 = load i32, i32* %7, align 4
  %4283 = xor i32 %4281, %4282
  %4284 = load i32, i32* %8, align 4
  %4285 = xor i32 %4283, %4284
  %4286 = add i32 %4280, %4285
  %4287 = add i32 %4286, -899497514
  store i32 %4287, i32* %10, align 4
  %4288 = load i32, i32* %8, align 4
  store i32 %4288, i32* %9, align 4
  %4289 = load i32, i32* %7, align 4
  store i32 %4289, i32* %8, align 4
  %4290 = load i32, i32* %6, align 4
  %4291 = shl i32 %4290, 30
  %4292 = load i32, i32* %6, align 4
  %4293 = lshr i32 %4292, 2
  %4294 = or i32 %4291, %4293
  store i32 %4294, i32* %7, align 4
  %4295 = load i32, i32* %5, align 4
  store i32 %4295, i32* %6, align 4
  %4296 = load i32, i32* %10, align 4
  store i32 %4296, i32* %5, align 4
  %4297 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4298 = load i32, i32* %4297, align 16
  %4299 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %4300 = load i32, i32* %4299, align 4
  %4301 = xor i32 %4298, %4300
  %4302 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %4303 = load i32, i32* %4302, align 4
  %4304 = xor i32 %4301, %4303
  %4305 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %4306 = load i32, i32* %4305, align 4
  %4307 = xor i32 %4304, %4306
  %4308 = shl i32 %4307, 1
  %4309 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 12
  %4310 = load i32, i32* %4309, align 16
  %4311 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 7
  %4312 = load i32, i32* %4311, align 4
  %4313 = xor i32 %4310, %4312
  %4314 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 1
  %4315 = load i32, i32* %4314, align 4
  %4316 = xor i32 %4313, %4315
  %4317 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %4318 = load i32, i32* %4317, align 4
  %4319 = xor i32 %4316, %4318
  %4320 = lshr i32 %4319, 31
  %4321 = or i32 %4308, %4320
  %4322 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  store i32 %4321, i32* %4322, align 4
  %4323 = load i32, i32* %5, align 4
  %4324 = shl i32 %4323, 5
  %4325 = load i32, i32* %5, align 4
  %4326 = lshr i32 %4325, 27
  %4327 = or i32 %4324, %4326
  %4328 = load i32, i32* %9, align 4
  %4329 = add i32 %4327, %4328
  %4330 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 15
  %4331 = load i32, i32* %4330, align 4
  %4332 = add i32 %4329, %4331
  %4333 = load i32, i32* %6, align 4
  %4334 = load i32, i32* %7, align 4
  %4335 = xor i32 %4333, %4334
  %4336 = load i32, i32* %8, align 4
  %4337 = xor i32 %4335, %4336
  %4338 = add i32 %4332, %4337
  %4339 = add i32 %4338, -899497514
  store i32 %4339, i32* %10, align 4
  %4340 = load i32, i32* %8, align 4
  store i32 %4340, i32* %9, align 4
  %4341 = load i32, i32* %7, align 4
  store i32 %4341, i32* %8, align 4
  %4342 = load i32, i32* %6, align 4
  %4343 = shl i32 %4342, 30
  %4344 = load i32, i32* %6, align 4
  %4345 = lshr i32 %4344, 2
  %4346 = or i32 %4343, %4345
  store i32 %4346, i32* %7, align 4
  %4347 = load i32, i32* %5, align 4
  store i32 %4347, i32* %6, align 4
  %4348 = load i32, i32* %10, align 4
  store i32 %4348, i32* %5, align 4
  %4349 = load i32, i32* %9, align 4
  %4350 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %4351 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %4350, i32 0, i32 2
  %4352 = bitcast %union.anon.31* %4351 to [5 x i32]*
  %4353 = getelementptr inbounds [5 x i32], [5 x i32]* %4352, i64 0, i64 4
  %4354 = load i32, i32* %4353, align 8
  %4355 = add i32 %4354, %4349
  store i32 %4355, i32* %4353, align 8
  %4356 = load i32, i32* %8, align 4
  %4357 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %4358 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %4357, i32 0, i32 2
  %4359 = bitcast %union.anon.31* %4358 to [5 x i32]*
  %4360 = getelementptr inbounds [5 x i32], [5 x i32]* %4359, i64 0, i64 3
  %4361 = load i32, i32* %4360, align 4
  %4362 = add i32 %4361, %4356
  store i32 %4362, i32* %4360, align 4
  %4363 = load i32, i32* %7, align 4
  %4364 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %4365 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %4364, i32 0, i32 2
  %4366 = bitcast %union.anon.31* %4365 to [5 x i32]*
  %4367 = getelementptr inbounds [5 x i32], [5 x i32]* %4366, i64 0, i64 2
  %4368 = load i32, i32* %4367, align 8
  %4369 = add i32 %4368, %4363
  store i32 %4369, i32* %4367, align 8
  %4370 = load i32, i32* %6, align 4
  %4371 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %4372 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %4371, i32 0, i32 2
  %4373 = bitcast %union.anon.31* %4372 to [5 x i32]*
  %4374 = getelementptr inbounds [5 x i32], [5 x i32]* %4373, i64 0, i64 1
  %4375 = load i32, i32* %4374, align 4
  %4376 = add i32 %4375, %4370
  store i32 %4376, i32* %4374, align 4
  %4377 = load i32, i32* %5, align 4
  %4378 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %3, align 8
  %4379 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %4378, i32 0, i32 2
  %4380 = bitcast %union.anon.31* %4379 to [5 x i32]*
  %4381 = getelementptr inbounds [5 x i32], [5 x i32]* %4380, i64 0, i64 0
  %4382 = load i32, i32* %4381, align 8
  %4383 = add i32 %4382, %4377
  store i32 %4383, i32* %4381, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_sha1_result(%struct.fio_sha1_s*) #0 {
  %2 = alloca %struct.fio_sha1_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store %struct.fio_sha1_s* %0, %struct.fio_sha1_s** %2, align 8
  %5 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %6 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 63
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  %10 = icmp ugt i64 %9, 55
  br i1 %10, label %11, label %26

11:                                               ; preds = %1
  %12 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %13 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %12, i32 0, i32 1
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 0
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = load i64, i64* %3, align 8
  %18 = sub i64 64, %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @sha1_padding to [64 x i8]*), i64 0, i64 0), i64 %18, i1 false)
  %19 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %20 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %21 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %20, i32 0, i32 1
  %22 = getelementptr inbounds [64 x i8], [64 x i8]* %21, i64 0, i64 0
  call void @fio_sha1_perform_all_rounds(%struct.fio_sha1_s* %19, i8* %22)
  %23 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %24 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %23, i32 0, i32 1
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %24, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 1 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @sha1_padding to [64 x i8]*), i64 0, i64 1), i64 56, i1 false)
  br label %43

26:                                               ; preds = %1
  %27 = load i64, i64* %3, align 8
  %28 = icmp ne i64 %27, 55
  br i1 %28, label %29, label %37

29:                                               ; preds = %26
  %30 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %31 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %30, i32 0, i32 1
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %31, i64 0, i64 0
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  %35 = load i64, i64* %3, align 8
  %36 = sub i64 56, %35
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @sha1_padding to [64 x i8]*), i64 0, i64 0), i64 %36, i1 false)
  br label %42

37:                                               ; preds = %26
  %38 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @sha1_padding to [64 x i8]*), i64 0, i64 0), align 16
  %39 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %40 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %39, i32 0, i32 1
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %40, i64 0, i64 55
  store i8 %38, i8* %41, align 1
  br label %42

42:                                               ; preds = %37, %29
  br label %43

43:                                               ; preds = %42, %11
  %44 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %45 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %44, i32 0, i32 1
  %46 = getelementptr inbounds [64 x i8], [64 x i8]* %45, i64 0, i64 0
  %47 = getelementptr inbounds i8, i8* %46, i64 56
  %48 = bitcast i8* %47 to i64*
  store i64* %48, i64** %4, align 8
  %49 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = shl i64 %51, 3
  %53 = load i64*, i64** %4, align 8
  store i64 %52, i64* %53, align 8
  %54 = load i64*, i64** %4, align 8
  %55 = load i64, i64* %54, align 8
  %56 = call i64 @llvm.bswap.i64(i64 %55)
  %57 = load i64*, i64** %4, align 8
  store i64 %56, i64* %57, align 8
  %58 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %59 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %60 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %59, i32 0, i32 1
  %61 = getelementptr inbounds [64 x i8], [64 x i8]* %60, i64 0, i64 0
  call void @fio_sha1_perform_all_rounds(%struct.fio_sha1_s* %58, i8* %61)
  %62 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %63 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %62, i32 0, i32 2
  %64 = bitcast %union.anon.31* %63 to [5 x i32]*
  %65 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i64 0, i64 0
  %66 = load i32, i32* %65, align 8
  %67 = call i32 @llvm.bswap.i32(i32 %66)
  %68 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %69 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %68, i32 0, i32 2
  %70 = bitcast %union.anon.31* %69 to [5 x i32]*
  %71 = getelementptr inbounds [5 x i32], [5 x i32]* %70, i64 0, i64 0
  store i32 %67, i32* %71, align 8
  %72 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %73 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %72, i32 0, i32 2
  %74 = bitcast %union.anon.31* %73 to [5 x i32]*
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %74, i64 0, i64 1
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @llvm.bswap.i32(i32 %76)
  %78 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %79 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %78, i32 0, i32 2
  %80 = bitcast %union.anon.31* %79 to [5 x i32]*
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %80, i64 0, i64 1
  store i32 %77, i32* %81, align 4
  %82 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %83 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %82, i32 0, i32 2
  %84 = bitcast %union.anon.31* %83 to [5 x i32]*
  %85 = getelementptr inbounds [5 x i32], [5 x i32]* %84, i64 0, i64 2
  %86 = load i32, i32* %85, align 8
  %87 = call i32 @llvm.bswap.i32(i32 %86)
  %88 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %89 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %88, i32 0, i32 2
  %90 = bitcast %union.anon.31* %89 to [5 x i32]*
  %91 = getelementptr inbounds [5 x i32], [5 x i32]* %90, i64 0, i64 2
  store i32 %87, i32* %91, align 8
  %92 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %93 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %92, i32 0, i32 2
  %94 = bitcast %union.anon.31* %93 to [5 x i32]*
  %95 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i64 0, i64 3
  %96 = load i32, i32* %95, align 4
  %97 = call i32 @llvm.bswap.i32(i32 %96)
  %98 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %99 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %98, i32 0, i32 2
  %100 = bitcast %union.anon.31* %99 to [5 x i32]*
  %101 = getelementptr inbounds [5 x i32], [5 x i32]* %100, i64 0, i64 3
  store i32 %97, i32* %101, align 4
  %102 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %103 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %102, i32 0, i32 2
  %104 = bitcast %union.anon.31* %103 to [5 x i32]*
  %105 = getelementptr inbounds [5 x i32], [5 x i32]* %104, i64 0, i64 4
  %106 = load i32, i32* %105, align 8
  %107 = call i32 @llvm.bswap.i32(i32 %106)
  %108 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %109 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %108, i32 0, i32 2
  %110 = bitcast %union.anon.31* %109 to [5 x i32]*
  %111 = getelementptr inbounds [5 x i32], [5 x i32]* %110, i64 0, i64 4
  store i32 %107, i32* %111, align 8
  %112 = load %struct.fio_sha1_s*, %struct.fio_sha1_s** %2, align 8
  %113 = getelementptr inbounds %struct.fio_sha1_s, %struct.fio_sha1_s* %112, i32 0, i32 2
  %114 = bitcast %union.anon.31* %113 to [21 x i8]*
  %115 = getelementptr inbounds [21 x i8], [21 x i8]* %114, i64 0, i64 0
  ret i8* %115
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_sha2_init(%struct.fio_sha2_s* noalias sret, i32) #0 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = bitcast %struct.fio_sha2_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %7, i8 0, i64 224, i1 false)
  %8 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %9 = bitcast %union.anon.33* %8 to [16 x i32]*
  %10 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 0
  %11 = bitcast [16 x i32]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 4 bitcast (<{ [8 x i32], [8 x i32] }>* @constinit.38 to i8*), i64 64, i1 false)
  %12 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 2, i32* %12, align 8
  br label %87

13:                                               ; preds = %2
  %14 = load i32, i32* %3, align 4
  %15 = icmp eq i32 %14, 7
  br i1 %15, label %16, label %26

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 0
  %18 = bitcast %union.anon.32* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 16, i1 false)
  %19 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 1
  %20 = bitcast [128 x i8]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %20, i8 0, i64 128, i1 false)
  %21 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %22 = bitcast %union.anon.33* %21 to [8 x i64]*
  %23 = getelementptr inbounds [8 x i64], [8 x i64]* %22, i64 0, i64 0
  %24 = bitcast [8 x i64]* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 8 bitcast ([8 x i64]* @constinit.39 to i8*), i64 64, i1 false)
  %25 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 7, i32* %25, align 8
  br label %87

26:                                               ; preds = %13
  %27 = load i32, i32* %3, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 0
  %31 = bitcast %union.anon.32* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 0, i64 16, i1 false)
  %32 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 1
  %33 = bitcast [128 x i8]* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 128, i1 false)
  %34 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %35 = bitcast %union.anon.33* %34 to [8 x i64]*
  %36 = getelementptr inbounds [8 x i64], [8 x i64]* %35, i64 0, i64 0
  %37 = bitcast [8 x i64]* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %37, i8* align 8 bitcast ([8 x i64]* @constinit.40 to i8*), i64 64, i1 false)
  %38 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 1, i32* %38, align 8
  br label %87

39:                                               ; preds = %26
  %40 = load i32, i32* %3, align 4
  %41 = icmp eq i32 %40, 4
  br i1 %41, label %42, label %49

42:                                               ; preds = %39
  %43 = bitcast %struct.fio_sha2_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %43, i8 0, i64 224, i1 false)
  %44 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %45 = bitcast %union.anon.33* %44 to [16 x i32]*
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %45, i64 0, i64 0
  %47 = bitcast [16 x i32]* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %47, i8* align 4 bitcast (<{ [8 x i32], [8 x i32] }>* @constinit.41 to i8*), i64 64, i1 false)
  %48 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 4, i32* %48, align 8
  br label %87

49:                                               ; preds = %39
  %50 = load i32, i32* %3, align 4
  %51 = icmp eq i32 %50, 5
  br i1 %51, label %52, label %62

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 0
  %54 = bitcast %union.anon.32* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %54, i8 0, i64 16, i1 false)
  %55 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 1
  %56 = bitcast [128 x i8]* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %56, i8 0, i64 128, i1 false)
  %57 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %58 = bitcast %union.anon.33* %57 to [8 x i64]*
  %59 = getelementptr inbounds [8 x i64], [8 x i64]* %58, i64 0, i64 0
  %60 = bitcast [8 x i64]* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %60, i8* align 8 bitcast ([8 x i64]* @constinit.42 to i8*), i64 64, i1 false)
  %61 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 5, i32* %61, align 8
  br label %87

62:                                               ; preds = %49
  %63 = load i32, i32* %3, align 4
  %64 = icmp eq i32 %63, 3
  br i1 %64, label %65, label %75

65:                                               ; preds = %62
  %66 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 0
  %67 = bitcast %union.anon.32* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %67, i8 0, i64 16, i1 false)
  %68 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 1
  %69 = bitcast [128 x i8]* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %69, i8 0, i64 128, i1 false)
  %70 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 2
  %71 = bitcast %union.anon.33* %70 to [8 x i64]*
  %72 = getelementptr inbounds [8 x i64], [8 x i64]* %71, i64 0, i64 0
  %73 = bitcast [8 x i64]* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* align 8 bitcast ([8 x i64]* @constinit.43 to i8*), i64 64, i1 false)
  %74 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %0, i32 0, i32 3
  store i32 3, i32* %74, align 8
  br label %87

75:                                               ; preds = %62
  br label %76

76:                                               ; preds = %75
  br label %77

77:                                               ; preds = %76
  br label %78

78:                                               ; preds = %77
  br label %79

79:                                               ; preds = %78
  br label %80

80:                                               ; preds = %79
  br label %81

81:                                               ; preds = %80
  %82 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %83 = icmp sle i32 1, %82
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.44, i64 0, i64 0))
  br label %85

85:                                               ; preds = %84, %81
  br label %86

86:                                               ; preds = %85
  call void @exit(i32 2) #11
  unreachable

87:                                               ; preds = %65, %52, %42, %29, %16, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fio_sha2_write(%struct.fio_sha2_s*, i8*, i64) #0 {
  %4 = alloca %struct.fio_sha2_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store %struct.fio_sha2_s* %0, %struct.fio_sha2_s** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %10 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %115

14:                                               ; preds = %3
  %15 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %16 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %15, i32 0, i32 0
  %17 = bitcast %union.anon.32* %16 to [2 x i64]*
  %18 = getelementptr inbounds [2 x i64], [2 x i64]* %17, i64 0, i64 0
  %19 = load i64, i64* %18, align 16
  %20 = and i64 %19, 127
  store i64 %20, i64* %7, align 8
  %21 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %22 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %21, i32 0, i32 0
  %23 = bitcast %union.anon.32* %22 to [2 x i64]*
  %24 = getelementptr inbounds [2 x i64], [2 x i64]* %23, i64 0, i64 0
  %25 = load i64, i64* %24, align 16
  %26 = load i64, i64* %6, align 8
  %27 = add i64 %25, %26
  %28 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %29 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %28, i32 0, i32 0
  %30 = bitcast %union.anon.32* %29 to [2 x i64]*
  %31 = getelementptr inbounds [2 x i64], [2 x i64]* %30, i64 0, i64 0
  %32 = load i64, i64* %31, align 16
  %33 = icmp ult i64 %27, %32
  br i1 %33, label %34, label %46

34:                                               ; preds = %14
  %35 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %36 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %35, i32 0, i32 0
  %37 = bitcast %union.anon.32* %36 to [2 x i64]*
  %38 = getelementptr inbounds [2 x i64], [2 x i64]* %37, i64 0, i64 1
  %39 = load i64, i64* %38, align 8
  %40 = shl i64 %39, 1
  %41 = or i64 %40, 1
  %42 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %43 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %42, i32 0, i32 0
  %44 = bitcast %union.anon.32* %43 to [2 x i64]*
  %45 = getelementptr inbounds [2 x i64], [2 x i64]* %44, i64 0, i64 1
  store i64 %41, i64* %45, align 8
  br label %46

46:                                               ; preds = %34, %14
  %47 = load i64, i64* %6, align 8
  %48 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %49 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %48, i32 0, i32 0
  %50 = bitcast %union.anon.32* %49 to [2 x i64]*
  %51 = getelementptr inbounds [2 x i64], [2 x i64]* %50, i64 0, i64 0
  %52 = load i64, i64* %51, align 16
  %53 = add i64 %52, %47
  store i64 %53, i64* %51, align 16
  %54 = load i64, i64* %7, align 8
  %55 = sub i64 128, %54
  store i64 %55, i64* %8, align 8
  %56 = load i64, i64* %8, align 8
  %57 = load i64, i64* %6, align 8
  %58 = icmp ugt i64 %56, %57
  br i1 %58, label %59, label %67

59:                                               ; preds = %46
  %60 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %61 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %60, i32 0, i32 1
  %62 = getelementptr inbounds [128 x i8], [128 x i8]* %61, i64 0, i64 0
  %63 = load i64, i64* %7, align 8
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = load i8*, i8** %5, align 8
  %66 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %65, i64 %66, i1 false)
  br label %190

67:                                               ; preds = %46
  %68 = load i64, i64* %7, align 8
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %90

70:                                               ; preds = %67
  %71 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %72 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %71, i32 0, i32 1
  %73 = getelementptr inbounds [128 x i8], [128 x i8]* %72, i64 0, i64 0
  %74 = load i64, i64* %7, align 8
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  %76 = load i8*, i8** %5, align 8
  %77 = load i64, i64* %8, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 1 %76, i64 %77, i1 false)
  %78 = load i64, i64* %8, align 8
  %79 = load i64, i64* %6, align 8
  %80 = sub i64 %79, %78
  store i64 %80, i64* %6, align 8
  %81 = load i8*, i8** %5, align 8
  %82 = ptrtoint i8* %81 to i64
  %83 = load i64, i64* %8, align 8
  %84 = add i64 %82, %83
  %85 = inttoptr i64 %84 to i8*
  store i8* %85, i8** %5, align 8
  %86 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %87 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %88 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %87, i32 0, i32 1
  %89 = getelementptr inbounds [128 x i8], [128 x i8]* %88, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %86, i8* %89)
  br label %90

90:                                               ; preds = %70, %67
  br label %91

91:                                               ; preds = %94, %90
  %92 = load i64, i64* %6, align 8
  %93 = icmp uge i64 %92, 128
  br i1 %93, label %94, label %103

94:                                               ; preds = %91
  %95 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %96 = load i8*, i8** %5, align 8
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %95, i8* %96)
  %97 = load i8*, i8** %5, align 8
  %98 = ptrtoint i8* %97 to i64
  %99 = add i64 %98, 128
  %100 = inttoptr i64 %99 to i8*
  store i8* %100, i8** %5, align 8
  %101 = load i64, i64* %6, align 8
  %102 = sub i64 %101, 128
  store i64 %102, i64* %6, align 8
  br label %91

103:                                              ; preds = %91
  %104 = load i64, i64* %6, align 8
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %114

106:                                              ; preds = %103
  %107 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %108 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %107, i32 0, i32 1
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %108, i64 0, i64 0
  %110 = load i64, i64* %7, align 8
  %111 = getelementptr inbounds i8, i8* %109, i64 %110
  %112 = load i8*, i8** %5, align 8
  %113 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %112, i64 %113, i1 false)
  br label %114

114:                                              ; preds = %106, %103
  br label %190

115:                                              ; preds = %3
  %116 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %117 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %116, i32 0, i32 0
  %118 = bitcast %union.anon.32* %117 to [2 x i64]*
  %119 = getelementptr inbounds [2 x i64], [2 x i64]* %118, i64 0, i64 0
  %120 = load i64, i64* %119, align 16
  %121 = and i64 %120, 63
  store i64 %121, i64* %7, align 8
  %122 = load i64, i64* %7, align 8
  %123 = sub i64 64, %122
  store i64 %123, i64* %8, align 8
  %124 = load i64, i64* %6, align 8
  %125 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %126 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %125, i32 0, i32 0
  %127 = bitcast %union.anon.32* %126 to [2 x i64]*
  %128 = getelementptr inbounds [2 x i64], [2 x i64]* %127, i64 0, i64 0
  %129 = load i64, i64* %128, align 16
  %130 = add i64 %129, %124
  store i64 %130, i64* %128, align 16
  %131 = load i64, i64* %8, align 8
  %132 = load i64, i64* %6, align 8
  %133 = icmp ugt i64 %131, %132
  br i1 %133, label %134, label %142

134:                                              ; preds = %115
  %135 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %136 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %135, i32 0, i32 1
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %136, i64 0, i64 0
  %138 = load i64, i64* %7, align 8
  %139 = getelementptr inbounds i8, i8* %137, i64 %138
  %140 = load i8*, i8** %5, align 8
  %141 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %140, i64 %141, i1 false)
  br label %190

142:                                              ; preds = %115
  %143 = load i64, i64* %7, align 8
  %144 = icmp ne i64 %143, 0
  br i1 %144, label %145, label %165

145:                                              ; preds = %142
  %146 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %147 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %146, i32 0, i32 1
  %148 = getelementptr inbounds [128 x i8], [128 x i8]* %147, i64 0, i64 0
  %149 = load i64, i64* %7, align 8
  %150 = getelementptr inbounds i8, i8* %148, i64 %149
  %151 = load i8*, i8** %5, align 8
  %152 = load i64, i64* %8, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %151, i64 %152, i1 false)
  %153 = load i64, i64* %8, align 8
  %154 = load i64, i64* %6, align 8
  %155 = sub i64 %154, %153
  store i64 %155, i64* %6, align 8
  %156 = load i8*, i8** %5, align 8
  %157 = ptrtoint i8* %156 to i64
  %158 = load i64, i64* %8, align 8
  %159 = add i64 %157, %158
  %160 = inttoptr i64 %159 to i8*
  store i8* %160, i8** %5, align 8
  %161 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %162 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %163 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %162, i32 0, i32 1
  %164 = getelementptr inbounds [128 x i8], [128 x i8]* %163, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %161, i8* %164)
  br label %165

165:                                              ; preds = %145, %142
  br label %166

166:                                              ; preds = %169, %165
  %167 = load i64, i64* %6, align 8
  %168 = icmp uge i64 %167, 64
  br i1 %168, label %169, label %178

169:                                              ; preds = %166
  %170 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %171 = load i8*, i8** %5, align 8
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %170, i8* %171)
  %172 = load i8*, i8** %5, align 8
  %173 = ptrtoint i8* %172 to i64
  %174 = add i64 %173, 64
  %175 = inttoptr i64 %174 to i8*
  store i8* %175, i8** %5, align 8
  %176 = load i64, i64* %6, align 8
  %177 = sub i64 %176, 64
  store i64 %177, i64* %6, align 8
  br label %166

178:                                              ; preds = %166
  %179 = load i64, i64* %6, align 8
  %180 = icmp ne i64 %179, 0
  br i1 %180, label %181, label %189

181:                                              ; preds = %178
  %182 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %4, align 8
  %183 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %182, i32 0, i32 1
  %184 = getelementptr inbounds [128 x i8], [128 x i8]* %183, i64 0, i64 0
  %185 = load i64, i64* %7, align 8
  %186 = getelementptr inbounds i8, i8* %184, i64 %185
  %187 = load i8*, i8** %5, align 8
  %188 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %187, i64 %188, i1 false)
  br label %189

189:                                              ; preds = %181, %178
  br label %190

190:                                              ; preds = %189, %134, %114, %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s*, i8*) #0 {
  %3 = alloca %struct.fio_sha2_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca [80 x i64], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca [64 x i32], align 16
  store %struct.fio_sha2_s* %0, %struct.fio_sha2_s** %3, align 8
  store i8* %1, i8** %4, align 8
  %27 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %28 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %27, i32 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %9865

32:                                               ; preds = %2
  %33 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %34 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %33, i32 0, i32 2
  %35 = bitcast %union.anon.33* %34 to [8 x i64]*
  %36 = getelementptr inbounds [8 x i64], [8 x i64]* %35, i64 0, i64 0
  %37 = load i64, i64* %36, align 16
  store i64 %37, i64* %5, align 8
  %38 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %39 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %38, i32 0, i32 2
  %40 = bitcast %union.anon.33* %39 to [8 x i64]*
  %41 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 1
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %6, align 8
  %43 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %44 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %43, i32 0, i32 2
  %45 = bitcast %union.anon.33* %44 to [8 x i64]*
  %46 = getelementptr inbounds [8 x i64], [8 x i64]* %45, i64 0, i64 2
  %47 = load i64, i64* %46, align 16
  store i64 %47, i64* %7, align 8
  %48 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %49 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %48, i32 0, i32 2
  %50 = bitcast %union.anon.33* %49 to [8 x i64]*
  %51 = getelementptr inbounds [8 x i64], [8 x i64]* %50, i64 0, i64 3
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %8, align 8
  %53 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %54 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %53, i32 0, i32 2
  %55 = bitcast %union.anon.33* %54 to [8 x i64]*
  %56 = getelementptr inbounds [8 x i64], [8 x i64]* %55, i64 0, i64 4
  %57 = load i64, i64* %56, align 16
  store i64 %57, i64* %9, align 8
  %58 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %59 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %58, i32 0, i32 2
  %60 = bitcast %union.anon.33* %59 to [8 x i64]*
  %61 = getelementptr inbounds [8 x i64], [8 x i64]* %60, i64 0, i64 5
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %10, align 8
  %63 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %64 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %63, i32 0, i32 2
  %65 = bitcast %union.anon.33* %64 to [8 x i64]*
  %66 = getelementptr inbounds [8 x i64], [8 x i64]* %65, i64 0, i64 6
  %67 = load i64, i64* %66, align 16
  store i64 %67, i64* %11, align 8
  %68 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %69 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %68, i32 0, i32 2
  %70 = bitcast %union.anon.33* %69 to [8 x i64]*
  %71 = getelementptr inbounds [8 x i64], [8 x i64]* %70, i64 0, i64 7
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %12, align 8
  %73 = load i8*, i8** %4, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 0
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = shl i64 %76, 56
  %78 = load i8*, i8** %4, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = shl i64 %81, 48
  %83 = or i64 %77, %82
  %84 = load i8*, i8** %4, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = shl i64 %87, 40
  %89 = or i64 %83, %88
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = shl i64 %93, 32
  %95 = or i64 %89, %94
  %96 = load i8*, i8** %4, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 4
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = shl i64 %99, 24
  %101 = or i64 %95, %100
  %102 = load i8*, i8** %4, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 5
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = shl i64 %105, 16
  %107 = or i64 %101, %106
  %108 = load i8*, i8** %4, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 6
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = shl i64 %111, 8
  %113 = or i64 %107, %112
  %114 = load i8*, i8** %4, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 7
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i64
  %118 = or i64 %113, %117
  %119 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 0
  store i64 %118, i64* %119, align 16
  %120 = load i8*, i8** %4, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 8
  %122 = getelementptr inbounds i8, i8* %121, i64 0
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = shl i64 %124, 56
  %126 = load i8*, i8** %4, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = shl i64 %130, 48
  %132 = or i64 %125, %131
  %133 = load i8*, i8** %4, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 8
  %135 = getelementptr inbounds i8, i8* %134, i64 2
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = shl i64 %137, 40
  %139 = or i64 %132, %138
  %140 = load i8*, i8** %4, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 8
  %142 = getelementptr inbounds i8, i8* %141, i64 3
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = shl i64 %144, 32
  %146 = or i64 %139, %145
  %147 = load i8*, i8** %4, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 8
  %149 = getelementptr inbounds i8, i8* %148, i64 4
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i64
  %152 = shl i64 %151, 24
  %153 = or i64 %146, %152
  %154 = load i8*, i8** %4, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 8
  %156 = getelementptr inbounds i8, i8* %155, i64 5
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = shl i64 %158, 16
  %160 = or i64 %153, %159
  %161 = load i8*, i8** %4, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 8
  %163 = getelementptr inbounds i8, i8* %162, i64 6
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i64
  %166 = shl i64 %165, 8
  %167 = or i64 %160, %166
  %168 = load i8*, i8** %4, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 8
  %170 = getelementptr inbounds i8, i8* %169, i64 7
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = or i64 %167, %172
  %174 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  store i64 %173, i64* %174, align 8
  %175 = load i8*, i8** %4, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 16
  %177 = getelementptr inbounds i8, i8* %176, i64 0
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i64
  %180 = shl i64 %179, 56
  %181 = load i8*, i8** %4, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 16
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i64
  %186 = shl i64 %185, 48
  %187 = or i64 %180, %186
  %188 = load i8*, i8** %4, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 16
  %190 = getelementptr inbounds i8, i8* %189, i64 2
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = shl i64 %192, 40
  %194 = or i64 %187, %193
  %195 = load i8*, i8** %4, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 16
  %197 = getelementptr inbounds i8, i8* %196, i64 3
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i64
  %200 = shl i64 %199, 32
  %201 = or i64 %194, %200
  %202 = load i8*, i8** %4, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 16
  %204 = getelementptr inbounds i8, i8* %203, i64 4
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i64
  %207 = shl i64 %206, 24
  %208 = or i64 %201, %207
  %209 = load i8*, i8** %4, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 16
  %211 = getelementptr inbounds i8, i8* %210, i64 5
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i64
  %214 = shl i64 %213, 16
  %215 = or i64 %208, %214
  %216 = load i8*, i8** %4, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 16
  %218 = getelementptr inbounds i8, i8* %217, i64 6
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i64
  %221 = shl i64 %220, 8
  %222 = or i64 %215, %221
  %223 = load i8*, i8** %4, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 16
  %225 = getelementptr inbounds i8, i8* %224, i64 7
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i64
  %228 = or i64 %222, %227
  %229 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  store i64 %228, i64* %229, align 16
  %230 = load i8*, i8** %4, align 8
  %231 = getelementptr inbounds i8, i8* %230, i64 24
  %232 = getelementptr inbounds i8, i8* %231, i64 0
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = shl i64 %234, 56
  %236 = load i8*, i8** %4, align 8
  %237 = getelementptr inbounds i8, i8* %236, i64 24
  %238 = getelementptr inbounds i8, i8* %237, i64 1
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i64
  %241 = shl i64 %240, 48
  %242 = or i64 %235, %241
  %243 = load i8*, i8** %4, align 8
  %244 = getelementptr inbounds i8, i8* %243, i64 24
  %245 = getelementptr inbounds i8, i8* %244, i64 2
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i64
  %248 = shl i64 %247, 40
  %249 = or i64 %242, %248
  %250 = load i8*, i8** %4, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 24
  %252 = getelementptr inbounds i8, i8* %251, i64 3
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = shl i64 %254, 32
  %256 = or i64 %249, %255
  %257 = load i8*, i8** %4, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 24
  %259 = getelementptr inbounds i8, i8* %258, i64 4
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i64
  %262 = shl i64 %261, 24
  %263 = or i64 %256, %262
  %264 = load i8*, i8** %4, align 8
  %265 = getelementptr inbounds i8, i8* %264, i64 24
  %266 = getelementptr inbounds i8, i8* %265, i64 5
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i64
  %269 = shl i64 %268, 16
  %270 = or i64 %263, %269
  %271 = load i8*, i8** %4, align 8
  %272 = getelementptr inbounds i8, i8* %271, i64 24
  %273 = getelementptr inbounds i8, i8* %272, i64 6
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i64
  %276 = shl i64 %275, 8
  %277 = or i64 %270, %276
  %278 = load i8*, i8** %4, align 8
  %279 = getelementptr inbounds i8, i8* %278, i64 24
  %280 = getelementptr inbounds i8, i8* %279, i64 7
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i64
  %283 = or i64 %277, %282
  %284 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  store i64 %283, i64* %284, align 8
  %285 = load i8*, i8** %4, align 8
  %286 = getelementptr inbounds i8, i8* %285, i64 32
  %287 = getelementptr inbounds i8, i8* %286, i64 0
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i64
  %290 = shl i64 %289, 56
  %291 = load i8*, i8** %4, align 8
  %292 = getelementptr inbounds i8, i8* %291, i64 32
  %293 = getelementptr inbounds i8, i8* %292, i64 1
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i64
  %296 = shl i64 %295, 48
  %297 = or i64 %290, %296
  %298 = load i8*, i8** %4, align 8
  %299 = getelementptr inbounds i8, i8* %298, i64 32
  %300 = getelementptr inbounds i8, i8* %299, i64 2
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i64
  %303 = shl i64 %302, 40
  %304 = or i64 %297, %303
  %305 = load i8*, i8** %4, align 8
  %306 = getelementptr inbounds i8, i8* %305, i64 32
  %307 = getelementptr inbounds i8, i8* %306, i64 3
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i64
  %310 = shl i64 %309, 32
  %311 = or i64 %304, %310
  %312 = load i8*, i8** %4, align 8
  %313 = getelementptr inbounds i8, i8* %312, i64 32
  %314 = getelementptr inbounds i8, i8* %313, i64 4
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i64
  %317 = shl i64 %316, 24
  %318 = or i64 %311, %317
  %319 = load i8*, i8** %4, align 8
  %320 = getelementptr inbounds i8, i8* %319, i64 32
  %321 = getelementptr inbounds i8, i8* %320, i64 5
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i64
  %324 = shl i64 %323, 16
  %325 = or i64 %318, %324
  %326 = load i8*, i8** %4, align 8
  %327 = getelementptr inbounds i8, i8* %326, i64 32
  %328 = getelementptr inbounds i8, i8* %327, i64 6
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i64
  %331 = shl i64 %330, 8
  %332 = or i64 %325, %331
  %333 = load i8*, i8** %4, align 8
  %334 = getelementptr inbounds i8, i8* %333, i64 32
  %335 = getelementptr inbounds i8, i8* %334, i64 7
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i64
  %338 = or i64 %332, %337
  %339 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  store i64 %338, i64* %339, align 16
  %340 = load i8*, i8** %4, align 8
  %341 = getelementptr inbounds i8, i8* %340, i64 40
  %342 = getelementptr inbounds i8, i8* %341, i64 0
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i64
  %345 = shl i64 %344, 56
  %346 = load i8*, i8** %4, align 8
  %347 = getelementptr inbounds i8, i8* %346, i64 40
  %348 = getelementptr inbounds i8, i8* %347, i64 1
  %349 = load i8, i8* %348, align 1
  %350 = zext i8 %349 to i64
  %351 = shl i64 %350, 48
  %352 = or i64 %345, %351
  %353 = load i8*, i8** %4, align 8
  %354 = getelementptr inbounds i8, i8* %353, i64 40
  %355 = getelementptr inbounds i8, i8* %354, i64 2
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i64
  %358 = shl i64 %357, 40
  %359 = or i64 %352, %358
  %360 = load i8*, i8** %4, align 8
  %361 = getelementptr inbounds i8, i8* %360, i64 40
  %362 = getelementptr inbounds i8, i8* %361, i64 3
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i64
  %365 = shl i64 %364, 32
  %366 = or i64 %359, %365
  %367 = load i8*, i8** %4, align 8
  %368 = getelementptr inbounds i8, i8* %367, i64 40
  %369 = getelementptr inbounds i8, i8* %368, i64 4
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i64
  %372 = shl i64 %371, 24
  %373 = or i64 %366, %372
  %374 = load i8*, i8** %4, align 8
  %375 = getelementptr inbounds i8, i8* %374, i64 40
  %376 = getelementptr inbounds i8, i8* %375, i64 5
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i64
  %379 = shl i64 %378, 16
  %380 = or i64 %373, %379
  %381 = load i8*, i8** %4, align 8
  %382 = getelementptr inbounds i8, i8* %381, i64 40
  %383 = getelementptr inbounds i8, i8* %382, i64 6
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i64
  %386 = shl i64 %385, 8
  %387 = or i64 %380, %386
  %388 = load i8*, i8** %4, align 8
  %389 = getelementptr inbounds i8, i8* %388, i64 40
  %390 = getelementptr inbounds i8, i8* %389, i64 7
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i64
  %393 = or i64 %387, %392
  %394 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  store i64 %393, i64* %394, align 8
  %395 = load i8*, i8** %4, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 48
  %397 = getelementptr inbounds i8, i8* %396, i64 0
  %398 = load i8, i8* %397, align 1
  %399 = zext i8 %398 to i64
  %400 = shl i64 %399, 56
  %401 = load i8*, i8** %4, align 8
  %402 = getelementptr inbounds i8, i8* %401, i64 48
  %403 = getelementptr inbounds i8, i8* %402, i64 1
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i64
  %406 = shl i64 %405, 48
  %407 = or i64 %400, %406
  %408 = load i8*, i8** %4, align 8
  %409 = getelementptr inbounds i8, i8* %408, i64 48
  %410 = getelementptr inbounds i8, i8* %409, i64 2
  %411 = load i8, i8* %410, align 1
  %412 = zext i8 %411 to i64
  %413 = shl i64 %412, 40
  %414 = or i64 %407, %413
  %415 = load i8*, i8** %4, align 8
  %416 = getelementptr inbounds i8, i8* %415, i64 48
  %417 = getelementptr inbounds i8, i8* %416, i64 3
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i64
  %420 = shl i64 %419, 32
  %421 = or i64 %414, %420
  %422 = load i8*, i8** %4, align 8
  %423 = getelementptr inbounds i8, i8* %422, i64 48
  %424 = getelementptr inbounds i8, i8* %423, i64 4
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i64
  %427 = shl i64 %426, 24
  %428 = or i64 %421, %427
  %429 = load i8*, i8** %4, align 8
  %430 = getelementptr inbounds i8, i8* %429, i64 48
  %431 = getelementptr inbounds i8, i8* %430, i64 5
  %432 = load i8, i8* %431, align 1
  %433 = zext i8 %432 to i64
  %434 = shl i64 %433, 16
  %435 = or i64 %428, %434
  %436 = load i8*, i8** %4, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 48
  %438 = getelementptr inbounds i8, i8* %437, i64 6
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i64
  %441 = shl i64 %440, 8
  %442 = or i64 %435, %441
  %443 = load i8*, i8** %4, align 8
  %444 = getelementptr inbounds i8, i8* %443, i64 48
  %445 = getelementptr inbounds i8, i8* %444, i64 7
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i64
  %448 = or i64 %442, %447
  %449 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  store i64 %448, i64* %449, align 16
  %450 = load i8*, i8** %4, align 8
  %451 = getelementptr inbounds i8, i8* %450, i64 56
  %452 = getelementptr inbounds i8, i8* %451, i64 0
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i64
  %455 = shl i64 %454, 56
  %456 = load i8*, i8** %4, align 8
  %457 = getelementptr inbounds i8, i8* %456, i64 56
  %458 = getelementptr inbounds i8, i8* %457, i64 1
  %459 = load i8, i8* %458, align 1
  %460 = zext i8 %459 to i64
  %461 = shl i64 %460, 48
  %462 = or i64 %455, %461
  %463 = load i8*, i8** %4, align 8
  %464 = getelementptr inbounds i8, i8* %463, i64 56
  %465 = getelementptr inbounds i8, i8* %464, i64 2
  %466 = load i8, i8* %465, align 1
  %467 = zext i8 %466 to i64
  %468 = shl i64 %467, 40
  %469 = or i64 %462, %468
  %470 = load i8*, i8** %4, align 8
  %471 = getelementptr inbounds i8, i8* %470, i64 56
  %472 = getelementptr inbounds i8, i8* %471, i64 3
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i64
  %475 = shl i64 %474, 32
  %476 = or i64 %469, %475
  %477 = load i8*, i8** %4, align 8
  %478 = getelementptr inbounds i8, i8* %477, i64 56
  %479 = getelementptr inbounds i8, i8* %478, i64 4
  %480 = load i8, i8* %479, align 1
  %481 = zext i8 %480 to i64
  %482 = shl i64 %481, 24
  %483 = or i64 %476, %482
  %484 = load i8*, i8** %4, align 8
  %485 = getelementptr inbounds i8, i8* %484, i64 56
  %486 = getelementptr inbounds i8, i8* %485, i64 5
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i64
  %489 = shl i64 %488, 16
  %490 = or i64 %483, %489
  %491 = load i8*, i8** %4, align 8
  %492 = getelementptr inbounds i8, i8* %491, i64 56
  %493 = getelementptr inbounds i8, i8* %492, i64 6
  %494 = load i8, i8* %493, align 1
  %495 = zext i8 %494 to i64
  %496 = shl i64 %495, 8
  %497 = or i64 %490, %496
  %498 = load i8*, i8** %4, align 8
  %499 = getelementptr inbounds i8, i8* %498, i64 56
  %500 = getelementptr inbounds i8, i8* %499, i64 7
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i64
  %503 = or i64 %497, %502
  %504 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  store i64 %503, i64* %504, align 8
  %505 = load i8*, i8** %4, align 8
  %506 = getelementptr inbounds i8, i8* %505, i64 64
  %507 = getelementptr inbounds i8, i8* %506, i64 0
  %508 = load i8, i8* %507, align 1
  %509 = zext i8 %508 to i64
  %510 = shl i64 %509, 56
  %511 = load i8*, i8** %4, align 8
  %512 = getelementptr inbounds i8, i8* %511, i64 64
  %513 = getelementptr inbounds i8, i8* %512, i64 1
  %514 = load i8, i8* %513, align 1
  %515 = zext i8 %514 to i64
  %516 = shl i64 %515, 48
  %517 = or i64 %510, %516
  %518 = load i8*, i8** %4, align 8
  %519 = getelementptr inbounds i8, i8* %518, i64 64
  %520 = getelementptr inbounds i8, i8* %519, i64 2
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i64
  %523 = shl i64 %522, 40
  %524 = or i64 %517, %523
  %525 = load i8*, i8** %4, align 8
  %526 = getelementptr inbounds i8, i8* %525, i64 64
  %527 = getelementptr inbounds i8, i8* %526, i64 3
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i64
  %530 = shl i64 %529, 32
  %531 = or i64 %524, %530
  %532 = load i8*, i8** %4, align 8
  %533 = getelementptr inbounds i8, i8* %532, i64 64
  %534 = getelementptr inbounds i8, i8* %533, i64 4
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i64
  %537 = shl i64 %536, 24
  %538 = or i64 %531, %537
  %539 = load i8*, i8** %4, align 8
  %540 = getelementptr inbounds i8, i8* %539, i64 64
  %541 = getelementptr inbounds i8, i8* %540, i64 5
  %542 = load i8, i8* %541, align 1
  %543 = zext i8 %542 to i64
  %544 = shl i64 %543, 16
  %545 = or i64 %538, %544
  %546 = load i8*, i8** %4, align 8
  %547 = getelementptr inbounds i8, i8* %546, i64 64
  %548 = getelementptr inbounds i8, i8* %547, i64 6
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i64
  %551 = shl i64 %550, 8
  %552 = or i64 %545, %551
  %553 = load i8*, i8** %4, align 8
  %554 = getelementptr inbounds i8, i8* %553, i64 64
  %555 = getelementptr inbounds i8, i8* %554, i64 7
  %556 = load i8, i8* %555, align 1
  %557 = zext i8 %556 to i64
  %558 = or i64 %552, %557
  %559 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  store i64 %558, i64* %559, align 16
  %560 = load i8*, i8** %4, align 8
  %561 = getelementptr inbounds i8, i8* %560, i64 72
  %562 = getelementptr inbounds i8, i8* %561, i64 0
  %563 = load i8, i8* %562, align 1
  %564 = zext i8 %563 to i64
  %565 = shl i64 %564, 56
  %566 = load i8*, i8** %4, align 8
  %567 = getelementptr inbounds i8, i8* %566, i64 72
  %568 = getelementptr inbounds i8, i8* %567, i64 1
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i64
  %571 = shl i64 %570, 48
  %572 = or i64 %565, %571
  %573 = load i8*, i8** %4, align 8
  %574 = getelementptr inbounds i8, i8* %573, i64 72
  %575 = getelementptr inbounds i8, i8* %574, i64 2
  %576 = load i8, i8* %575, align 1
  %577 = zext i8 %576 to i64
  %578 = shl i64 %577, 40
  %579 = or i64 %572, %578
  %580 = load i8*, i8** %4, align 8
  %581 = getelementptr inbounds i8, i8* %580, i64 72
  %582 = getelementptr inbounds i8, i8* %581, i64 3
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i64
  %585 = shl i64 %584, 32
  %586 = or i64 %579, %585
  %587 = load i8*, i8** %4, align 8
  %588 = getelementptr inbounds i8, i8* %587, i64 72
  %589 = getelementptr inbounds i8, i8* %588, i64 4
  %590 = load i8, i8* %589, align 1
  %591 = zext i8 %590 to i64
  %592 = shl i64 %591, 24
  %593 = or i64 %586, %592
  %594 = load i8*, i8** %4, align 8
  %595 = getelementptr inbounds i8, i8* %594, i64 72
  %596 = getelementptr inbounds i8, i8* %595, i64 5
  %597 = load i8, i8* %596, align 1
  %598 = zext i8 %597 to i64
  %599 = shl i64 %598, 16
  %600 = or i64 %593, %599
  %601 = load i8*, i8** %4, align 8
  %602 = getelementptr inbounds i8, i8* %601, i64 72
  %603 = getelementptr inbounds i8, i8* %602, i64 6
  %604 = load i8, i8* %603, align 1
  %605 = zext i8 %604 to i64
  %606 = shl i64 %605, 8
  %607 = or i64 %600, %606
  %608 = load i8*, i8** %4, align 8
  %609 = getelementptr inbounds i8, i8* %608, i64 72
  %610 = getelementptr inbounds i8, i8* %609, i64 7
  %611 = load i8, i8* %610, align 1
  %612 = zext i8 %611 to i64
  %613 = or i64 %607, %612
  %614 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  store i64 %613, i64* %614, align 8
  %615 = load i8*, i8** %4, align 8
  %616 = getelementptr inbounds i8, i8* %615, i64 80
  %617 = getelementptr inbounds i8, i8* %616, i64 0
  %618 = load i8, i8* %617, align 1
  %619 = zext i8 %618 to i64
  %620 = shl i64 %619, 56
  %621 = load i8*, i8** %4, align 8
  %622 = getelementptr inbounds i8, i8* %621, i64 80
  %623 = getelementptr inbounds i8, i8* %622, i64 1
  %624 = load i8, i8* %623, align 1
  %625 = zext i8 %624 to i64
  %626 = shl i64 %625, 48
  %627 = or i64 %620, %626
  %628 = load i8*, i8** %4, align 8
  %629 = getelementptr inbounds i8, i8* %628, i64 80
  %630 = getelementptr inbounds i8, i8* %629, i64 2
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i64
  %633 = shl i64 %632, 40
  %634 = or i64 %627, %633
  %635 = load i8*, i8** %4, align 8
  %636 = getelementptr inbounds i8, i8* %635, i64 80
  %637 = getelementptr inbounds i8, i8* %636, i64 3
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i64
  %640 = shl i64 %639, 32
  %641 = or i64 %634, %640
  %642 = load i8*, i8** %4, align 8
  %643 = getelementptr inbounds i8, i8* %642, i64 80
  %644 = getelementptr inbounds i8, i8* %643, i64 4
  %645 = load i8, i8* %644, align 1
  %646 = zext i8 %645 to i64
  %647 = shl i64 %646, 24
  %648 = or i64 %641, %647
  %649 = load i8*, i8** %4, align 8
  %650 = getelementptr inbounds i8, i8* %649, i64 80
  %651 = getelementptr inbounds i8, i8* %650, i64 5
  %652 = load i8, i8* %651, align 1
  %653 = zext i8 %652 to i64
  %654 = shl i64 %653, 16
  %655 = or i64 %648, %654
  %656 = load i8*, i8** %4, align 8
  %657 = getelementptr inbounds i8, i8* %656, i64 80
  %658 = getelementptr inbounds i8, i8* %657, i64 6
  %659 = load i8, i8* %658, align 1
  %660 = zext i8 %659 to i64
  %661 = shl i64 %660, 8
  %662 = or i64 %655, %661
  %663 = load i8*, i8** %4, align 8
  %664 = getelementptr inbounds i8, i8* %663, i64 80
  %665 = getelementptr inbounds i8, i8* %664, i64 7
  %666 = load i8, i8* %665, align 1
  %667 = zext i8 %666 to i64
  %668 = or i64 %662, %667
  %669 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  store i64 %668, i64* %669, align 16
  %670 = load i8*, i8** %4, align 8
  %671 = getelementptr inbounds i8, i8* %670, i64 88
  %672 = getelementptr inbounds i8, i8* %671, i64 0
  %673 = load i8, i8* %672, align 1
  %674 = zext i8 %673 to i64
  %675 = shl i64 %674, 56
  %676 = load i8*, i8** %4, align 8
  %677 = getelementptr inbounds i8, i8* %676, i64 88
  %678 = getelementptr inbounds i8, i8* %677, i64 1
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i64
  %681 = shl i64 %680, 48
  %682 = or i64 %675, %681
  %683 = load i8*, i8** %4, align 8
  %684 = getelementptr inbounds i8, i8* %683, i64 88
  %685 = getelementptr inbounds i8, i8* %684, i64 2
  %686 = load i8, i8* %685, align 1
  %687 = zext i8 %686 to i64
  %688 = shl i64 %687, 40
  %689 = or i64 %682, %688
  %690 = load i8*, i8** %4, align 8
  %691 = getelementptr inbounds i8, i8* %690, i64 88
  %692 = getelementptr inbounds i8, i8* %691, i64 3
  %693 = load i8, i8* %692, align 1
  %694 = zext i8 %693 to i64
  %695 = shl i64 %694, 32
  %696 = or i64 %689, %695
  %697 = load i8*, i8** %4, align 8
  %698 = getelementptr inbounds i8, i8* %697, i64 88
  %699 = getelementptr inbounds i8, i8* %698, i64 4
  %700 = load i8, i8* %699, align 1
  %701 = zext i8 %700 to i64
  %702 = shl i64 %701, 24
  %703 = or i64 %696, %702
  %704 = load i8*, i8** %4, align 8
  %705 = getelementptr inbounds i8, i8* %704, i64 88
  %706 = getelementptr inbounds i8, i8* %705, i64 5
  %707 = load i8, i8* %706, align 1
  %708 = zext i8 %707 to i64
  %709 = shl i64 %708, 16
  %710 = or i64 %703, %709
  %711 = load i8*, i8** %4, align 8
  %712 = getelementptr inbounds i8, i8* %711, i64 88
  %713 = getelementptr inbounds i8, i8* %712, i64 6
  %714 = load i8, i8* %713, align 1
  %715 = zext i8 %714 to i64
  %716 = shl i64 %715, 8
  %717 = or i64 %710, %716
  %718 = load i8*, i8** %4, align 8
  %719 = getelementptr inbounds i8, i8* %718, i64 88
  %720 = getelementptr inbounds i8, i8* %719, i64 7
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i64
  %723 = or i64 %717, %722
  %724 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  store i64 %723, i64* %724, align 8
  %725 = load i8*, i8** %4, align 8
  %726 = getelementptr inbounds i8, i8* %725, i64 96
  %727 = getelementptr inbounds i8, i8* %726, i64 0
  %728 = load i8, i8* %727, align 1
  %729 = zext i8 %728 to i64
  %730 = shl i64 %729, 56
  %731 = load i8*, i8** %4, align 8
  %732 = getelementptr inbounds i8, i8* %731, i64 96
  %733 = getelementptr inbounds i8, i8* %732, i64 1
  %734 = load i8, i8* %733, align 1
  %735 = zext i8 %734 to i64
  %736 = shl i64 %735, 48
  %737 = or i64 %730, %736
  %738 = load i8*, i8** %4, align 8
  %739 = getelementptr inbounds i8, i8* %738, i64 96
  %740 = getelementptr inbounds i8, i8* %739, i64 2
  %741 = load i8, i8* %740, align 1
  %742 = zext i8 %741 to i64
  %743 = shl i64 %742, 40
  %744 = or i64 %737, %743
  %745 = load i8*, i8** %4, align 8
  %746 = getelementptr inbounds i8, i8* %745, i64 96
  %747 = getelementptr inbounds i8, i8* %746, i64 3
  %748 = load i8, i8* %747, align 1
  %749 = zext i8 %748 to i64
  %750 = shl i64 %749, 32
  %751 = or i64 %744, %750
  %752 = load i8*, i8** %4, align 8
  %753 = getelementptr inbounds i8, i8* %752, i64 96
  %754 = getelementptr inbounds i8, i8* %753, i64 4
  %755 = load i8, i8* %754, align 1
  %756 = zext i8 %755 to i64
  %757 = shl i64 %756, 24
  %758 = or i64 %751, %757
  %759 = load i8*, i8** %4, align 8
  %760 = getelementptr inbounds i8, i8* %759, i64 96
  %761 = getelementptr inbounds i8, i8* %760, i64 5
  %762 = load i8, i8* %761, align 1
  %763 = zext i8 %762 to i64
  %764 = shl i64 %763, 16
  %765 = or i64 %758, %764
  %766 = load i8*, i8** %4, align 8
  %767 = getelementptr inbounds i8, i8* %766, i64 96
  %768 = getelementptr inbounds i8, i8* %767, i64 6
  %769 = load i8, i8* %768, align 1
  %770 = zext i8 %769 to i64
  %771 = shl i64 %770, 8
  %772 = or i64 %765, %771
  %773 = load i8*, i8** %4, align 8
  %774 = getelementptr inbounds i8, i8* %773, i64 96
  %775 = getelementptr inbounds i8, i8* %774, i64 7
  %776 = load i8, i8* %775, align 1
  %777 = zext i8 %776 to i64
  %778 = or i64 %772, %777
  %779 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  store i64 %778, i64* %779, align 16
  %780 = load i8*, i8** %4, align 8
  %781 = getelementptr inbounds i8, i8* %780, i64 104
  %782 = getelementptr inbounds i8, i8* %781, i64 0
  %783 = load i8, i8* %782, align 1
  %784 = zext i8 %783 to i64
  %785 = shl i64 %784, 56
  %786 = load i8*, i8** %4, align 8
  %787 = getelementptr inbounds i8, i8* %786, i64 104
  %788 = getelementptr inbounds i8, i8* %787, i64 1
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = shl i64 %790, 48
  %792 = or i64 %785, %791
  %793 = load i8*, i8** %4, align 8
  %794 = getelementptr inbounds i8, i8* %793, i64 104
  %795 = getelementptr inbounds i8, i8* %794, i64 2
  %796 = load i8, i8* %795, align 1
  %797 = zext i8 %796 to i64
  %798 = shl i64 %797, 40
  %799 = or i64 %792, %798
  %800 = load i8*, i8** %4, align 8
  %801 = getelementptr inbounds i8, i8* %800, i64 104
  %802 = getelementptr inbounds i8, i8* %801, i64 3
  %803 = load i8, i8* %802, align 1
  %804 = zext i8 %803 to i64
  %805 = shl i64 %804, 32
  %806 = or i64 %799, %805
  %807 = load i8*, i8** %4, align 8
  %808 = getelementptr inbounds i8, i8* %807, i64 104
  %809 = getelementptr inbounds i8, i8* %808, i64 4
  %810 = load i8, i8* %809, align 1
  %811 = zext i8 %810 to i64
  %812 = shl i64 %811, 24
  %813 = or i64 %806, %812
  %814 = load i8*, i8** %4, align 8
  %815 = getelementptr inbounds i8, i8* %814, i64 104
  %816 = getelementptr inbounds i8, i8* %815, i64 5
  %817 = load i8, i8* %816, align 1
  %818 = zext i8 %817 to i64
  %819 = shl i64 %818, 16
  %820 = or i64 %813, %819
  %821 = load i8*, i8** %4, align 8
  %822 = getelementptr inbounds i8, i8* %821, i64 104
  %823 = getelementptr inbounds i8, i8* %822, i64 6
  %824 = load i8, i8* %823, align 1
  %825 = zext i8 %824 to i64
  %826 = shl i64 %825, 8
  %827 = or i64 %820, %826
  %828 = load i8*, i8** %4, align 8
  %829 = getelementptr inbounds i8, i8* %828, i64 104
  %830 = getelementptr inbounds i8, i8* %829, i64 7
  %831 = load i8, i8* %830, align 1
  %832 = zext i8 %831 to i64
  %833 = or i64 %827, %832
  %834 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  store i64 %833, i64* %834, align 8
  %835 = load i8*, i8** %4, align 8
  %836 = getelementptr inbounds i8, i8* %835, i64 112
  %837 = getelementptr inbounds i8, i8* %836, i64 0
  %838 = load i8, i8* %837, align 1
  %839 = zext i8 %838 to i64
  %840 = shl i64 %839, 56
  %841 = load i8*, i8** %4, align 8
  %842 = getelementptr inbounds i8, i8* %841, i64 112
  %843 = getelementptr inbounds i8, i8* %842, i64 1
  %844 = load i8, i8* %843, align 1
  %845 = zext i8 %844 to i64
  %846 = shl i64 %845, 48
  %847 = or i64 %840, %846
  %848 = load i8*, i8** %4, align 8
  %849 = getelementptr inbounds i8, i8* %848, i64 112
  %850 = getelementptr inbounds i8, i8* %849, i64 2
  %851 = load i8, i8* %850, align 1
  %852 = zext i8 %851 to i64
  %853 = shl i64 %852, 40
  %854 = or i64 %847, %853
  %855 = load i8*, i8** %4, align 8
  %856 = getelementptr inbounds i8, i8* %855, i64 112
  %857 = getelementptr inbounds i8, i8* %856, i64 3
  %858 = load i8, i8* %857, align 1
  %859 = zext i8 %858 to i64
  %860 = shl i64 %859, 32
  %861 = or i64 %854, %860
  %862 = load i8*, i8** %4, align 8
  %863 = getelementptr inbounds i8, i8* %862, i64 112
  %864 = getelementptr inbounds i8, i8* %863, i64 4
  %865 = load i8, i8* %864, align 1
  %866 = zext i8 %865 to i64
  %867 = shl i64 %866, 24
  %868 = or i64 %861, %867
  %869 = load i8*, i8** %4, align 8
  %870 = getelementptr inbounds i8, i8* %869, i64 112
  %871 = getelementptr inbounds i8, i8* %870, i64 5
  %872 = load i8, i8* %871, align 1
  %873 = zext i8 %872 to i64
  %874 = shl i64 %873, 16
  %875 = or i64 %868, %874
  %876 = load i8*, i8** %4, align 8
  %877 = getelementptr inbounds i8, i8* %876, i64 112
  %878 = getelementptr inbounds i8, i8* %877, i64 6
  %879 = load i8, i8* %878, align 1
  %880 = zext i8 %879 to i64
  %881 = shl i64 %880, 8
  %882 = or i64 %875, %881
  %883 = load i8*, i8** %4, align 8
  %884 = getelementptr inbounds i8, i8* %883, i64 112
  %885 = getelementptr inbounds i8, i8* %884, i64 7
  %886 = load i8, i8* %885, align 1
  %887 = zext i8 %886 to i64
  %888 = or i64 %882, %887
  %889 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  store i64 %888, i64* %889, align 16
  %890 = load i8*, i8** %4, align 8
  %891 = getelementptr inbounds i8, i8* %890, i64 120
  %892 = getelementptr inbounds i8, i8* %891, i64 0
  %893 = load i8, i8* %892, align 1
  %894 = zext i8 %893 to i64
  %895 = shl i64 %894, 56
  %896 = load i8*, i8** %4, align 8
  %897 = getelementptr inbounds i8, i8* %896, i64 120
  %898 = getelementptr inbounds i8, i8* %897, i64 1
  %899 = load i8, i8* %898, align 1
  %900 = zext i8 %899 to i64
  %901 = shl i64 %900, 48
  %902 = or i64 %895, %901
  %903 = load i8*, i8** %4, align 8
  %904 = getelementptr inbounds i8, i8* %903, i64 120
  %905 = getelementptr inbounds i8, i8* %904, i64 2
  %906 = load i8, i8* %905, align 1
  %907 = zext i8 %906 to i64
  %908 = shl i64 %907, 40
  %909 = or i64 %902, %908
  %910 = load i8*, i8** %4, align 8
  %911 = getelementptr inbounds i8, i8* %910, i64 120
  %912 = getelementptr inbounds i8, i8* %911, i64 3
  %913 = load i8, i8* %912, align 1
  %914 = zext i8 %913 to i64
  %915 = shl i64 %914, 32
  %916 = or i64 %909, %915
  %917 = load i8*, i8** %4, align 8
  %918 = getelementptr inbounds i8, i8* %917, i64 120
  %919 = getelementptr inbounds i8, i8* %918, i64 4
  %920 = load i8, i8* %919, align 1
  %921 = zext i8 %920 to i64
  %922 = shl i64 %921, 24
  %923 = or i64 %916, %922
  %924 = load i8*, i8** %4, align 8
  %925 = getelementptr inbounds i8, i8* %924, i64 120
  %926 = getelementptr inbounds i8, i8* %925, i64 5
  %927 = load i8, i8* %926, align 1
  %928 = zext i8 %927 to i64
  %929 = shl i64 %928, 16
  %930 = or i64 %923, %929
  %931 = load i8*, i8** %4, align 8
  %932 = getelementptr inbounds i8, i8* %931, i64 120
  %933 = getelementptr inbounds i8, i8* %932, i64 6
  %934 = load i8, i8* %933, align 1
  %935 = zext i8 %934 to i64
  %936 = shl i64 %935, 8
  %937 = or i64 %930, %936
  %938 = load i8*, i8** %4, align 8
  %939 = getelementptr inbounds i8, i8* %938, i64 120
  %940 = getelementptr inbounds i8, i8* %939, i64 7
  %941 = load i8, i8* %940, align 1
  %942 = zext i8 %941 to i64
  %943 = or i64 %937, %942
  %944 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  store i64 %943, i64* %944, align 8
  %945 = load i64, i64* %12, align 8
  %946 = load i64, i64* %9, align 8
  %947 = lshr i64 %946, 14
  %948 = load i64, i64* %9, align 8
  %949 = shl i64 %948, 50
  %950 = or i64 %947, %949
  %951 = load i64, i64* %9, align 8
  %952 = lshr i64 %951, 18
  %953 = load i64, i64* %9, align 8
  %954 = shl i64 %953, 46
  %955 = or i64 %952, %954
  %956 = xor i64 %950, %955
  %957 = load i64, i64* %9, align 8
  %958 = lshr i64 %957, 41
  %959 = load i64, i64* %9, align 8
  %960 = shl i64 %959, 23
  %961 = or i64 %958, %960
  %962 = xor i64 %956, %961
  %963 = add i64 %945, %962
  %964 = load i64, i64* %9, align 8
  %965 = load i64, i64* %10, align 8
  %966 = and i64 %964, %965
  %967 = load i64, i64* %9, align 8
  %968 = xor i64 %967, -1
  %969 = load i64, i64* %11, align 8
  %970 = and i64 %968, %969
  %971 = xor i64 %966, %970
  %972 = add i64 %963, %971
  %973 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 0), align 16
  %974 = add i64 %972, %973
  %975 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 0
  %976 = load i64, i64* %975, align 16
  %977 = add i64 %974, %976
  store i64 %977, i64* %13, align 8
  %978 = load i64, i64* %5, align 8
  %979 = lshr i64 %978, 28
  %980 = load i64, i64* %5, align 8
  %981 = shl i64 %980, 36
  %982 = or i64 %979, %981
  %983 = load i64, i64* %5, align 8
  %984 = lshr i64 %983, 34
  %985 = load i64, i64* %5, align 8
  %986 = shl i64 %985, 30
  %987 = or i64 %984, %986
  %988 = xor i64 %982, %987
  %989 = load i64, i64* %5, align 8
  %990 = lshr i64 %989, 39
  %991 = load i64, i64* %5, align 8
  %992 = shl i64 %991, 25
  %993 = or i64 %990, %992
  %994 = xor i64 %988, %993
  %995 = load i64, i64* %5, align 8
  %996 = load i64, i64* %6, align 8
  %997 = and i64 %995, %996
  %998 = load i64, i64* %5, align 8
  %999 = load i64, i64* %7, align 8
  %1000 = and i64 %998, %999
  %1001 = xor i64 %997, %1000
  %1002 = load i64, i64* %6, align 8
  %1003 = load i64, i64* %7, align 8
  %1004 = and i64 %1002, %1003
  %1005 = xor i64 %1001, %1004
  %1006 = add i64 %994, %1005
  store i64 %1006, i64* %14, align 8
  %1007 = load i64, i64* %11, align 8
  store i64 %1007, i64* %12, align 8
  %1008 = load i64, i64* %10, align 8
  store i64 %1008, i64* %11, align 8
  %1009 = load i64, i64* %9, align 8
  store i64 %1009, i64* %10, align 8
  %1010 = load i64, i64* %8, align 8
  %1011 = load i64, i64* %13, align 8
  %1012 = add i64 %1010, %1011
  store i64 %1012, i64* %9, align 8
  %1013 = load i64, i64* %7, align 8
  store i64 %1013, i64* %8, align 8
  %1014 = load i64, i64* %6, align 8
  store i64 %1014, i64* %7, align 8
  %1015 = load i64, i64* %5, align 8
  store i64 %1015, i64* %6, align 8
  %1016 = load i64, i64* %13, align 8
  %1017 = load i64, i64* %14, align 8
  %1018 = add i64 %1016, %1017
  store i64 %1018, i64* %5, align 8
  %1019 = load i64, i64* %12, align 8
  %1020 = load i64, i64* %9, align 8
  %1021 = lshr i64 %1020, 14
  %1022 = load i64, i64* %9, align 8
  %1023 = shl i64 %1022, 50
  %1024 = or i64 %1021, %1023
  %1025 = load i64, i64* %9, align 8
  %1026 = lshr i64 %1025, 18
  %1027 = load i64, i64* %9, align 8
  %1028 = shl i64 %1027, 46
  %1029 = or i64 %1026, %1028
  %1030 = xor i64 %1024, %1029
  %1031 = load i64, i64* %9, align 8
  %1032 = lshr i64 %1031, 41
  %1033 = load i64, i64* %9, align 8
  %1034 = shl i64 %1033, 23
  %1035 = or i64 %1032, %1034
  %1036 = xor i64 %1030, %1035
  %1037 = add i64 %1019, %1036
  %1038 = load i64, i64* %9, align 8
  %1039 = load i64, i64* %10, align 8
  %1040 = and i64 %1038, %1039
  %1041 = load i64, i64* %9, align 8
  %1042 = xor i64 %1041, -1
  %1043 = load i64, i64* %11, align 8
  %1044 = and i64 %1042, %1043
  %1045 = xor i64 %1040, %1044
  %1046 = add i64 %1037, %1045
  %1047 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 1), align 8
  %1048 = add i64 %1046, %1047
  %1049 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %1050 = load i64, i64* %1049, align 8
  %1051 = add i64 %1048, %1050
  store i64 %1051, i64* %13, align 8
  %1052 = load i64, i64* %5, align 8
  %1053 = lshr i64 %1052, 28
  %1054 = load i64, i64* %5, align 8
  %1055 = shl i64 %1054, 36
  %1056 = or i64 %1053, %1055
  %1057 = load i64, i64* %5, align 8
  %1058 = lshr i64 %1057, 34
  %1059 = load i64, i64* %5, align 8
  %1060 = shl i64 %1059, 30
  %1061 = or i64 %1058, %1060
  %1062 = xor i64 %1056, %1061
  %1063 = load i64, i64* %5, align 8
  %1064 = lshr i64 %1063, 39
  %1065 = load i64, i64* %5, align 8
  %1066 = shl i64 %1065, 25
  %1067 = or i64 %1064, %1066
  %1068 = xor i64 %1062, %1067
  %1069 = load i64, i64* %5, align 8
  %1070 = load i64, i64* %6, align 8
  %1071 = and i64 %1069, %1070
  %1072 = load i64, i64* %5, align 8
  %1073 = load i64, i64* %7, align 8
  %1074 = and i64 %1072, %1073
  %1075 = xor i64 %1071, %1074
  %1076 = load i64, i64* %6, align 8
  %1077 = load i64, i64* %7, align 8
  %1078 = and i64 %1076, %1077
  %1079 = xor i64 %1075, %1078
  %1080 = add i64 %1068, %1079
  store i64 %1080, i64* %14, align 8
  %1081 = load i64, i64* %11, align 8
  store i64 %1081, i64* %12, align 8
  %1082 = load i64, i64* %10, align 8
  store i64 %1082, i64* %11, align 8
  %1083 = load i64, i64* %9, align 8
  store i64 %1083, i64* %10, align 8
  %1084 = load i64, i64* %8, align 8
  %1085 = load i64, i64* %13, align 8
  %1086 = add i64 %1084, %1085
  store i64 %1086, i64* %9, align 8
  %1087 = load i64, i64* %7, align 8
  store i64 %1087, i64* %8, align 8
  %1088 = load i64, i64* %6, align 8
  store i64 %1088, i64* %7, align 8
  %1089 = load i64, i64* %5, align 8
  store i64 %1089, i64* %6, align 8
  %1090 = load i64, i64* %13, align 8
  %1091 = load i64, i64* %14, align 8
  %1092 = add i64 %1090, %1091
  store i64 %1092, i64* %5, align 8
  %1093 = load i64, i64* %12, align 8
  %1094 = load i64, i64* %9, align 8
  %1095 = lshr i64 %1094, 14
  %1096 = load i64, i64* %9, align 8
  %1097 = shl i64 %1096, 50
  %1098 = or i64 %1095, %1097
  %1099 = load i64, i64* %9, align 8
  %1100 = lshr i64 %1099, 18
  %1101 = load i64, i64* %9, align 8
  %1102 = shl i64 %1101, 46
  %1103 = or i64 %1100, %1102
  %1104 = xor i64 %1098, %1103
  %1105 = load i64, i64* %9, align 8
  %1106 = lshr i64 %1105, 41
  %1107 = load i64, i64* %9, align 8
  %1108 = shl i64 %1107, 23
  %1109 = or i64 %1106, %1108
  %1110 = xor i64 %1104, %1109
  %1111 = add i64 %1093, %1110
  %1112 = load i64, i64* %9, align 8
  %1113 = load i64, i64* %10, align 8
  %1114 = and i64 %1112, %1113
  %1115 = load i64, i64* %9, align 8
  %1116 = xor i64 %1115, -1
  %1117 = load i64, i64* %11, align 8
  %1118 = and i64 %1116, %1117
  %1119 = xor i64 %1114, %1118
  %1120 = add i64 %1111, %1119
  %1121 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 2), align 16
  %1122 = add i64 %1120, %1121
  %1123 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %1124 = load i64, i64* %1123, align 16
  %1125 = add i64 %1122, %1124
  store i64 %1125, i64* %13, align 8
  %1126 = load i64, i64* %5, align 8
  %1127 = lshr i64 %1126, 28
  %1128 = load i64, i64* %5, align 8
  %1129 = shl i64 %1128, 36
  %1130 = or i64 %1127, %1129
  %1131 = load i64, i64* %5, align 8
  %1132 = lshr i64 %1131, 34
  %1133 = load i64, i64* %5, align 8
  %1134 = shl i64 %1133, 30
  %1135 = or i64 %1132, %1134
  %1136 = xor i64 %1130, %1135
  %1137 = load i64, i64* %5, align 8
  %1138 = lshr i64 %1137, 39
  %1139 = load i64, i64* %5, align 8
  %1140 = shl i64 %1139, 25
  %1141 = or i64 %1138, %1140
  %1142 = xor i64 %1136, %1141
  %1143 = load i64, i64* %5, align 8
  %1144 = load i64, i64* %6, align 8
  %1145 = and i64 %1143, %1144
  %1146 = load i64, i64* %5, align 8
  %1147 = load i64, i64* %7, align 8
  %1148 = and i64 %1146, %1147
  %1149 = xor i64 %1145, %1148
  %1150 = load i64, i64* %6, align 8
  %1151 = load i64, i64* %7, align 8
  %1152 = and i64 %1150, %1151
  %1153 = xor i64 %1149, %1152
  %1154 = add i64 %1142, %1153
  store i64 %1154, i64* %14, align 8
  %1155 = load i64, i64* %11, align 8
  store i64 %1155, i64* %12, align 8
  %1156 = load i64, i64* %10, align 8
  store i64 %1156, i64* %11, align 8
  %1157 = load i64, i64* %9, align 8
  store i64 %1157, i64* %10, align 8
  %1158 = load i64, i64* %8, align 8
  %1159 = load i64, i64* %13, align 8
  %1160 = add i64 %1158, %1159
  store i64 %1160, i64* %9, align 8
  %1161 = load i64, i64* %7, align 8
  store i64 %1161, i64* %8, align 8
  %1162 = load i64, i64* %6, align 8
  store i64 %1162, i64* %7, align 8
  %1163 = load i64, i64* %5, align 8
  store i64 %1163, i64* %6, align 8
  %1164 = load i64, i64* %13, align 8
  %1165 = load i64, i64* %14, align 8
  %1166 = add i64 %1164, %1165
  store i64 %1166, i64* %5, align 8
  %1167 = load i64, i64* %12, align 8
  %1168 = load i64, i64* %9, align 8
  %1169 = lshr i64 %1168, 14
  %1170 = load i64, i64* %9, align 8
  %1171 = shl i64 %1170, 50
  %1172 = or i64 %1169, %1171
  %1173 = load i64, i64* %9, align 8
  %1174 = lshr i64 %1173, 18
  %1175 = load i64, i64* %9, align 8
  %1176 = shl i64 %1175, 46
  %1177 = or i64 %1174, %1176
  %1178 = xor i64 %1172, %1177
  %1179 = load i64, i64* %9, align 8
  %1180 = lshr i64 %1179, 41
  %1181 = load i64, i64* %9, align 8
  %1182 = shl i64 %1181, 23
  %1183 = or i64 %1180, %1182
  %1184 = xor i64 %1178, %1183
  %1185 = add i64 %1167, %1184
  %1186 = load i64, i64* %9, align 8
  %1187 = load i64, i64* %10, align 8
  %1188 = and i64 %1186, %1187
  %1189 = load i64, i64* %9, align 8
  %1190 = xor i64 %1189, -1
  %1191 = load i64, i64* %11, align 8
  %1192 = and i64 %1190, %1191
  %1193 = xor i64 %1188, %1192
  %1194 = add i64 %1185, %1193
  %1195 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 3), align 8
  %1196 = add i64 %1194, %1195
  %1197 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %1198 = load i64, i64* %1197, align 8
  %1199 = add i64 %1196, %1198
  store i64 %1199, i64* %13, align 8
  %1200 = load i64, i64* %5, align 8
  %1201 = lshr i64 %1200, 28
  %1202 = load i64, i64* %5, align 8
  %1203 = shl i64 %1202, 36
  %1204 = or i64 %1201, %1203
  %1205 = load i64, i64* %5, align 8
  %1206 = lshr i64 %1205, 34
  %1207 = load i64, i64* %5, align 8
  %1208 = shl i64 %1207, 30
  %1209 = or i64 %1206, %1208
  %1210 = xor i64 %1204, %1209
  %1211 = load i64, i64* %5, align 8
  %1212 = lshr i64 %1211, 39
  %1213 = load i64, i64* %5, align 8
  %1214 = shl i64 %1213, 25
  %1215 = or i64 %1212, %1214
  %1216 = xor i64 %1210, %1215
  %1217 = load i64, i64* %5, align 8
  %1218 = load i64, i64* %6, align 8
  %1219 = and i64 %1217, %1218
  %1220 = load i64, i64* %5, align 8
  %1221 = load i64, i64* %7, align 8
  %1222 = and i64 %1220, %1221
  %1223 = xor i64 %1219, %1222
  %1224 = load i64, i64* %6, align 8
  %1225 = load i64, i64* %7, align 8
  %1226 = and i64 %1224, %1225
  %1227 = xor i64 %1223, %1226
  %1228 = add i64 %1216, %1227
  store i64 %1228, i64* %14, align 8
  %1229 = load i64, i64* %11, align 8
  store i64 %1229, i64* %12, align 8
  %1230 = load i64, i64* %10, align 8
  store i64 %1230, i64* %11, align 8
  %1231 = load i64, i64* %9, align 8
  store i64 %1231, i64* %10, align 8
  %1232 = load i64, i64* %8, align 8
  %1233 = load i64, i64* %13, align 8
  %1234 = add i64 %1232, %1233
  store i64 %1234, i64* %9, align 8
  %1235 = load i64, i64* %7, align 8
  store i64 %1235, i64* %8, align 8
  %1236 = load i64, i64* %6, align 8
  store i64 %1236, i64* %7, align 8
  %1237 = load i64, i64* %5, align 8
  store i64 %1237, i64* %6, align 8
  %1238 = load i64, i64* %13, align 8
  %1239 = load i64, i64* %14, align 8
  %1240 = add i64 %1238, %1239
  store i64 %1240, i64* %5, align 8
  %1241 = load i64, i64* %12, align 8
  %1242 = load i64, i64* %9, align 8
  %1243 = lshr i64 %1242, 14
  %1244 = load i64, i64* %9, align 8
  %1245 = shl i64 %1244, 50
  %1246 = or i64 %1243, %1245
  %1247 = load i64, i64* %9, align 8
  %1248 = lshr i64 %1247, 18
  %1249 = load i64, i64* %9, align 8
  %1250 = shl i64 %1249, 46
  %1251 = or i64 %1248, %1250
  %1252 = xor i64 %1246, %1251
  %1253 = load i64, i64* %9, align 8
  %1254 = lshr i64 %1253, 41
  %1255 = load i64, i64* %9, align 8
  %1256 = shl i64 %1255, 23
  %1257 = or i64 %1254, %1256
  %1258 = xor i64 %1252, %1257
  %1259 = add i64 %1241, %1258
  %1260 = load i64, i64* %9, align 8
  %1261 = load i64, i64* %10, align 8
  %1262 = and i64 %1260, %1261
  %1263 = load i64, i64* %9, align 8
  %1264 = xor i64 %1263, -1
  %1265 = load i64, i64* %11, align 8
  %1266 = and i64 %1264, %1265
  %1267 = xor i64 %1262, %1266
  %1268 = add i64 %1259, %1267
  %1269 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 4), align 16
  %1270 = add i64 %1268, %1269
  %1271 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %1272 = load i64, i64* %1271, align 16
  %1273 = add i64 %1270, %1272
  store i64 %1273, i64* %13, align 8
  %1274 = load i64, i64* %5, align 8
  %1275 = lshr i64 %1274, 28
  %1276 = load i64, i64* %5, align 8
  %1277 = shl i64 %1276, 36
  %1278 = or i64 %1275, %1277
  %1279 = load i64, i64* %5, align 8
  %1280 = lshr i64 %1279, 34
  %1281 = load i64, i64* %5, align 8
  %1282 = shl i64 %1281, 30
  %1283 = or i64 %1280, %1282
  %1284 = xor i64 %1278, %1283
  %1285 = load i64, i64* %5, align 8
  %1286 = lshr i64 %1285, 39
  %1287 = load i64, i64* %5, align 8
  %1288 = shl i64 %1287, 25
  %1289 = or i64 %1286, %1288
  %1290 = xor i64 %1284, %1289
  %1291 = load i64, i64* %5, align 8
  %1292 = load i64, i64* %6, align 8
  %1293 = and i64 %1291, %1292
  %1294 = load i64, i64* %5, align 8
  %1295 = load i64, i64* %7, align 8
  %1296 = and i64 %1294, %1295
  %1297 = xor i64 %1293, %1296
  %1298 = load i64, i64* %6, align 8
  %1299 = load i64, i64* %7, align 8
  %1300 = and i64 %1298, %1299
  %1301 = xor i64 %1297, %1300
  %1302 = add i64 %1290, %1301
  store i64 %1302, i64* %14, align 8
  %1303 = load i64, i64* %11, align 8
  store i64 %1303, i64* %12, align 8
  %1304 = load i64, i64* %10, align 8
  store i64 %1304, i64* %11, align 8
  %1305 = load i64, i64* %9, align 8
  store i64 %1305, i64* %10, align 8
  %1306 = load i64, i64* %8, align 8
  %1307 = load i64, i64* %13, align 8
  %1308 = add i64 %1306, %1307
  store i64 %1308, i64* %9, align 8
  %1309 = load i64, i64* %7, align 8
  store i64 %1309, i64* %8, align 8
  %1310 = load i64, i64* %6, align 8
  store i64 %1310, i64* %7, align 8
  %1311 = load i64, i64* %5, align 8
  store i64 %1311, i64* %6, align 8
  %1312 = load i64, i64* %13, align 8
  %1313 = load i64, i64* %14, align 8
  %1314 = add i64 %1312, %1313
  store i64 %1314, i64* %5, align 8
  %1315 = load i64, i64* %12, align 8
  %1316 = load i64, i64* %9, align 8
  %1317 = lshr i64 %1316, 14
  %1318 = load i64, i64* %9, align 8
  %1319 = shl i64 %1318, 50
  %1320 = or i64 %1317, %1319
  %1321 = load i64, i64* %9, align 8
  %1322 = lshr i64 %1321, 18
  %1323 = load i64, i64* %9, align 8
  %1324 = shl i64 %1323, 46
  %1325 = or i64 %1322, %1324
  %1326 = xor i64 %1320, %1325
  %1327 = load i64, i64* %9, align 8
  %1328 = lshr i64 %1327, 41
  %1329 = load i64, i64* %9, align 8
  %1330 = shl i64 %1329, 23
  %1331 = or i64 %1328, %1330
  %1332 = xor i64 %1326, %1331
  %1333 = add i64 %1315, %1332
  %1334 = load i64, i64* %9, align 8
  %1335 = load i64, i64* %10, align 8
  %1336 = and i64 %1334, %1335
  %1337 = load i64, i64* %9, align 8
  %1338 = xor i64 %1337, -1
  %1339 = load i64, i64* %11, align 8
  %1340 = and i64 %1338, %1339
  %1341 = xor i64 %1336, %1340
  %1342 = add i64 %1333, %1341
  %1343 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 5), align 8
  %1344 = add i64 %1342, %1343
  %1345 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %1346 = load i64, i64* %1345, align 8
  %1347 = add i64 %1344, %1346
  store i64 %1347, i64* %13, align 8
  %1348 = load i64, i64* %5, align 8
  %1349 = lshr i64 %1348, 28
  %1350 = load i64, i64* %5, align 8
  %1351 = shl i64 %1350, 36
  %1352 = or i64 %1349, %1351
  %1353 = load i64, i64* %5, align 8
  %1354 = lshr i64 %1353, 34
  %1355 = load i64, i64* %5, align 8
  %1356 = shl i64 %1355, 30
  %1357 = or i64 %1354, %1356
  %1358 = xor i64 %1352, %1357
  %1359 = load i64, i64* %5, align 8
  %1360 = lshr i64 %1359, 39
  %1361 = load i64, i64* %5, align 8
  %1362 = shl i64 %1361, 25
  %1363 = or i64 %1360, %1362
  %1364 = xor i64 %1358, %1363
  %1365 = load i64, i64* %5, align 8
  %1366 = load i64, i64* %6, align 8
  %1367 = and i64 %1365, %1366
  %1368 = load i64, i64* %5, align 8
  %1369 = load i64, i64* %7, align 8
  %1370 = and i64 %1368, %1369
  %1371 = xor i64 %1367, %1370
  %1372 = load i64, i64* %6, align 8
  %1373 = load i64, i64* %7, align 8
  %1374 = and i64 %1372, %1373
  %1375 = xor i64 %1371, %1374
  %1376 = add i64 %1364, %1375
  store i64 %1376, i64* %14, align 8
  %1377 = load i64, i64* %11, align 8
  store i64 %1377, i64* %12, align 8
  %1378 = load i64, i64* %10, align 8
  store i64 %1378, i64* %11, align 8
  %1379 = load i64, i64* %9, align 8
  store i64 %1379, i64* %10, align 8
  %1380 = load i64, i64* %8, align 8
  %1381 = load i64, i64* %13, align 8
  %1382 = add i64 %1380, %1381
  store i64 %1382, i64* %9, align 8
  %1383 = load i64, i64* %7, align 8
  store i64 %1383, i64* %8, align 8
  %1384 = load i64, i64* %6, align 8
  store i64 %1384, i64* %7, align 8
  %1385 = load i64, i64* %5, align 8
  store i64 %1385, i64* %6, align 8
  %1386 = load i64, i64* %13, align 8
  %1387 = load i64, i64* %14, align 8
  %1388 = add i64 %1386, %1387
  store i64 %1388, i64* %5, align 8
  %1389 = load i64, i64* %12, align 8
  %1390 = load i64, i64* %9, align 8
  %1391 = lshr i64 %1390, 14
  %1392 = load i64, i64* %9, align 8
  %1393 = shl i64 %1392, 50
  %1394 = or i64 %1391, %1393
  %1395 = load i64, i64* %9, align 8
  %1396 = lshr i64 %1395, 18
  %1397 = load i64, i64* %9, align 8
  %1398 = shl i64 %1397, 46
  %1399 = or i64 %1396, %1398
  %1400 = xor i64 %1394, %1399
  %1401 = load i64, i64* %9, align 8
  %1402 = lshr i64 %1401, 41
  %1403 = load i64, i64* %9, align 8
  %1404 = shl i64 %1403, 23
  %1405 = or i64 %1402, %1404
  %1406 = xor i64 %1400, %1405
  %1407 = add i64 %1389, %1406
  %1408 = load i64, i64* %9, align 8
  %1409 = load i64, i64* %10, align 8
  %1410 = and i64 %1408, %1409
  %1411 = load i64, i64* %9, align 8
  %1412 = xor i64 %1411, -1
  %1413 = load i64, i64* %11, align 8
  %1414 = and i64 %1412, %1413
  %1415 = xor i64 %1410, %1414
  %1416 = add i64 %1407, %1415
  %1417 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 6), align 16
  %1418 = add i64 %1416, %1417
  %1419 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %1420 = load i64, i64* %1419, align 16
  %1421 = add i64 %1418, %1420
  store i64 %1421, i64* %13, align 8
  %1422 = load i64, i64* %5, align 8
  %1423 = lshr i64 %1422, 28
  %1424 = load i64, i64* %5, align 8
  %1425 = shl i64 %1424, 36
  %1426 = or i64 %1423, %1425
  %1427 = load i64, i64* %5, align 8
  %1428 = lshr i64 %1427, 34
  %1429 = load i64, i64* %5, align 8
  %1430 = shl i64 %1429, 30
  %1431 = or i64 %1428, %1430
  %1432 = xor i64 %1426, %1431
  %1433 = load i64, i64* %5, align 8
  %1434 = lshr i64 %1433, 39
  %1435 = load i64, i64* %5, align 8
  %1436 = shl i64 %1435, 25
  %1437 = or i64 %1434, %1436
  %1438 = xor i64 %1432, %1437
  %1439 = load i64, i64* %5, align 8
  %1440 = load i64, i64* %6, align 8
  %1441 = and i64 %1439, %1440
  %1442 = load i64, i64* %5, align 8
  %1443 = load i64, i64* %7, align 8
  %1444 = and i64 %1442, %1443
  %1445 = xor i64 %1441, %1444
  %1446 = load i64, i64* %6, align 8
  %1447 = load i64, i64* %7, align 8
  %1448 = and i64 %1446, %1447
  %1449 = xor i64 %1445, %1448
  %1450 = add i64 %1438, %1449
  store i64 %1450, i64* %14, align 8
  %1451 = load i64, i64* %11, align 8
  store i64 %1451, i64* %12, align 8
  %1452 = load i64, i64* %10, align 8
  store i64 %1452, i64* %11, align 8
  %1453 = load i64, i64* %9, align 8
  store i64 %1453, i64* %10, align 8
  %1454 = load i64, i64* %8, align 8
  %1455 = load i64, i64* %13, align 8
  %1456 = add i64 %1454, %1455
  store i64 %1456, i64* %9, align 8
  %1457 = load i64, i64* %7, align 8
  store i64 %1457, i64* %8, align 8
  %1458 = load i64, i64* %6, align 8
  store i64 %1458, i64* %7, align 8
  %1459 = load i64, i64* %5, align 8
  store i64 %1459, i64* %6, align 8
  %1460 = load i64, i64* %13, align 8
  %1461 = load i64, i64* %14, align 8
  %1462 = add i64 %1460, %1461
  store i64 %1462, i64* %5, align 8
  %1463 = load i64, i64* %12, align 8
  %1464 = load i64, i64* %9, align 8
  %1465 = lshr i64 %1464, 14
  %1466 = load i64, i64* %9, align 8
  %1467 = shl i64 %1466, 50
  %1468 = or i64 %1465, %1467
  %1469 = load i64, i64* %9, align 8
  %1470 = lshr i64 %1469, 18
  %1471 = load i64, i64* %9, align 8
  %1472 = shl i64 %1471, 46
  %1473 = or i64 %1470, %1472
  %1474 = xor i64 %1468, %1473
  %1475 = load i64, i64* %9, align 8
  %1476 = lshr i64 %1475, 41
  %1477 = load i64, i64* %9, align 8
  %1478 = shl i64 %1477, 23
  %1479 = or i64 %1476, %1478
  %1480 = xor i64 %1474, %1479
  %1481 = add i64 %1463, %1480
  %1482 = load i64, i64* %9, align 8
  %1483 = load i64, i64* %10, align 8
  %1484 = and i64 %1482, %1483
  %1485 = load i64, i64* %9, align 8
  %1486 = xor i64 %1485, -1
  %1487 = load i64, i64* %11, align 8
  %1488 = and i64 %1486, %1487
  %1489 = xor i64 %1484, %1488
  %1490 = add i64 %1481, %1489
  %1491 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 7), align 8
  %1492 = add i64 %1490, %1491
  %1493 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %1494 = load i64, i64* %1493, align 8
  %1495 = add i64 %1492, %1494
  store i64 %1495, i64* %13, align 8
  %1496 = load i64, i64* %5, align 8
  %1497 = lshr i64 %1496, 28
  %1498 = load i64, i64* %5, align 8
  %1499 = shl i64 %1498, 36
  %1500 = or i64 %1497, %1499
  %1501 = load i64, i64* %5, align 8
  %1502 = lshr i64 %1501, 34
  %1503 = load i64, i64* %5, align 8
  %1504 = shl i64 %1503, 30
  %1505 = or i64 %1502, %1504
  %1506 = xor i64 %1500, %1505
  %1507 = load i64, i64* %5, align 8
  %1508 = lshr i64 %1507, 39
  %1509 = load i64, i64* %5, align 8
  %1510 = shl i64 %1509, 25
  %1511 = or i64 %1508, %1510
  %1512 = xor i64 %1506, %1511
  %1513 = load i64, i64* %5, align 8
  %1514 = load i64, i64* %6, align 8
  %1515 = and i64 %1513, %1514
  %1516 = load i64, i64* %5, align 8
  %1517 = load i64, i64* %7, align 8
  %1518 = and i64 %1516, %1517
  %1519 = xor i64 %1515, %1518
  %1520 = load i64, i64* %6, align 8
  %1521 = load i64, i64* %7, align 8
  %1522 = and i64 %1520, %1521
  %1523 = xor i64 %1519, %1522
  %1524 = add i64 %1512, %1523
  store i64 %1524, i64* %14, align 8
  %1525 = load i64, i64* %11, align 8
  store i64 %1525, i64* %12, align 8
  %1526 = load i64, i64* %10, align 8
  store i64 %1526, i64* %11, align 8
  %1527 = load i64, i64* %9, align 8
  store i64 %1527, i64* %10, align 8
  %1528 = load i64, i64* %8, align 8
  %1529 = load i64, i64* %13, align 8
  %1530 = add i64 %1528, %1529
  store i64 %1530, i64* %9, align 8
  %1531 = load i64, i64* %7, align 8
  store i64 %1531, i64* %8, align 8
  %1532 = load i64, i64* %6, align 8
  store i64 %1532, i64* %7, align 8
  %1533 = load i64, i64* %5, align 8
  store i64 %1533, i64* %6, align 8
  %1534 = load i64, i64* %13, align 8
  %1535 = load i64, i64* %14, align 8
  %1536 = add i64 %1534, %1535
  store i64 %1536, i64* %5, align 8
  %1537 = load i64, i64* %12, align 8
  %1538 = load i64, i64* %9, align 8
  %1539 = lshr i64 %1538, 14
  %1540 = load i64, i64* %9, align 8
  %1541 = shl i64 %1540, 50
  %1542 = or i64 %1539, %1541
  %1543 = load i64, i64* %9, align 8
  %1544 = lshr i64 %1543, 18
  %1545 = load i64, i64* %9, align 8
  %1546 = shl i64 %1545, 46
  %1547 = or i64 %1544, %1546
  %1548 = xor i64 %1542, %1547
  %1549 = load i64, i64* %9, align 8
  %1550 = lshr i64 %1549, 41
  %1551 = load i64, i64* %9, align 8
  %1552 = shl i64 %1551, 23
  %1553 = or i64 %1550, %1552
  %1554 = xor i64 %1548, %1553
  %1555 = add i64 %1537, %1554
  %1556 = load i64, i64* %9, align 8
  %1557 = load i64, i64* %10, align 8
  %1558 = and i64 %1556, %1557
  %1559 = load i64, i64* %9, align 8
  %1560 = xor i64 %1559, -1
  %1561 = load i64, i64* %11, align 8
  %1562 = and i64 %1560, %1561
  %1563 = xor i64 %1558, %1562
  %1564 = add i64 %1555, %1563
  %1565 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 8), align 16
  %1566 = add i64 %1564, %1565
  %1567 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %1568 = load i64, i64* %1567, align 16
  %1569 = add i64 %1566, %1568
  store i64 %1569, i64* %13, align 8
  %1570 = load i64, i64* %5, align 8
  %1571 = lshr i64 %1570, 28
  %1572 = load i64, i64* %5, align 8
  %1573 = shl i64 %1572, 36
  %1574 = or i64 %1571, %1573
  %1575 = load i64, i64* %5, align 8
  %1576 = lshr i64 %1575, 34
  %1577 = load i64, i64* %5, align 8
  %1578 = shl i64 %1577, 30
  %1579 = or i64 %1576, %1578
  %1580 = xor i64 %1574, %1579
  %1581 = load i64, i64* %5, align 8
  %1582 = lshr i64 %1581, 39
  %1583 = load i64, i64* %5, align 8
  %1584 = shl i64 %1583, 25
  %1585 = or i64 %1582, %1584
  %1586 = xor i64 %1580, %1585
  %1587 = load i64, i64* %5, align 8
  %1588 = load i64, i64* %6, align 8
  %1589 = and i64 %1587, %1588
  %1590 = load i64, i64* %5, align 8
  %1591 = load i64, i64* %7, align 8
  %1592 = and i64 %1590, %1591
  %1593 = xor i64 %1589, %1592
  %1594 = load i64, i64* %6, align 8
  %1595 = load i64, i64* %7, align 8
  %1596 = and i64 %1594, %1595
  %1597 = xor i64 %1593, %1596
  %1598 = add i64 %1586, %1597
  store i64 %1598, i64* %14, align 8
  %1599 = load i64, i64* %11, align 8
  store i64 %1599, i64* %12, align 8
  %1600 = load i64, i64* %10, align 8
  store i64 %1600, i64* %11, align 8
  %1601 = load i64, i64* %9, align 8
  store i64 %1601, i64* %10, align 8
  %1602 = load i64, i64* %8, align 8
  %1603 = load i64, i64* %13, align 8
  %1604 = add i64 %1602, %1603
  store i64 %1604, i64* %9, align 8
  %1605 = load i64, i64* %7, align 8
  store i64 %1605, i64* %8, align 8
  %1606 = load i64, i64* %6, align 8
  store i64 %1606, i64* %7, align 8
  %1607 = load i64, i64* %5, align 8
  store i64 %1607, i64* %6, align 8
  %1608 = load i64, i64* %13, align 8
  %1609 = load i64, i64* %14, align 8
  %1610 = add i64 %1608, %1609
  store i64 %1610, i64* %5, align 8
  %1611 = load i64, i64* %12, align 8
  %1612 = load i64, i64* %9, align 8
  %1613 = lshr i64 %1612, 14
  %1614 = load i64, i64* %9, align 8
  %1615 = shl i64 %1614, 50
  %1616 = or i64 %1613, %1615
  %1617 = load i64, i64* %9, align 8
  %1618 = lshr i64 %1617, 18
  %1619 = load i64, i64* %9, align 8
  %1620 = shl i64 %1619, 46
  %1621 = or i64 %1618, %1620
  %1622 = xor i64 %1616, %1621
  %1623 = load i64, i64* %9, align 8
  %1624 = lshr i64 %1623, 41
  %1625 = load i64, i64* %9, align 8
  %1626 = shl i64 %1625, 23
  %1627 = or i64 %1624, %1626
  %1628 = xor i64 %1622, %1627
  %1629 = add i64 %1611, %1628
  %1630 = load i64, i64* %9, align 8
  %1631 = load i64, i64* %10, align 8
  %1632 = and i64 %1630, %1631
  %1633 = load i64, i64* %9, align 8
  %1634 = xor i64 %1633, -1
  %1635 = load i64, i64* %11, align 8
  %1636 = and i64 %1634, %1635
  %1637 = xor i64 %1632, %1636
  %1638 = add i64 %1629, %1637
  %1639 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 9), align 8
  %1640 = add i64 %1638, %1639
  %1641 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %1642 = load i64, i64* %1641, align 8
  %1643 = add i64 %1640, %1642
  store i64 %1643, i64* %13, align 8
  %1644 = load i64, i64* %5, align 8
  %1645 = lshr i64 %1644, 28
  %1646 = load i64, i64* %5, align 8
  %1647 = shl i64 %1646, 36
  %1648 = or i64 %1645, %1647
  %1649 = load i64, i64* %5, align 8
  %1650 = lshr i64 %1649, 34
  %1651 = load i64, i64* %5, align 8
  %1652 = shl i64 %1651, 30
  %1653 = or i64 %1650, %1652
  %1654 = xor i64 %1648, %1653
  %1655 = load i64, i64* %5, align 8
  %1656 = lshr i64 %1655, 39
  %1657 = load i64, i64* %5, align 8
  %1658 = shl i64 %1657, 25
  %1659 = or i64 %1656, %1658
  %1660 = xor i64 %1654, %1659
  %1661 = load i64, i64* %5, align 8
  %1662 = load i64, i64* %6, align 8
  %1663 = and i64 %1661, %1662
  %1664 = load i64, i64* %5, align 8
  %1665 = load i64, i64* %7, align 8
  %1666 = and i64 %1664, %1665
  %1667 = xor i64 %1663, %1666
  %1668 = load i64, i64* %6, align 8
  %1669 = load i64, i64* %7, align 8
  %1670 = and i64 %1668, %1669
  %1671 = xor i64 %1667, %1670
  %1672 = add i64 %1660, %1671
  store i64 %1672, i64* %14, align 8
  %1673 = load i64, i64* %11, align 8
  store i64 %1673, i64* %12, align 8
  %1674 = load i64, i64* %10, align 8
  store i64 %1674, i64* %11, align 8
  %1675 = load i64, i64* %9, align 8
  store i64 %1675, i64* %10, align 8
  %1676 = load i64, i64* %8, align 8
  %1677 = load i64, i64* %13, align 8
  %1678 = add i64 %1676, %1677
  store i64 %1678, i64* %9, align 8
  %1679 = load i64, i64* %7, align 8
  store i64 %1679, i64* %8, align 8
  %1680 = load i64, i64* %6, align 8
  store i64 %1680, i64* %7, align 8
  %1681 = load i64, i64* %5, align 8
  store i64 %1681, i64* %6, align 8
  %1682 = load i64, i64* %13, align 8
  %1683 = load i64, i64* %14, align 8
  %1684 = add i64 %1682, %1683
  store i64 %1684, i64* %5, align 8
  %1685 = load i64, i64* %12, align 8
  %1686 = load i64, i64* %9, align 8
  %1687 = lshr i64 %1686, 14
  %1688 = load i64, i64* %9, align 8
  %1689 = shl i64 %1688, 50
  %1690 = or i64 %1687, %1689
  %1691 = load i64, i64* %9, align 8
  %1692 = lshr i64 %1691, 18
  %1693 = load i64, i64* %9, align 8
  %1694 = shl i64 %1693, 46
  %1695 = or i64 %1692, %1694
  %1696 = xor i64 %1690, %1695
  %1697 = load i64, i64* %9, align 8
  %1698 = lshr i64 %1697, 41
  %1699 = load i64, i64* %9, align 8
  %1700 = shl i64 %1699, 23
  %1701 = or i64 %1698, %1700
  %1702 = xor i64 %1696, %1701
  %1703 = add i64 %1685, %1702
  %1704 = load i64, i64* %9, align 8
  %1705 = load i64, i64* %10, align 8
  %1706 = and i64 %1704, %1705
  %1707 = load i64, i64* %9, align 8
  %1708 = xor i64 %1707, -1
  %1709 = load i64, i64* %11, align 8
  %1710 = and i64 %1708, %1709
  %1711 = xor i64 %1706, %1710
  %1712 = add i64 %1703, %1711
  %1713 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 10), align 16
  %1714 = add i64 %1712, %1713
  %1715 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %1716 = load i64, i64* %1715, align 16
  %1717 = add i64 %1714, %1716
  store i64 %1717, i64* %13, align 8
  %1718 = load i64, i64* %5, align 8
  %1719 = lshr i64 %1718, 28
  %1720 = load i64, i64* %5, align 8
  %1721 = shl i64 %1720, 36
  %1722 = or i64 %1719, %1721
  %1723 = load i64, i64* %5, align 8
  %1724 = lshr i64 %1723, 34
  %1725 = load i64, i64* %5, align 8
  %1726 = shl i64 %1725, 30
  %1727 = or i64 %1724, %1726
  %1728 = xor i64 %1722, %1727
  %1729 = load i64, i64* %5, align 8
  %1730 = lshr i64 %1729, 39
  %1731 = load i64, i64* %5, align 8
  %1732 = shl i64 %1731, 25
  %1733 = or i64 %1730, %1732
  %1734 = xor i64 %1728, %1733
  %1735 = load i64, i64* %5, align 8
  %1736 = load i64, i64* %6, align 8
  %1737 = and i64 %1735, %1736
  %1738 = load i64, i64* %5, align 8
  %1739 = load i64, i64* %7, align 8
  %1740 = and i64 %1738, %1739
  %1741 = xor i64 %1737, %1740
  %1742 = load i64, i64* %6, align 8
  %1743 = load i64, i64* %7, align 8
  %1744 = and i64 %1742, %1743
  %1745 = xor i64 %1741, %1744
  %1746 = add i64 %1734, %1745
  store i64 %1746, i64* %14, align 8
  %1747 = load i64, i64* %11, align 8
  store i64 %1747, i64* %12, align 8
  %1748 = load i64, i64* %10, align 8
  store i64 %1748, i64* %11, align 8
  %1749 = load i64, i64* %9, align 8
  store i64 %1749, i64* %10, align 8
  %1750 = load i64, i64* %8, align 8
  %1751 = load i64, i64* %13, align 8
  %1752 = add i64 %1750, %1751
  store i64 %1752, i64* %9, align 8
  %1753 = load i64, i64* %7, align 8
  store i64 %1753, i64* %8, align 8
  %1754 = load i64, i64* %6, align 8
  store i64 %1754, i64* %7, align 8
  %1755 = load i64, i64* %5, align 8
  store i64 %1755, i64* %6, align 8
  %1756 = load i64, i64* %13, align 8
  %1757 = load i64, i64* %14, align 8
  %1758 = add i64 %1756, %1757
  store i64 %1758, i64* %5, align 8
  %1759 = load i64, i64* %12, align 8
  %1760 = load i64, i64* %9, align 8
  %1761 = lshr i64 %1760, 14
  %1762 = load i64, i64* %9, align 8
  %1763 = shl i64 %1762, 50
  %1764 = or i64 %1761, %1763
  %1765 = load i64, i64* %9, align 8
  %1766 = lshr i64 %1765, 18
  %1767 = load i64, i64* %9, align 8
  %1768 = shl i64 %1767, 46
  %1769 = or i64 %1766, %1768
  %1770 = xor i64 %1764, %1769
  %1771 = load i64, i64* %9, align 8
  %1772 = lshr i64 %1771, 41
  %1773 = load i64, i64* %9, align 8
  %1774 = shl i64 %1773, 23
  %1775 = or i64 %1772, %1774
  %1776 = xor i64 %1770, %1775
  %1777 = add i64 %1759, %1776
  %1778 = load i64, i64* %9, align 8
  %1779 = load i64, i64* %10, align 8
  %1780 = and i64 %1778, %1779
  %1781 = load i64, i64* %9, align 8
  %1782 = xor i64 %1781, -1
  %1783 = load i64, i64* %11, align 8
  %1784 = and i64 %1782, %1783
  %1785 = xor i64 %1780, %1784
  %1786 = add i64 %1777, %1785
  %1787 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 11), align 8
  %1788 = add i64 %1786, %1787
  %1789 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %1790 = load i64, i64* %1789, align 8
  %1791 = add i64 %1788, %1790
  store i64 %1791, i64* %13, align 8
  %1792 = load i64, i64* %5, align 8
  %1793 = lshr i64 %1792, 28
  %1794 = load i64, i64* %5, align 8
  %1795 = shl i64 %1794, 36
  %1796 = or i64 %1793, %1795
  %1797 = load i64, i64* %5, align 8
  %1798 = lshr i64 %1797, 34
  %1799 = load i64, i64* %5, align 8
  %1800 = shl i64 %1799, 30
  %1801 = or i64 %1798, %1800
  %1802 = xor i64 %1796, %1801
  %1803 = load i64, i64* %5, align 8
  %1804 = lshr i64 %1803, 39
  %1805 = load i64, i64* %5, align 8
  %1806 = shl i64 %1805, 25
  %1807 = or i64 %1804, %1806
  %1808 = xor i64 %1802, %1807
  %1809 = load i64, i64* %5, align 8
  %1810 = load i64, i64* %6, align 8
  %1811 = and i64 %1809, %1810
  %1812 = load i64, i64* %5, align 8
  %1813 = load i64, i64* %7, align 8
  %1814 = and i64 %1812, %1813
  %1815 = xor i64 %1811, %1814
  %1816 = load i64, i64* %6, align 8
  %1817 = load i64, i64* %7, align 8
  %1818 = and i64 %1816, %1817
  %1819 = xor i64 %1815, %1818
  %1820 = add i64 %1808, %1819
  store i64 %1820, i64* %14, align 8
  %1821 = load i64, i64* %11, align 8
  store i64 %1821, i64* %12, align 8
  %1822 = load i64, i64* %10, align 8
  store i64 %1822, i64* %11, align 8
  %1823 = load i64, i64* %9, align 8
  store i64 %1823, i64* %10, align 8
  %1824 = load i64, i64* %8, align 8
  %1825 = load i64, i64* %13, align 8
  %1826 = add i64 %1824, %1825
  store i64 %1826, i64* %9, align 8
  %1827 = load i64, i64* %7, align 8
  store i64 %1827, i64* %8, align 8
  %1828 = load i64, i64* %6, align 8
  store i64 %1828, i64* %7, align 8
  %1829 = load i64, i64* %5, align 8
  store i64 %1829, i64* %6, align 8
  %1830 = load i64, i64* %13, align 8
  %1831 = load i64, i64* %14, align 8
  %1832 = add i64 %1830, %1831
  store i64 %1832, i64* %5, align 8
  %1833 = load i64, i64* %12, align 8
  %1834 = load i64, i64* %9, align 8
  %1835 = lshr i64 %1834, 14
  %1836 = load i64, i64* %9, align 8
  %1837 = shl i64 %1836, 50
  %1838 = or i64 %1835, %1837
  %1839 = load i64, i64* %9, align 8
  %1840 = lshr i64 %1839, 18
  %1841 = load i64, i64* %9, align 8
  %1842 = shl i64 %1841, 46
  %1843 = or i64 %1840, %1842
  %1844 = xor i64 %1838, %1843
  %1845 = load i64, i64* %9, align 8
  %1846 = lshr i64 %1845, 41
  %1847 = load i64, i64* %9, align 8
  %1848 = shl i64 %1847, 23
  %1849 = or i64 %1846, %1848
  %1850 = xor i64 %1844, %1849
  %1851 = add i64 %1833, %1850
  %1852 = load i64, i64* %9, align 8
  %1853 = load i64, i64* %10, align 8
  %1854 = and i64 %1852, %1853
  %1855 = load i64, i64* %9, align 8
  %1856 = xor i64 %1855, -1
  %1857 = load i64, i64* %11, align 8
  %1858 = and i64 %1856, %1857
  %1859 = xor i64 %1854, %1858
  %1860 = add i64 %1851, %1859
  %1861 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 12), align 16
  %1862 = add i64 %1860, %1861
  %1863 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %1864 = load i64, i64* %1863, align 16
  %1865 = add i64 %1862, %1864
  store i64 %1865, i64* %13, align 8
  %1866 = load i64, i64* %5, align 8
  %1867 = lshr i64 %1866, 28
  %1868 = load i64, i64* %5, align 8
  %1869 = shl i64 %1868, 36
  %1870 = or i64 %1867, %1869
  %1871 = load i64, i64* %5, align 8
  %1872 = lshr i64 %1871, 34
  %1873 = load i64, i64* %5, align 8
  %1874 = shl i64 %1873, 30
  %1875 = or i64 %1872, %1874
  %1876 = xor i64 %1870, %1875
  %1877 = load i64, i64* %5, align 8
  %1878 = lshr i64 %1877, 39
  %1879 = load i64, i64* %5, align 8
  %1880 = shl i64 %1879, 25
  %1881 = or i64 %1878, %1880
  %1882 = xor i64 %1876, %1881
  %1883 = load i64, i64* %5, align 8
  %1884 = load i64, i64* %6, align 8
  %1885 = and i64 %1883, %1884
  %1886 = load i64, i64* %5, align 8
  %1887 = load i64, i64* %7, align 8
  %1888 = and i64 %1886, %1887
  %1889 = xor i64 %1885, %1888
  %1890 = load i64, i64* %6, align 8
  %1891 = load i64, i64* %7, align 8
  %1892 = and i64 %1890, %1891
  %1893 = xor i64 %1889, %1892
  %1894 = add i64 %1882, %1893
  store i64 %1894, i64* %14, align 8
  %1895 = load i64, i64* %11, align 8
  store i64 %1895, i64* %12, align 8
  %1896 = load i64, i64* %10, align 8
  store i64 %1896, i64* %11, align 8
  %1897 = load i64, i64* %9, align 8
  store i64 %1897, i64* %10, align 8
  %1898 = load i64, i64* %8, align 8
  %1899 = load i64, i64* %13, align 8
  %1900 = add i64 %1898, %1899
  store i64 %1900, i64* %9, align 8
  %1901 = load i64, i64* %7, align 8
  store i64 %1901, i64* %8, align 8
  %1902 = load i64, i64* %6, align 8
  store i64 %1902, i64* %7, align 8
  %1903 = load i64, i64* %5, align 8
  store i64 %1903, i64* %6, align 8
  %1904 = load i64, i64* %13, align 8
  %1905 = load i64, i64* %14, align 8
  %1906 = add i64 %1904, %1905
  store i64 %1906, i64* %5, align 8
  %1907 = load i64, i64* %12, align 8
  %1908 = load i64, i64* %9, align 8
  %1909 = lshr i64 %1908, 14
  %1910 = load i64, i64* %9, align 8
  %1911 = shl i64 %1910, 50
  %1912 = or i64 %1909, %1911
  %1913 = load i64, i64* %9, align 8
  %1914 = lshr i64 %1913, 18
  %1915 = load i64, i64* %9, align 8
  %1916 = shl i64 %1915, 46
  %1917 = or i64 %1914, %1916
  %1918 = xor i64 %1912, %1917
  %1919 = load i64, i64* %9, align 8
  %1920 = lshr i64 %1919, 41
  %1921 = load i64, i64* %9, align 8
  %1922 = shl i64 %1921, 23
  %1923 = or i64 %1920, %1922
  %1924 = xor i64 %1918, %1923
  %1925 = add i64 %1907, %1924
  %1926 = load i64, i64* %9, align 8
  %1927 = load i64, i64* %10, align 8
  %1928 = and i64 %1926, %1927
  %1929 = load i64, i64* %9, align 8
  %1930 = xor i64 %1929, -1
  %1931 = load i64, i64* %11, align 8
  %1932 = and i64 %1930, %1931
  %1933 = xor i64 %1928, %1932
  %1934 = add i64 %1925, %1933
  %1935 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 13), align 8
  %1936 = add i64 %1934, %1935
  %1937 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %1938 = load i64, i64* %1937, align 8
  %1939 = add i64 %1936, %1938
  store i64 %1939, i64* %13, align 8
  %1940 = load i64, i64* %5, align 8
  %1941 = lshr i64 %1940, 28
  %1942 = load i64, i64* %5, align 8
  %1943 = shl i64 %1942, 36
  %1944 = or i64 %1941, %1943
  %1945 = load i64, i64* %5, align 8
  %1946 = lshr i64 %1945, 34
  %1947 = load i64, i64* %5, align 8
  %1948 = shl i64 %1947, 30
  %1949 = or i64 %1946, %1948
  %1950 = xor i64 %1944, %1949
  %1951 = load i64, i64* %5, align 8
  %1952 = lshr i64 %1951, 39
  %1953 = load i64, i64* %5, align 8
  %1954 = shl i64 %1953, 25
  %1955 = or i64 %1952, %1954
  %1956 = xor i64 %1950, %1955
  %1957 = load i64, i64* %5, align 8
  %1958 = load i64, i64* %6, align 8
  %1959 = and i64 %1957, %1958
  %1960 = load i64, i64* %5, align 8
  %1961 = load i64, i64* %7, align 8
  %1962 = and i64 %1960, %1961
  %1963 = xor i64 %1959, %1962
  %1964 = load i64, i64* %6, align 8
  %1965 = load i64, i64* %7, align 8
  %1966 = and i64 %1964, %1965
  %1967 = xor i64 %1963, %1966
  %1968 = add i64 %1956, %1967
  store i64 %1968, i64* %14, align 8
  %1969 = load i64, i64* %11, align 8
  store i64 %1969, i64* %12, align 8
  %1970 = load i64, i64* %10, align 8
  store i64 %1970, i64* %11, align 8
  %1971 = load i64, i64* %9, align 8
  store i64 %1971, i64* %10, align 8
  %1972 = load i64, i64* %8, align 8
  %1973 = load i64, i64* %13, align 8
  %1974 = add i64 %1972, %1973
  store i64 %1974, i64* %9, align 8
  %1975 = load i64, i64* %7, align 8
  store i64 %1975, i64* %8, align 8
  %1976 = load i64, i64* %6, align 8
  store i64 %1976, i64* %7, align 8
  %1977 = load i64, i64* %5, align 8
  store i64 %1977, i64* %6, align 8
  %1978 = load i64, i64* %13, align 8
  %1979 = load i64, i64* %14, align 8
  %1980 = add i64 %1978, %1979
  store i64 %1980, i64* %5, align 8
  %1981 = load i64, i64* %12, align 8
  %1982 = load i64, i64* %9, align 8
  %1983 = lshr i64 %1982, 14
  %1984 = load i64, i64* %9, align 8
  %1985 = shl i64 %1984, 50
  %1986 = or i64 %1983, %1985
  %1987 = load i64, i64* %9, align 8
  %1988 = lshr i64 %1987, 18
  %1989 = load i64, i64* %9, align 8
  %1990 = shl i64 %1989, 46
  %1991 = or i64 %1988, %1990
  %1992 = xor i64 %1986, %1991
  %1993 = load i64, i64* %9, align 8
  %1994 = lshr i64 %1993, 41
  %1995 = load i64, i64* %9, align 8
  %1996 = shl i64 %1995, 23
  %1997 = or i64 %1994, %1996
  %1998 = xor i64 %1992, %1997
  %1999 = add i64 %1981, %1998
  %2000 = load i64, i64* %9, align 8
  %2001 = load i64, i64* %10, align 8
  %2002 = and i64 %2000, %2001
  %2003 = load i64, i64* %9, align 8
  %2004 = xor i64 %2003, -1
  %2005 = load i64, i64* %11, align 8
  %2006 = and i64 %2004, %2005
  %2007 = xor i64 %2002, %2006
  %2008 = add i64 %1999, %2007
  %2009 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 14), align 16
  %2010 = add i64 %2008, %2009
  %2011 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2012 = load i64, i64* %2011, align 16
  %2013 = add i64 %2010, %2012
  store i64 %2013, i64* %13, align 8
  %2014 = load i64, i64* %5, align 8
  %2015 = lshr i64 %2014, 28
  %2016 = load i64, i64* %5, align 8
  %2017 = shl i64 %2016, 36
  %2018 = or i64 %2015, %2017
  %2019 = load i64, i64* %5, align 8
  %2020 = lshr i64 %2019, 34
  %2021 = load i64, i64* %5, align 8
  %2022 = shl i64 %2021, 30
  %2023 = or i64 %2020, %2022
  %2024 = xor i64 %2018, %2023
  %2025 = load i64, i64* %5, align 8
  %2026 = lshr i64 %2025, 39
  %2027 = load i64, i64* %5, align 8
  %2028 = shl i64 %2027, 25
  %2029 = or i64 %2026, %2028
  %2030 = xor i64 %2024, %2029
  %2031 = load i64, i64* %5, align 8
  %2032 = load i64, i64* %6, align 8
  %2033 = and i64 %2031, %2032
  %2034 = load i64, i64* %5, align 8
  %2035 = load i64, i64* %7, align 8
  %2036 = and i64 %2034, %2035
  %2037 = xor i64 %2033, %2036
  %2038 = load i64, i64* %6, align 8
  %2039 = load i64, i64* %7, align 8
  %2040 = and i64 %2038, %2039
  %2041 = xor i64 %2037, %2040
  %2042 = add i64 %2030, %2041
  store i64 %2042, i64* %14, align 8
  %2043 = load i64, i64* %11, align 8
  store i64 %2043, i64* %12, align 8
  %2044 = load i64, i64* %10, align 8
  store i64 %2044, i64* %11, align 8
  %2045 = load i64, i64* %9, align 8
  store i64 %2045, i64* %10, align 8
  %2046 = load i64, i64* %8, align 8
  %2047 = load i64, i64* %13, align 8
  %2048 = add i64 %2046, %2047
  store i64 %2048, i64* %9, align 8
  %2049 = load i64, i64* %7, align 8
  store i64 %2049, i64* %8, align 8
  %2050 = load i64, i64* %6, align 8
  store i64 %2050, i64* %7, align 8
  %2051 = load i64, i64* %5, align 8
  store i64 %2051, i64* %6, align 8
  %2052 = load i64, i64* %13, align 8
  %2053 = load i64, i64* %14, align 8
  %2054 = add i64 %2052, %2053
  store i64 %2054, i64* %5, align 8
  %2055 = load i64, i64* %12, align 8
  %2056 = load i64, i64* %9, align 8
  %2057 = lshr i64 %2056, 14
  %2058 = load i64, i64* %9, align 8
  %2059 = shl i64 %2058, 50
  %2060 = or i64 %2057, %2059
  %2061 = load i64, i64* %9, align 8
  %2062 = lshr i64 %2061, 18
  %2063 = load i64, i64* %9, align 8
  %2064 = shl i64 %2063, 46
  %2065 = or i64 %2062, %2064
  %2066 = xor i64 %2060, %2065
  %2067 = load i64, i64* %9, align 8
  %2068 = lshr i64 %2067, 41
  %2069 = load i64, i64* %9, align 8
  %2070 = shl i64 %2069, 23
  %2071 = or i64 %2068, %2070
  %2072 = xor i64 %2066, %2071
  %2073 = add i64 %2055, %2072
  %2074 = load i64, i64* %9, align 8
  %2075 = load i64, i64* %10, align 8
  %2076 = and i64 %2074, %2075
  %2077 = load i64, i64* %9, align 8
  %2078 = xor i64 %2077, -1
  %2079 = load i64, i64* %11, align 8
  %2080 = and i64 %2078, %2079
  %2081 = xor i64 %2076, %2080
  %2082 = add i64 %2073, %2081
  %2083 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 15), align 8
  %2084 = add i64 %2082, %2083
  %2085 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2086 = load i64, i64* %2085, align 8
  %2087 = add i64 %2084, %2086
  store i64 %2087, i64* %13, align 8
  %2088 = load i64, i64* %5, align 8
  %2089 = lshr i64 %2088, 28
  %2090 = load i64, i64* %5, align 8
  %2091 = shl i64 %2090, 36
  %2092 = or i64 %2089, %2091
  %2093 = load i64, i64* %5, align 8
  %2094 = lshr i64 %2093, 34
  %2095 = load i64, i64* %5, align 8
  %2096 = shl i64 %2095, 30
  %2097 = or i64 %2094, %2096
  %2098 = xor i64 %2092, %2097
  %2099 = load i64, i64* %5, align 8
  %2100 = lshr i64 %2099, 39
  %2101 = load i64, i64* %5, align 8
  %2102 = shl i64 %2101, 25
  %2103 = or i64 %2100, %2102
  %2104 = xor i64 %2098, %2103
  %2105 = load i64, i64* %5, align 8
  %2106 = load i64, i64* %6, align 8
  %2107 = and i64 %2105, %2106
  %2108 = load i64, i64* %5, align 8
  %2109 = load i64, i64* %7, align 8
  %2110 = and i64 %2108, %2109
  %2111 = xor i64 %2107, %2110
  %2112 = load i64, i64* %6, align 8
  %2113 = load i64, i64* %7, align 8
  %2114 = and i64 %2112, %2113
  %2115 = xor i64 %2111, %2114
  %2116 = add i64 %2104, %2115
  store i64 %2116, i64* %14, align 8
  %2117 = load i64, i64* %11, align 8
  store i64 %2117, i64* %12, align 8
  %2118 = load i64, i64* %10, align 8
  store i64 %2118, i64* %11, align 8
  %2119 = load i64, i64* %9, align 8
  store i64 %2119, i64* %10, align 8
  %2120 = load i64, i64* %8, align 8
  %2121 = load i64, i64* %13, align 8
  %2122 = add i64 %2120, %2121
  store i64 %2122, i64* %9, align 8
  %2123 = load i64, i64* %7, align 8
  store i64 %2123, i64* %8, align 8
  %2124 = load i64, i64* %6, align 8
  store i64 %2124, i64* %7, align 8
  %2125 = load i64, i64* %5, align 8
  store i64 %2125, i64* %6, align 8
  %2126 = load i64, i64* %13, align 8
  %2127 = load i64, i64* %14, align 8
  %2128 = add i64 %2126, %2127
  store i64 %2128, i64* %5, align 8
  %2129 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2130 = load i64, i64* %2129, align 16
  %2131 = lshr i64 %2130, 19
  %2132 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2133 = load i64, i64* %2132, align 16
  %2134 = shl i64 %2133, 45
  %2135 = or i64 %2131, %2134
  %2136 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2137 = load i64, i64* %2136, align 16
  %2138 = lshr i64 %2137, 61
  %2139 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2140 = load i64, i64* %2139, align 16
  %2141 = shl i64 %2140, 3
  %2142 = or i64 %2138, %2141
  %2143 = xor i64 %2135, %2142
  %2144 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2145 = load i64, i64* %2144, align 16
  %2146 = lshr i64 %2145, 6
  %2147 = xor i64 %2143, %2146
  %2148 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %2149 = load i64, i64* %2148, align 8
  %2150 = add i64 %2147, %2149
  %2151 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2152 = load i64, i64* %2151, align 8
  %2153 = lshr i64 %2152, 1
  %2154 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2155 = load i64, i64* %2154, align 8
  %2156 = shl i64 %2155, 63
  %2157 = or i64 %2153, %2156
  %2158 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2159 = load i64, i64* %2158, align 8
  %2160 = lshr i64 %2159, 8
  %2161 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2162 = load i64, i64* %2161, align 8
  %2163 = shl i64 %2162, 56
  %2164 = or i64 %2160, %2163
  %2165 = xor i64 %2157, %2164
  %2166 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2167 = load i64, i64* %2166, align 8
  %2168 = lshr i64 %2167, 7
  %2169 = xor i64 %2165, %2168
  %2170 = add i64 %2150, %2169
  %2171 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 0
  %2172 = load i64, i64* %2171, align 16
  %2173 = add i64 %2170, %2172
  %2174 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  store i64 %2173, i64* %2174, align 16
  %2175 = load i64, i64* %12, align 8
  %2176 = load i64, i64* %9, align 8
  %2177 = lshr i64 %2176, 14
  %2178 = load i64, i64* %9, align 8
  %2179 = shl i64 %2178, 50
  %2180 = or i64 %2177, %2179
  %2181 = load i64, i64* %9, align 8
  %2182 = lshr i64 %2181, 18
  %2183 = load i64, i64* %9, align 8
  %2184 = shl i64 %2183, 46
  %2185 = or i64 %2182, %2184
  %2186 = xor i64 %2180, %2185
  %2187 = load i64, i64* %9, align 8
  %2188 = lshr i64 %2187, 41
  %2189 = load i64, i64* %9, align 8
  %2190 = shl i64 %2189, 23
  %2191 = or i64 %2188, %2190
  %2192 = xor i64 %2186, %2191
  %2193 = add i64 %2175, %2192
  %2194 = load i64, i64* %9, align 8
  %2195 = load i64, i64* %10, align 8
  %2196 = and i64 %2194, %2195
  %2197 = load i64, i64* %9, align 8
  %2198 = xor i64 %2197, -1
  %2199 = load i64, i64* %11, align 8
  %2200 = and i64 %2198, %2199
  %2201 = xor i64 %2196, %2200
  %2202 = add i64 %2193, %2201
  %2203 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 16), align 16
  %2204 = add i64 %2202, %2203
  %2205 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2206 = load i64, i64* %2205, align 16
  %2207 = add i64 %2204, %2206
  store i64 %2207, i64* %13, align 8
  %2208 = load i64, i64* %5, align 8
  %2209 = lshr i64 %2208, 28
  %2210 = load i64, i64* %5, align 8
  %2211 = shl i64 %2210, 36
  %2212 = or i64 %2209, %2211
  %2213 = load i64, i64* %5, align 8
  %2214 = lshr i64 %2213, 34
  %2215 = load i64, i64* %5, align 8
  %2216 = shl i64 %2215, 30
  %2217 = or i64 %2214, %2216
  %2218 = xor i64 %2212, %2217
  %2219 = load i64, i64* %5, align 8
  %2220 = lshr i64 %2219, 39
  %2221 = load i64, i64* %5, align 8
  %2222 = shl i64 %2221, 25
  %2223 = or i64 %2220, %2222
  %2224 = xor i64 %2218, %2223
  %2225 = load i64, i64* %5, align 8
  %2226 = load i64, i64* %6, align 8
  %2227 = and i64 %2225, %2226
  %2228 = load i64, i64* %5, align 8
  %2229 = load i64, i64* %7, align 8
  %2230 = and i64 %2228, %2229
  %2231 = xor i64 %2227, %2230
  %2232 = load i64, i64* %6, align 8
  %2233 = load i64, i64* %7, align 8
  %2234 = and i64 %2232, %2233
  %2235 = xor i64 %2231, %2234
  %2236 = add i64 %2224, %2235
  store i64 %2236, i64* %14, align 8
  %2237 = load i64, i64* %11, align 8
  store i64 %2237, i64* %12, align 8
  %2238 = load i64, i64* %10, align 8
  store i64 %2238, i64* %11, align 8
  %2239 = load i64, i64* %9, align 8
  store i64 %2239, i64* %10, align 8
  %2240 = load i64, i64* %8, align 8
  %2241 = load i64, i64* %13, align 8
  %2242 = add i64 %2240, %2241
  store i64 %2242, i64* %9, align 8
  %2243 = load i64, i64* %7, align 8
  store i64 %2243, i64* %8, align 8
  %2244 = load i64, i64* %6, align 8
  store i64 %2244, i64* %7, align 8
  %2245 = load i64, i64* %5, align 8
  store i64 %2245, i64* %6, align 8
  %2246 = load i64, i64* %13, align 8
  %2247 = load i64, i64* %14, align 8
  %2248 = add i64 %2246, %2247
  store i64 %2248, i64* %5, align 8
  %2249 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2250 = load i64, i64* %2249, align 8
  %2251 = lshr i64 %2250, 19
  %2252 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2253 = load i64, i64* %2252, align 8
  %2254 = shl i64 %2253, 45
  %2255 = or i64 %2251, %2254
  %2256 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2257 = load i64, i64* %2256, align 8
  %2258 = lshr i64 %2257, 61
  %2259 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2260 = load i64, i64* %2259, align 8
  %2261 = shl i64 %2260, 3
  %2262 = or i64 %2258, %2261
  %2263 = xor i64 %2255, %2262
  %2264 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2265 = load i64, i64* %2264, align 8
  %2266 = lshr i64 %2265, 6
  %2267 = xor i64 %2263, %2266
  %2268 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %2269 = load i64, i64* %2268, align 16
  %2270 = add i64 %2267, %2269
  %2271 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2272 = load i64, i64* %2271, align 16
  %2273 = lshr i64 %2272, 1
  %2274 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2275 = load i64, i64* %2274, align 16
  %2276 = shl i64 %2275, 63
  %2277 = or i64 %2273, %2276
  %2278 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2279 = load i64, i64* %2278, align 16
  %2280 = lshr i64 %2279, 8
  %2281 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2282 = load i64, i64* %2281, align 16
  %2283 = shl i64 %2282, 56
  %2284 = or i64 %2280, %2283
  %2285 = xor i64 %2277, %2284
  %2286 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2287 = load i64, i64* %2286, align 16
  %2288 = lshr i64 %2287, 7
  %2289 = xor i64 %2285, %2288
  %2290 = add i64 %2270, %2289
  %2291 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 1
  %2292 = load i64, i64* %2291, align 8
  %2293 = add i64 %2290, %2292
  %2294 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  store i64 %2293, i64* %2294, align 8
  %2295 = load i64, i64* %12, align 8
  %2296 = load i64, i64* %9, align 8
  %2297 = lshr i64 %2296, 14
  %2298 = load i64, i64* %9, align 8
  %2299 = shl i64 %2298, 50
  %2300 = or i64 %2297, %2299
  %2301 = load i64, i64* %9, align 8
  %2302 = lshr i64 %2301, 18
  %2303 = load i64, i64* %9, align 8
  %2304 = shl i64 %2303, 46
  %2305 = or i64 %2302, %2304
  %2306 = xor i64 %2300, %2305
  %2307 = load i64, i64* %9, align 8
  %2308 = lshr i64 %2307, 41
  %2309 = load i64, i64* %9, align 8
  %2310 = shl i64 %2309, 23
  %2311 = or i64 %2308, %2310
  %2312 = xor i64 %2306, %2311
  %2313 = add i64 %2295, %2312
  %2314 = load i64, i64* %9, align 8
  %2315 = load i64, i64* %10, align 8
  %2316 = and i64 %2314, %2315
  %2317 = load i64, i64* %9, align 8
  %2318 = xor i64 %2317, -1
  %2319 = load i64, i64* %11, align 8
  %2320 = and i64 %2318, %2319
  %2321 = xor i64 %2316, %2320
  %2322 = add i64 %2313, %2321
  %2323 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 17), align 8
  %2324 = add i64 %2322, %2323
  %2325 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2326 = load i64, i64* %2325, align 8
  %2327 = add i64 %2324, %2326
  store i64 %2327, i64* %13, align 8
  %2328 = load i64, i64* %5, align 8
  %2329 = lshr i64 %2328, 28
  %2330 = load i64, i64* %5, align 8
  %2331 = shl i64 %2330, 36
  %2332 = or i64 %2329, %2331
  %2333 = load i64, i64* %5, align 8
  %2334 = lshr i64 %2333, 34
  %2335 = load i64, i64* %5, align 8
  %2336 = shl i64 %2335, 30
  %2337 = or i64 %2334, %2336
  %2338 = xor i64 %2332, %2337
  %2339 = load i64, i64* %5, align 8
  %2340 = lshr i64 %2339, 39
  %2341 = load i64, i64* %5, align 8
  %2342 = shl i64 %2341, 25
  %2343 = or i64 %2340, %2342
  %2344 = xor i64 %2338, %2343
  %2345 = load i64, i64* %5, align 8
  %2346 = load i64, i64* %6, align 8
  %2347 = and i64 %2345, %2346
  %2348 = load i64, i64* %5, align 8
  %2349 = load i64, i64* %7, align 8
  %2350 = and i64 %2348, %2349
  %2351 = xor i64 %2347, %2350
  %2352 = load i64, i64* %6, align 8
  %2353 = load i64, i64* %7, align 8
  %2354 = and i64 %2352, %2353
  %2355 = xor i64 %2351, %2354
  %2356 = add i64 %2344, %2355
  store i64 %2356, i64* %14, align 8
  %2357 = load i64, i64* %11, align 8
  store i64 %2357, i64* %12, align 8
  %2358 = load i64, i64* %10, align 8
  store i64 %2358, i64* %11, align 8
  %2359 = load i64, i64* %9, align 8
  store i64 %2359, i64* %10, align 8
  %2360 = load i64, i64* %8, align 8
  %2361 = load i64, i64* %13, align 8
  %2362 = add i64 %2360, %2361
  store i64 %2362, i64* %9, align 8
  %2363 = load i64, i64* %7, align 8
  store i64 %2363, i64* %8, align 8
  %2364 = load i64, i64* %6, align 8
  store i64 %2364, i64* %7, align 8
  %2365 = load i64, i64* %5, align 8
  store i64 %2365, i64* %6, align 8
  %2366 = load i64, i64* %13, align 8
  %2367 = load i64, i64* %14, align 8
  %2368 = add i64 %2366, %2367
  store i64 %2368, i64* %5, align 8
  %2369 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2370 = load i64, i64* %2369, align 16
  %2371 = lshr i64 %2370, 19
  %2372 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2373 = load i64, i64* %2372, align 16
  %2374 = shl i64 %2373, 45
  %2375 = or i64 %2371, %2374
  %2376 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2377 = load i64, i64* %2376, align 16
  %2378 = lshr i64 %2377, 61
  %2379 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2380 = load i64, i64* %2379, align 16
  %2381 = shl i64 %2380, 3
  %2382 = or i64 %2378, %2381
  %2383 = xor i64 %2375, %2382
  %2384 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2385 = load i64, i64* %2384, align 16
  %2386 = lshr i64 %2385, 6
  %2387 = xor i64 %2383, %2386
  %2388 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %2389 = load i64, i64* %2388, align 8
  %2390 = add i64 %2387, %2389
  %2391 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2392 = load i64, i64* %2391, align 8
  %2393 = lshr i64 %2392, 1
  %2394 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2395 = load i64, i64* %2394, align 8
  %2396 = shl i64 %2395, 63
  %2397 = or i64 %2393, %2396
  %2398 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2399 = load i64, i64* %2398, align 8
  %2400 = lshr i64 %2399, 8
  %2401 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2402 = load i64, i64* %2401, align 8
  %2403 = shl i64 %2402, 56
  %2404 = or i64 %2400, %2403
  %2405 = xor i64 %2397, %2404
  %2406 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2407 = load i64, i64* %2406, align 8
  %2408 = lshr i64 %2407, 7
  %2409 = xor i64 %2405, %2408
  %2410 = add i64 %2390, %2409
  %2411 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 2
  %2412 = load i64, i64* %2411, align 16
  %2413 = add i64 %2410, %2412
  %2414 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  store i64 %2413, i64* %2414, align 16
  %2415 = load i64, i64* %12, align 8
  %2416 = load i64, i64* %9, align 8
  %2417 = lshr i64 %2416, 14
  %2418 = load i64, i64* %9, align 8
  %2419 = shl i64 %2418, 50
  %2420 = or i64 %2417, %2419
  %2421 = load i64, i64* %9, align 8
  %2422 = lshr i64 %2421, 18
  %2423 = load i64, i64* %9, align 8
  %2424 = shl i64 %2423, 46
  %2425 = or i64 %2422, %2424
  %2426 = xor i64 %2420, %2425
  %2427 = load i64, i64* %9, align 8
  %2428 = lshr i64 %2427, 41
  %2429 = load i64, i64* %9, align 8
  %2430 = shl i64 %2429, 23
  %2431 = or i64 %2428, %2430
  %2432 = xor i64 %2426, %2431
  %2433 = add i64 %2415, %2432
  %2434 = load i64, i64* %9, align 8
  %2435 = load i64, i64* %10, align 8
  %2436 = and i64 %2434, %2435
  %2437 = load i64, i64* %9, align 8
  %2438 = xor i64 %2437, -1
  %2439 = load i64, i64* %11, align 8
  %2440 = and i64 %2438, %2439
  %2441 = xor i64 %2436, %2440
  %2442 = add i64 %2433, %2441
  %2443 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 18), align 16
  %2444 = add i64 %2442, %2443
  %2445 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2446 = load i64, i64* %2445, align 16
  %2447 = add i64 %2444, %2446
  store i64 %2447, i64* %13, align 8
  %2448 = load i64, i64* %5, align 8
  %2449 = lshr i64 %2448, 28
  %2450 = load i64, i64* %5, align 8
  %2451 = shl i64 %2450, 36
  %2452 = or i64 %2449, %2451
  %2453 = load i64, i64* %5, align 8
  %2454 = lshr i64 %2453, 34
  %2455 = load i64, i64* %5, align 8
  %2456 = shl i64 %2455, 30
  %2457 = or i64 %2454, %2456
  %2458 = xor i64 %2452, %2457
  %2459 = load i64, i64* %5, align 8
  %2460 = lshr i64 %2459, 39
  %2461 = load i64, i64* %5, align 8
  %2462 = shl i64 %2461, 25
  %2463 = or i64 %2460, %2462
  %2464 = xor i64 %2458, %2463
  %2465 = load i64, i64* %5, align 8
  %2466 = load i64, i64* %6, align 8
  %2467 = and i64 %2465, %2466
  %2468 = load i64, i64* %5, align 8
  %2469 = load i64, i64* %7, align 8
  %2470 = and i64 %2468, %2469
  %2471 = xor i64 %2467, %2470
  %2472 = load i64, i64* %6, align 8
  %2473 = load i64, i64* %7, align 8
  %2474 = and i64 %2472, %2473
  %2475 = xor i64 %2471, %2474
  %2476 = add i64 %2464, %2475
  store i64 %2476, i64* %14, align 8
  %2477 = load i64, i64* %11, align 8
  store i64 %2477, i64* %12, align 8
  %2478 = load i64, i64* %10, align 8
  store i64 %2478, i64* %11, align 8
  %2479 = load i64, i64* %9, align 8
  store i64 %2479, i64* %10, align 8
  %2480 = load i64, i64* %8, align 8
  %2481 = load i64, i64* %13, align 8
  %2482 = add i64 %2480, %2481
  store i64 %2482, i64* %9, align 8
  %2483 = load i64, i64* %7, align 8
  store i64 %2483, i64* %8, align 8
  %2484 = load i64, i64* %6, align 8
  store i64 %2484, i64* %7, align 8
  %2485 = load i64, i64* %5, align 8
  store i64 %2485, i64* %6, align 8
  %2486 = load i64, i64* %13, align 8
  %2487 = load i64, i64* %14, align 8
  %2488 = add i64 %2486, %2487
  store i64 %2488, i64* %5, align 8
  %2489 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2490 = load i64, i64* %2489, align 8
  %2491 = lshr i64 %2490, 19
  %2492 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2493 = load i64, i64* %2492, align 8
  %2494 = shl i64 %2493, 45
  %2495 = or i64 %2491, %2494
  %2496 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2497 = load i64, i64* %2496, align 8
  %2498 = lshr i64 %2497, 61
  %2499 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2500 = load i64, i64* %2499, align 8
  %2501 = shl i64 %2500, 3
  %2502 = or i64 %2498, %2501
  %2503 = xor i64 %2495, %2502
  %2504 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %2505 = load i64, i64* %2504, align 8
  %2506 = lshr i64 %2505, 6
  %2507 = xor i64 %2503, %2506
  %2508 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %2509 = load i64, i64* %2508, align 16
  %2510 = add i64 %2507, %2509
  %2511 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2512 = load i64, i64* %2511, align 16
  %2513 = lshr i64 %2512, 1
  %2514 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2515 = load i64, i64* %2514, align 16
  %2516 = shl i64 %2515, 63
  %2517 = or i64 %2513, %2516
  %2518 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2519 = load i64, i64* %2518, align 16
  %2520 = lshr i64 %2519, 8
  %2521 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2522 = load i64, i64* %2521, align 16
  %2523 = shl i64 %2522, 56
  %2524 = or i64 %2520, %2523
  %2525 = xor i64 %2517, %2524
  %2526 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2527 = load i64, i64* %2526, align 16
  %2528 = lshr i64 %2527, 7
  %2529 = xor i64 %2525, %2528
  %2530 = add i64 %2510, %2529
  %2531 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 3
  %2532 = load i64, i64* %2531, align 8
  %2533 = add i64 %2530, %2532
  %2534 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  store i64 %2533, i64* %2534, align 8
  %2535 = load i64, i64* %12, align 8
  %2536 = load i64, i64* %9, align 8
  %2537 = lshr i64 %2536, 14
  %2538 = load i64, i64* %9, align 8
  %2539 = shl i64 %2538, 50
  %2540 = or i64 %2537, %2539
  %2541 = load i64, i64* %9, align 8
  %2542 = lshr i64 %2541, 18
  %2543 = load i64, i64* %9, align 8
  %2544 = shl i64 %2543, 46
  %2545 = or i64 %2542, %2544
  %2546 = xor i64 %2540, %2545
  %2547 = load i64, i64* %9, align 8
  %2548 = lshr i64 %2547, 41
  %2549 = load i64, i64* %9, align 8
  %2550 = shl i64 %2549, 23
  %2551 = or i64 %2548, %2550
  %2552 = xor i64 %2546, %2551
  %2553 = add i64 %2535, %2552
  %2554 = load i64, i64* %9, align 8
  %2555 = load i64, i64* %10, align 8
  %2556 = and i64 %2554, %2555
  %2557 = load i64, i64* %9, align 8
  %2558 = xor i64 %2557, -1
  %2559 = load i64, i64* %11, align 8
  %2560 = and i64 %2558, %2559
  %2561 = xor i64 %2556, %2560
  %2562 = add i64 %2553, %2561
  %2563 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 19), align 8
  %2564 = add i64 %2562, %2563
  %2565 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2566 = load i64, i64* %2565, align 8
  %2567 = add i64 %2564, %2566
  store i64 %2567, i64* %13, align 8
  %2568 = load i64, i64* %5, align 8
  %2569 = lshr i64 %2568, 28
  %2570 = load i64, i64* %5, align 8
  %2571 = shl i64 %2570, 36
  %2572 = or i64 %2569, %2571
  %2573 = load i64, i64* %5, align 8
  %2574 = lshr i64 %2573, 34
  %2575 = load i64, i64* %5, align 8
  %2576 = shl i64 %2575, 30
  %2577 = or i64 %2574, %2576
  %2578 = xor i64 %2572, %2577
  %2579 = load i64, i64* %5, align 8
  %2580 = lshr i64 %2579, 39
  %2581 = load i64, i64* %5, align 8
  %2582 = shl i64 %2581, 25
  %2583 = or i64 %2580, %2582
  %2584 = xor i64 %2578, %2583
  %2585 = load i64, i64* %5, align 8
  %2586 = load i64, i64* %6, align 8
  %2587 = and i64 %2585, %2586
  %2588 = load i64, i64* %5, align 8
  %2589 = load i64, i64* %7, align 8
  %2590 = and i64 %2588, %2589
  %2591 = xor i64 %2587, %2590
  %2592 = load i64, i64* %6, align 8
  %2593 = load i64, i64* %7, align 8
  %2594 = and i64 %2592, %2593
  %2595 = xor i64 %2591, %2594
  %2596 = add i64 %2584, %2595
  store i64 %2596, i64* %14, align 8
  %2597 = load i64, i64* %11, align 8
  store i64 %2597, i64* %12, align 8
  %2598 = load i64, i64* %10, align 8
  store i64 %2598, i64* %11, align 8
  %2599 = load i64, i64* %9, align 8
  store i64 %2599, i64* %10, align 8
  %2600 = load i64, i64* %8, align 8
  %2601 = load i64, i64* %13, align 8
  %2602 = add i64 %2600, %2601
  store i64 %2602, i64* %9, align 8
  %2603 = load i64, i64* %7, align 8
  store i64 %2603, i64* %8, align 8
  %2604 = load i64, i64* %6, align 8
  store i64 %2604, i64* %7, align 8
  %2605 = load i64, i64* %5, align 8
  store i64 %2605, i64* %6, align 8
  %2606 = load i64, i64* %13, align 8
  %2607 = load i64, i64* %14, align 8
  %2608 = add i64 %2606, %2607
  store i64 %2608, i64* %5, align 8
  %2609 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2610 = load i64, i64* %2609, align 16
  %2611 = lshr i64 %2610, 19
  %2612 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2613 = load i64, i64* %2612, align 16
  %2614 = shl i64 %2613, 45
  %2615 = or i64 %2611, %2614
  %2616 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2617 = load i64, i64* %2616, align 16
  %2618 = lshr i64 %2617, 61
  %2619 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2620 = load i64, i64* %2619, align 16
  %2621 = shl i64 %2620, 3
  %2622 = or i64 %2618, %2621
  %2623 = xor i64 %2615, %2622
  %2624 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %2625 = load i64, i64* %2624, align 16
  %2626 = lshr i64 %2625, 6
  %2627 = xor i64 %2623, %2626
  %2628 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %2629 = load i64, i64* %2628, align 8
  %2630 = add i64 %2627, %2629
  %2631 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2632 = load i64, i64* %2631, align 8
  %2633 = lshr i64 %2632, 1
  %2634 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2635 = load i64, i64* %2634, align 8
  %2636 = shl i64 %2635, 63
  %2637 = or i64 %2633, %2636
  %2638 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2639 = load i64, i64* %2638, align 8
  %2640 = lshr i64 %2639, 8
  %2641 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2642 = load i64, i64* %2641, align 8
  %2643 = shl i64 %2642, 56
  %2644 = or i64 %2640, %2643
  %2645 = xor i64 %2637, %2644
  %2646 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2647 = load i64, i64* %2646, align 8
  %2648 = lshr i64 %2647, 7
  %2649 = xor i64 %2645, %2648
  %2650 = add i64 %2630, %2649
  %2651 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 4
  %2652 = load i64, i64* %2651, align 16
  %2653 = add i64 %2650, %2652
  %2654 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  store i64 %2653, i64* %2654, align 16
  %2655 = load i64, i64* %12, align 8
  %2656 = load i64, i64* %9, align 8
  %2657 = lshr i64 %2656, 14
  %2658 = load i64, i64* %9, align 8
  %2659 = shl i64 %2658, 50
  %2660 = or i64 %2657, %2659
  %2661 = load i64, i64* %9, align 8
  %2662 = lshr i64 %2661, 18
  %2663 = load i64, i64* %9, align 8
  %2664 = shl i64 %2663, 46
  %2665 = or i64 %2662, %2664
  %2666 = xor i64 %2660, %2665
  %2667 = load i64, i64* %9, align 8
  %2668 = lshr i64 %2667, 41
  %2669 = load i64, i64* %9, align 8
  %2670 = shl i64 %2669, 23
  %2671 = or i64 %2668, %2670
  %2672 = xor i64 %2666, %2671
  %2673 = add i64 %2655, %2672
  %2674 = load i64, i64* %9, align 8
  %2675 = load i64, i64* %10, align 8
  %2676 = and i64 %2674, %2675
  %2677 = load i64, i64* %9, align 8
  %2678 = xor i64 %2677, -1
  %2679 = load i64, i64* %11, align 8
  %2680 = and i64 %2678, %2679
  %2681 = xor i64 %2676, %2680
  %2682 = add i64 %2673, %2681
  %2683 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 20), align 16
  %2684 = add i64 %2682, %2683
  %2685 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2686 = load i64, i64* %2685, align 16
  %2687 = add i64 %2684, %2686
  store i64 %2687, i64* %13, align 8
  %2688 = load i64, i64* %5, align 8
  %2689 = lshr i64 %2688, 28
  %2690 = load i64, i64* %5, align 8
  %2691 = shl i64 %2690, 36
  %2692 = or i64 %2689, %2691
  %2693 = load i64, i64* %5, align 8
  %2694 = lshr i64 %2693, 34
  %2695 = load i64, i64* %5, align 8
  %2696 = shl i64 %2695, 30
  %2697 = or i64 %2694, %2696
  %2698 = xor i64 %2692, %2697
  %2699 = load i64, i64* %5, align 8
  %2700 = lshr i64 %2699, 39
  %2701 = load i64, i64* %5, align 8
  %2702 = shl i64 %2701, 25
  %2703 = or i64 %2700, %2702
  %2704 = xor i64 %2698, %2703
  %2705 = load i64, i64* %5, align 8
  %2706 = load i64, i64* %6, align 8
  %2707 = and i64 %2705, %2706
  %2708 = load i64, i64* %5, align 8
  %2709 = load i64, i64* %7, align 8
  %2710 = and i64 %2708, %2709
  %2711 = xor i64 %2707, %2710
  %2712 = load i64, i64* %6, align 8
  %2713 = load i64, i64* %7, align 8
  %2714 = and i64 %2712, %2713
  %2715 = xor i64 %2711, %2714
  %2716 = add i64 %2704, %2715
  store i64 %2716, i64* %14, align 8
  %2717 = load i64, i64* %11, align 8
  store i64 %2717, i64* %12, align 8
  %2718 = load i64, i64* %10, align 8
  store i64 %2718, i64* %11, align 8
  %2719 = load i64, i64* %9, align 8
  store i64 %2719, i64* %10, align 8
  %2720 = load i64, i64* %8, align 8
  %2721 = load i64, i64* %13, align 8
  %2722 = add i64 %2720, %2721
  store i64 %2722, i64* %9, align 8
  %2723 = load i64, i64* %7, align 8
  store i64 %2723, i64* %8, align 8
  %2724 = load i64, i64* %6, align 8
  store i64 %2724, i64* %7, align 8
  %2725 = load i64, i64* %5, align 8
  store i64 %2725, i64* %6, align 8
  %2726 = load i64, i64* %13, align 8
  %2727 = load i64, i64* %14, align 8
  %2728 = add i64 %2726, %2727
  store i64 %2728, i64* %5, align 8
  %2729 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2730 = load i64, i64* %2729, align 8
  %2731 = lshr i64 %2730, 19
  %2732 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2733 = load i64, i64* %2732, align 8
  %2734 = shl i64 %2733, 45
  %2735 = or i64 %2731, %2734
  %2736 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2737 = load i64, i64* %2736, align 8
  %2738 = lshr i64 %2737, 61
  %2739 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2740 = load i64, i64* %2739, align 8
  %2741 = shl i64 %2740, 3
  %2742 = or i64 %2738, %2741
  %2743 = xor i64 %2735, %2742
  %2744 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %2745 = load i64, i64* %2744, align 8
  %2746 = lshr i64 %2745, 6
  %2747 = xor i64 %2743, %2746
  %2748 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %2749 = load i64, i64* %2748, align 16
  %2750 = add i64 %2747, %2749
  %2751 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2752 = load i64, i64* %2751, align 16
  %2753 = lshr i64 %2752, 1
  %2754 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2755 = load i64, i64* %2754, align 16
  %2756 = shl i64 %2755, 63
  %2757 = or i64 %2753, %2756
  %2758 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2759 = load i64, i64* %2758, align 16
  %2760 = lshr i64 %2759, 8
  %2761 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2762 = load i64, i64* %2761, align 16
  %2763 = shl i64 %2762, 56
  %2764 = or i64 %2760, %2763
  %2765 = xor i64 %2757, %2764
  %2766 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2767 = load i64, i64* %2766, align 16
  %2768 = lshr i64 %2767, 7
  %2769 = xor i64 %2765, %2768
  %2770 = add i64 %2750, %2769
  %2771 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 5
  %2772 = load i64, i64* %2771, align 8
  %2773 = add i64 %2770, %2772
  %2774 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  store i64 %2773, i64* %2774, align 8
  %2775 = load i64, i64* %12, align 8
  %2776 = load i64, i64* %9, align 8
  %2777 = lshr i64 %2776, 14
  %2778 = load i64, i64* %9, align 8
  %2779 = shl i64 %2778, 50
  %2780 = or i64 %2777, %2779
  %2781 = load i64, i64* %9, align 8
  %2782 = lshr i64 %2781, 18
  %2783 = load i64, i64* %9, align 8
  %2784 = shl i64 %2783, 46
  %2785 = or i64 %2782, %2784
  %2786 = xor i64 %2780, %2785
  %2787 = load i64, i64* %9, align 8
  %2788 = lshr i64 %2787, 41
  %2789 = load i64, i64* %9, align 8
  %2790 = shl i64 %2789, 23
  %2791 = or i64 %2788, %2790
  %2792 = xor i64 %2786, %2791
  %2793 = add i64 %2775, %2792
  %2794 = load i64, i64* %9, align 8
  %2795 = load i64, i64* %10, align 8
  %2796 = and i64 %2794, %2795
  %2797 = load i64, i64* %9, align 8
  %2798 = xor i64 %2797, -1
  %2799 = load i64, i64* %11, align 8
  %2800 = and i64 %2798, %2799
  %2801 = xor i64 %2796, %2800
  %2802 = add i64 %2793, %2801
  %2803 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 21), align 8
  %2804 = add i64 %2802, %2803
  %2805 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2806 = load i64, i64* %2805, align 8
  %2807 = add i64 %2804, %2806
  store i64 %2807, i64* %13, align 8
  %2808 = load i64, i64* %5, align 8
  %2809 = lshr i64 %2808, 28
  %2810 = load i64, i64* %5, align 8
  %2811 = shl i64 %2810, 36
  %2812 = or i64 %2809, %2811
  %2813 = load i64, i64* %5, align 8
  %2814 = lshr i64 %2813, 34
  %2815 = load i64, i64* %5, align 8
  %2816 = shl i64 %2815, 30
  %2817 = or i64 %2814, %2816
  %2818 = xor i64 %2812, %2817
  %2819 = load i64, i64* %5, align 8
  %2820 = lshr i64 %2819, 39
  %2821 = load i64, i64* %5, align 8
  %2822 = shl i64 %2821, 25
  %2823 = or i64 %2820, %2822
  %2824 = xor i64 %2818, %2823
  %2825 = load i64, i64* %5, align 8
  %2826 = load i64, i64* %6, align 8
  %2827 = and i64 %2825, %2826
  %2828 = load i64, i64* %5, align 8
  %2829 = load i64, i64* %7, align 8
  %2830 = and i64 %2828, %2829
  %2831 = xor i64 %2827, %2830
  %2832 = load i64, i64* %6, align 8
  %2833 = load i64, i64* %7, align 8
  %2834 = and i64 %2832, %2833
  %2835 = xor i64 %2831, %2834
  %2836 = add i64 %2824, %2835
  store i64 %2836, i64* %14, align 8
  %2837 = load i64, i64* %11, align 8
  store i64 %2837, i64* %12, align 8
  %2838 = load i64, i64* %10, align 8
  store i64 %2838, i64* %11, align 8
  %2839 = load i64, i64* %9, align 8
  store i64 %2839, i64* %10, align 8
  %2840 = load i64, i64* %8, align 8
  %2841 = load i64, i64* %13, align 8
  %2842 = add i64 %2840, %2841
  store i64 %2842, i64* %9, align 8
  %2843 = load i64, i64* %7, align 8
  store i64 %2843, i64* %8, align 8
  %2844 = load i64, i64* %6, align 8
  store i64 %2844, i64* %7, align 8
  %2845 = load i64, i64* %5, align 8
  store i64 %2845, i64* %6, align 8
  %2846 = load i64, i64* %13, align 8
  %2847 = load i64, i64* %14, align 8
  %2848 = add i64 %2846, %2847
  store i64 %2848, i64* %5, align 8
  %2849 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2850 = load i64, i64* %2849, align 16
  %2851 = lshr i64 %2850, 19
  %2852 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2853 = load i64, i64* %2852, align 16
  %2854 = shl i64 %2853, 45
  %2855 = or i64 %2851, %2854
  %2856 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2857 = load i64, i64* %2856, align 16
  %2858 = lshr i64 %2857, 61
  %2859 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2860 = load i64, i64* %2859, align 16
  %2861 = shl i64 %2860, 3
  %2862 = or i64 %2858, %2861
  %2863 = xor i64 %2855, %2862
  %2864 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %2865 = load i64, i64* %2864, align 16
  %2866 = lshr i64 %2865, 6
  %2867 = xor i64 %2863, %2866
  %2868 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %2869 = load i64, i64* %2868, align 8
  %2870 = add i64 %2867, %2869
  %2871 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %2872 = load i64, i64* %2871, align 8
  %2873 = lshr i64 %2872, 1
  %2874 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %2875 = load i64, i64* %2874, align 8
  %2876 = shl i64 %2875, 63
  %2877 = or i64 %2873, %2876
  %2878 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %2879 = load i64, i64* %2878, align 8
  %2880 = lshr i64 %2879, 8
  %2881 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %2882 = load i64, i64* %2881, align 8
  %2883 = shl i64 %2882, 56
  %2884 = or i64 %2880, %2883
  %2885 = xor i64 %2877, %2884
  %2886 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %2887 = load i64, i64* %2886, align 8
  %2888 = lshr i64 %2887, 7
  %2889 = xor i64 %2885, %2888
  %2890 = add i64 %2870, %2889
  %2891 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 6
  %2892 = load i64, i64* %2891, align 16
  %2893 = add i64 %2890, %2892
  %2894 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  store i64 %2893, i64* %2894, align 16
  %2895 = load i64, i64* %12, align 8
  %2896 = load i64, i64* %9, align 8
  %2897 = lshr i64 %2896, 14
  %2898 = load i64, i64* %9, align 8
  %2899 = shl i64 %2898, 50
  %2900 = or i64 %2897, %2899
  %2901 = load i64, i64* %9, align 8
  %2902 = lshr i64 %2901, 18
  %2903 = load i64, i64* %9, align 8
  %2904 = shl i64 %2903, 46
  %2905 = or i64 %2902, %2904
  %2906 = xor i64 %2900, %2905
  %2907 = load i64, i64* %9, align 8
  %2908 = lshr i64 %2907, 41
  %2909 = load i64, i64* %9, align 8
  %2910 = shl i64 %2909, 23
  %2911 = or i64 %2908, %2910
  %2912 = xor i64 %2906, %2911
  %2913 = add i64 %2895, %2912
  %2914 = load i64, i64* %9, align 8
  %2915 = load i64, i64* %10, align 8
  %2916 = and i64 %2914, %2915
  %2917 = load i64, i64* %9, align 8
  %2918 = xor i64 %2917, -1
  %2919 = load i64, i64* %11, align 8
  %2920 = and i64 %2918, %2919
  %2921 = xor i64 %2916, %2920
  %2922 = add i64 %2913, %2921
  %2923 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 22), align 16
  %2924 = add i64 %2922, %2923
  %2925 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %2926 = load i64, i64* %2925, align 16
  %2927 = add i64 %2924, %2926
  store i64 %2927, i64* %13, align 8
  %2928 = load i64, i64* %5, align 8
  %2929 = lshr i64 %2928, 28
  %2930 = load i64, i64* %5, align 8
  %2931 = shl i64 %2930, 36
  %2932 = or i64 %2929, %2931
  %2933 = load i64, i64* %5, align 8
  %2934 = lshr i64 %2933, 34
  %2935 = load i64, i64* %5, align 8
  %2936 = shl i64 %2935, 30
  %2937 = or i64 %2934, %2936
  %2938 = xor i64 %2932, %2937
  %2939 = load i64, i64* %5, align 8
  %2940 = lshr i64 %2939, 39
  %2941 = load i64, i64* %5, align 8
  %2942 = shl i64 %2941, 25
  %2943 = or i64 %2940, %2942
  %2944 = xor i64 %2938, %2943
  %2945 = load i64, i64* %5, align 8
  %2946 = load i64, i64* %6, align 8
  %2947 = and i64 %2945, %2946
  %2948 = load i64, i64* %5, align 8
  %2949 = load i64, i64* %7, align 8
  %2950 = and i64 %2948, %2949
  %2951 = xor i64 %2947, %2950
  %2952 = load i64, i64* %6, align 8
  %2953 = load i64, i64* %7, align 8
  %2954 = and i64 %2952, %2953
  %2955 = xor i64 %2951, %2954
  %2956 = add i64 %2944, %2955
  store i64 %2956, i64* %14, align 8
  %2957 = load i64, i64* %11, align 8
  store i64 %2957, i64* %12, align 8
  %2958 = load i64, i64* %10, align 8
  store i64 %2958, i64* %11, align 8
  %2959 = load i64, i64* %9, align 8
  store i64 %2959, i64* %10, align 8
  %2960 = load i64, i64* %8, align 8
  %2961 = load i64, i64* %13, align 8
  %2962 = add i64 %2960, %2961
  store i64 %2962, i64* %9, align 8
  %2963 = load i64, i64* %7, align 8
  store i64 %2963, i64* %8, align 8
  %2964 = load i64, i64* %6, align 8
  store i64 %2964, i64* %7, align 8
  %2965 = load i64, i64* %5, align 8
  store i64 %2965, i64* %6, align 8
  %2966 = load i64, i64* %13, align 8
  %2967 = load i64, i64* %14, align 8
  %2968 = add i64 %2966, %2967
  store i64 %2968, i64* %5, align 8
  %2969 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2970 = load i64, i64* %2969, align 8
  %2971 = lshr i64 %2970, 19
  %2972 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2973 = load i64, i64* %2972, align 8
  %2974 = shl i64 %2973, 45
  %2975 = or i64 %2971, %2974
  %2976 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2977 = load i64, i64* %2976, align 8
  %2978 = lshr i64 %2977, 61
  %2979 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2980 = load i64, i64* %2979, align 8
  %2981 = shl i64 %2980, 3
  %2982 = or i64 %2978, %2981
  %2983 = xor i64 %2975, %2982
  %2984 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %2985 = load i64, i64* %2984, align 8
  %2986 = lshr i64 %2985, 6
  %2987 = xor i64 %2983, %2986
  %2988 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %2989 = load i64, i64* %2988, align 16
  %2990 = add i64 %2987, %2989
  %2991 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %2992 = load i64, i64* %2991, align 16
  %2993 = lshr i64 %2992, 1
  %2994 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %2995 = load i64, i64* %2994, align 16
  %2996 = shl i64 %2995, 63
  %2997 = or i64 %2993, %2996
  %2998 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %2999 = load i64, i64* %2998, align 16
  %3000 = lshr i64 %2999, 8
  %3001 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %3002 = load i64, i64* %3001, align 16
  %3003 = shl i64 %3002, 56
  %3004 = or i64 %3000, %3003
  %3005 = xor i64 %2997, %3004
  %3006 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %3007 = load i64, i64* %3006, align 16
  %3008 = lshr i64 %3007, 7
  %3009 = xor i64 %3005, %3008
  %3010 = add i64 %2990, %3009
  %3011 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 7
  %3012 = load i64, i64* %3011, align 8
  %3013 = add i64 %3010, %3012
  %3014 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  store i64 %3013, i64* %3014, align 8
  %3015 = load i64, i64* %12, align 8
  %3016 = load i64, i64* %9, align 8
  %3017 = lshr i64 %3016, 14
  %3018 = load i64, i64* %9, align 8
  %3019 = shl i64 %3018, 50
  %3020 = or i64 %3017, %3019
  %3021 = load i64, i64* %9, align 8
  %3022 = lshr i64 %3021, 18
  %3023 = load i64, i64* %9, align 8
  %3024 = shl i64 %3023, 46
  %3025 = or i64 %3022, %3024
  %3026 = xor i64 %3020, %3025
  %3027 = load i64, i64* %9, align 8
  %3028 = lshr i64 %3027, 41
  %3029 = load i64, i64* %9, align 8
  %3030 = shl i64 %3029, 23
  %3031 = or i64 %3028, %3030
  %3032 = xor i64 %3026, %3031
  %3033 = add i64 %3015, %3032
  %3034 = load i64, i64* %9, align 8
  %3035 = load i64, i64* %10, align 8
  %3036 = and i64 %3034, %3035
  %3037 = load i64, i64* %9, align 8
  %3038 = xor i64 %3037, -1
  %3039 = load i64, i64* %11, align 8
  %3040 = and i64 %3038, %3039
  %3041 = xor i64 %3036, %3040
  %3042 = add i64 %3033, %3041
  %3043 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 23), align 8
  %3044 = add i64 %3042, %3043
  %3045 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3046 = load i64, i64* %3045, align 8
  %3047 = add i64 %3044, %3046
  store i64 %3047, i64* %13, align 8
  %3048 = load i64, i64* %5, align 8
  %3049 = lshr i64 %3048, 28
  %3050 = load i64, i64* %5, align 8
  %3051 = shl i64 %3050, 36
  %3052 = or i64 %3049, %3051
  %3053 = load i64, i64* %5, align 8
  %3054 = lshr i64 %3053, 34
  %3055 = load i64, i64* %5, align 8
  %3056 = shl i64 %3055, 30
  %3057 = or i64 %3054, %3056
  %3058 = xor i64 %3052, %3057
  %3059 = load i64, i64* %5, align 8
  %3060 = lshr i64 %3059, 39
  %3061 = load i64, i64* %5, align 8
  %3062 = shl i64 %3061, 25
  %3063 = or i64 %3060, %3062
  %3064 = xor i64 %3058, %3063
  %3065 = load i64, i64* %5, align 8
  %3066 = load i64, i64* %6, align 8
  %3067 = and i64 %3065, %3066
  %3068 = load i64, i64* %5, align 8
  %3069 = load i64, i64* %7, align 8
  %3070 = and i64 %3068, %3069
  %3071 = xor i64 %3067, %3070
  %3072 = load i64, i64* %6, align 8
  %3073 = load i64, i64* %7, align 8
  %3074 = and i64 %3072, %3073
  %3075 = xor i64 %3071, %3074
  %3076 = add i64 %3064, %3075
  store i64 %3076, i64* %14, align 8
  %3077 = load i64, i64* %11, align 8
  store i64 %3077, i64* %12, align 8
  %3078 = load i64, i64* %10, align 8
  store i64 %3078, i64* %11, align 8
  %3079 = load i64, i64* %9, align 8
  store i64 %3079, i64* %10, align 8
  %3080 = load i64, i64* %8, align 8
  %3081 = load i64, i64* %13, align 8
  %3082 = add i64 %3080, %3081
  store i64 %3082, i64* %9, align 8
  %3083 = load i64, i64* %7, align 8
  store i64 %3083, i64* %8, align 8
  %3084 = load i64, i64* %6, align 8
  store i64 %3084, i64* %7, align 8
  %3085 = load i64, i64* %5, align 8
  store i64 %3085, i64* %6, align 8
  %3086 = load i64, i64* %13, align 8
  %3087 = load i64, i64* %14, align 8
  %3088 = add i64 %3086, %3087
  store i64 %3088, i64* %5, align 8
  %3089 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3090 = load i64, i64* %3089, align 16
  %3091 = lshr i64 %3090, 19
  %3092 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3093 = load i64, i64* %3092, align 16
  %3094 = shl i64 %3093, 45
  %3095 = or i64 %3091, %3094
  %3096 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3097 = load i64, i64* %3096, align 16
  %3098 = lshr i64 %3097, 61
  %3099 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3100 = load i64, i64* %3099, align 16
  %3101 = shl i64 %3100, 3
  %3102 = or i64 %3098, %3101
  %3103 = xor i64 %3095, %3102
  %3104 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3105 = load i64, i64* %3104, align 16
  %3106 = lshr i64 %3105, 6
  %3107 = xor i64 %3103, %3106
  %3108 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %3109 = load i64, i64* %3108, align 8
  %3110 = add i64 %3107, %3109
  %3111 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3112 = load i64, i64* %3111, align 8
  %3113 = lshr i64 %3112, 1
  %3114 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3115 = load i64, i64* %3114, align 8
  %3116 = shl i64 %3115, 63
  %3117 = or i64 %3113, %3116
  %3118 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3119 = load i64, i64* %3118, align 8
  %3120 = lshr i64 %3119, 8
  %3121 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3122 = load i64, i64* %3121, align 8
  %3123 = shl i64 %3122, 56
  %3124 = or i64 %3120, %3123
  %3125 = xor i64 %3117, %3124
  %3126 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3127 = load i64, i64* %3126, align 8
  %3128 = lshr i64 %3127, 7
  %3129 = xor i64 %3125, %3128
  %3130 = add i64 %3110, %3129
  %3131 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 8
  %3132 = load i64, i64* %3131, align 16
  %3133 = add i64 %3130, %3132
  %3134 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  store i64 %3133, i64* %3134, align 16
  %3135 = load i64, i64* %12, align 8
  %3136 = load i64, i64* %9, align 8
  %3137 = lshr i64 %3136, 14
  %3138 = load i64, i64* %9, align 8
  %3139 = shl i64 %3138, 50
  %3140 = or i64 %3137, %3139
  %3141 = load i64, i64* %9, align 8
  %3142 = lshr i64 %3141, 18
  %3143 = load i64, i64* %9, align 8
  %3144 = shl i64 %3143, 46
  %3145 = or i64 %3142, %3144
  %3146 = xor i64 %3140, %3145
  %3147 = load i64, i64* %9, align 8
  %3148 = lshr i64 %3147, 41
  %3149 = load i64, i64* %9, align 8
  %3150 = shl i64 %3149, 23
  %3151 = or i64 %3148, %3150
  %3152 = xor i64 %3146, %3151
  %3153 = add i64 %3135, %3152
  %3154 = load i64, i64* %9, align 8
  %3155 = load i64, i64* %10, align 8
  %3156 = and i64 %3154, %3155
  %3157 = load i64, i64* %9, align 8
  %3158 = xor i64 %3157, -1
  %3159 = load i64, i64* %11, align 8
  %3160 = and i64 %3158, %3159
  %3161 = xor i64 %3156, %3160
  %3162 = add i64 %3153, %3161
  %3163 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 24), align 16
  %3164 = add i64 %3162, %3163
  %3165 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3166 = load i64, i64* %3165, align 16
  %3167 = add i64 %3164, %3166
  store i64 %3167, i64* %13, align 8
  %3168 = load i64, i64* %5, align 8
  %3169 = lshr i64 %3168, 28
  %3170 = load i64, i64* %5, align 8
  %3171 = shl i64 %3170, 36
  %3172 = or i64 %3169, %3171
  %3173 = load i64, i64* %5, align 8
  %3174 = lshr i64 %3173, 34
  %3175 = load i64, i64* %5, align 8
  %3176 = shl i64 %3175, 30
  %3177 = or i64 %3174, %3176
  %3178 = xor i64 %3172, %3177
  %3179 = load i64, i64* %5, align 8
  %3180 = lshr i64 %3179, 39
  %3181 = load i64, i64* %5, align 8
  %3182 = shl i64 %3181, 25
  %3183 = or i64 %3180, %3182
  %3184 = xor i64 %3178, %3183
  %3185 = load i64, i64* %5, align 8
  %3186 = load i64, i64* %6, align 8
  %3187 = and i64 %3185, %3186
  %3188 = load i64, i64* %5, align 8
  %3189 = load i64, i64* %7, align 8
  %3190 = and i64 %3188, %3189
  %3191 = xor i64 %3187, %3190
  %3192 = load i64, i64* %6, align 8
  %3193 = load i64, i64* %7, align 8
  %3194 = and i64 %3192, %3193
  %3195 = xor i64 %3191, %3194
  %3196 = add i64 %3184, %3195
  store i64 %3196, i64* %14, align 8
  %3197 = load i64, i64* %11, align 8
  store i64 %3197, i64* %12, align 8
  %3198 = load i64, i64* %10, align 8
  store i64 %3198, i64* %11, align 8
  %3199 = load i64, i64* %9, align 8
  store i64 %3199, i64* %10, align 8
  %3200 = load i64, i64* %8, align 8
  %3201 = load i64, i64* %13, align 8
  %3202 = add i64 %3200, %3201
  store i64 %3202, i64* %9, align 8
  %3203 = load i64, i64* %7, align 8
  store i64 %3203, i64* %8, align 8
  %3204 = load i64, i64* %6, align 8
  store i64 %3204, i64* %7, align 8
  %3205 = load i64, i64* %5, align 8
  store i64 %3205, i64* %6, align 8
  %3206 = load i64, i64* %13, align 8
  %3207 = load i64, i64* %14, align 8
  %3208 = add i64 %3206, %3207
  store i64 %3208, i64* %5, align 8
  %3209 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3210 = load i64, i64* %3209, align 8
  %3211 = lshr i64 %3210, 19
  %3212 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3213 = load i64, i64* %3212, align 8
  %3214 = shl i64 %3213, 45
  %3215 = or i64 %3211, %3214
  %3216 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3217 = load i64, i64* %3216, align 8
  %3218 = lshr i64 %3217, 61
  %3219 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3220 = load i64, i64* %3219, align 8
  %3221 = shl i64 %3220, 3
  %3222 = or i64 %3218, %3221
  %3223 = xor i64 %3215, %3222
  %3224 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3225 = load i64, i64* %3224, align 8
  %3226 = lshr i64 %3225, 6
  %3227 = xor i64 %3223, %3226
  %3228 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %3229 = load i64, i64* %3228, align 16
  %3230 = add i64 %3227, %3229
  %3231 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3232 = load i64, i64* %3231, align 16
  %3233 = lshr i64 %3232, 1
  %3234 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3235 = load i64, i64* %3234, align 16
  %3236 = shl i64 %3235, 63
  %3237 = or i64 %3233, %3236
  %3238 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3239 = load i64, i64* %3238, align 16
  %3240 = lshr i64 %3239, 8
  %3241 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3242 = load i64, i64* %3241, align 16
  %3243 = shl i64 %3242, 56
  %3244 = or i64 %3240, %3243
  %3245 = xor i64 %3237, %3244
  %3246 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3247 = load i64, i64* %3246, align 16
  %3248 = lshr i64 %3247, 7
  %3249 = xor i64 %3245, %3248
  %3250 = add i64 %3230, %3249
  %3251 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 9
  %3252 = load i64, i64* %3251, align 8
  %3253 = add i64 %3250, %3252
  %3254 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  store i64 %3253, i64* %3254, align 8
  %3255 = load i64, i64* %12, align 8
  %3256 = load i64, i64* %9, align 8
  %3257 = lshr i64 %3256, 14
  %3258 = load i64, i64* %9, align 8
  %3259 = shl i64 %3258, 50
  %3260 = or i64 %3257, %3259
  %3261 = load i64, i64* %9, align 8
  %3262 = lshr i64 %3261, 18
  %3263 = load i64, i64* %9, align 8
  %3264 = shl i64 %3263, 46
  %3265 = or i64 %3262, %3264
  %3266 = xor i64 %3260, %3265
  %3267 = load i64, i64* %9, align 8
  %3268 = lshr i64 %3267, 41
  %3269 = load i64, i64* %9, align 8
  %3270 = shl i64 %3269, 23
  %3271 = or i64 %3268, %3270
  %3272 = xor i64 %3266, %3271
  %3273 = add i64 %3255, %3272
  %3274 = load i64, i64* %9, align 8
  %3275 = load i64, i64* %10, align 8
  %3276 = and i64 %3274, %3275
  %3277 = load i64, i64* %9, align 8
  %3278 = xor i64 %3277, -1
  %3279 = load i64, i64* %11, align 8
  %3280 = and i64 %3278, %3279
  %3281 = xor i64 %3276, %3280
  %3282 = add i64 %3273, %3281
  %3283 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 25), align 8
  %3284 = add i64 %3282, %3283
  %3285 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3286 = load i64, i64* %3285, align 8
  %3287 = add i64 %3284, %3286
  store i64 %3287, i64* %13, align 8
  %3288 = load i64, i64* %5, align 8
  %3289 = lshr i64 %3288, 28
  %3290 = load i64, i64* %5, align 8
  %3291 = shl i64 %3290, 36
  %3292 = or i64 %3289, %3291
  %3293 = load i64, i64* %5, align 8
  %3294 = lshr i64 %3293, 34
  %3295 = load i64, i64* %5, align 8
  %3296 = shl i64 %3295, 30
  %3297 = or i64 %3294, %3296
  %3298 = xor i64 %3292, %3297
  %3299 = load i64, i64* %5, align 8
  %3300 = lshr i64 %3299, 39
  %3301 = load i64, i64* %5, align 8
  %3302 = shl i64 %3301, 25
  %3303 = or i64 %3300, %3302
  %3304 = xor i64 %3298, %3303
  %3305 = load i64, i64* %5, align 8
  %3306 = load i64, i64* %6, align 8
  %3307 = and i64 %3305, %3306
  %3308 = load i64, i64* %5, align 8
  %3309 = load i64, i64* %7, align 8
  %3310 = and i64 %3308, %3309
  %3311 = xor i64 %3307, %3310
  %3312 = load i64, i64* %6, align 8
  %3313 = load i64, i64* %7, align 8
  %3314 = and i64 %3312, %3313
  %3315 = xor i64 %3311, %3314
  %3316 = add i64 %3304, %3315
  store i64 %3316, i64* %14, align 8
  %3317 = load i64, i64* %11, align 8
  store i64 %3317, i64* %12, align 8
  %3318 = load i64, i64* %10, align 8
  store i64 %3318, i64* %11, align 8
  %3319 = load i64, i64* %9, align 8
  store i64 %3319, i64* %10, align 8
  %3320 = load i64, i64* %8, align 8
  %3321 = load i64, i64* %13, align 8
  %3322 = add i64 %3320, %3321
  store i64 %3322, i64* %9, align 8
  %3323 = load i64, i64* %7, align 8
  store i64 %3323, i64* %8, align 8
  %3324 = load i64, i64* %6, align 8
  store i64 %3324, i64* %7, align 8
  %3325 = load i64, i64* %5, align 8
  store i64 %3325, i64* %6, align 8
  %3326 = load i64, i64* %13, align 8
  %3327 = load i64, i64* %14, align 8
  %3328 = add i64 %3326, %3327
  store i64 %3328, i64* %5, align 8
  %3329 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3330 = load i64, i64* %3329, align 16
  %3331 = lshr i64 %3330, 19
  %3332 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3333 = load i64, i64* %3332, align 16
  %3334 = shl i64 %3333, 45
  %3335 = or i64 %3331, %3334
  %3336 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3337 = load i64, i64* %3336, align 16
  %3338 = lshr i64 %3337, 61
  %3339 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3340 = load i64, i64* %3339, align 16
  %3341 = shl i64 %3340, 3
  %3342 = or i64 %3338, %3341
  %3343 = xor i64 %3335, %3342
  %3344 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3345 = load i64, i64* %3344, align 16
  %3346 = lshr i64 %3345, 6
  %3347 = xor i64 %3343, %3346
  %3348 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %3349 = load i64, i64* %3348, align 8
  %3350 = add i64 %3347, %3349
  %3351 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3352 = load i64, i64* %3351, align 8
  %3353 = lshr i64 %3352, 1
  %3354 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3355 = load i64, i64* %3354, align 8
  %3356 = shl i64 %3355, 63
  %3357 = or i64 %3353, %3356
  %3358 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3359 = load i64, i64* %3358, align 8
  %3360 = lshr i64 %3359, 8
  %3361 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3362 = load i64, i64* %3361, align 8
  %3363 = shl i64 %3362, 56
  %3364 = or i64 %3360, %3363
  %3365 = xor i64 %3357, %3364
  %3366 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3367 = load i64, i64* %3366, align 8
  %3368 = lshr i64 %3367, 7
  %3369 = xor i64 %3365, %3368
  %3370 = add i64 %3350, %3369
  %3371 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 10
  %3372 = load i64, i64* %3371, align 16
  %3373 = add i64 %3370, %3372
  %3374 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  store i64 %3373, i64* %3374, align 16
  %3375 = load i64, i64* %12, align 8
  %3376 = load i64, i64* %9, align 8
  %3377 = lshr i64 %3376, 14
  %3378 = load i64, i64* %9, align 8
  %3379 = shl i64 %3378, 50
  %3380 = or i64 %3377, %3379
  %3381 = load i64, i64* %9, align 8
  %3382 = lshr i64 %3381, 18
  %3383 = load i64, i64* %9, align 8
  %3384 = shl i64 %3383, 46
  %3385 = or i64 %3382, %3384
  %3386 = xor i64 %3380, %3385
  %3387 = load i64, i64* %9, align 8
  %3388 = lshr i64 %3387, 41
  %3389 = load i64, i64* %9, align 8
  %3390 = shl i64 %3389, 23
  %3391 = or i64 %3388, %3390
  %3392 = xor i64 %3386, %3391
  %3393 = add i64 %3375, %3392
  %3394 = load i64, i64* %9, align 8
  %3395 = load i64, i64* %10, align 8
  %3396 = and i64 %3394, %3395
  %3397 = load i64, i64* %9, align 8
  %3398 = xor i64 %3397, -1
  %3399 = load i64, i64* %11, align 8
  %3400 = and i64 %3398, %3399
  %3401 = xor i64 %3396, %3400
  %3402 = add i64 %3393, %3401
  %3403 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 26), align 16
  %3404 = add i64 %3402, %3403
  %3405 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3406 = load i64, i64* %3405, align 16
  %3407 = add i64 %3404, %3406
  store i64 %3407, i64* %13, align 8
  %3408 = load i64, i64* %5, align 8
  %3409 = lshr i64 %3408, 28
  %3410 = load i64, i64* %5, align 8
  %3411 = shl i64 %3410, 36
  %3412 = or i64 %3409, %3411
  %3413 = load i64, i64* %5, align 8
  %3414 = lshr i64 %3413, 34
  %3415 = load i64, i64* %5, align 8
  %3416 = shl i64 %3415, 30
  %3417 = or i64 %3414, %3416
  %3418 = xor i64 %3412, %3417
  %3419 = load i64, i64* %5, align 8
  %3420 = lshr i64 %3419, 39
  %3421 = load i64, i64* %5, align 8
  %3422 = shl i64 %3421, 25
  %3423 = or i64 %3420, %3422
  %3424 = xor i64 %3418, %3423
  %3425 = load i64, i64* %5, align 8
  %3426 = load i64, i64* %6, align 8
  %3427 = and i64 %3425, %3426
  %3428 = load i64, i64* %5, align 8
  %3429 = load i64, i64* %7, align 8
  %3430 = and i64 %3428, %3429
  %3431 = xor i64 %3427, %3430
  %3432 = load i64, i64* %6, align 8
  %3433 = load i64, i64* %7, align 8
  %3434 = and i64 %3432, %3433
  %3435 = xor i64 %3431, %3434
  %3436 = add i64 %3424, %3435
  store i64 %3436, i64* %14, align 8
  %3437 = load i64, i64* %11, align 8
  store i64 %3437, i64* %12, align 8
  %3438 = load i64, i64* %10, align 8
  store i64 %3438, i64* %11, align 8
  %3439 = load i64, i64* %9, align 8
  store i64 %3439, i64* %10, align 8
  %3440 = load i64, i64* %8, align 8
  %3441 = load i64, i64* %13, align 8
  %3442 = add i64 %3440, %3441
  store i64 %3442, i64* %9, align 8
  %3443 = load i64, i64* %7, align 8
  store i64 %3443, i64* %8, align 8
  %3444 = load i64, i64* %6, align 8
  store i64 %3444, i64* %7, align 8
  %3445 = load i64, i64* %5, align 8
  store i64 %3445, i64* %6, align 8
  %3446 = load i64, i64* %13, align 8
  %3447 = load i64, i64* %14, align 8
  %3448 = add i64 %3446, %3447
  store i64 %3448, i64* %5, align 8
  %3449 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3450 = load i64, i64* %3449, align 8
  %3451 = lshr i64 %3450, 19
  %3452 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3453 = load i64, i64* %3452, align 8
  %3454 = shl i64 %3453, 45
  %3455 = or i64 %3451, %3454
  %3456 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3457 = load i64, i64* %3456, align 8
  %3458 = lshr i64 %3457, 61
  %3459 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3460 = load i64, i64* %3459, align 8
  %3461 = shl i64 %3460, 3
  %3462 = or i64 %3458, %3461
  %3463 = xor i64 %3455, %3462
  %3464 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %3465 = load i64, i64* %3464, align 8
  %3466 = lshr i64 %3465, 6
  %3467 = xor i64 %3463, %3466
  %3468 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %3469 = load i64, i64* %3468, align 16
  %3470 = add i64 %3467, %3469
  %3471 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3472 = load i64, i64* %3471, align 16
  %3473 = lshr i64 %3472, 1
  %3474 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3475 = load i64, i64* %3474, align 16
  %3476 = shl i64 %3475, 63
  %3477 = or i64 %3473, %3476
  %3478 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3479 = load i64, i64* %3478, align 16
  %3480 = lshr i64 %3479, 8
  %3481 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3482 = load i64, i64* %3481, align 16
  %3483 = shl i64 %3482, 56
  %3484 = or i64 %3480, %3483
  %3485 = xor i64 %3477, %3484
  %3486 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3487 = load i64, i64* %3486, align 16
  %3488 = lshr i64 %3487, 7
  %3489 = xor i64 %3485, %3488
  %3490 = add i64 %3470, %3489
  %3491 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 11
  %3492 = load i64, i64* %3491, align 8
  %3493 = add i64 %3490, %3492
  %3494 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  store i64 %3493, i64* %3494, align 8
  %3495 = load i64, i64* %12, align 8
  %3496 = load i64, i64* %9, align 8
  %3497 = lshr i64 %3496, 14
  %3498 = load i64, i64* %9, align 8
  %3499 = shl i64 %3498, 50
  %3500 = or i64 %3497, %3499
  %3501 = load i64, i64* %9, align 8
  %3502 = lshr i64 %3501, 18
  %3503 = load i64, i64* %9, align 8
  %3504 = shl i64 %3503, 46
  %3505 = or i64 %3502, %3504
  %3506 = xor i64 %3500, %3505
  %3507 = load i64, i64* %9, align 8
  %3508 = lshr i64 %3507, 41
  %3509 = load i64, i64* %9, align 8
  %3510 = shl i64 %3509, 23
  %3511 = or i64 %3508, %3510
  %3512 = xor i64 %3506, %3511
  %3513 = add i64 %3495, %3512
  %3514 = load i64, i64* %9, align 8
  %3515 = load i64, i64* %10, align 8
  %3516 = and i64 %3514, %3515
  %3517 = load i64, i64* %9, align 8
  %3518 = xor i64 %3517, -1
  %3519 = load i64, i64* %11, align 8
  %3520 = and i64 %3518, %3519
  %3521 = xor i64 %3516, %3520
  %3522 = add i64 %3513, %3521
  %3523 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 27), align 8
  %3524 = add i64 %3522, %3523
  %3525 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3526 = load i64, i64* %3525, align 8
  %3527 = add i64 %3524, %3526
  store i64 %3527, i64* %13, align 8
  %3528 = load i64, i64* %5, align 8
  %3529 = lshr i64 %3528, 28
  %3530 = load i64, i64* %5, align 8
  %3531 = shl i64 %3530, 36
  %3532 = or i64 %3529, %3531
  %3533 = load i64, i64* %5, align 8
  %3534 = lshr i64 %3533, 34
  %3535 = load i64, i64* %5, align 8
  %3536 = shl i64 %3535, 30
  %3537 = or i64 %3534, %3536
  %3538 = xor i64 %3532, %3537
  %3539 = load i64, i64* %5, align 8
  %3540 = lshr i64 %3539, 39
  %3541 = load i64, i64* %5, align 8
  %3542 = shl i64 %3541, 25
  %3543 = or i64 %3540, %3542
  %3544 = xor i64 %3538, %3543
  %3545 = load i64, i64* %5, align 8
  %3546 = load i64, i64* %6, align 8
  %3547 = and i64 %3545, %3546
  %3548 = load i64, i64* %5, align 8
  %3549 = load i64, i64* %7, align 8
  %3550 = and i64 %3548, %3549
  %3551 = xor i64 %3547, %3550
  %3552 = load i64, i64* %6, align 8
  %3553 = load i64, i64* %7, align 8
  %3554 = and i64 %3552, %3553
  %3555 = xor i64 %3551, %3554
  %3556 = add i64 %3544, %3555
  store i64 %3556, i64* %14, align 8
  %3557 = load i64, i64* %11, align 8
  store i64 %3557, i64* %12, align 8
  %3558 = load i64, i64* %10, align 8
  store i64 %3558, i64* %11, align 8
  %3559 = load i64, i64* %9, align 8
  store i64 %3559, i64* %10, align 8
  %3560 = load i64, i64* %8, align 8
  %3561 = load i64, i64* %13, align 8
  %3562 = add i64 %3560, %3561
  store i64 %3562, i64* %9, align 8
  %3563 = load i64, i64* %7, align 8
  store i64 %3563, i64* %8, align 8
  %3564 = load i64, i64* %6, align 8
  store i64 %3564, i64* %7, align 8
  %3565 = load i64, i64* %5, align 8
  store i64 %3565, i64* %6, align 8
  %3566 = load i64, i64* %13, align 8
  %3567 = load i64, i64* %14, align 8
  %3568 = add i64 %3566, %3567
  store i64 %3568, i64* %5, align 8
  %3569 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3570 = load i64, i64* %3569, align 16
  %3571 = lshr i64 %3570, 19
  %3572 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3573 = load i64, i64* %3572, align 16
  %3574 = shl i64 %3573, 45
  %3575 = or i64 %3571, %3574
  %3576 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3577 = load i64, i64* %3576, align 16
  %3578 = lshr i64 %3577, 61
  %3579 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3580 = load i64, i64* %3579, align 16
  %3581 = shl i64 %3580, 3
  %3582 = or i64 %3578, %3581
  %3583 = xor i64 %3575, %3582
  %3584 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %3585 = load i64, i64* %3584, align 16
  %3586 = lshr i64 %3585, 6
  %3587 = xor i64 %3583, %3586
  %3588 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %3589 = load i64, i64* %3588, align 8
  %3590 = add i64 %3587, %3589
  %3591 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3592 = load i64, i64* %3591, align 8
  %3593 = lshr i64 %3592, 1
  %3594 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3595 = load i64, i64* %3594, align 8
  %3596 = shl i64 %3595, 63
  %3597 = or i64 %3593, %3596
  %3598 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3599 = load i64, i64* %3598, align 8
  %3600 = lshr i64 %3599, 8
  %3601 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3602 = load i64, i64* %3601, align 8
  %3603 = shl i64 %3602, 56
  %3604 = or i64 %3600, %3603
  %3605 = xor i64 %3597, %3604
  %3606 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3607 = load i64, i64* %3606, align 8
  %3608 = lshr i64 %3607, 7
  %3609 = xor i64 %3605, %3608
  %3610 = add i64 %3590, %3609
  %3611 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 12
  %3612 = load i64, i64* %3611, align 16
  %3613 = add i64 %3610, %3612
  %3614 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  store i64 %3613, i64* %3614, align 16
  %3615 = load i64, i64* %12, align 8
  %3616 = load i64, i64* %9, align 8
  %3617 = lshr i64 %3616, 14
  %3618 = load i64, i64* %9, align 8
  %3619 = shl i64 %3618, 50
  %3620 = or i64 %3617, %3619
  %3621 = load i64, i64* %9, align 8
  %3622 = lshr i64 %3621, 18
  %3623 = load i64, i64* %9, align 8
  %3624 = shl i64 %3623, 46
  %3625 = or i64 %3622, %3624
  %3626 = xor i64 %3620, %3625
  %3627 = load i64, i64* %9, align 8
  %3628 = lshr i64 %3627, 41
  %3629 = load i64, i64* %9, align 8
  %3630 = shl i64 %3629, 23
  %3631 = or i64 %3628, %3630
  %3632 = xor i64 %3626, %3631
  %3633 = add i64 %3615, %3632
  %3634 = load i64, i64* %9, align 8
  %3635 = load i64, i64* %10, align 8
  %3636 = and i64 %3634, %3635
  %3637 = load i64, i64* %9, align 8
  %3638 = xor i64 %3637, -1
  %3639 = load i64, i64* %11, align 8
  %3640 = and i64 %3638, %3639
  %3641 = xor i64 %3636, %3640
  %3642 = add i64 %3633, %3641
  %3643 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 28), align 16
  %3644 = add i64 %3642, %3643
  %3645 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3646 = load i64, i64* %3645, align 16
  %3647 = add i64 %3644, %3646
  store i64 %3647, i64* %13, align 8
  %3648 = load i64, i64* %5, align 8
  %3649 = lshr i64 %3648, 28
  %3650 = load i64, i64* %5, align 8
  %3651 = shl i64 %3650, 36
  %3652 = or i64 %3649, %3651
  %3653 = load i64, i64* %5, align 8
  %3654 = lshr i64 %3653, 34
  %3655 = load i64, i64* %5, align 8
  %3656 = shl i64 %3655, 30
  %3657 = or i64 %3654, %3656
  %3658 = xor i64 %3652, %3657
  %3659 = load i64, i64* %5, align 8
  %3660 = lshr i64 %3659, 39
  %3661 = load i64, i64* %5, align 8
  %3662 = shl i64 %3661, 25
  %3663 = or i64 %3660, %3662
  %3664 = xor i64 %3658, %3663
  %3665 = load i64, i64* %5, align 8
  %3666 = load i64, i64* %6, align 8
  %3667 = and i64 %3665, %3666
  %3668 = load i64, i64* %5, align 8
  %3669 = load i64, i64* %7, align 8
  %3670 = and i64 %3668, %3669
  %3671 = xor i64 %3667, %3670
  %3672 = load i64, i64* %6, align 8
  %3673 = load i64, i64* %7, align 8
  %3674 = and i64 %3672, %3673
  %3675 = xor i64 %3671, %3674
  %3676 = add i64 %3664, %3675
  store i64 %3676, i64* %14, align 8
  %3677 = load i64, i64* %11, align 8
  store i64 %3677, i64* %12, align 8
  %3678 = load i64, i64* %10, align 8
  store i64 %3678, i64* %11, align 8
  %3679 = load i64, i64* %9, align 8
  store i64 %3679, i64* %10, align 8
  %3680 = load i64, i64* %8, align 8
  %3681 = load i64, i64* %13, align 8
  %3682 = add i64 %3680, %3681
  store i64 %3682, i64* %9, align 8
  %3683 = load i64, i64* %7, align 8
  store i64 %3683, i64* %8, align 8
  %3684 = load i64, i64* %6, align 8
  store i64 %3684, i64* %7, align 8
  %3685 = load i64, i64* %5, align 8
  store i64 %3685, i64* %6, align 8
  %3686 = load i64, i64* %13, align 8
  %3687 = load i64, i64* %14, align 8
  %3688 = add i64 %3686, %3687
  store i64 %3688, i64* %5, align 8
  %3689 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3690 = load i64, i64* %3689, align 8
  %3691 = lshr i64 %3690, 19
  %3692 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3693 = load i64, i64* %3692, align 8
  %3694 = shl i64 %3693, 45
  %3695 = or i64 %3691, %3694
  %3696 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3697 = load i64, i64* %3696, align 8
  %3698 = lshr i64 %3697, 61
  %3699 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3700 = load i64, i64* %3699, align 8
  %3701 = shl i64 %3700, 3
  %3702 = or i64 %3698, %3701
  %3703 = xor i64 %3695, %3702
  %3704 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %3705 = load i64, i64* %3704, align 8
  %3706 = lshr i64 %3705, 6
  %3707 = xor i64 %3703, %3706
  %3708 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %3709 = load i64, i64* %3708, align 16
  %3710 = add i64 %3707, %3709
  %3711 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3712 = load i64, i64* %3711, align 16
  %3713 = lshr i64 %3712, 1
  %3714 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3715 = load i64, i64* %3714, align 16
  %3716 = shl i64 %3715, 63
  %3717 = or i64 %3713, %3716
  %3718 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3719 = load i64, i64* %3718, align 16
  %3720 = lshr i64 %3719, 8
  %3721 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3722 = load i64, i64* %3721, align 16
  %3723 = shl i64 %3722, 56
  %3724 = or i64 %3720, %3723
  %3725 = xor i64 %3717, %3724
  %3726 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3727 = load i64, i64* %3726, align 16
  %3728 = lshr i64 %3727, 7
  %3729 = xor i64 %3725, %3728
  %3730 = add i64 %3710, %3729
  %3731 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 13
  %3732 = load i64, i64* %3731, align 8
  %3733 = add i64 %3730, %3732
  %3734 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  store i64 %3733, i64* %3734, align 8
  %3735 = load i64, i64* %12, align 8
  %3736 = load i64, i64* %9, align 8
  %3737 = lshr i64 %3736, 14
  %3738 = load i64, i64* %9, align 8
  %3739 = shl i64 %3738, 50
  %3740 = or i64 %3737, %3739
  %3741 = load i64, i64* %9, align 8
  %3742 = lshr i64 %3741, 18
  %3743 = load i64, i64* %9, align 8
  %3744 = shl i64 %3743, 46
  %3745 = or i64 %3742, %3744
  %3746 = xor i64 %3740, %3745
  %3747 = load i64, i64* %9, align 8
  %3748 = lshr i64 %3747, 41
  %3749 = load i64, i64* %9, align 8
  %3750 = shl i64 %3749, 23
  %3751 = or i64 %3748, %3750
  %3752 = xor i64 %3746, %3751
  %3753 = add i64 %3735, %3752
  %3754 = load i64, i64* %9, align 8
  %3755 = load i64, i64* %10, align 8
  %3756 = and i64 %3754, %3755
  %3757 = load i64, i64* %9, align 8
  %3758 = xor i64 %3757, -1
  %3759 = load i64, i64* %11, align 8
  %3760 = and i64 %3758, %3759
  %3761 = xor i64 %3756, %3760
  %3762 = add i64 %3753, %3761
  %3763 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 29), align 8
  %3764 = add i64 %3762, %3763
  %3765 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3766 = load i64, i64* %3765, align 8
  %3767 = add i64 %3764, %3766
  store i64 %3767, i64* %13, align 8
  %3768 = load i64, i64* %5, align 8
  %3769 = lshr i64 %3768, 28
  %3770 = load i64, i64* %5, align 8
  %3771 = shl i64 %3770, 36
  %3772 = or i64 %3769, %3771
  %3773 = load i64, i64* %5, align 8
  %3774 = lshr i64 %3773, 34
  %3775 = load i64, i64* %5, align 8
  %3776 = shl i64 %3775, 30
  %3777 = or i64 %3774, %3776
  %3778 = xor i64 %3772, %3777
  %3779 = load i64, i64* %5, align 8
  %3780 = lshr i64 %3779, 39
  %3781 = load i64, i64* %5, align 8
  %3782 = shl i64 %3781, 25
  %3783 = or i64 %3780, %3782
  %3784 = xor i64 %3778, %3783
  %3785 = load i64, i64* %5, align 8
  %3786 = load i64, i64* %6, align 8
  %3787 = and i64 %3785, %3786
  %3788 = load i64, i64* %5, align 8
  %3789 = load i64, i64* %7, align 8
  %3790 = and i64 %3788, %3789
  %3791 = xor i64 %3787, %3790
  %3792 = load i64, i64* %6, align 8
  %3793 = load i64, i64* %7, align 8
  %3794 = and i64 %3792, %3793
  %3795 = xor i64 %3791, %3794
  %3796 = add i64 %3784, %3795
  store i64 %3796, i64* %14, align 8
  %3797 = load i64, i64* %11, align 8
  store i64 %3797, i64* %12, align 8
  %3798 = load i64, i64* %10, align 8
  store i64 %3798, i64* %11, align 8
  %3799 = load i64, i64* %9, align 8
  store i64 %3799, i64* %10, align 8
  %3800 = load i64, i64* %8, align 8
  %3801 = load i64, i64* %13, align 8
  %3802 = add i64 %3800, %3801
  store i64 %3802, i64* %9, align 8
  %3803 = load i64, i64* %7, align 8
  store i64 %3803, i64* %8, align 8
  %3804 = load i64, i64* %6, align 8
  store i64 %3804, i64* %7, align 8
  %3805 = load i64, i64* %5, align 8
  store i64 %3805, i64* %6, align 8
  %3806 = load i64, i64* %13, align 8
  %3807 = load i64, i64* %14, align 8
  %3808 = add i64 %3806, %3807
  store i64 %3808, i64* %5, align 8
  %3809 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3810 = load i64, i64* %3809, align 16
  %3811 = lshr i64 %3810, 19
  %3812 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3813 = load i64, i64* %3812, align 16
  %3814 = shl i64 %3813, 45
  %3815 = or i64 %3811, %3814
  %3816 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3817 = load i64, i64* %3816, align 16
  %3818 = lshr i64 %3817, 61
  %3819 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3820 = load i64, i64* %3819, align 16
  %3821 = shl i64 %3820, 3
  %3822 = or i64 %3818, %3821
  %3823 = xor i64 %3815, %3822
  %3824 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %3825 = load i64, i64* %3824, align 16
  %3826 = lshr i64 %3825, 6
  %3827 = xor i64 %3823, %3826
  %3828 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %3829 = load i64, i64* %3828, align 8
  %3830 = add i64 %3827, %3829
  %3831 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3832 = load i64, i64* %3831, align 8
  %3833 = lshr i64 %3832, 1
  %3834 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3835 = load i64, i64* %3834, align 8
  %3836 = shl i64 %3835, 63
  %3837 = or i64 %3833, %3836
  %3838 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3839 = load i64, i64* %3838, align 8
  %3840 = lshr i64 %3839, 8
  %3841 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3842 = load i64, i64* %3841, align 8
  %3843 = shl i64 %3842, 56
  %3844 = or i64 %3840, %3843
  %3845 = xor i64 %3837, %3844
  %3846 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3847 = load i64, i64* %3846, align 8
  %3848 = lshr i64 %3847, 7
  %3849 = xor i64 %3845, %3848
  %3850 = add i64 %3830, %3849
  %3851 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 14
  %3852 = load i64, i64* %3851, align 16
  %3853 = add i64 %3850, %3852
  %3854 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  store i64 %3853, i64* %3854, align 16
  %3855 = load i64, i64* %12, align 8
  %3856 = load i64, i64* %9, align 8
  %3857 = lshr i64 %3856, 14
  %3858 = load i64, i64* %9, align 8
  %3859 = shl i64 %3858, 50
  %3860 = or i64 %3857, %3859
  %3861 = load i64, i64* %9, align 8
  %3862 = lshr i64 %3861, 18
  %3863 = load i64, i64* %9, align 8
  %3864 = shl i64 %3863, 46
  %3865 = or i64 %3862, %3864
  %3866 = xor i64 %3860, %3865
  %3867 = load i64, i64* %9, align 8
  %3868 = lshr i64 %3867, 41
  %3869 = load i64, i64* %9, align 8
  %3870 = shl i64 %3869, 23
  %3871 = or i64 %3868, %3870
  %3872 = xor i64 %3866, %3871
  %3873 = add i64 %3855, %3872
  %3874 = load i64, i64* %9, align 8
  %3875 = load i64, i64* %10, align 8
  %3876 = and i64 %3874, %3875
  %3877 = load i64, i64* %9, align 8
  %3878 = xor i64 %3877, -1
  %3879 = load i64, i64* %11, align 8
  %3880 = and i64 %3878, %3879
  %3881 = xor i64 %3876, %3880
  %3882 = add i64 %3873, %3881
  %3883 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 30), align 16
  %3884 = add i64 %3882, %3883
  %3885 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %3886 = load i64, i64* %3885, align 16
  %3887 = add i64 %3884, %3886
  store i64 %3887, i64* %13, align 8
  %3888 = load i64, i64* %5, align 8
  %3889 = lshr i64 %3888, 28
  %3890 = load i64, i64* %5, align 8
  %3891 = shl i64 %3890, 36
  %3892 = or i64 %3889, %3891
  %3893 = load i64, i64* %5, align 8
  %3894 = lshr i64 %3893, 34
  %3895 = load i64, i64* %5, align 8
  %3896 = shl i64 %3895, 30
  %3897 = or i64 %3894, %3896
  %3898 = xor i64 %3892, %3897
  %3899 = load i64, i64* %5, align 8
  %3900 = lshr i64 %3899, 39
  %3901 = load i64, i64* %5, align 8
  %3902 = shl i64 %3901, 25
  %3903 = or i64 %3900, %3902
  %3904 = xor i64 %3898, %3903
  %3905 = load i64, i64* %5, align 8
  %3906 = load i64, i64* %6, align 8
  %3907 = and i64 %3905, %3906
  %3908 = load i64, i64* %5, align 8
  %3909 = load i64, i64* %7, align 8
  %3910 = and i64 %3908, %3909
  %3911 = xor i64 %3907, %3910
  %3912 = load i64, i64* %6, align 8
  %3913 = load i64, i64* %7, align 8
  %3914 = and i64 %3912, %3913
  %3915 = xor i64 %3911, %3914
  %3916 = add i64 %3904, %3915
  store i64 %3916, i64* %14, align 8
  %3917 = load i64, i64* %11, align 8
  store i64 %3917, i64* %12, align 8
  %3918 = load i64, i64* %10, align 8
  store i64 %3918, i64* %11, align 8
  %3919 = load i64, i64* %9, align 8
  store i64 %3919, i64* %10, align 8
  %3920 = load i64, i64* %8, align 8
  %3921 = load i64, i64* %13, align 8
  %3922 = add i64 %3920, %3921
  store i64 %3922, i64* %9, align 8
  %3923 = load i64, i64* %7, align 8
  store i64 %3923, i64* %8, align 8
  %3924 = load i64, i64* %6, align 8
  store i64 %3924, i64* %7, align 8
  %3925 = load i64, i64* %5, align 8
  store i64 %3925, i64* %6, align 8
  %3926 = load i64, i64* %13, align 8
  %3927 = load i64, i64* %14, align 8
  %3928 = add i64 %3926, %3927
  store i64 %3928, i64* %5, align 8
  %3929 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3930 = load i64, i64* %3929, align 8
  %3931 = lshr i64 %3930, 19
  %3932 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3933 = load i64, i64* %3932, align 8
  %3934 = shl i64 %3933, 45
  %3935 = or i64 %3931, %3934
  %3936 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3937 = load i64, i64* %3936, align 8
  %3938 = lshr i64 %3937, 61
  %3939 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3940 = load i64, i64* %3939, align 8
  %3941 = shl i64 %3940, 3
  %3942 = or i64 %3938, %3941
  %3943 = xor i64 %3935, %3942
  %3944 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %3945 = load i64, i64* %3944, align 8
  %3946 = lshr i64 %3945, 6
  %3947 = xor i64 %3943, %3946
  %3948 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %3949 = load i64, i64* %3948, align 16
  %3950 = add i64 %3947, %3949
  %3951 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %3952 = load i64, i64* %3951, align 16
  %3953 = lshr i64 %3952, 1
  %3954 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %3955 = load i64, i64* %3954, align 16
  %3956 = shl i64 %3955, 63
  %3957 = or i64 %3953, %3956
  %3958 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %3959 = load i64, i64* %3958, align 16
  %3960 = lshr i64 %3959, 8
  %3961 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %3962 = load i64, i64* %3961, align 16
  %3963 = shl i64 %3962, 56
  %3964 = or i64 %3960, %3963
  %3965 = xor i64 %3957, %3964
  %3966 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %3967 = load i64, i64* %3966, align 16
  %3968 = lshr i64 %3967, 7
  %3969 = xor i64 %3965, %3968
  %3970 = add i64 %3950, %3969
  %3971 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 15
  %3972 = load i64, i64* %3971, align 8
  %3973 = add i64 %3970, %3972
  %3974 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  store i64 %3973, i64* %3974, align 8
  %3975 = load i64, i64* %12, align 8
  %3976 = load i64, i64* %9, align 8
  %3977 = lshr i64 %3976, 14
  %3978 = load i64, i64* %9, align 8
  %3979 = shl i64 %3978, 50
  %3980 = or i64 %3977, %3979
  %3981 = load i64, i64* %9, align 8
  %3982 = lshr i64 %3981, 18
  %3983 = load i64, i64* %9, align 8
  %3984 = shl i64 %3983, 46
  %3985 = or i64 %3982, %3984
  %3986 = xor i64 %3980, %3985
  %3987 = load i64, i64* %9, align 8
  %3988 = lshr i64 %3987, 41
  %3989 = load i64, i64* %9, align 8
  %3990 = shl i64 %3989, 23
  %3991 = or i64 %3988, %3990
  %3992 = xor i64 %3986, %3991
  %3993 = add i64 %3975, %3992
  %3994 = load i64, i64* %9, align 8
  %3995 = load i64, i64* %10, align 8
  %3996 = and i64 %3994, %3995
  %3997 = load i64, i64* %9, align 8
  %3998 = xor i64 %3997, -1
  %3999 = load i64, i64* %11, align 8
  %4000 = and i64 %3998, %3999
  %4001 = xor i64 %3996, %4000
  %4002 = add i64 %3993, %4001
  %4003 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 31), align 8
  %4004 = add i64 %4002, %4003
  %4005 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4006 = load i64, i64* %4005, align 8
  %4007 = add i64 %4004, %4006
  store i64 %4007, i64* %13, align 8
  %4008 = load i64, i64* %5, align 8
  %4009 = lshr i64 %4008, 28
  %4010 = load i64, i64* %5, align 8
  %4011 = shl i64 %4010, 36
  %4012 = or i64 %4009, %4011
  %4013 = load i64, i64* %5, align 8
  %4014 = lshr i64 %4013, 34
  %4015 = load i64, i64* %5, align 8
  %4016 = shl i64 %4015, 30
  %4017 = or i64 %4014, %4016
  %4018 = xor i64 %4012, %4017
  %4019 = load i64, i64* %5, align 8
  %4020 = lshr i64 %4019, 39
  %4021 = load i64, i64* %5, align 8
  %4022 = shl i64 %4021, 25
  %4023 = or i64 %4020, %4022
  %4024 = xor i64 %4018, %4023
  %4025 = load i64, i64* %5, align 8
  %4026 = load i64, i64* %6, align 8
  %4027 = and i64 %4025, %4026
  %4028 = load i64, i64* %5, align 8
  %4029 = load i64, i64* %7, align 8
  %4030 = and i64 %4028, %4029
  %4031 = xor i64 %4027, %4030
  %4032 = load i64, i64* %6, align 8
  %4033 = load i64, i64* %7, align 8
  %4034 = and i64 %4032, %4033
  %4035 = xor i64 %4031, %4034
  %4036 = add i64 %4024, %4035
  store i64 %4036, i64* %14, align 8
  %4037 = load i64, i64* %11, align 8
  store i64 %4037, i64* %12, align 8
  %4038 = load i64, i64* %10, align 8
  store i64 %4038, i64* %11, align 8
  %4039 = load i64, i64* %9, align 8
  store i64 %4039, i64* %10, align 8
  %4040 = load i64, i64* %8, align 8
  %4041 = load i64, i64* %13, align 8
  %4042 = add i64 %4040, %4041
  store i64 %4042, i64* %9, align 8
  %4043 = load i64, i64* %7, align 8
  store i64 %4043, i64* %8, align 8
  %4044 = load i64, i64* %6, align 8
  store i64 %4044, i64* %7, align 8
  %4045 = load i64, i64* %5, align 8
  store i64 %4045, i64* %6, align 8
  %4046 = load i64, i64* %13, align 8
  %4047 = load i64, i64* %14, align 8
  %4048 = add i64 %4046, %4047
  store i64 %4048, i64* %5, align 8
  %4049 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4050 = load i64, i64* %4049, align 16
  %4051 = lshr i64 %4050, 19
  %4052 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4053 = load i64, i64* %4052, align 16
  %4054 = shl i64 %4053, 45
  %4055 = or i64 %4051, %4054
  %4056 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4057 = load i64, i64* %4056, align 16
  %4058 = lshr i64 %4057, 61
  %4059 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4060 = load i64, i64* %4059, align 16
  %4061 = shl i64 %4060, 3
  %4062 = or i64 %4058, %4061
  %4063 = xor i64 %4055, %4062
  %4064 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4065 = load i64, i64* %4064, align 16
  %4066 = lshr i64 %4065, 6
  %4067 = xor i64 %4063, %4066
  %4068 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %4069 = load i64, i64* %4068, align 8
  %4070 = add i64 %4067, %4069
  %4071 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4072 = load i64, i64* %4071, align 8
  %4073 = lshr i64 %4072, 1
  %4074 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4075 = load i64, i64* %4074, align 8
  %4076 = shl i64 %4075, 63
  %4077 = or i64 %4073, %4076
  %4078 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4079 = load i64, i64* %4078, align 8
  %4080 = lshr i64 %4079, 8
  %4081 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4082 = load i64, i64* %4081, align 8
  %4083 = shl i64 %4082, 56
  %4084 = or i64 %4080, %4083
  %4085 = xor i64 %4077, %4084
  %4086 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4087 = load i64, i64* %4086, align 8
  %4088 = lshr i64 %4087, 7
  %4089 = xor i64 %4085, %4088
  %4090 = add i64 %4070, %4089
  %4091 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 16
  %4092 = load i64, i64* %4091, align 16
  %4093 = add i64 %4090, %4092
  %4094 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  store i64 %4093, i64* %4094, align 16
  %4095 = load i64, i64* %12, align 8
  %4096 = load i64, i64* %9, align 8
  %4097 = lshr i64 %4096, 14
  %4098 = load i64, i64* %9, align 8
  %4099 = shl i64 %4098, 50
  %4100 = or i64 %4097, %4099
  %4101 = load i64, i64* %9, align 8
  %4102 = lshr i64 %4101, 18
  %4103 = load i64, i64* %9, align 8
  %4104 = shl i64 %4103, 46
  %4105 = or i64 %4102, %4104
  %4106 = xor i64 %4100, %4105
  %4107 = load i64, i64* %9, align 8
  %4108 = lshr i64 %4107, 41
  %4109 = load i64, i64* %9, align 8
  %4110 = shl i64 %4109, 23
  %4111 = or i64 %4108, %4110
  %4112 = xor i64 %4106, %4111
  %4113 = add i64 %4095, %4112
  %4114 = load i64, i64* %9, align 8
  %4115 = load i64, i64* %10, align 8
  %4116 = and i64 %4114, %4115
  %4117 = load i64, i64* %9, align 8
  %4118 = xor i64 %4117, -1
  %4119 = load i64, i64* %11, align 8
  %4120 = and i64 %4118, %4119
  %4121 = xor i64 %4116, %4120
  %4122 = add i64 %4113, %4121
  %4123 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 32), align 16
  %4124 = add i64 %4122, %4123
  %4125 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4126 = load i64, i64* %4125, align 16
  %4127 = add i64 %4124, %4126
  store i64 %4127, i64* %13, align 8
  %4128 = load i64, i64* %5, align 8
  %4129 = lshr i64 %4128, 28
  %4130 = load i64, i64* %5, align 8
  %4131 = shl i64 %4130, 36
  %4132 = or i64 %4129, %4131
  %4133 = load i64, i64* %5, align 8
  %4134 = lshr i64 %4133, 34
  %4135 = load i64, i64* %5, align 8
  %4136 = shl i64 %4135, 30
  %4137 = or i64 %4134, %4136
  %4138 = xor i64 %4132, %4137
  %4139 = load i64, i64* %5, align 8
  %4140 = lshr i64 %4139, 39
  %4141 = load i64, i64* %5, align 8
  %4142 = shl i64 %4141, 25
  %4143 = or i64 %4140, %4142
  %4144 = xor i64 %4138, %4143
  %4145 = load i64, i64* %5, align 8
  %4146 = load i64, i64* %6, align 8
  %4147 = and i64 %4145, %4146
  %4148 = load i64, i64* %5, align 8
  %4149 = load i64, i64* %7, align 8
  %4150 = and i64 %4148, %4149
  %4151 = xor i64 %4147, %4150
  %4152 = load i64, i64* %6, align 8
  %4153 = load i64, i64* %7, align 8
  %4154 = and i64 %4152, %4153
  %4155 = xor i64 %4151, %4154
  %4156 = add i64 %4144, %4155
  store i64 %4156, i64* %14, align 8
  %4157 = load i64, i64* %11, align 8
  store i64 %4157, i64* %12, align 8
  %4158 = load i64, i64* %10, align 8
  store i64 %4158, i64* %11, align 8
  %4159 = load i64, i64* %9, align 8
  store i64 %4159, i64* %10, align 8
  %4160 = load i64, i64* %8, align 8
  %4161 = load i64, i64* %13, align 8
  %4162 = add i64 %4160, %4161
  store i64 %4162, i64* %9, align 8
  %4163 = load i64, i64* %7, align 8
  store i64 %4163, i64* %8, align 8
  %4164 = load i64, i64* %6, align 8
  store i64 %4164, i64* %7, align 8
  %4165 = load i64, i64* %5, align 8
  store i64 %4165, i64* %6, align 8
  %4166 = load i64, i64* %13, align 8
  %4167 = load i64, i64* %14, align 8
  %4168 = add i64 %4166, %4167
  store i64 %4168, i64* %5, align 8
  %4169 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4170 = load i64, i64* %4169, align 8
  %4171 = lshr i64 %4170, 19
  %4172 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4173 = load i64, i64* %4172, align 8
  %4174 = shl i64 %4173, 45
  %4175 = or i64 %4171, %4174
  %4176 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4177 = load i64, i64* %4176, align 8
  %4178 = lshr i64 %4177, 61
  %4179 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4180 = load i64, i64* %4179, align 8
  %4181 = shl i64 %4180, 3
  %4182 = or i64 %4178, %4181
  %4183 = xor i64 %4175, %4182
  %4184 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4185 = load i64, i64* %4184, align 8
  %4186 = lshr i64 %4185, 6
  %4187 = xor i64 %4183, %4186
  %4188 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %4189 = load i64, i64* %4188, align 16
  %4190 = add i64 %4187, %4189
  %4191 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4192 = load i64, i64* %4191, align 16
  %4193 = lshr i64 %4192, 1
  %4194 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4195 = load i64, i64* %4194, align 16
  %4196 = shl i64 %4195, 63
  %4197 = or i64 %4193, %4196
  %4198 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4199 = load i64, i64* %4198, align 16
  %4200 = lshr i64 %4199, 8
  %4201 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4202 = load i64, i64* %4201, align 16
  %4203 = shl i64 %4202, 56
  %4204 = or i64 %4200, %4203
  %4205 = xor i64 %4197, %4204
  %4206 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4207 = load i64, i64* %4206, align 16
  %4208 = lshr i64 %4207, 7
  %4209 = xor i64 %4205, %4208
  %4210 = add i64 %4190, %4209
  %4211 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 17
  %4212 = load i64, i64* %4211, align 8
  %4213 = add i64 %4210, %4212
  %4214 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  store i64 %4213, i64* %4214, align 8
  %4215 = load i64, i64* %12, align 8
  %4216 = load i64, i64* %9, align 8
  %4217 = lshr i64 %4216, 14
  %4218 = load i64, i64* %9, align 8
  %4219 = shl i64 %4218, 50
  %4220 = or i64 %4217, %4219
  %4221 = load i64, i64* %9, align 8
  %4222 = lshr i64 %4221, 18
  %4223 = load i64, i64* %9, align 8
  %4224 = shl i64 %4223, 46
  %4225 = or i64 %4222, %4224
  %4226 = xor i64 %4220, %4225
  %4227 = load i64, i64* %9, align 8
  %4228 = lshr i64 %4227, 41
  %4229 = load i64, i64* %9, align 8
  %4230 = shl i64 %4229, 23
  %4231 = or i64 %4228, %4230
  %4232 = xor i64 %4226, %4231
  %4233 = add i64 %4215, %4232
  %4234 = load i64, i64* %9, align 8
  %4235 = load i64, i64* %10, align 8
  %4236 = and i64 %4234, %4235
  %4237 = load i64, i64* %9, align 8
  %4238 = xor i64 %4237, -1
  %4239 = load i64, i64* %11, align 8
  %4240 = and i64 %4238, %4239
  %4241 = xor i64 %4236, %4240
  %4242 = add i64 %4233, %4241
  %4243 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 33), align 8
  %4244 = add i64 %4242, %4243
  %4245 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4246 = load i64, i64* %4245, align 8
  %4247 = add i64 %4244, %4246
  store i64 %4247, i64* %13, align 8
  %4248 = load i64, i64* %5, align 8
  %4249 = lshr i64 %4248, 28
  %4250 = load i64, i64* %5, align 8
  %4251 = shl i64 %4250, 36
  %4252 = or i64 %4249, %4251
  %4253 = load i64, i64* %5, align 8
  %4254 = lshr i64 %4253, 34
  %4255 = load i64, i64* %5, align 8
  %4256 = shl i64 %4255, 30
  %4257 = or i64 %4254, %4256
  %4258 = xor i64 %4252, %4257
  %4259 = load i64, i64* %5, align 8
  %4260 = lshr i64 %4259, 39
  %4261 = load i64, i64* %5, align 8
  %4262 = shl i64 %4261, 25
  %4263 = or i64 %4260, %4262
  %4264 = xor i64 %4258, %4263
  %4265 = load i64, i64* %5, align 8
  %4266 = load i64, i64* %6, align 8
  %4267 = and i64 %4265, %4266
  %4268 = load i64, i64* %5, align 8
  %4269 = load i64, i64* %7, align 8
  %4270 = and i64 %4268, %4269
  %4271 = xor i64 %4267, %4270
  %4272 = load i64, i64* %6, align 8
  %4273 = load i64, i64* %7, align 8
  %4274 = and i64 %4272, %4273
  %4275 = xor i64 %4271, %4274
  %4276 = add i64 %4264, %4275
  store i64 %4276, i64* %14, align 8
  %4277 = load i64, i64* %11, align 8
  store i64 %4277, i64* %12, align 8
  %4278 = load i64, i64* %10, align 8
  store i64 %4278, i64* %11, align 8
  %4279 = load i64, i64* %9, align 8
  store i64 %4279, i64* %10, align 8
  %4280 = load i64, i64* %8, align 8
  %4281 = load i64, i64* %13, align 8
  %4282 = add i64 %4280, %4281
  store i64 %4282, i64* %9, align 8
  %4283 = load i64, i64* %7, align 8
  store i64 %4283, i64* %8, align 8
  %4284 = load i64, i64* %6, align 8
  store i64 %4284, i64* %7, align 8
  %4285 = load i64, i64* %5, align 8
  store i64 %4285, i64* %6, align 8
  %4286 = load i64, i64* %13, align 8
  %4287 = load i64, i64* %14, align 8
  %4288 = add i64 %4286, %4287
  store i64 %4288, i64* %5, align 8
  %4289 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4290 = load i64, i64* %4289, align 16
  %4291 = lshr i64 %4290, 19
  %4292 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4293 = load i64, i64* %4292, align 16
  %4294 = shl i64 %4293, 45
  %4295 = or i64 %4291, %4294
  %4296 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4297 = load i64, i64* %4296, align 16
  %4298 = lshr i64 %4297, 61
  %4299 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4300 = load i64, i64* %4299, align 16
  %4301 = shl i64 %4300, 3
  %4302 = or i64 %4298, %4301
  %4303 = xor i64 %4295, %4302
  %4304 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4305 = load i64, i64* %4304, align 16
  %4306 = lshr i64 %4305, 6
  %4307 = xor i64 %4303, %4306
  %4308 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %4309 = load i64, i64* %4308, align 8
  %4310 = add i64 %4307, %4309
  %4311 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4312 = load i64, i64* %4311, align 8
  %4313 = lshr i64 %4312, 1
  %4314 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4315 = load i64, i64* %4314, align 8
  %4316 = shl i64 %4315, 63
  %4317 = or i64 %4313, %4316
  %4318 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4319 = load i64, i64* %4318, align 8
  %4320 = lshr i64 %4319, 8
  %4321 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4322 = load i64, i64* %4321, align 8
  %4323 = shl i64 %4322, 56
  %4324 = or i64 %4320, %4323
  %4325 = xor i64 %4317, %4324
  %4326 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4327 = load i64, i64* %4326, align 8
  %4328 = lshr i64 %4327, 7
  %4329 = xor i64 %4325, %4328
  %4330 = add i64 %4310, %4329
  %4331 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 18
  %4332 = load i64, i64* %4331, align 16
  %4333 = add i64 %4330, %4332
  %4334 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  store i64 %4333, i64* %4334, align 16
  %4335 = load i64, i64* %12, align 8
  %4336 = load i64, i64* %9, align 8
  %4337 = lshr i64 %4336, 14
  %4338 = load i64, i64* %9, align 8
  %4339 = shl i64 %4338, 50
  %4340 = or i64 %4337, %4339
  %4341 = load i64, i64* %9, align 8
  %4342 = lshr i64 %4341, 18
  %4343 = load i64, i64* %9, align 8
  %4344 = shl i64 %4343, 46
  %4345 = or i64 %4342, %4344
  %4346 = xor i64 %4340, %4345
  %4347 = load i64, i64* %9, align 8
  %4348 = lshr i64 %4347, 41
  %4349 = load i64, i64* %9, align 8
  %4350 = shl i64 %4349, 23
  %4351 = or i64 %4348, %4350
  %4352 = xor i64 %4346, %4351
  %4353 = add i64 %4335, %4352
  %4354 = load i64, i64* %9, align 8
  %4355 = load i64, i64* %10, align 8
  %4356 = and i64 %4354, %4355
  %4357 = load i64, i64* %9, align 8
  %4358 = xor i64 %4357, -1
  %4359 = load i64, i64* %11, align 8
  %4360 = and i64 %4358, %4359
  %4361 = xor i64 %4356, %4360
  %4362 = add i64 %4353, %4361
  %4363 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 34), align 16
  %4364 = add i64 %4362, %4363
  %4365 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4366 = load i64, i64* %4365, align 16
  %4367 = add i64 %4364, %4366
  store i64 %4367, i64* %13, align 8
  %4368 = load i64, i64* %5, align 8
  %4369 = lshr i64 %4368, 28
  %4370 = load i64, i64* %5, align 8
  %4371 = shl i64 %4370, 36
  %4372 = or i64 %4369, %4371
  %4373 = load i64, i64* %5, align 8
  %4374 = lshr i64 %4373, 34
  %4375 = load i64, i64* %5, align 8
  %4376 = shl i64 %4375, 30
  %4377 = or i64 %4374, %4376
  %4378 = xor i64 %4372, %4377
  %4379 = load i64, i64* %5, align 8
  %4380 = lshr i64 %4379, 39
  %4381 = load i64, i64* %5, align 8
  %4382 = shl i64 %4381, 25
  %4383 = or i64 %4380, %4382
  %4384 = xor i64 %4378, %4383
  %4385 = load i64, i64* %5, align 8
  %4386 = load i64, i64* %6, align 8
  %4387 = and i64 %4385, %4386
  %4388 = load i64, i64* %5, align 8
  %4389 = load i64, i64* %7, align 8
  %4390 = and i64 %4388, %4389
  %4391 = xor i64 %4387, %4390
  %4392 = load i64, i64* %6, align 8
  %4393 = load i64, i64* %7, align 8
  %4394 = and i64 %4392, %4393
  %4395 = xor i64 %4391, %4394
  %4396 = add i64 %4384, %4395
  store i64 %4396, i64* %14, align 8
  %4397 = load i64, i64* %11, align 8
  store i64 %4397, i64* %12, align 8
  %4398 = load i64, i64* %10, align 8
  store i64 %4398, i64* %11, align 8
  %4399 = load i64, i64* %9, align 8
  store i64 %4399, i64* %10, align 8
  %4400 = load i64, i64* %8, align 8
  %4401 = load i64, i64* %13, align 8
  %4402 = add i64 %4400, %4401
  store i64 %4402, i64* %9, align 8
  %4403 = load i64, i64* %7, align 8
  store i64 %4403, i64* %8, align 8
  %4404 = load i64, i64* %6, align 8
  store i64 %4404, i64* %7, align 8
  %4405 = load i64, i64* %5, align 8
  store i64 %4405, i64* %6, align 8
  %4406 = load i64, i64* %13, align 8
  %4407 = load i64, i64* %14, align 8
  %4408 = add i64 %4406, %4407
  store i64 %4408, i64* %5, align 8
  %4409 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4410 = load i64, i64* %4409, align 8
  %4411 = lshr i64 %4410, 19
  %4412 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4413 = load i64, i64* %4412, align 8
  %4414 = shl i64 %4413, 45
  %4415 = or i64 %4411, %4414
  %4416 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4417 = load i64, i64* %4416, align 8
  %4418 = lshr i64 %4417, 61
  %4419 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4420 = load i64, i64* %4419, align 8
  %4421 = shl i64 %4420, 3
  %4422 = or i64 %4418, %4421
  %4423 = xor i64 %4415, %4422
  %4424 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %4425 = load i64, i64* %4424, align 8
  %4426 = lshr i64 %4425, 6
  %4427 = xor i64 %4423, %4426
  %4428 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %4429 = load i64, i64* %4428, align 16
  %4430 = add i64 %4427, %4429
  %4431 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4432 = load i64, i64* %4431, align 16
  %4433 = lshr i64 %4432, 1
  %4434 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4435 = load i64, i64* %4434, align 16
  %4436 = shl i64 %4435, 63
  %4437 = or i64 %4433, %4436
  %4438 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4439 = load i64, i64* %4438, align 16
  %4440 = lshr i64 %4439, 8
  %4441 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4442 = load i64, i64* %4441, align 16
  %4443 = shl i64 %4442, 56
  %4444 = or i64 %4440, %4443
  %4445 = xor i64 %4437, %4444
  %4446 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4447 = load i64, i64* %4446, align 16
  %4448 = lshr i64 %4447, 7
  %4449 = xor i64 %4445, %4448
  %4450 = add i64 %4430, %4449
  %4451 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 19
  %4452 = load i64, i64* %4451, align 8
  %4453 = add i64 %4450, %4452
  %4454 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  store i64 %4453, i64* %4454, align 8
  %4455 = load i64, i64* %12, align 8
  %4456 = load i64, i64* %9, align 8
  %4457 = lshr i64 %4456, 14
  %4458 = load i64, i64* %9, align 8
  %4459 = shl i64 %4458, 50
  %4460 = or i64 %4457, %4459
  %4461 = load i64, i64* %9, align 8
  %4462 = lshr i64 %4461, 18
  %4463 = load i64, i64* %9, align 8
  %4464 = shl i64 %4463, 46
  %4465 = or i64 %4462, %4464
  %4466 = xor i64 %4460, %4465
  %4467 = load i64, i64* %9, align 8
  %4468 = lshr i64 %4467, 41
  %4469 = load i64, i64* %9, align 8
  %4470 = shl i64 %4469, 23
  %4471 = or i64 %4468, %4470
  %4472 = xor i64 %4466, %4471
  %4473 = add i64 %4455, %4472
  %4474 = load i64, i64* %9, align 8
  %4475 = load i64, i64* %10, align 8
  %4476 = and i64 %4474, %4475
  %4477 = load i64, i64* %9, align 8
  %4478 = xor i64 %4477, -1
  %4479 = load i64, i64* %11, align 8
  %4480 = and i64 %4478, %4479
  %4481 = xor i64 %4476, %4480
  %4482 = add i64 %4473, %4481
  %4483 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 35), align 8
  %4484 = add i64 %4482, %4483
  %4485 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4486 = load i64, i64* %4485, align 8
  %4487 = add i64 %4484, %4486
  store i64 %4487, i64* %13, align 8
  %4488 = load i64, i64* %5, align 8
  %4489 = lshr i64 %4488, 28
  %4490 = load i64, i64* %5, align 8
  %4491 = shl i64 %4490, 36
  %4492 = or i64 %4489, %4491
  %4493 = load i64, i64* %5, align 8
  %4494 = lshr i64 %4493, 34
  %4495 = load i64, i64* %5, align 8
  %4496 = shl i64 %4495, 30
  %4497 = or i64 %4494, %4496
  %4498 = xor i64 %4492, %4497
  %4499 = load i64, i64* %5, align 8
  %4500 = lshr i64 %4499, 39
  %4501 = load i64, i64* %5, align 8
  %4502 = shl i64 %4501, 25
  %4503 = or i64 %4500, %4502
  %4504 = xor i64 %4498, %4503
  %4505 = load i64, i64* %5, align 8
  %4506 = load i64, i64* %6, align 8
  %4507 = and i64 %4505, %4506
  %4508 = load i64, i64* %5, align 8
  %4509 = load i64, i64* %7, align 8
  %4510 = and i64 %4508, %4509
  %4511 = xor i64 %4507, %4510
  %4512 = load i64, i64* %6, align 8
  %4513 = load i64, i64* %7, align 8
  %4514 = and i64 %4512, %4513
  %4515 = xor i64 %4511, %4514
  %4516 = add i64 %4504, %4515
  store i64 %4516, i64* %14, align 8
  %4517 = load i64, i64* %11, align 8
  store i64 %4517, i64* %12, align 8
  %4518 = load i64, i64* %10, align 8
  store i64 %4518, i64* %11, align 8
  %4519 = load i64, i64* %9, align 8
  store i64 %4519, i64* %10, align 8
  %4520 = load i64, i64* %8, align 8
  %4521 = load i64, i64* %13, align 8
  %4522 = add i64 %4520, %4521
  store i64 %4522, i64* %9, align 8
  %4523 = load i64, i64* %7, align 8
  store i64 %4523, i64* %8, align 8
  %4524 = load i64, i64* %6, align 8
  store i64 %4524, i64* %7, align 8
  %4525 = load i64, i64* %5, align 8
  store i64 %4525, i64* %6, align 8
  %4526 = load i64, i64* %13, align 8
  %4527 = load i64, i64* %14, align 8
  %4528 = add i64 %4526, %4527
  store i64 %4528, i64* %5, align 8
  %4529 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4530 = load i64, i64* %4529, align 16
  %4531 = lshr i64 %4530, 19
  %4532 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4533 = load i64, i64* %4532, align 16
  %4534 = shl i64 %4533, 45
  %4535 = or i64 %4531, %4534
  %4536 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4537 = load i64, i64* %4536, align 16
  %4538 = lshr i64 %4537, 61
  %4539 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4540 = load i64, i64* %4539, align 16
  %4541 = shl i64 %4540, 3
  %4542 = or i64 %4538, %4541
  %4543 = xor i64 %4535, %4542
  %4544 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %4545 = load i64, i64* %4544, align 16
  %4546 = lshr i64 %4545, 6
  %4547 = xor i64 %4543, %4546
  %4548 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %4549 = load i64, i64* %4548, align 8
  %4550 = add i64 %4547, %4549
  %4551 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4552 = load i64, i64* %4551, align 8
  %4553 = lshr i64 %4552, 1
  %4554 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4555 = load i64, i64* %4554, align 8
  %4556 = shl i64 %4555, 63
  %4557 = or i64 %4553, %4556
  %4558 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4559 = load i64, i64* %4558, align 8
  %4560 = lshr i64 %4559, 8
  %4561 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4562 = load i64, i64* %4561, align 8
  %4563 = shl i64 %4562, 56
  %4564 = or i64 %4560, %4563
  %4565 = xor i64 %4557, %4564
  %4566 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4567 = load i64, i64* %4566, align 8
  %4568 = lshr i64 %4567, 7
  %4569 = xor i64 %4565, %4568
  %4570 = add i64 %4550, %4569
  %4571 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 20
  %4572 = load i64, i64* %4571, align 16
  %4573 = add i64 %4570, %4572
  %4574 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  store i64 %4573, i64* %4574, align 16
  %4575 = load i64, i64* %12, align 8
  %4576 = load i64, i64* %9, align 8
  %4577 = lshr i64 %4576, 14
  %4578 = load i64, i64* %9, align 8
  %4579 = shl i64 %4578, 50
  %4580 = or i64 %4577, %4579
  %4581 = load i64, i64* %9, align 8
  %4582 = lshr i64 %4581, 18
  %4583 = load i64, i64* %9, align 8
  %4584 = shl i64 %4583, 46
  %4585 = or i64 %4582, %4584
  %4586 = xor i64 %4580, %4585
  %4587 = load i64, i64* %9, align 8
  %4588 = lshr i64 %4587, 41
  %4589 = load i64, i64* %9, align 8
  %4590 = shl i64 %4589, 23
  %4591 = or i64 %4588, %4590
  %4592 = xor i64 %4586, %4591
  %4593 = add i64 %4575, %4592
  %4594 = load i64, i64* %9, align 8
  %4595 = load i64, i64* %10, align 8
  %4596 = and i64 %4594, %4595
  %4597 = load i64, i64* %9, align 8
  %4598 = xor i64 %4597, -1
  %4599 = load i64, i64* %11, align 8
  %4600 = and i64 %4598, %4599
  %4601 = xor i64 %4596, %4600
  %4602 = add i64 %4593, %4601
  %4603 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 36), align 16
  %4604 = add i64 %4602, %4603
  %4605 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4606 = load i64, i64* %4605, align 16
  %4607 = add i64 %4604, %4606
  store i64 %4607, i64* %13, align 8
  %4608 = load i64, i64* %5, align 8
  %4609 = lshr i64 %4608, 28
  %4610 = load i64, i64* %5, align 8
  %4611 = shl i64 %4610, 36
  %4612 = or i64 %4609, %4611
  %4613 = load i64, i64* %5, align 8
  %4614 = lshr i64 %4613, 34
  %4615 = load i64, i64* %5, align 8
  %4616 = shl i64 %4615, 30
  %4617 = or i64 %4614, %4616
  %4618 = xor i64 %4612, %4617
  %4619 = load i64, i64* %5, align 8
  %4620 = lshr i64 %4619, 39
  %4621 = load i64, i64* %5, align 8
  %4622 = shl i64 %4621, 25
  %4623 = or i64 %4620, %4622
  %4624 = xor i64 %4618, %4623
  %4625 = load i64, i64* %5, align 8
  %4626 = load i64, i64* %6, align 8
  %4627 = and i64 %4625, %4626
  %4628 = load i64, i64* %5, align 8
  %4629 = load i64, i64* %7, align 8
  %4630 = and i64 %4628, %4629
  %4631 = xor i64 %4627, %4630
  %4632 = load i64, i64* %6, align 8
  %4633 = load i64, i64* %7, align 8
  %4634 = and i64 %4632, %4633
  %4635 = xor i64 %4631, %4634
  %4636 = add i64 %4624, %4635
  store i64 %4636, i64* %14, align 8
  %4637 = load i64, i64* %11, align 8
  store i64 %4637, i64* %12, align 8
  %4638 = load i64, i64* %10, align 8
  store i64 %4638, i64* %11, align 8
  %4639 = load i64, i64* %9, align 8
  store i64 %4639, i64* %10, align 8
  %4640 = load i64, i64* %8, align 8
  %4641 = load i64, i64* %13, align 8
  %4642 = add i64 %4640, %4641
  store i64 %4642, i64* %9, align 8
  %4643 = load i64, i64* %7, align 8
  store i64 %4643, i64* %8, align 8
  %4644 = load i64, i64* %6, align 8
  store i64 %4644, i64* %7, align 8
  %4645 = load i64, i64* %5, align 8
  store i64 %4645, i64* %6, align 8
  %4646 = load i64, i64* %13, align 8
  %4647 = load i64, i64* %14, align 8
  %4648 = add i64 %4646, %4647
  store i64 %4648, i64* %5, align 8
  %4649 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4650 = load i64, i64* %4649, align 8
  %4651 = lshr i64 %4650, 19
  %4652 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4653 = load i64, i64* %4652, align 8
  %4654 = shl i64 %4653, 45
  %4655 = or i64 %4651, %4654
  %4656 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4657 = load i64, i64* %4656, align 8
  %4658 = lshr i64 %4657, 61
  %4659 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4660 = load i64, i64* %4659, align 8
  %4661 = shl i64 %4660, 3
  %4662 = or i64 %4658, %4661
  %4663 = xor i64 %4655, %4662
  %4664 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %4665 = load i64, i64* %4664, align 8
  %4666 = lshr i64 %4665, 6
  %4667 = xor i64 %4663, %4666
  %4668 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %4669 = load i64, i64* %4668, align 16
  %4670 = add i64 %4667, %4669
  %4671 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4672 = load i64, i64* %4671, align 16
  %4673 = lshr i64 %4672, 1
  %4674 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4675 = load i64, i64* %4674, align 16
  %4676 = shl i64 %4675, 63
  %4677 = or i64 %4673, %4676
  %4678 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4679 = load i64, i64* %4678, align 16
  %4680 = lshr i64 %4679, 8
  %4681 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4682 = load i64, i64* %4681, align 16
  %4683 = shl i64 %4682, 56
  %4684 = or i64 %4680, %4683
  %4685 = xor i64 %4677, %4684
  %4686 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4687 = load i64, i64* %4686, align 16
  %4688 = lshr i64 %4687, 7
  %4689 = xor i64 %4685, %4688
  %4690 = add i64 %4670, %4689
  %4691 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 21
  %4692 = load i64, i64* %4691, align 8
  %4693 = add i64 %4690, %4692
  %4694 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  store i64 %4693, i64* %4694, align 8
  %4695 = load i64, i64* %12, align 8
  %4696 = load i64, i64* %9, align 8
  %4697 = lshr i64 %4696, 14
  %4698 = load i64, i64* %9, align 8
  %4699 = shl i64 %4698, 50
  %4700 = or i64 %4697, %4699
  %4701 = load i64, i64* %9, align 8
  %4702 = lshr i64 %4701, 18
  %4703 = load i64, i64* %9, align 8
  %4704 = shl i64 %4703, 46
  %4705 = or i64 %4702, %4704
  %4706 = xor i64 %4700, %4705
  %4707 = load i64, i64* %9, align 8
  %4708 = lshr i64 %4707, 41
  %4709 = load i64, i64* %9, align 8
  %4710 = shl i64 %4709, 23
  %4711 = or i64 %4708, %4710
  %4712 = xor i64 %4706, %4711
  %4713 = add i64 %4695, %4712
  %4714 = load i64, i64* %9, align 8
  %4715 = load i64, i64* %10, align 8
  %4716 = and i64 %4714, %4715
  %4717 = load i64, i64* %9, align 8
  %4718 = xor i64 %4717, -1
  %4719 = load i64, i64* %11, align 8
  %4720 = and i64 %4718, %4719
  %4721 = xor i64 %4716, %4720
  %4722 = add i64 %4713, %4721
  %4723 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 37), align 8
  %4724 = add i64 %4722, %4723
  %4725 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4726 = load i64, i64* %4725, align 8
  %4727 = add i64 %4724, %4726
  store i64 %4727, i64* %13, align 8
  %4728 = load i64, i64* %5, align 8
  %4729 = lshr i64 %4728, 28
  %4730 = load i64, i64* %5, align 8
  %4731 = shl i64 %4730, 36
  %4732 = or i64 %4729, %4731
  %4733 = load i64, i64* %5, align 8
  %4734 = lshr i64 %4733, 34
  %4735 = load i64, i64* %5, align 8
  %4736 = shl i64 %4735, 30
  %4737 = or i64 %4734, %4736
  %4738 = xor i64 %4732, %4737
  %4739 = load i64, i64* %5, align 8
  %4740 = lshr i64 %4739, 39
  %4741 = load i64, i64* %5, align 8
  %4742 = shl i64 %4741, 25
  %4743 = or i64 %4740, %4742
  %4744 = xor i64 %4738, %4743
  %4745 = load i64, i64* %5, align 8
  %4746 = load i64, i64* %6, align 8
  %4747 = and i64 %4745, %4746
  %4748 = load i64, i64* %5, align 8
  %4749 = load i64, i64* %7, align 8
  %4750 = and i64 %4748, %4749
  %4751 = xor i64 %4747, %4750
  %4752 = load i64, i64* %6, align 8
  %4753 = load i64, i64* %7, align 8
  %4754 = and i64 %4752, %4753
  %4755 = xor i64 %4751, %4754
  %4756 = add i64 %4744, %4755
  store i64 %4756, i64* %14, align 8
  %4757 = load i64, i64* %11, align 8
  store i64 %4757, i64* %12, align 8
  %4758 = load i64, i64* %10, align 8
  store i64 %4758, i64* %11, align 8
  %4759 = load i64, i64* %9, align 8
  store i64 %4759, i64* %10, align 8
  %4760 = load i64, i64* %8, align 8
  %4761 = load i64, i64* %13, align 8
  %4762 = add i64 %4760, %4761
  store i64 %4762, i64* %9, align 8
  %4763 = load i64, i64* %7, align 8
  store i64 %4763, i64* %8, align 8
  %4764 = load i64, i64* %6, align 8
  store i64 %4764, i64* %7, align 8
  %4765 = load i64, i64* %5, align 8
  store i64 %4765, i64* %6, align 8
  %4766 = load i64, i64* %13, align 8
  %4767 = load i64, i64* %14, align 8
  %4768 = add i64 %4766, %4767
  store i64 %4768, i64* %5, align 8
  %4769 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4770 = load i64, i64* %4769, align 16
  %4771 = lshr i64 %4770, 19
  %4772 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4773 = load i64, i64* %4772, align 16
  %4774 = shl i64 %4773, 45
  %4775 = or i64 %4771, %4774
  %4776 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4777 = load i64, i64* %4776, align 16
  %4778 = lshr i64 %4777, 61
  %4779 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4780 = load i64, i64* %4779, align 16
  %4781 = shl i64 %4780, 3
  %4782 = or i64 %4778, %4781
  %4783 = xor i64 %4775, %4782
  %4784 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %4785 = load i64, i64* %4784, align 16
  %4786 = lshr i64 %4785, 6
  %4787 = xor i64 %4783, %4786
  %4788 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %4789 = load i64, i64* %4788, align 8
  %4790 = add i64 %4787, %4789
  %4791 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4792 = load i64, i64* %4791, align 8
  %4793 = lshr i64 %4792, 1
  %4794 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4795 = load i64, i64* %4794, align 8
  %4796 = shl i64 %4795, 63
  %4797 = or i64 %4793, %4796
  %4798 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4799 = load i64, i64* %4798, align 8
  %4800 = lshr i64 %4799, 8
  %4801 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4802 = load i64, i64* %4801, align 8
  %4803 = shl i64 %4802, 56
  %4804 = or i64 %4800, %4803
  %4805 = xor i64 %4797, %4804
  %4806 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4807 = load i64, i64* %4806, align 8
  %4808 = lshr i64 %4807, 7
  %4809 = xor i64 %4805, %4808
  %4810 = add i64 %4790, %4809
  %4811 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 22
  %4812 = load i64, i64* %4811, align 16
  %4813 = add i64 %4810, %4812
  %4814 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  store i64 %4813, i64* %4814, align 16
  %4815 = load i64, i64* %12, align 8
  %4816 = load i64, i64* %9, align 8
  %4817 = lshr i64 %4816, 14
  %4818 = load i64, i64* %9, align 8
  %4819 = shl i64 %4818, 50
  %4820 = or i64 %4817, %4819
  %4821 = load i64, i64* %9, align 8
  %4822 = lshr i64 %4821, 18
  %4823 = load i64, i64* %9, align 8
  %4824 = shl i64 %4823, 46
  %4825 = or i64 %4822, %4824
  %4826 = xor i64 %4820, %4825
  %4827 = load i64, i64* %9, align 8
  %4828 = lshr i64 %4827, 41
  %4829 = load i64, i64* %9, align 8
  %4830 = shl i64 %4829, 23
  %4831 = or i64 %4828, %4830
  %4832 = xor i64 %4826, %4831
  %4833 = add i64 %4815, %4832
  %4834 = load i64, i64* %9, align 8
  %4835 = load i64, i64* %10, align 8
  %4836 = and i64 %4834, %4835
  %4837 = load i64, i64* %9, align 8
  %4838 = xor i64 %4837, -1
  %4839 = load i64, i64* %11, align 8
  %4840 = and i64 %4838, %4839
  %4841 = xor i64 %4836, %4840
  %4842 = add i64 %4833, %4841
  %4843 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 38), align 16
  %4844 = add i64 %4842, %4843
  %4845 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %4846 = load i64, i64* %4845, align 16
  %4847 = add i64 %4844, %4846
  store i64 %4847, i64* %13, align 8
  %4848 = load i64, i64* %5, align 8
  %4849 = lshr i64 %4848, 28
  %4850 = load i64, i64* %5, align 8
  %4851 = shl i64 %4850, 36
  %4852 = or i64 %4849, %4851
  %4853 = load i64, i64* %5, align 8
  %4854 = lshr i64 %4853, 34
  %4855 = load i64, i64* %5, align 8
  %4856 = shl i64 %4855, 30
  %4857 = or i64 %4854, %4856
  %4858 = xor i64 %4852, %4857
  %4859 = load i64, i64* %5, align 8
  %4860 = lshr i64 %4859, 39
  %4861 = load i64, i64* %5, align 8
  %4862 = shl i64 %4861, 25
  %4863 = or i64 %4860, %4862
  %4864 = xor i64 %4858, %4863
  %4865 = load i64, i64* %5, align 8
  %4866 = load i64, i64* %6, align 8
  %4867 = and i64 %4865, %4866
  %4868 = load i64, i64* %5, align 8
  %4869 = load i64, i64* %7, align 8
  %4870 = and i64 %4868, %4869
  %4871 = xor i64 %4867, %4870
  %4872 = load i64, i64* %6, align 8
  %4873 = load i64, i64* %7, align 8
  %4874 = and i64 %4872, %4873
  %4875 = xor i64 %4871, %4874
  %4876 = add i64 %4864, %4875
  store i64 %4876, i64* %14, align 8
  %4877 = load i64, i64* %11, align 8
  store i64 %4877, i64* %12, align 8
  %4878 = load i64, i64* %10, align 8
  store i64 %4878, i64* %11, align 8
  %4879 = load i64, i64* %9, align 8
  store i64 %4879, i64* %10, align 8
  %4880 = load i64, i64* %8, align 8
  %4881 = load i64, i64* %13, align 8
  %4882 = add i64 %4880, %4881
  store i64 %4882, i64* %9, align 8
  %4883 = load i64, i64* %7, align 8
  store i64 %4883, i64* %8, align 8
  %4884 = load i64, i64* %6, align 8
  store i64 %4884, i64* %7, align 8
  %4885 = load i64, i64* %5, align 8
  store i64 %4885, i64* %6, align 8
  %4886 = load i64, i64* %13, align 8
  %4887 = load i64, i64* %14, align 8
  %4888 = add i64 %4886, %4887
  store i64 %4888, i64* %5, align 8
  %4889 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4890 = load i64, i64* %4889, align 8
  %4891 = lshr i64 %4890, 19
  %4892 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4893 = load i64, i64* %4892, align 8
  %4894 = shl i64 %4893, 45
  %4895 = or i64 %4891, %4894
  %4896 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4897 = load i64, i64* %4896, align 8
  %4898 = lshr i64 %4897, 61
  %4899 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4900 = load i64, i64* %4899, align 8
  %4901 = shl i64 %4900, 3
  %4902 = or i64 %4898, %4901
  %4903 = xor i64 %4895, %4902
  %4904 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %4905 = load i64, i64* %4904, align 8
  %4906 = lshr i64 %4905, 6
  %4907 = xor i64 %4903, %4906
  %4908 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %4909 = load i64, i64* %4908, align 16
  %4910 = add i64 %4907, %4909
  %4911 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %4912 = load i64, i64* %4911, align 16
  %4913 = lshr i64 %4912, 1
  %4914 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %4915 = load i64, i64* %4914, align 16
  %4916 = shl i64 %4915, 63
  %4917 = or i64 %4913, %4916
  %4918 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %4919 = load i64, i64* %4918, align 16
  %4920 = lshr i64 %4919, 8
  %4921 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %4922 = load i64, i64* %4921, align 16
  %4923 = shl i64 %4922, 56
  %4924 = or i64 %4920, %4923
  %4925 = xor i64 %4917, %4924
  %4926 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %4927 = load i64, i64* %4926, align 16
  %4928 = lshr i64 %4927, 7
  %4929 = xor i64 %4925, %4928
  %4930 = add i64 %4910, %4929
  %4931 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 23
  %4932 = load i64, i64* %4931, align 8
  %4933 = add i64 %4930, %4932
  %4934 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  store i64 %4933, i64* %4934, align 8
  %4935 = load i64, i64* %12, align 8
  %4936 = load i64, i64* %9, align 8
  %4937 = lshr i64 %4936, 14
  %4938 = load i64, i64* %9, align 8
  %4939 = shl i64 %4938, 50
  %4940 = or i64 %4937, %4939
  %4941 = load i64, i64* %9, align 8
  %4942 = lshr i64 %4941, 18
  %4943 = load i64, i64* %9, align 8
  %4944 = shl i64 %4943, 46
  %4945 = or i64 %4942, %4944
  %4946 = xor i64 %4940, %4945
  %4947 = load i64, i64* %9, align 8
  %4948 = lshr i64 %4947, 41
  %4949 = load i64, i64* %9, align 8
  %4950 = shl i64 %4949, 23
  %4951 = or i64 %4948, %4950
  %4952 = xor i64 %4946, %4951
  %4953 = add i64 %4935, %4952
  %4954 = load i64, i64* %9, align 8
  %4955 = load i64, i64* %10, align 8
  %4956 = and i64 %4954, %4955
  %4957 = load i64, i64* %9, align 8
  %4958 = xor i64 %4957, -1
  %4959 = load i64, i64* %11, align 8
  %4960 = and i64 %4958, %4959
  %4961 = xor i64 %4956, %4960
  %4962 = add i64 %4953, %4961
  %4963 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 39), align 8
  %4964 = add i64 %4962, %4963
  %4965 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %4966 = load i64, i64* %4965, align 8
  %4967 = add i64 %4964, %4966
  store i64 %4967, i64* %13, align 8
  %4968 = load i64, i64* %5, align 8
  %4969 = lshr i64 %4968, 28
  %4970 = load i64, i64* %5, align 8
  %4971 = shl i64 %4970, 36
  %4972 = or i64 %4969, %4971
  %4973 = load i64, i64* %5, align 8
  %4974 = lshr i64 %4973, 34
  %4975 = load i64, i64* %5, align 8
  %4976 = shl i64 %4975, 30
  %4977 = or i64 %4974, %4976
  %4978 = xor i64 %4972, %4977
  %4979 = load i64, i64* %5, align 8
  %4980 = lshr i64 %4979, 39
  %4981 = load i64, i64* %5, align 8
  %4982 = shl i64 %4981, 25
  %4983 = or i64 %4980, %4982
  %4984 = xor i64 %4978, %4983
  %4985 = load i64, i64* %5, align 8
  %4986 = load i64, i64* %6, align 8
  %4987 = and i64 %4985, %4986
  %4988 = load i64, i64* %5, align 8
  %4989 = load i64, i64* %7, align 8
  %4990 = and i64 %4988, %4989
  %4991 = xor i64 %4987, %4990
  %4992 = load i64, i64* %6, align 8
  %4993 = load i64, i64* %7, align 8
  %4994 = and i64 %4992, %4993
  %4995 = xor i64 %4991, %4994
  %4996 = add i64 %4984, %4995
  store i64 %4996, i64* %14, align 8
  %4997 = load i64, i64* %11, align 8
  store i64 %4997, i64* %12, align 8
  %4998 = load i64, i64* %10, align 8
  store i64 %4998, i64* %11, align 8
  %4999 = load i64, i64* %9, align 8
  store i64 %4999, i64* %10, align 8
  %5000 = load i64, i64* %8, align 8
  %5001 = load i64, i64* %13, align 8
  %5002 = add i64 %5000, %5001
  store i64 %5002, i64* %9, align 8
  %5003 = load i64, i64* %7, align 8
  store i64 %5003, i64* %8, align 8
  %5004 = load i64, i64* %6, align 8
  store i64 %5004, i64* %7, align 8
  %5005 = load i64, i64* %5, align 8
  store i64 %5005, i64* %6, align 8
  %5006 = load i64, i64* %13, align 8
  %5007 = load i64, i64* %14, align 8
  %5008 = add i64 %5006, %5007
  store i64 %5008, i64* %5, align 8
  %5009 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5010 = load i64, i64* %5009, align 16
  %5011 = lshr i64 %5010, 19
  %5012 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5013 = load i64, i64* %5012, align 16
  %5014 = shl i64 %5013, 45
  %5015 = or i64 %5011, %5014
  %5016 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5017 = load i64, i64* %5016, align 16
  %5018 = lshr i64 %5017, 61
  %5019 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5020 = load i64, i64* %5019, align 16
  %5021 = shl i64 %5020, 3
  %5022 = or i64 %5018, %5021
  %5023 = xor i64 %5015, %5022
  %5024 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5025 = load i64, i64* %5024, align 16
  %5026 = lshr i64 %5025, 6
  %5027 = xor i64 %5023, %5026
  %5028 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %5029 = load i64, i64* %5028, align 8
  %5030 = add i64 %5027, %5029
  %5031 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5032 = load i64, i64* %5031, align 8
  %5033 = lshr i64 %5032, 1
  %5034 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5035 = load i64, i64* %5034, align 8
  %5036 = shl i64 %5035, 63
  %5037 = or i64 %5033, %5036
  %5038 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5039 = load i64, i64* %5038, align 8
  %5040 = lshr i64 %5039, 8
  %5041 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5042 = load i64, i64* %5041, align 8
  %5043 = shl i64 %5042, 56
  %5044 = or i64 %5040, %5043
  %5045 = xor i64 %5037, %5044
  %5046 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5047 = load i64, i64* %5046, align 8
  %5048 = lshr i64 %5047, 7
  %5049 = xor i64 %5045, %5048
  %5050 = add i64 %5030, %5049
  %5051 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 24
  %5052 = load i64, i64* %5051, align 16
  %5053 = add i64 %5050, %5052
  %5054 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  store i64 %5053, i64* %5054, align 16
  %5055 = load i64, i64* %12, align 8
  %5056 = load i64, i64* %9, align 8
  %5057 = lshr i64 %5056, 14
  %5058 = load i64, i64* %9, align 8
  %5059 = shl i64 %5058, 50
  %5060 = or i64 %5057, %5059
  %5061 = load i64, i64* %9, align 8
  %5062 = lshr i64 %5061, 18
  %5063 = load i64, i64* %9, align 8
  %5064 = shl i64 %5063, 46
  %5065 = or i64 %5062, %5064
  %5066 = xor i64 %5060, %5065
  %5067 = load i64, i64* %9, align 8
  %5068 = lshr i64 %5067, 41
  %5069 = load i64, i64* %9, align 8
  %5070 = shl i64 %5069, 23
  %5071 = or i64 %5068, %5070
  %5072 = xor i64 %5066, %5071
  %5073 = add i64 %5055, %5072
  %5074 = load i64, i64* %9, align 8
  %5075 = load i64, i64* %10, align 8
  %5076 = and i64 %5074, %5075
  %5077 = load i64, i64* %9, align 8
  %5078 = xor i64 %5077, -1
  %5079 = load i64, i64* %11, align 8
  %5080 = and i64 %5078, %5079
  %5081 = xor i64 %5076, %5080
  %5082 = add i64 %5073, %5081
  %5083 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 40), align 16
  %5084 = add i64 %5082, %5083
  %5085 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5086 = load i64, i64* %5085, align 16
  %5087 = add i64 %5084, %5086
  store i64 %5087, i64* %13, align 8
  %5088 = load i64, i64* %5, align 8
  %5089 = lshr i64 %5088, 28
  %5090 = load i64, i64* %5, align 8
  %5091 = shl i64 %5090, 36
  %5092 = or i64 %5089, %5091
  %5093 = load i64, i64* %5, align 8
  %5094 = lshr i64 %5093, 34
  %5095 = load i64, i64* %5, align 8
  %5096 = shl i64 %5095, 30
  %5097 = or i64 %5094, %5096
  %5098 = xor i64 %5092, %5097
  %5099 = load i64, i64* %5, align 8
  %5100 = lshr i64 %5099, 39
  %5101 = load i64, i64* %5, align 8
  %5102 = shl i64 %5101, 25
  %5103 = or i64 %5100, %5102
  %5104 = xor i64 %5098, %5103
  %5105 = load i64, i64* %5, align 8
  %5106 = load i64, i64* %6, align 8
  %5107 = and i64 %5105, %5106
  %5108 = load i64, i64* %5, align 8
  %5109 = load i64, i64* %7, align 8
  %5110 = and i64 %5108, %5109
  %5111 = xor i64 %5107, %5110
  %5112 = load i64, i64* %6, align 8
  %5113 = load i64, i64* %7, align 8
  %5114 = and i64 %5112, %5113
  %5115 = xor i64 %5111, %5114
  %5116 = add i64 %5104, %5115
  store i64 %5116, i64* %14, align 8
  %5117 = load i64, i64* %11, align 8
  store i64 %5117, i64* %12, align 8
  %5118 = load i64, i64* %10, align 8
  store i64 %5118, i64* %11, align 8
  %5119 = load i64, i64* %9, align 8
  store i64 %5119, i64* %10, align 8
  %5120 = load i64, i64* %8, align 8
  %5121 = load i64, i64* %13, align 8
  %5122 = add i64 %5120, %5121
  store i64 %5122, i64* %9, align 8
  %5123 = load i64, i64* %7, align 8
  store i64 %5123, i64* %8, align 8
  %5124 = load i64, i64* %6, align 8
  store i64 %5124, i64* %7, align 8
  %5125 = load i64, i64* %5, align 8
  store i64 %5125, i64* %6, align 8
  %5126 = load i64, i64* %13, align 8
  %5127 = load i64, i64* %14, align 8
  %5128 = add i64 %5126, %5127
  store i64 %5128, i64* %5, align 8
  %5129 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5130 = load i64, i64* %5129, align 8
  %5131 = lshr i64 %5130, 19
  %5132 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5133 = load i64, i64* %5132, align 8
  %5134 = shl i64 %5133, 45
  %5135 = or i64 %5131, %5134
  %5136 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5137 = load i64, i64* %5136, align 8
  %5138 = lshr i64 %5137, 61
  %5139 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5140 = load i64, i64* %5139, align 8
  %5141 = shl i64 %5140, 3
  %5142 = or i64 %5138, %5141
  %5143 = xor i64 %5135, %5142
  %5144 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5145 = load i64, i64* %5144, align 8
  %5146 = lshr i64 %5145, 6
  %5147 = xor i64 %5143, %5146
  %5148 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %5149 = load i64, i64* %5148, align 16
  %5150 = add i64 %5147, %5149
  %5151 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5152 = load i64, i64* %5151, align 16
  %5153 = lshr i64 %5152, 1
  %5154 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5155 = load i64, i64* %5154, align 16
  %5156 = shl i64 %5155, 63
  %5157 = or i64 %5153, %5156
  %5158 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5159 = load i64, i64* %5158, align 16
  %5160 = lshr i64 %5159, 8
  %5161 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5162 = load i64, i64* %5161, align 16
  %5163 = shl i64 %5162, 56
  %5164 = or i64 %5160, %5163
  %5165 = xor i64 %5157, %5164
  %5166 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5167 = load i64, i64* %5166, align 16
  %5168 = lshr i64 %5167, 7
  %5169 = xor i64 %5165, %5168
  %5170 = add i64 %5150, %5169
  %5171 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 25
  %5172 = load i64, i64* %5171, align 8
  %5173 = add i64 %5170, %5172
  %5174 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  store i64 %5173, i64* %5174, align 8
  %5175 = load i64, i64* %12, align 8
  %5176 = load i64, i64* %9, align 8
  %5177 = lshr i64 %5176, 14
  %5178 = load i64, i64* %9, align 8
  %5179 = shl i64 %5178, 50
  %5180 = or i64 %5177, %5179
  %5181 = load i64, i64* %9, align 8
  %5182 = lshr i64 %5181, 18
  %5183 = load i64, i64* %9, align 8
  %5184 = shl i64 %5183, 46
  %5185 = or i64 %5182, %5184
  %5186 = xor i64 %5180, %5185
  %5187 = load i64, i64* %9, align 8
  %5188 = lshr i64 %5187, 41
  %5189 = load i64, i64* %9, align 8
  %5190 = shl i64 %5189, 23
  %5191 = or i64 %5188, %5190
  %5192 = xor i64 %5186, %5191
  %5193 = add i64 %5175, %5192
  %5194 = load i64, i64* %9, align 8
  %5195 = load i64, i64* %10, align 8
  %5196 = and i64 %5194, %5195
  %5197 = load i64, i64* %9, align 8
  %5198 = xor i64 %5197, -1
  %5199 = load i64, i64* %11, align 8
  %5200 = and i64 %5198, %5199
  %5201 = xor i64 %5196, %5200
  %5202 = add i64 %5193, %5201
  %5203 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 41), align 8
  %5204 = add i64 %5202, %5203
  %5205 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5206 = load i64, i64* %5205, align 8
  %5207 = add i64 %5204, %5206
  store i64 %5207, i64* %13, align 8
  %5208 = load i64, i64* %5, align 8
  %5209 = lshr i64 %5208, 28
  %5210 = load i64, i64* %5, align 8
  %5211 = shl i64 %5210, 36
  %5212 = or i64 %5209, %5211
  %5213 = load i64, i64* %5, align 8
  %5214 = lshr i64 %5213, 34
  %5215 = load i64, i64* %5, align 8
  %5216 = shl i64 %5215, 30
  %5217 = or i64 %5214, %5216
  %5218 = xor i64 %5212, %5217
  %5219 = load i64, i64* %5, align 8
  %5220 = lshr i64 %5219, 39
  %5221 = load i64, i64* %5, align 8
  %5222 = shl i64 %5221, 25
  %5223 = or i64 %5220, %5222
  %5224 = xor i64 %5218, %5223
  %5225 = load i64, i64* %5, align 8
  %5226 = load i64, i64* %6, align 8
  %5227 = and i64 %5225, %5226
  %5228 = load i64, i64* %5, align 8
  %5229 = load i64, i64* %7, align 8
  %5230 = and i64 %5228, %5229
  %5231 = xor i64 %5227, %5230
  %5232 = load i64, i64* %6, align 8
  %5233 = load i64, i64* %7, align 8
  %5234 = and i64 %5232, %5233
  %5235 = xor i64 %5231, %5234
  %5236 = add i64 %5224, %5235
  store i64 %5236, i64* %14, align 8
  %5237 = load i64, i64* %11, align 8
  store i64 %5237, i64* %12, align 8
  %5238 = load i64, i64* %10, align 8
  store i64 %5238, i64* %11, align 8
  %5239 = load i64, i64* %9, align 8
  store i64 %5239, i64* %10, align 8
  %5240 = load i64, i64* %8, align 8
  %5241 = load i64, i64* %13, align 8
  %5242 = add i64 %5240, %5241
  store i64 %5242, i64* %9, align 8
  %5243 = load i64, i64* %7, align 8
  store i64 %5243, i64* %8, align 8
  %5244 = load i64, i64* %6, align 8
  store i64 %5244, i64* %7, align 8
  %5245 = load i64, i64* %5, align 8
  store i64 %5245, i64* %6, align 8
  %5246 = load i64, i64* %13, align 8
  %5247 = load i64, i64* %14, align 8
  %5248 = add i64 %5246, %5247
  store i64 %5248, i64* %5, align 8
  %5249 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5250 = load i64, i64* %5249, align 16
  %5251 = lshr i64 %5250, 19
  %5252 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5253 = load i64, i64* %5252, align 16
  %5254 = shl i64 %5253, 45
  %5255 = or i64 %5251, %5254
  %5256 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5257 = load i64, i64* %5256, align 16
  %5258 = lshr i64 %5257, 61
  %5259 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5260 = load i64, i64* %5259, align 16
  %5261 = shl i64 %5260, 3
  %5262 = or i64 %5258, %5261
  %5263 = xor i64 %5255, %5262
  %5264 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5265 = load i64, i64* %5264, align 16
  %5266 = lshr i64 %5265, 6
  %5267 = xor i64 %5263, %5266
  %5268 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %5269 = load i64, i64* %5268, align 8
  %5270 = add i64 %5267, %5269
  %5271 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5272 = load i64, i64* %5271, align 8
  %5273 = lshr i64 %5272, 1
  %5274 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5275 = load i64, i64* %5274, align 8
  %5276 = shl i64 %5275, 63
  %5277 = or i64 %5273, %5276
  %5278 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5279 = load i64, i64* %5278, align 8
  %5280 = lshr i64 %5279, 8
  %5281 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5282 = load i64, i64* %5281, align 8
  %5283 = shl i64 %5282, 56
  %5284 = or i64 %5280, %5283
  %5285 = xor i64 %5277, %5284
  %5286 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5287 = load i64, i64* %5286, align 8
  %5288 = lshr i64 %5287, 7
  %5289 = xor i64 %5285, %5288
  %5290 = add i64 %5270, %5289
  %5291 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 26
  %5292 = load i64, i64* %5291, align 16
  %5293 = add i64 %5290, %5292
  %5294 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  store i64 %5293, i64* %5294, align 16
  %5295 = load i64, i64* %12, align 8
  %5296 = load i64, i64* %9, align 8
  %5297 = lshr i64 %5296, 14
  %5298 = load i64, i64* %9, align 8
  %5299 = shl i64 %5298, 50
  %5300 = or i64 %5297, %5299
  %5301 = load i64, i64* %9, align 8
  %5302 = lshr i64 %5301, 18
  %5303 = load i64, i64* %9, align 8
  %5304 = shl i64 %5303, 46
  %5305 = or i64 %5302, %5304
  %5306 = xor i64 %5300, %5305
  %5307 = load i64, i64* %9, align 8
  %5308 = lshr i64 %5307, 41
  %5309 = load i64, i64* %9, align 8
  %5310 = shl i64 %5309, 23
  %5311 = or i64 %5308, %5310
  %5312 = xor i64 %5306, %5311
  %5313 = add i64 %5295, %5312
  %5314 = load i64, i64* %9, align 8
  %5315 = load i64, i64* %10, align 8
  %5316 = and i64 %5314, %5315
  %5317 = load i64, i64* %9, align 8
  %5318 = xor i64 %5317, -1
  %5319 = load i64, i64* %11, align 8
  %5320 = and i64 %5318, %5319
  %5321 = xor i64 %5316, %5320
  %5322 = add i64 %5313, %5321
  %5323 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 42), align 16
  %5324 = add i64 %5322, %5323
  %5325 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5326 = load i64, i64* %5325, align 16
  %5327 = add i64 %5324, %5326
  store i64 %5327, i64* %13, align 8
  %5328 = load i64, i64* %5, align 8
  %5329 = lshr i64 %5328, 28
  %5330 = load i64, i64* %5, align 8
  %5331 = shl i64 %5330, 36
  %5332 = or i64 %5329, %5331
  %5333 = load i64, i64* %5, align 8
  %5334 = lshr i64 %5333, 34
  %5335 = load i64, i64* %5, align 8
  %5336 = shl i64 %5335, 30
  %5337 = or i64 %5334, %5336
  %5338 = xor i64 %5332, %5337
  %5339 = load i64, i64* %5, align 8
  %5340 = lshr i64 %5339, 39
  %5341 = load i64, i64* %5, align 8
  %5342 = shl i64 %5341, 25
  %5343 = or i64 %5340, %5342
  %5344 = xor i64 %5338, %5343
  %5345 = load i64, i64* %5, align 8
  %5346 = load i64, i64* %6, align 8
  %5347 = and i64 %5345, %5346
  %5348 = load i64, i64* %5, align 8
  %5349 = load i64, i64* %7, align 8
  %5350 = and i64 %5348, %5349
  %5351 = xor i64 %5347, %5350
  %5352 = load i64, i64* %6, align 8
  %5353 = load i64, i64* %7, align 8
  %5354 = and i64 %5352, %5353
  %5355 = xor i64 %5351, %5354
  %5356 = add i64 %5344, %5355
  store i64 %5356, i64* %14, align 8
  %5357 = load i64, i64* %11, align 8
  store i64 %5357, i64* %12, align 8
  %5358 = load i64, i64* %10, align 8
  store i64 %5358, i64* %11, align 8
  %5359 = load i64, i64* %9, align 8
  store i64 %5359, i64* %10, align 8
  %5360 = load i64, i64* %8, align 8
  %5361 = load i64, i64* %13, align 8
  %5362 = add i64 %5360, %5361
  store i64 %5362, i64* %9, align 8
  %5363 = load i64, i64* %7, align 8
  store i64 %5363, i64* %8, align 8
  %5364 = load i64, i64* %6, align 8
  store i64 %5364, i64* %7, align 8
  %5365 = load i64, i64* %5, align 8
  store i64 %5365, i64* %6, align 8
  %5366 = load i64, i64* %13, align 8
  %5367 = load i64, i64* %14, align 8
  %5368 = add i64 %5366, %5367
  store i64 %5368, i64* %5, align 8
  %5369 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5370 = load i64, i64* %5369, align 8
  %5371 = lshr i64 %5370, 19
  %5372 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5373 = load i64, i64* %5372, align 8
  %5374 = shl i64 %5373, 45
  %5375 = or i64 %5371, %5374
  %5376 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5377 = load i64, i64* %5376, align 8
  %5378 = lshr i64 %5377, 61
  %5379 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5380 = load i64, i64* %5379, align 8
  %5381 = shl i64 %5380, 3
  %5382 = or i64 %5378, %5381
  %5383 = xor i64 %5375, %5382
  %5384 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5385 = load i64, i64* %5384, align 8
  %5386 = lshr i64 %5385, 6
  %5387 = xor i64 %5383, %5386
  %5388 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %5389 = load i64, i64* %5388, align 16
  %5390 = add i64 %5387, %5389
  %5391 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5392 = load i64, i64* %5391, align 16
  %5393 = lshr i64 %5392, 1
  %5394 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5395 = load i64, i64* %5394, align 16
  %5396 = shl i64 %5395, 63
  %5397 = or i64 %5393, %5396
  %5398 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5399 = load i64, i64* %5398, align 16
  %5400 = lshr i64 %5399, 8
  %5401 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5402 = load i64, i64* %5401, align 16
  %5403 = shl i64 %5402, 56
  %5404 = or i64 %5400, %5403
  %5405 = xor i64 %5397, %5404
  %5406 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5407 = load i64, i64* %5406, align 16
  %5408 = lshr i64 %5407, 7
  %5409 = xor i64 %5405, %5408
  %5410 = add i64 %5390, %5409
  %5411 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 27
  %5412 = load i64, i64* %5411, align 8
  %5413 = add i64 %5410, %5412
  %5414 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  store i64 %5413, i64* %5414, align 8
  %5415 = load i64, i64* %12, align 8
  %5416 = load i64, i64* %9, align 8
  %5417 = lshr i64 %5416, 14
  %5418 = load i64, i64* %9, align 8
  %5419 = shl i64 %5418, 50
  %5420 = or i64 %5417, %5419
  %5421 = load i64, i64* %9, align 8
  %5422 = lshr i64 %5421, 18
  %5423 = load i64, i64* %9, align 8
  %5424 = shl i64 %5423, 46
  %5425 = or i64 %5422, %5424
  %5426 = xor i64 %5420, %5425
  %5427 = load i64, i64* %9, align 8
  %5428 = lshr i64 %5427, 41
  %5429 = load i64, i64* %9, align 8
  %5430 = shl i64 %5429, 23
  %5431 = or i64 %5428, %5430
  %5432 = xor i64 %5426, %5431
  %5433 = add i64 %5415, %5432
  %5434 = load i64, i64* %9, align 8
  %5435 = load i64, i64* %10, align 8
  %5436 = and i64 %5434, %5435
  %5437 = load i64, i64* %9, align 8
  %5438 = xor i64 %5437, -1
  %5439 = load i64, i64* %11, align 8
  %5440 = and i64 %5438, %5439
  %5441 = xor i64 %5436, %5440
  %5442 = add i64 %5433, %5441
  %5443 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 43), align 8
  %5444 = add i64 %5442, %5443
  %5445 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5446 = load i64, i64* %5445, align 8
  %5447 = add i64 %5444, %5446
  store i64 %5447, i64* %13, align 8
  %5448 = load i64, i64* %5, align 8
  %5449 = lshr i64 %5448, 28
  %5450 = load i64, i64* %5, align 8
  %5451 = shl i64 %5450, 36
  %5452 = or i64 %5449, %5451
  %5453 = load i64, i64* %5, align 8
  %5454 = lshr i64 %5453, 34
  %5455 = load i64, i64* %5, align 8
  %5456 = shl i64 %5455, 30
  %5457 = or i64 %5454, %5456
  %5458 = xor i64 %5452, %5457
  %5459 = load i64, i64* %5, align 8
  %5460 = lshr i64 %5459, 39
  %5461 = load i64, i64* %5, align 8
  %5462 = shl i64 %5461, 25
  %5463 = or i64 %5460, %5462
  %5464 = xor i64 %5458, %5463
  %5465 = load i64, i64* %5, align 8
  %5466 = load i64, i64* %6, align 8
  %5467 = and i64 %5465, %5466
  %5468 = load i64, i64* %5, align 8
  %5469 = load i64, i64* %7, align 8
  %5470 = and i64 %5468, %5469
  %5471 = xor i64 %5467, %5470
  %5472 = load i64, i64* %6, align 8
  %5473 = load i64, i64* %7, align 8
  %5474 = and i64 %5472, %5473
  %5475 = xor i64 %5471, %5474
  %5476 = add i64 %5464, %5475
  store i64 %5476, i64* %14, align 8
  %5477 = load i64, i64* %11, align 8
  store i64 %5477, i64* %12, align 8
  %5478 = load i64, i64* %10, align 8
  store i64 %5478, i64* %11, align 8
  %5479 = load i64, i64* %9, align 8
  store i64 %5479, i64* %10, align 8
  %5480 = load i64, i64* %8, align 8
  %5481 = load i64, i64* %13, align 8
  %5482 = add i64 %5480, %5481
  store i64 %5482, i64* %9, align 8
  %5483 = load i64, i64* %7, align 8
  store i64 %5483, i64* %8, align 8
  %5484 = load i64, i64* %6, align 8
  store i64 %5484, i64* %7, align 8
  %5485 = load i64, i64* %5, align 8
  store i64 %5485, i64* %6, align 8
  %5486 = load i64, i64* %13, align 8
  %5487 = load i64, i64* %14, align 8
  %5488 = add i64 %5486, %5487
  store i64 %5488, i64* %5, align 8
  %5489 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5490 = load i64, i64* %5489, align 16
  %5491 = lshr i64 %5490, 19
  %5492 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5493 = load i64, i64* %5492, align 16
  %5494 = shl i64 %5493, 45
  %5495 = or i64 %5491, %5494
  %5496 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5497 = load i64, i64* %5496, align 16
  %5498 = lshr i64 %5497, 61
  %5499 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5500 = load i64, i64* %5499, align 16
  %5501 = shl i64 %5500, 3
  %5502 = or i64 %5498, %5501
  %5503 = xor i64 %5495, %5502
  %5504 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %5505 = load i64, i64* %5504, align 16
  %5506 = lshr i64 %5505, 6
  %5507 = xor i64 %5503, %5506
  %5508 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %5509 = load i64, i64* %5508, align 8
  %5510 = add i64 %5507, %5509
  %5511 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5512 = load i64, i64* %5511, align 8
  %5513 = lshr i64 %5512, 1
  %5514 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5515 = load i64, i64* %5514, align 8
  %5516 = shl i64 %5515, 63
  %5517 = or i64 %5513, %5516
  %5518 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5519 = load i64, i64* %5518, align 8
  %5520 = lshr i64 %5519, 8
  %5521 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5522 = load i64, i64* %5521, align 8
  %5523 = shl i64 %5522, 56
  %5524 = or i64 %5520, %5523
  %5525 = xor i64 %5517, %5524
  %5526 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5527 = load i64, i64* %5526, align 8
  %5528 = lshr i64 %5527, 7
  %5529 = xor i64 %5525, %5528
  %5530 = add i64 %5510, %5529
  %5531 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 28
  %5532 = load i64, i64* %5531, align 16
  %5533 = add i64 %5530, %5532
  %5534 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  store i64 %5533, i64* %5534, align 16
  %5535 = load i64, i64* %12, align 8
  %5536 = load i64, i64* %9, align 8
  %5537 = lshr i64 %5536, 14
  %5538 = load i64, i64* %9, align 8
  %5539 = shl i64 %5538, 50
  %5540 = or i64 %5537, %5539
  %5541 = load i64, i64* %9, align 8
  %5542 = lshr i64 %5541, 18
  %5543 = load i64, i64* %9, align 8
  %5544 = shl i64 %5543, 46
  %5545 = or i64 %5542, %5544
  %5546 = xor i64 %5540, %5545
  %5547 = load i64, i64* %9, align 8
  %5548 = lshr i64 %5547, 41
  %5549 = load i64, i64* %9, align 8
  %5550 = shl i64 %5549, 23
  %5551 = or i64 %5548, %5550
  %5552 = xor i64 %5546, %5551
  %5553 = add i64 %5535, %5552
  %5554 = load i64, i64* %9, align 8
  %5555 = load i64, i64* %10, align 8
  %5556 = and i64 %5554, %5555
  %5557 = load i64, i64* %9, align 8
  %5558 = xor i64 %5557, -1
  %5559 = load i64, i64* %11, align 8
  %5560 = and i64 %5558, %5559
  %5561 = xor i64 %5556, %5560
  %5562 = add i64 %5553, %5561
  %5563 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 44), align 16
  %5564 = add i64 %5562, %5563
  %5565 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5566 = load i64, i64* %5565, align 16
  %5567 = add i64 %5564, %5566
  store i64 %5567, i64* %13, align 8
  %5568 = load i64, i64* %5, align 8
  %5569 = lshr i64 %5568, 28
  %5570 = load i64, i64* %5, align 8
  %5571 = shl i64 %5570, 36
  %5572 = or i64 %5569, %5571
  %5573 = load i64, i64* %5, align 8
  %5574 = lshr i64 %5573, 34
  %5575 = load i64, i64* %5, align 8
  %5576 = shl i64 %5575, 30
  %5577 = or i64 %5574, %5576
  %5578 = xor i64 %5572, %5577
  %5579 = load i64, i64* %5, align 8
  %5580 = lshr i64 %5579, 39
  %5581 = load i64, i64* %5, align 8
  %5582 = shl i64 %5581, 25
  %5583 = or i64 %5580, %5582
  %5584 = xor i64 %5578, %5583
  %5585 = load i64, i64* %5, align 8
  %5586 = load i64, i64* %6, align 8
  %5587 = and i64 %5585, %5586
  %5588 = load i64, i64* %5, align 8
  %5589 = load i64, i64* %7, align 8
  %5590 = and i64 %5588, %5589
  %5591 = xor i64 %5587, %5590
  %5592 = load i64, i64* %6, align 8
  %5593 = load i64, i64* %7, align 8
  %5594 = and i64 %5592, %5593
  %5595 = xor i64 %5591, %5594
  %5596 = add i64 %5584, %5595
  store i64 %5596, i64* %14, align 8
  %5597 = load i64, i64* %11, align 8
  store i64 %5597, i64* %12, align 8
  %5598 = load i64, i64* %10, align 8
  store i64 %5598, i64* %11, align 8
  %5599 = load i64, i64* %9, align 8
  store i64 %5599, i64* %10, align 8
  %5600 = load i64, i64* %8, align 8
  %5601 = load i64, i64* %13, align 8
  %5602 = add i64 %5600, %5601
  store i64 %5602, i64* %9, align 8
  %5603 = load i64, i64* %7, align 8
  store i64 %5603, i64* %8, align 8
  %5604 = load i64, i64* %6, align 8
  store i64 %5604, i64* %7, align 8
  %5605 = load i64, i64* %5, align 8
  store i64 %5605, i64* %6, align 8
  %5606 = load i64, i64* %13, align 8
  %5607 = load i64, i64* %14, align 8
  %5608 = add i64 %5606, %5607
  store i64 %5608, i64* %5, align 8
  %5609 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5610 = load i64, i64* %5609, align 8
  %5611 = lshr i64 %5610, 19
  %5612 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5613 = load i64, i64* %5612, align 8
  %5614 = shl i64 %5613, 45
  %5615 = or i64 %5611, %5614
  %5616 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5617 = load i64, i64* %5616, align 8
  %5618 = lshr i64 %5617, 61
  %5619 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5620 = load i64, i64* %5619, align 8
  %5621 = shl i64 %5620, 3
  %5622 = or i64 %5618, %5621
  %5623 = xor i64 %5615, %5622
  %5624 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %5625 = load i64, i64* %5624, align 8
  %5626 = lshr i64 %5625, 6
  %5627 = xor i64 %5623, %5626
  %5628 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %5629 = load i64, i64* %5628, align 16
  %5630 = add i64 %5627, %5629
  %5631 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5632 = load i64, i64* %5631, align 16
  %5633 = lshr i64 %5632, 1
  %5634 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5635 = load i64, i64* %5634, align 16
  %5636 = shl i64 %5635, 63
  %5637 = or i64 %5633, %5636
  %5638 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5639 = load i64, i64* %5638, align 16
  %5640 = lshr i64 %5639, 8
  %5641 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5642 = load i64, i64* %5641, align 16
  %5643 = shl i64 %5642, 56
  %5644 = or i64 %5640, %5643
  %5645 = xor i64 %5637, %5644
  %5646 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5647 = load i64, i64* %5646, align 16
  %5648 = lshr i64 %5647, 7
  %5649 = xor i64 %5645, %5648
  %5650 = add i64 %5630, %5649
  %5651 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 29
  %5652 = load i64, i64* %5651, align 8
  %5653 = add i64 %5650, %5652
  %5654 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  store i64 %5653, i64* %5654, align 8
  %5655 = load i64, i64* %12, align 8
  %5656 = load i64, i64* %9, align 8
  %5657 = lshr i64 %5656, 14
  %5658 = load i64, i64* %9, align 8
  %5659 = shl i64 %5658, 50
  %5660 = or i64 %5657, %5659
  %5661 = load i64, i64* %9, align 8
  %5662 = lshr i64 %5661, 18
  %5663 = load i64, i64* %9, align 8
  %5664 = shl i64 %5663, 46
  %5665 = or i64 %5662, %5664
  %5666 = xor i64 %5660, %5665
  %5667 = load i64, i64* %9, align 8
  %5668 = lshr i64 %5667, 41
  %5669 = load i64, i64* %9, align 8
  %5670 = shl i64 %5669, 23
  %5671 = or i64 %5668, %5670
  %5672 = xor i64 %5666, %5671
  %5673 = add i64 %5655, %5672
  %5674 = load i64, i64* %9, align 8
  %5675 = load i64, i64* %10, align 8
  %5676 = and i64 %5674, %5675
  %5677 = load i64, i64* %9, align 8
  %5678 = xor i64 %5677, -1
  %5679 = load i64, i64* %11, align 8
  %5680 = and i64 %5678, %5679
  %5681 = xor i64 %5676, %5680
  %5682 = add i64 %5673, %5681
  %5683 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 45), align 8
  %5684 = add i64 %5682, %5683
  %5685 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5686 = load i64, i64* %5685, align 8
  %5687 = add i64 %5684, %5686
  store i64 %5687, i64* %13, align 8
  %5688 = load i64, i64* %5, align 8
  %5689 = lshr i64 %5688, 28
  %5690 = load i64, i64* %5, align 8
  %5691 = shl i64 %5690, 36
  %5692 = or i64 %5689, %5691
  %5693 = load i64, i64* %5, align 8
  %5694 = lshr i64 %5693, 34
  %5695 = load i64, i64* %5, align 8
  %5696 = shl i64 %5695, 30
  %5697 = or i64 %5694, %5696
  %5698 = xor i64 %5692, %5697
  %5699 = load i64, i64* %5, align 8
  %5700 = lshr i64 %5699, 39
  %5701 = load i64, i64* %5, align 8
  %5702 = shl i64 %5701, 25
  %5703 = or i64 %5700, %5702
  %5704 = xor i64 %5698, %5703
  %5705 = load i64, i64* %5, align 8
  %5706 = load i64, i64* %6, align 8
  %5707 = and i64 %5705, %5706
  %5708 = load i64, i64* %5, align 8
  %5709 = load i64, i64* %7, align 8
  %5710 = and i64 %5708, %5709
  %5711 = xor i64 %5707, %5710
  %5712 = load i64, i64* %6, align 8
  %5713 = load i64, i64* %7, align 8
  %5714 = and i64 %5712, %5713
  %5715 = xor i64 %5711, %5714
  %5716 = add i64 %5704, %5715
  store i64 %5716, i64* %14, align 8
  %5717 = load i64, i64* %11, align 8
  store i64 %5717, i64* %12, align 8
  %5718 = load i64, i64* %10, align 8
  store i64 %5718, i64* %11, align 8
  %5719 = load i64, i64* %9, align 8
  store i64 %5719, i64* %10, align 8
  %5720 = load i64, i64* %8, align 8
  %5721 = load i64, i64* %13, align 8
  %5722 = add i64 %5720, %5721
  store i64 %5722, i64* %9, align 8
  %5723 = load i64, i64* %7, align 8
  store i64 %5723, i64* %8, align 8
  %5724 = load i64, i64* %6, align 8
  store i64 %5724, i64* %7, align 8
  %5725 = load i64, i64* %5, align 8
  store i64 %5725, i64* %6, align 8
  %5726 = load i64, i64* %13, align 8
  %5727 = load i64, i64* %14, align 8
  %5728 = add i64 %5726, %5727
  store i64 %5728, i64* %5, align 8
  %5729 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5730 = load i64, i64* %5729, align 16
  %5731 = lshr i64 %5730, 19
  %5732 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5733 = load i64, i64* %5732, align 16
  %5734 = shl i64 %5733, 45
  %5735 = or i64 %5731, %5734
  %5736 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5737 = load i64, i64* %5736, align 16
  %5738 = lshr i64 %5737, 61
  %5739 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5740 = load i64, i64* %5739, align 16
  %5741 = shl i64 %5740, 3
  %5742 = or i64 %5738, %5741
  %5743 = xor i64 %5735, %5742
  %5744 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %5745 = load i64, i64* %5744, align 16
  %5746 = lshr i64 %5745, 6
  %5747 = xor i64 %5743, %5746
  %5748 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %5749 = load i64, i64* %5748, align 8
  %5750 = add i64 %5747, %5749
  %5751 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5752 = load i64, i64* %5751, align 8
  %5753 = lshr i64 %5752, 1
  %5754 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5755 = load i64, i64* %5754, align 8
  %5756 = shl i64 %5755, 63
  %5757 = or i64 %5753, %5756
  %5758 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5759 = load i64, i64* %5758, align 8
  %5760 = lshr i64 %5759, 8
  %5761 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5762 = load i64, i64* %5761, align 8
  %5763 = shl i64 %5762, 56
  %5764 = or i64 %5760, %5763
  %5765 = xor i64 %5757, %5764
  %5766 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5767 = load i64, i64* %5766, align 8
  %5768 = lshr i64 %5767, 7
  %5769 = xor i64 %5765, %5768
  %5770 = add i64 %5750, %5769
  %5771 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 30
  %5772 = load i64, i64* %5771, align 16
  %5773 = add i64 %5770, %5772
  %5774 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  store i64 %5773, i64* %5774, align 16
  %5775 = load i64, i64* %12, align 8
  %5776 = load i64, i64* %9, align 8
  %5777 = lshr i64 %5776, 14
  %5778 = load i64, i64* %9, align 8
  %5779 = shl i64 %5778, 50
  %5780 = or i64 %5777, %5779
  %5781 = load i64, i64* %9, align 8
  %5782 = lshr i64 %5781, 18
  %5783 = load i64, i64* %9, align 8
  %5784 = shl i64 %5783, 46
  %5785 = or i64 %5782, %5784
  %5786 = xor i64 %5780, %5785
  %5787 = load i64, i64* %9, align 8
  %5788 = lshr i64 %5787, 41
  %5789 = load i64, i64* %9, align 8
  %5790 = shl i64 %5789, 23
  %5791 = or i64 %5788, %5790
  %5792 = xor i64 %5786, %5791
  %5793 = add i64 %5775, %5792
  %5794 = load i64, i64* %9, align 8
  %5795 = load i64, i64* %10, align 8
  %5796 = and i64 %5794, %5795
  %5797 = load i64, i64* %9, align 8
  %5798 = xor i64 %5797, -1
  %5799 = load i64, i64* %11, align 8
  %5800 = and i64 %5798, %5799
  %5801 = xor i64 %5796, %5800
  %5802 = add i64 %5793, %5801
  %5803 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 46), align 16
  %5804 = add i64 %5802, %5803
  %5805 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5806 = load i64, i64* %5805, align 16
  %5807 = add i64 %5804, %5806
  store i64 %5807, i64* %13, align 8
  %5808 = load i64, i64* %5, align 8
  %5809 = lshr i64 %5808, 28
  %5810 = load i64, i64* %5, align 8
  %5811 = shl i64 %5810, 36
  %5812 = or i64 %5809, %5811
  %5813 = load i64, i64* %5, align 8
  %5814 = lshr i64 %5813, 34
  %5815 = load i64, i64* %5, align 8
  %5816 = shl i64 %5815, 30
  %5817 = or i64 %5814, %5816
  %5818 = xor i64 %5812, %5817
  %5819 = load i64, i64* %5, align 8
  %5820 = lshr i64 %5819, 39
  %5821 = load i64, i64* %5, align 8
  %5822 = shl i64 %5821, 25
  %5823 = or i64 %5820, %5822
  %5824 = xor i64 %5818, %5823
  %5825 = load i64, i64* %5, align 8
  %5826 = load i64, i64* %6, align 8
  %5827 = and i64 %5825, %5826
  %5828 = load i64, i64* %5, align 8
  %5829 = load i64, i64* %7, align 8
  %5830 = and i64 %5828, %5829
  %5831 = xor i64 %5827, %5830
  %5832 = load i64, i64* %6, align 8
  %5833 = load i64, i64* %7, align 8
  %5834 = and i64 %5832, %5833
  %5835 = xor i64 %5831, %5834
  %5836 = add i64 %5824, %5835
  store i64 %5836, i64* %14, align 8
  %5837 = load i64, i64* %11, align 8
  store i64 %5837, i64* %12, align 8
  %5838 = load i64, i64* %10, align 8
  store i64 %5838, i64* %11, align 8
  %5839 = load i64, i64* %9, align 8
  store i64 %5839, i64* %10, align 8
  %5840 = load i64, i64* %8, align 8
  %5841 = load i64, i64* %13, align 8
  %5842 = add i64 %5840, %5841
  store i64 %5842, i64* %9, align 8
  %5843 = load i64, i64* %7, align 8
  store i64 %5843, i64* %8, align 8
  %5844 = load i64, i64* %6, align 8
  store i64 %5844, i64* %7, align 8
  %5845 = load i64, i64* %5, align 8
  store i64 %5845, i64* %6, align 8
  %5846 = load i64, i64* %13, align 8
  %5847 = load i64, i64* %14, align 8
  %5848 = add i64 %5846, %5847
  store i64 %5848, i64* %5, align 8
  %5849 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5850 = load i64, i64* %5849, align 8
  %5851 = lshr i64 %5850, 19
  %5852 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5853 = load i64, i64* %5852, align 8
  %5854 = shl i64 %5853, 45
  %5855 = or i64 %5851, %5854
  %5856 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5857 = load i64, i64* %5856, align 8
  %5858 = lshr i64 %5857, 61
  %5859 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5860 = load i64, i64* %5859, align 8
  %5861 = shl i64 %5860, 3
  %5862 = or i64 %5858, %5861
  %5863 = xor i64 %5855, %5862
  %5864 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %5865 = load i64, i64* %5864, align 8
  %5866 = lshr i64 %5865, 6
  %5867 = xor i64 %5863, %5866
  %5868 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %5869 = load i64, i64* %5868, align 16
  %5870 = add i64 %5867, %5869
  %5871 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %5872 = load i64, i64* %5871, align 16
  %5873 = lshr i64 %5872, 1
  %5874 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %5875 = load i64, i64* %5874, align 16
  %5876 = shl i64 %5875, 63
  %5877 = or i64 %5873, %5876
  %5878 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %5879 = load i64, i64* %5878, align 16
  %5880 = lshr i64 %5879, 8
  %5881 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %5882 = load i64, i64* %5881, align 16
  %5883 = shl i64 %5882, 56
  %5884 = or i64 %5880, %5883
  %5885 = xor i64 %5877, %5884
  %5886 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %5887 = load i64, i64* %5886, align 16
  %5888 = lshr i64 %5887, 7
  %5889 = xor i64 %5885, %5888
  %5890 = add i64 %5870, %5889
  %5891 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 31
  %5892 = load i64, i64* %5891, align 8
  %5893 = add i64 %5890, %5892
  %5894 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  store i64 %5893, i64* %5894, align 8
  %5895 = load i64, i64* %12, align 8
  %5896 = load i64, i64* %9, align 8
  %5897 = lshr i64 %5896, 14
  %5898 = load i64, i64* %9, align 8
  %5899 = shl i64 %5898, 50
  %5900 = or i64 %5897, %5899
  %5901 = load i64, i64* %9, align 8
  %5902 = lshr i64 %5901, 18
  %5903 = load i64, i64* %9, align 8
  %5904 = shl i64 %5903, 46
  %5905 = or i64 %5902, %5904
  %5906 = xor i64 %5900, %5905
  %5907 = load i64, i64* %9, align 8
  %5908 = lshr i64 %5907, 41
  %5909 = load i64, i64* %9, align 8
  %5910 = shl i64 %5909, 23
  %5911 = or i64 %5908, %5910
  %5912 = xor i64 %5906, %5911
  %5913 = add i64 %5895, %5912
  %5914 = load i64, i64* %9, align 8
  %5915 = load i64, i64* %10, align 8
  %5916 = and i64 %5914, %5915
  %5917 = load i64, i64* %9, align 8
  %5918 = xor i64 %5917, -1
  %5919 = load i64, i64* %11, align 8
  %5920 = and i64 %5918, %5919
  %5921 = xor i64 %5916, %5920
  %5922 = add i64 %5913, %5921
  %5923 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 47), align 8
  %5924 = add i64 %5922, %5923
  %5925 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %5926 = load i64, i64* %5925, align 8
  %5927 = add i64 %5924, %5926
  store i64 %5927, i64* %13, align 8
  %5928 = load i64, i64* %5, align 8
  %5929 = lshr i64 %5928, 28
  %5930 = load i64, i64* %5, align 8
  %5931 = shl i64 %5930, 36
  %5932 = or i64 %5929, %5931
  %5933 = load i64, i64* %5, align 8
  %5934 = lshr i64 %5933, 34
  %5935 = load i64, i64* %5, align 8
  %5936 = shl i64 %5935, 30
  %5937 = or i64 %5934, %5936
  %5938 = xor i64 %5932, %5937
  %5939 = load i64, i64* %5, align 8
  %5940 = lshr i64 %5939, 39
  %5941 = load i64, i64* %5, align 8
  %5942 = shl i64 %5941, 25
  %5943 = or i64 %5940, %5942
  %5944 = xor i64 %5938, %5943
  %5945 = load i64, i64* %5, align 8
  %5946 = load i64, i64* %6, align 8
  %5947 = and i64 %5945, %5946
  %5948 = load i64, i64* %5, align 8
  %5949 = load i64, i64* %7, align 8
  %5950 = and i64 %5948, %5949
  %5951 = xor i64 %5947, %5950
  %5952 = load i64, i64* %6, align 8
  %5953 = load i64, i64* %7, align 8
  %5954 = and i64 %5952, %5953
  %5955 = xor i64 %5951, %5954
  %5956 = add i64 %5944, %5955
  store i64 %5956, i64* %14, align 8
  %5957 = load i64, i64* %11, align 8
  store i64 %5957, i64* %12, align 8
  %5958 = load i64, i64* %10, align 8
  store i64 %5958, i64* %11, align 8
  %5959 = load i64, i64* %9, align 8
  store i64 %5959, i64* %10, align 8
  %5960 = load i64, i64* %8, align 8
  %5961 = load i64, i64* %13, align 8
  %5962 = add i64 %5960, %5961
  store i64 %5962, i64* %9, align 8
  %5963 = load i64, i64* %7, align 8
  store i64 %5963, i64* %8, align 8
  %5964 = load i64, i64* %6, align 8
  store i64 %5964, i64* %7, align 8
  %5965 = load i64, i64* %5, align 8
  store i64 %5965, i64* %6, align 8
  %5966 = load i64, i64* %13, align 8
  %5967 = load i64, i64* %14, align 8
  %5968 = add i64 %5966, %5967
  store i64 %5968, i64* %5, align 8
  %5969 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5970 = load i64, i64* %5969, align 16
  %5971 = lshr i64 %5970, 19
  %5972 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5973 = load i64, i64* %5972, align 16
  %5974 = shl i64 %5973, 45
  %5975 = or i64 %5971, %5974
  %5976 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5977 = load i64, i64* %5976, align 16
  %5978 = lshr i64 %5977, 61
  %5979 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5980 = load i64, i64* %5979, align 16
  %5981 = shl i64 %5980, 3
  %5982 = or i64 %5978, %5981
  %5983 = xor i64 %5975, %5982
  %5984 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %5985 = load i64, i64* %5984, align 16
  %5986 = lshr i64 %5985, 6
  %5987 = xor i64 %5983, %5986
  %5988 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %5989 = load i64, i64* %5988, align 8
  %5990 = add i64 %5987, %5989
  %5991 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %5992 = load i64, i64* %5991, align 8
  %5993 = lshr i64 %5992, 1
  %5994 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %5995 = load i64, i64* %5994, align 8
  %5996 = shl i64 %5995, 63
  %5997 = or i64 %5993, %5996
  %5998 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %5999 = load i64, i64* %5998, align 8
  %6000 = lshr i64 %5999, 8
  %6001 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %6002 = load i64, i64* %6001, align 8
  %6003 = shl i64 %6002, 56
  %6004 = or i64 %6000, %6003
  %6005 = xor i64 %5997, %6004
  %6006 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %6007 = load i64, i64* %6006, align 8
  %6008 = lshr i64 %6007, 7
  %6009 = xor i64 %6005, %6008
  %6010 = add i64 %5990, %6009
  %6011 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 32
  %6012 = load i64, i64* %6011, align 16
  %6013 = add i64 %6010, %6012
  %6014 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  store i64 %6013, i64* %6014, align 16
  %6015 = load i64, i64* %12, align 8
  %6016 = load i64, i64* %9, align 8
  %6017 = lshr i64 %6016, 14
  %6018 = load i64, i64* %9, align 8
  %6019 = shl i64 %6018, 50
  %6020 = or i64 %6017, %6019
  %6021 = load i64, i64* %9, align 8
  %6022 = lshr i64 %6021, 18
  %6023 = load i64, i64* %9, align 8
  %6024 = shl i64 %6023, 46
  %6025 = or i64 %6022, %6024
  %6026 = xor i64 %6020, %6025
  %6027 = load i64, i64* %9, align 8
  %6028 = lshr i64 %6027, 41
  %6029 = load i64, i64* %9, align 8
  %6030 = shl i64 %6029, 23
  %6031 = or i64 %6028, %6030
  %6032 = xor i64 %6026, %6031
  %6033 = add i64 %6015, %6032
  %6034 = load i64, i64* %9, align 8
  %6035 = load i64, i64* %10, align 8
  %6036 = and i64 %6034, %6035
  %6037 = load i64, i64* %9, align 8
  %6038 = xor i64 %6037, -1
  %6039 = load i64, i64* %11, align 8
  %6040 = and i64 %6038, %6039
  %6041 = xor i64 %6036, %6040
  %6042 = add i64 %6033, %6041
  %6043 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 48), align 16
  %6044 = add i64 %6042, %6043
  %6045 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6046 = load i64, i64* %6045, align 16
  %6047 = add i64 %6044, %6046
  store i64 %6047, i64* %13, align 8
  %6048 = load i64, i64* %5, align 8
  %6049 = lshr i64 %6048, 28
  %6050 = load i64, i64* %5, align 8
  %6051 = shl i64 %6050, 36
  %6052 = or i64 %6049, %6051
  %6053 = load i64, i64* %5, align 8
  %6054 = lshr i64 %6053, 34
  %6055 = load i64, i64* %5, align 8
  %6056 = shl i64 %6055, 30
  %6057 = or i64 %6054, %6056
  %6058 = xor i64 %6052, %6057
  %6059 = load i64, i64* %5, align 8
  %6060 = lshr i64 %6059, 39
  %6061 = load i64, i64* %5, align 8
  %6062 = shl i64 %6061, 25
  %6063 = or i64 %6060, %6062
  %6064 = xor i64 %6058, %6063
  %6065 = load i64, i64* %5, align 8
  %6066 = load i64, i64* %6, align 8
  %6067 = and i64 %6065, %6066
  %6068 = load i64, i64* %5, align 8
  %6069 = load i64, i64* %7, align 8
  %6070 = and i64 %6068, %6069
  %6071 = xor i64 %6067, %6070
  %6072 = load i64, i64* %6, align 8
  %6073 = load i64, i64* %7, align 8
  %6074 = and i64 %6072, %6073
  %6075 = xor i64 %6071, %6074
  %6076 = add i64 %6064, %6075
  store i64 %6076, i64* %14, align 8
  %6077 = load i64, i64* %11, align 8
  store i64 %6077, i64* %12, align 8
  %6078 = load i64, i64* %10, align 8
  store i64 %6078, i64* %11, align 8
  %6079 = load i64, i64* %9, align 8
  store i64 %6079, i64* %10, align 8
  %6080 = load i64, i64* %8, align 8
  %6081 = load i64, i64* %13, align 8
  %6082 = add i64 %6080, %6081
  store i64 %6082, i64* %9, align 8
  %6083 = load i64, i64* %7, align 8
  store i64 %6083, i64* %8, align 8
  %6084 = load i64, i64* %6, align 8
  store i64 %6084, i64* %7, align 8
  %6085 = load i64, i64* %5, align 8
  store i64 %6085, i64* %6, align 8
  %6086 = load i64, i64* %13, align 8
  %6087 = load i64, i64* %14, align 8
  %6088 = add i64 %6086, %6087
  store i64 %6088, i64* %5, align 8
  %6089 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6090 = load i64, i64* %6089, align 8
  %6091 = lshr i64 %6090, 19
  %6092 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6093 = load i64, i64* %6092, align 8
  %6094 = shl i64 %6093, 45
  %6095 = or i64 %6091, %6094
  %6096 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6097 = load i64, i64* %6096, align 8
  %6098 = lshr i64 %6097, 61
  %6099 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6100 = load i64, i64* %6099, align 8
  %6101 = shl i64 %6100, 3
  %6102 = or i64 %6098, %6101
  %6103 = xor i64 %6095, %6102
  %6104 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6105 = load i64, i64* %6104, align 8
  %6106 = lshr i64 %6105, 6
  %6107 = xor i64 %6103, %6106
  %6108 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %6109 = load i64, i64* %6108, align 16
  %6110 = add i64 %6107, %6109
  %6111 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6112 = load i64, i64* %6111, align 16
  %6113 = lshr i64 %6112, 1
  %6114 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6115 = load i64, i64* %6114, align 16
  %6116 = shl i64 %6115, 63
  %6117 = or i64 %6113, %6116
  %6118 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6119 = load i64, i64* %6118, align 16
  %6120 = lshr i64 %6119, 8
  %6121 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6122 = load i64, i64* %6121, align 16
  %6123 = shl i64 %6122, 56
  %6124 = or i64 %6120, %6123
  %6125 = xor i64 %6117, %6124
  %6126 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6127 = load i64, i64* %6126, align 16
  %6128 = lshr i64 %6127, 7
  %6129 = xor i64 %6125, %6128
  %6130 = add i64 %6110, %6129
  %6131 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 33
  %6132 = load i64, i64* %6131, align 8
  %6133 = add i64 %6130, %6132
  %6134 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  store i64 %6133, i64* %6134, align 8
  %6135 = load i64, i64* %12, align 8
  %6136 = load i64, i64* %9, align 8
  %6137 = lshr i64 %6136, 14
  %6138 = load i64, i64* %9, align 8
  %6139 = shl i64 %6138, 50
  %6140 = or i64 %6137, %6139
  %6141 = load i64, i64* %9, align 8
  %6142 = lshr i64 %6141, 18
  %6143 = load i64, i64* %9, align 8
  %6144 = shl i64 %6143, 46
  %6145 = or i64 %6142, %6144
  %6146 = xor i64 %6140, %6145
  %6147 = load i64, i64* %9, align 8
  %6148 = lshr i64 %6147, 41
  %6149 = load i64, i64* %9, align 8
  %6150 = shl i64 %6149, 23
  %6151 = or i64 %6148, %6150
  %6152 = xor i64 %6146, %6151
  %6153 = add i64 %6135, %6152
  %6154 = load i64, i64* %9, align 8
  %6155 = load i64, i64* %10, align 8
  %6156 = and i64 %6154, %6155
  %6157 = load i64, i64* %9, align 8
  %6158 = xor i64 %6157, -1
  %6159 = load i64, i64* %11, align 8
  %6160 = and i64 %6158, %6159
  %6161 = xor i64 %6156, %6160
  %6162 = add i64 %6153, %6161
  %6163 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 49), align 8
  %6164 = add i64 %6162, %6163
  %6165 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6166 = load i64, i64* %6165, align 8
  %6167 = add i64 %6164, %6166
  store i64 %6167, i64* %13, align 8
  %6168 = load i64, i64* %5, align 8
  %6169 = lshr i64 %6168, 28
  %6170 = load i64, i64* %5, align 8
  %6171 = shl i64 %6170, 36
  %6172 = or i64 %6169, %6171
  %6173 = load i64, i64* %5, align 8
  %6174 = lshr i64 %6173, 34
  %6175 = load i64, i64* %5, align 8
  %6176 = shl i64 %6175, 30
  %6177 = or i64 %6174, %6176
  %6178 = xor i64 %6172, %6177
  %6179 = load i64, i64* %5, align 8
  %6180 = lshr i64 %6179, 39
  %6181 = load i64, i64* %5, align 8
  %6182 = shl i64 %6181, 25
  %6183 = or i64 %6180, %6182
  %6184 = xor i64 %6178, %6183
  %6185 = load i64, i64* %5, align 8
  %6186 = load i64, i64* %6, align 8
  %6187 = and i64 %6185, %6186
  %6188 = load i64, i64* %5, align 8
  %6189 = load i64, i64* %7, align 8
  %6190 = and i64 %6188, %6189
  %6191 = xor i64 %6187, %6190
  %6192 = load i64, i64* %6, align 8
  %6193 = load i64, i64* %7, align 8
  %6194 = and i64 %6192, %6193
  %6195 = xor i64 %6191, %6194
  %6196 = add i64 %6184, %6195
  store i64 %6196, i64* %14, align 8
  %6197 = load i64, i64* %11, align 8
  store i64 %6197, i64* %12, align 8
  %6198 = load i64, i64* %10, align 8
  store i64 %6198, i64* %11, align 8
  %6199 = load i64, i64* %9, align 8
  store i64 %6199, i64* %10, align 8
  %6200 = load i64, i64* %8, align 8
  %6201 = load i64, i64* %13, align 8
  %6202 = add i64 %6200, %6201
  store i64 %6202, i64* %9, align 8
  %6203 = load i64, i64* %7, align 8
  store i64 %6203, i64* %8, align 8
  %6204 = load i64, i64* %6, align 8
  store i64 %6204, i64* %7, align 8
  %6205 = load i64, i64* %5, align 8
  store i64 %6205, i64* %6, align 8
  %6206 = load i64, i64* %13, align 8
  %6207 = load i64, i64* %14, align 8
  %6208 = add i64 %6206, %6207
  store i64 %6208, i64* %5, align 8
  %6209 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6210 = load i64, i64* %6209, align 16
  %6211 = lshr i64 %6210, 19
  %6212 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6213 = load i64, i64* %6212, align 16
  %6214 = shl i64 %6213, 45
  %6215 = or i64 %6211, %6214
  %6216 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6217 = load i64, i64* %6216, align 16
  %6218 = lshr i64 %6217, 61
  %6219 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6220 = load i64, i64* %6219, align 16
  %6221 = shl i64 %6220, 3
  %6222 = or i64 %6218, %6221
  %6223 = xor i64 %6215, %6222
  %6224 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6225 = load i64, i64* %6224, align 16
  %6226 = lshr i64 %6225, 6
  %6227 = xor i64 %6223, %6226
  %6228 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %6229 = load i64, i64* %6228, align 8
  %6230 = add i64 %6227, %6229
  %6231 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6232 = load i64, i64* %6231, align 8
  %6233 = lshr i64 %6232, 1
  %6234 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6235 = load i64, i64* %6234, align 8
  %6236 = shl i64 %6235, 63
  %6237 = or i64 %6233, %6236
  %6238 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6239 = load i64, i64* %6238, align 8
  %6240 = lshr i64 %6239, 8
  %6241 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6242 = load i64, i64* %6241, align 8
  %6243 = shl i64 %6242, 56
  %6244 = or i64 %6240, %6243
  %6245 = xor i64 %6237, %6244
  %6246 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6247 = load i64, i64* %6246, align 8
  %6248 = lshr i64 %6247, 7
  %6249 = xor i64 %6245, %6248
  %6250 = add i64 %6230, %6249
  %6251 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 34
  %6252 = load i64, i64* %6251, align 16
  %6253 = add i64 %6250, %6252
  %6254 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  store i64 %6253, i64* %6254, align 16
  %6255 = load i64, i64* %12, align 8
  %6256 = load i64, i64* %9, align 8
  %6257 = lshr i64 %6256, 14
  %6258 = load i64, i64* %9, align 8
  %6259 = shl i64 %6258, 50
  %6260 = or i64 %6257, %6259
  %6261 = load i64, i64* %9, align 8
  %6262 = lshr i64 %6261, 18
  %6263 = load i64, i64* %9, align 8
  %6264 = shl i64 %6263, 46
  %6265 = or i64 %6262, %6264
  %6266 = xor i64 %6260, %6265
  %6267 = load i64, i64* %9, align 8
  %6268 = lshr i64 %6267, 41
  %6269 = load i64, i64* %9, align 8
  %6270 = shl i64 %6269, 23
  %6271 = or i64 %6268, %6270
  %6272 = xor i64 %6266, %6271
  %6273 = add i64 %6255, %6272
  %6274 = load i64, i64* %9, align 8
  %6275 = load i64, i64* %10, align 8
  %6276 = and i64 %6274, %6275
  %6277 = load i64, i64* %9, align 8
  %6278 = xor i64 %6277, -1
  %6279 = load i64, i64* %11, align 8
  %6280 = and i64 %6278, %6279
  %6281 = xor i64 %6276, %6280
  %6282 = add i64 %6273, %6281
  %6283 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 50), align 16
  %6284 = add i64 %6282, %6283
  %6285 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6286 = load i64, i64* %6285, align 16
  %6287 = add i64 %6284, %6286
  store i64 %6287, i64* %13, align 8
  %6288 = load i64, i64* %5, align 8
  %6289 = lshr i64 %6288, 28
  %6290 = load i64, i64* %5, align 8
  %6291 = shl i64 %6290, 36
  %6292 = or i64 %6289, %6291
  %6293 = load i64, i64* %5, align 8
  %6294 = lshr i64 %6293, 34
  %6295 = load i64, i64* %5, align 8
  %6296 = shl i64 %6295, 30
  %6297 = or i64 %6294, %6296
  %6298 = xor i64 %6292, %6297
  %6299 = load i64, i64* %5, align 8
  %6300 = lshr i64 %6299, 39
  %6301 = load i64, i64* %5, align 8
  %6302 = shl i64 %6301, 25
  %6303 = or i64 %6300, %6302
  %6304 = xor i64 %6298, %6303
  %6305 = load i64, i64* %5, align 8
  %6306 = load i64, i64* %6, align 8
  %6307 = and i64 %6305, %6306
  %6308 = load i64, i64* %5, align 8
  %6309 = load i64, i64* %7, align 8
  %6310 = and i64 %6308, %6309
  %6311 = xor i64 %6307, %6310
  %6312 = load i64, i64* %6, align 8
  %6313 = load i64, i64* %7, align 8
  %6314 = and i64 %6312, %6313
  %6315 = xor i64 %6311, %6314
  %6316 = add i64 %6304, %6315
  store i64 %6316, i64* %14, align 8
  %6317 = load i64, i64* %11, align 8
  store i64 %6317, i64* %12, align 8
  %6318 = load i64, i64* %10, align 8
  store i64 %6318, i64* %11, align 8
  %6319 = load i64, i64* %9, align 8
  store i64 %6319, i64* %10, align 8
  %6320 = load i64, i64* %8, align 8
  %6321 = load i64, i64* %13, align 8
  %6322 = add i64 %6320, %6321
  store i64 %6322, i64* %9, align 8
  %6323 = load i64, i64* %7, align 8
  store i64 %6323, i64* %8, align 8
  %6324 = load i64, i64* %6, align 8
  store i64 %6324, i64* %7, align 8
  %6325 = load i64, i64* %5, align 8
  store i64 %6325, i64* %6, align 8
  %6326 = load i64, i64* %13, align 8
  %6327 = load i64, i64* %14, align 8
  %6328 = add i64 %6326, %6327
  store i64 %6328, i64* %5, align 8
  %6329 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6330 = load i64, i64* %6329, align 8
  %6331 = lshr i64 %6330, 19
  %6332 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6333 = load i64, i64* %6332, align 8
  %6334 = shl i64 %6333, 45
  %6335 = or i64 %6331, %6334
  %6336 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6337 = load i64, i64* %6336, align 8
  %6338 = lshr i64 %6337, 61
  %6339 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6340 = load i64, i64* %6339, align 8
  %6341 = shl i64 %6340, 3
  %6342 = or i64 %6338, %6341
  %6343 = xor i64 %6335, %6342
  %6344 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6345 = load i64, i64* %6344, align 8
  %6346 = lshr i64 %6345, 6
  %6347 = xor i64 %6343, %6346
  %6348 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %6349 = load i64, i64* %6348, align 16
  %6350 = add i64 %6347, %6349
  %6351 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6352 = load i64, i64* %6351, align 16
  %6353 = lshr i64 %6352, 1
  %6354 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6355 = load i64, i64* %6354, align 16
  %6356 = shl i64 %6355, 63
  %6357 = or i64 %6353, %6356
  %6358 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6359 = load i64, i64* %6358, align 16
  %6360 = lshr i64 %6359, 8
  %6361 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6362 = load i64, i64* %6361, align 16
  %6363 = shl i64 %6362, 56
  %6364 = or i64 %6360, %6363
  %6365 = xor i64 %6357, %6364
  %6366 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6367 = load i64, i64* %6366, align 16
  %6368 = lshr i64 %6367, 7
  %6369 = xor i64 %6365, %6368
  %6370 = add i64 %6350, %6369
  %6371 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 35
  %6372 = load i64, i64* %6371, align 8
  %6373 = add i64 %6370, %6372
  %6374 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  store i64 %6373, i64* %6374, align 8
  %6375 = load i64, i64* %12, align 8
  %6376 = load i64, i64* %9, align 8
  %6377 = lshr i64 %6376, 14
  %6378 = load i64, i64* %9, align 8
  %6379 = shl i64 %6378, 50
  %6380 = or i64 %6377, %6379
  %6381 = load i64, i64* %9, align 8
  %6382 = lshr i64 %6381, 18
  %6383 = load i64, i64* %9, align 8
  %6384 = shl i64 %6383, 46
  %6385 = or i64 %6382, %6384
  %6386 = xor i64 %6380, %6385
  %6387 = load i64, i64* %9, align 8
  %6388 = lshr i64 %6387, 41
  %6389 = load i64, i64* %9, align 8
  %6390 = shl i64 %6389, 23
  %6391 = or i64 %6388, %6390
  %6392 = xor i64 %6386, %6391
  %6393 = add i64 %6375, %6392
  %6394 = load i64, i64* %9, align 8
  %6395 = load i64, i64* %10, align 8
  %6396 = and i64 %6394, %6395
  %6397 = load i64, i64* %9, align 8
  %6398 = xor i64 %6397, -1
  %6399 = load i64, i64* %11, align 8
  %6400 = and i64 %6398, %6399
  %6401 = xor i64 %6396, %6400
  %6402 = add i64 %6393, %6401
  %6403 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 51), align 8
  %6404 = add i64 %6402, %6403
  %6405 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6406 = load i64, i64* %6405, align 8
  %6407 = add i64 %6404, %6406
  store i64 %6407, i64* %13, align 8
  %6408 = load i64, i64* %5, align 8
  %6409 = lshr i64 %6408, 28
  %6410 = load i64, i64* %5, align 8
  %6411 = shl i64 %6410, 36
  %6412 = or i64 %6409, %6411
  %6413 = load i64, i64* %5, align 8
  %6414 = lshr i64 %6413, 34
  %6415 = load i64, i64* %5, align 8
  %6416 = shl i64 %6415, 30
  %6417 = or i64 %6414, %6416
  %6418 = xor i64 %6412, %6417
  %6419 = load i64, i64* %5, align 8
  %6420 = lshr i64 %6419, 39
  %6421 = load i64, i64* %5, align 8
  %6422 = shl i64 %6421, 25
  %6423 = or i64 %6420, %6422
  %6424 = xor i64 %6418, %6423
  %6425 = load i64, i64* %5, align 8
  %6426 = load i64, i64* %6, align 8
  %6427 = and i64 %6425, %6426
  %6428 = load i64, i64* %5, align 8
  %6429 = load i64, i64* %7, align 8
  %6430 = and i64 %6428, %6429
  %6431 = xor i64 %6427, %6430
  %6432 = load i64, i64* %6, align 8
  %6433 = load i64, i64* %7, align 8
  %6434 = and i64 %6432, %6433
  %6435 = xor i64 %6431, %6434
  %6436 = add i64 %6424, %6435
  store i64 %6436, i64* %14, align 8
  %6437 = load i64, i64* %11, align 8
  store i64 %6437, i64* %12, align 8
  %6438 = load i64, i64* %10, align 8
  store i64 %6438, i64* %11, align 8
  %6439 = load i64, i64* %9, align 8
  store i64 %6439, i64* %10, align 8
  %6440 = load i64, i64* %8, align 8
  %6441 = load i64, i64* %13, align 8
  %6442 = add i64 %6440, %6441
  store i64 %6442, i64* %9, align 8
  %6443 = load i64, i64* %7, align 8
  store i64 %6443, i64* %8, align 8
  %6444 = load i64, i64* %6, align 8
  store i64 %6444, i64* %7, align 8
  %6445 = load i64, i64* %5, align 8
  store i64 %6445, i64* %6, align 8
  %6446 = load i64, i64* %13, align 8
  %6447 = load i64, i64* %14, align 8
  %6448 = add i64 %6446, %6447
  store i64 %6448, i64* %5, align 8
  %6449 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6450 = load i64, i64* %6449, align 16
  %6451 = lshr i64 %6450, 19
  %6452 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6453 = load i64, i64* %6452, align 16
  %6454 = shl i64 %6453, 45
  %6455 = or i64 %6451, %6454
  %6456 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6457 = load i64, i64* %6456, align 16
  %6458 = lshr i64 %6457, 61
  %6459 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6460 = load i64, i64* %6459, align 16
  %6461 = shl i64 %6460, 3
  %6462 = or i64 %6458, %6461
  %6463 = xor i64 %6455, %6462
  %6464 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %6465 = load i64, i64* %6464, align 16
  %6466 = lshr i64 %6465, 6
  %6467 = xor i64 %6463, %6466
  %6468 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %6469 = load i64, i64* %6468, align 8
  %6470 = add i64 %6467, %6469
  %6471 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6472 = load i64, i64* %6471, align 8
  %6473 = lshr i64 %6472, 1
  %6474 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6475 = load i64, i64* %6474, align 8
  %6476 = shl i64 %6475, 63
  %6477 = or i64 %6473, %6476
  %6478 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6479 = load i64, i64* %6478, align 8
  %6480 = lshr i64 %6479, 8
  %6481 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6482 = load i64, i64* %6481, align 8
  %6483 = shl i64 %6482, 56
  %6484 = or i64 %6480, %6483
  %6485 = xor i64 %6477, %6484
  %6486 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6487 = load i64, i64* %6486, align 8
  %6488 = lshr i64 %6487, 7
  %6489 = xor i64 %6485, %6488
  %6490 = add i64 %6470, %6489
  %6491 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 36
  %6492 = load i64, i64* %6491, align 16
  %6493 = add i64 %6490, %6492
  %6494 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  store i64 %6493, i64* %6494, align 16
  %6495 = load i64, i64* %12, align 8
  %6496 = load i64, i64* %9, align 8
  %6497 = lshr i64 %6496, 14
  %6498 = load i64, i64* %9, align 8
  %6499 = shl i64 %6498, 50
  %6500 = or i64 %6497, %6499
  %6501 = load i64, i64* %9, align 8
  %6502 = lshr i64 %6501, 18
  %6503 = load i64, i64* %9, align 8
  %6504 = shl i64 %6503, 46
  %6505 = or i64 %6502, %6504
  %6506 = xor i64 %6500, %6505
  %6507 = load i64, i64* %9, align 8
  %6508 = lshr i64 %6507, 41
  %6509 = load i64, i64* %9, align 8
  %6510 = shl i64 %6509, 23
  %6511 = or i64 %6508, %6510
  %6512 = xor i64 %6506, %6511
  %6513 = add i64 %6495, %6512
  %6514 = load i64, i64* %9, align 8
  %6515 = load i64, i64* %10, align 8
  %6516 = and i64 %6514, %6515
  %6517 = load i64, i64* %9, align 8
  %6518 = xor i64 %6517, -1
  %6519 = load i64, i64* %11, align 8
  %6520 = and i64 %6518, %6519
  %6521 = xor i64 %6516, %6520
  %6522 = add i64 %6513, %6521
  %6523 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 52), align 16
  %6524 = add i64 %6522, %6523
  %6525 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6526 = load i64, i64* %6525, align 16
  %6527 = add i64 %6524, %6526
  store i64 %6527, i64* %13, align 8
  %6528 = load i64, i64* %5, align 8
  %6529 = lshr i64 %6528, 28
  %6530 = load i64, i64* %5, align 8
  %6531 = shl i64 %6530, 36
  %6532 = or i64 %6529, %6531
  %6533 = load i64, i64* %5, align 8
  %6534 = lshr i64 %6533, 34
  %6535 = load i64, i64* %5, align 8
  %6536 = shl i64 %6535, 30
  %6537 = or i64 %6534, %6536
  %6538 = xor i64 %6532, %6537
  %6539 = load i64, i64* %5, align 8
  %6540 = lshr i64 %6539, 39
  %6541 = load i64, i64* %5, align 8
  %6542 = shl i64 %6541, 25
  %6543 = or i64 %6540, %6542
  %6544 = xor i64 %6538, %6543
  %6545 = load i64, i64* %5, align 8
  %6546 = load i64, i64* %6, align 8
  %6547 = and i64 %6545, %6546
  %6548 = load i64, i64* %5, align 8
  %6549 = load i64, i64* %7, align 8
  %6550 = and i64 %6548, %6549
  %6551 = xor i64 %6547, %6550
  %6552 = load i64, i64* %6, align 8
  %6553 = load i64, i64* %7, align 8
  %6554 = and i64 %6552, %6553
  %6555 = xor i64 %6551, %6554
  %6556 = add i64 %6544, %6555
  store i64 %6556, i64* %14, align 8
  %6557 = load i64, i64* %11, align 8
  store i64 %6557, i64* %12, align 8
  %6558 = load i64, i64* %10, align 8
  store i64 %6558, i64* %11, align 8
  %6559 = load i64, i64* %9, align 8
  store i64 %6559, i64* %10, align 8
  %6560 = load i64, i64* %8, align 8
  %6561 = load i64, i64* %13, align 8
  %6562 = add i64 %6560, %6561
  store i64 %6562, i64* %9, align 8
  %6563 = load i64, i64* %7, align 8
  store i64 %6563, i64* %8, align 8
  %6564 = load i64, i64* %6, align 8
  store i64 %6564, i64* %7, align 8
  %6565 = load i64, i64* %5, align 8
  store i64 %6565, i64* %6, align 8
  %6566 = load i64, i64* %13, align 8
  %6567 = load i64, i64* %14, align 8
  %6568 = add i64 %6566, %6567
  store i64 %6568, i64* %5, align 8
  %6569 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6570 = load i64, i64* %6569, align 8
  %6571 = lshr i64 %6570, 19
  %6572 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6573 = load i64, i64* %6572, align 8
  %6574 = shl i64 %6573, 45
  %6575 = or i64 %6571, %6574
  %6576 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6577 = load i64, i64* %6576, align 8
  %6578 = lshr i64 %6577, 61
  %6579 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6580 = load i64, i64* %6579, align 8
  %6581 = shl i64 %6580, 3
  %6582 = or i64 %6578, %6581
  %6583 = xor i64 %6575, %6582
  %6584 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %6585 = load i64, i64* %6584, align 8
  %6586 = lshr i64 %6585, 6
  %6587 = xor i64 %6583, %6586
  %6588 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %6589 = load i64, i64* %6588, align 16
  %6590 = add i64 %6587, %6589
  %6591 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6592 = load i64, i64* %6591, align 16
  %6593 = lshr i64 %6592, 1
  %6594 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6595 = load i64, i64* %6594, align 16
  %6596 = shl i64 %6595, 63
  %6597 = or i64 %6593, %6596
  %6598 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6599 = load i64, i64* %6598, align 16
  %6600 = lshr i64 %6599, 8
  %6601 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6602 = load i64, i64* %6601, align 16
  %6603 = shl i64 %6602, 56
  %6604 = or i64 %6600, %6603
  %6605 = xor i64 %6597, %6604
  %6606 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6607 = load i64, i64* %6606, align 16
  %6608 = lshr i64 %6607, 7
  %6609 = xor i64 %6605, %6608
  %6610 = add i64 %6590, %6609
  %6611 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 37
  %6612 = load i64, i64* %6611, align 8
  %6613 = add i64 %6610, %6612
  %6614 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  store i64 %6613, i64* %6614, align 8
  %6615 = load i64, i64* %12, align 8
  %6616 = load i64, i64* %9, align 8
  %6617 = lshr i64 %6616, 14
  %6618 = load i64, i64* %9, align 8
  %6619 = shl i64 %6618, 50
  %6620 = or i64 %6617, %6619
  %6621 = load i64, i64* %9, align 8
  %6622 = lshr i64 %6621, 18
  %6623 = load i64, i64* %9, align 8
  %6624 = shl i64 %6623, 46
  %6625 = or i64 %6622, %6624
  %6626 = xor i64 %6620, %6625
  %6627 = load i64, i64* %9, align 8
  %6628 = lshr i64 %6627, 41
  %6629 = load i64, i64* %9, align 8
  %6630 = shl i64 %6629, 23
  %6631 = or i64 %6628, %6630
  %6632 = xor i64 %6626, %6631
  %6633 = add i64 %6615, %6632
  %6634 = load i64, i64* %9, align 8
  %6635 = load i64, i64* %10, align 8
  %6636 = and i64 %6634, %6635
  %6637 = load i64, i64* %9, align 8
  %6638 = xor i64 %6637, -1
  %6639 = load i64, i64* %11, align 8
  %6640 = and i64 %6638, %6639
  %6641 = xor i64 %6636, %6640
  %6642 = add i64 %6633, %6641
  %6643 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 53), align 8
  %6644 = add i64 %6642, %6643
  %6645 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6646 = load i64, i64* %6645, align 8
  %6647 = add i64 %6644, %6646
  store i64 %6647, i64* %13, align 8
  %6648 = load i64, i64* %5, align 8
  %6649 = lshr i64 %6648, 28
  %6650 = load i64, i64* %5, align 8
  %6651 = shl i64 %6650, 36
  %6652 = or i64 %6649, %6651
  %6653 = load i64, i64* %5, align 8
  %6654 = lshr i64 %6653, 34
  %6655 = load i64, i64* %5, align 8
  %6656 = shl i64 %6655, 30
  %6657 = or i64 %6654, %6656
  %6658 = xor i64 %6652, %6657
  %6659 = load i64, i64* %5, align 8
  %6660 = lshr i64 %6659, 39
  %6661 = load i64, i64* %5, align 8
  %6662 = shl i64 %6661, 25
  %6663 = or i64 %6660, %6662
  %6664 = xor i64 %6658, %6663
  %6665 = load i64, i64* %5, align 8
  %6666 = load i64, i64* %6, align 8
  %6667 = and i64 %6665, %6666
  %6668 = load i64, i64* %5, align 8
  %6669 = load i64, i64* %7, align 8
  %6670 = and i64 %6668, %6669
  %6671 = xor i64 %6667, %6670
  %6672 = load i64, i64* %6, align 8
  %6673 = load i64, i64* %7, align 8
  %6674 = and i64 %6672, %6673
  %6675 = xor i64 %6671, %6674
  %6676 = add i64 %6664, %6675
  store i64 %6676, i64* %14, align 8
  %6677 = load i64, i64* %11, align 8
  store i64 %6677, i64* %12, align 8
  %6678 = load i64, i64* %10, align 8
  store i64 %6678, i64* %11, align 8
  %6679 = load i64, i64* %9, align 8
  store i64 %6679, i64* %10, align 8
  %6680 = load i64, i64* %8, align 8
  %6681 = load i64, i64* %13, align 8
  %6682 = add i64 %6680, %6681
  store i64 %6682, i64* %9, align 8
  %6683 = load i64, i64* %7, align 8
  store i64 %6683, i64* %8, align 8
  %6684 = load i64, i64* %6, align 8
  store i64 %6684, i64* %7, align 8
  %6685 = load i64, i64* %5, align 8
  store i64 %6685, i64* %6, align 8
  %6686 = load i64, i64* %13, align 8
  %6687 = load i64, i64* %14, align 8
  %6688 = add i64 %6686, %6687
  store i64 %6688, i64* %5, align 8
  %6689 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6690 = load i64, i64* %6689, align 16
  %6691 = lshr i64 %6690, 19
  %6692 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6693 = load i64, i64* %6692, align 16
  %6694 = shl i64 %6693, 45
  %6695 = or i64 %6691, %6694
  %6696 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6697 = load i64, i64* %6696, align 16
  %6698 = lshr i64 %6697, 61
  %6699 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6700 = load i64, i64* %6699, align 16
  %6701 = shl i64 %6700, 3
  %6702 = or i64 %6698, %6701
  %6703 = xor i64 %6695, %6702
  %6704 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %6705 = load i64, i64* %6704, align 16
  %6706 = lshr i64 %6705, 6
  %6707 = xor i64 %6703, %6706
  %6708 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %6709 = load i64, i64* %6708, align 8
  %6710 = add i64 %6707, %6709
  %6711 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6712 = load i64, i64* %6711, align 8
  %6713 = lshr i64 %6712, 1
  %6714 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6715 = load i64, i64* %6714, align 8
  %6716 = shl i64 %6715, 63
  %6717 = or i64 %6713, %6716
  %6718 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6719 = load i64, i64* %6718, align 8
  %6720 = lshr i64 %6719, 8
  %6721 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6722 = load i64, i64* %6721, align 8
  %6723 = shl i64 %6722, 56
  %6724 = or i64 %6720, %6723
  %6725 = xor i64 %6717, %6724
  %6726 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6727 = load i64, i64* %6726, align 8
  %6728 = lshr i64 %6727, 7
  %6729 = xor i64 %6725, %6728
  %6730 = add i64 %6710, %6729
  %6731 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 38
  %6732 = load i64, i64* %6731, align 16
  %6733 = add i64 %6730, %6732
  %6734 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  store i64 %6733, i64* %6734, align 16
  %6735 = load i64, i64* %12, align 8
  %6736 = load i64, i64* %9, align 8
  %6737 = lshr i64 %6736, 14
  %6738 = load i64, i64* %9, align 8
  %6739 = shl i64 %6738, 50
  %6740 = or i64 %6737, %6739
  %6741 = load i64, i64* %9, align 8
  %6742 = lshr i64 %6741, 18
  %6743 = load i64, i64* %9, align 8
  %6744 = shl i64 %6743, 46
  %6745 = or i64 %6742, %6744
  %6746 = xor i64 %6740, %6745
  %6747 = load i64, i64* %9, align 8
  %6748 = lshr i64 %6747, 41
  %6749 = load i64, i64* %9, align 8
  %6750 = shl i64 %6749, 23
  %6751 = or i64 %6748, %6750
  %6752 = xor i64 %6746, %6751
  %6753 = add i64 %6735, %6752
  %6754 = load i64, i64* %9, align 8
  %6755 = load i64, i64* %10, align 8
  %6756 = and i64 %6754, %6755
  %6757 = load i64, i64* %9, align 8
  %6758 = xor i64 %6757, -1
  %6759 = load i64, i64* %11, align 8
  %6760 = and i64 %6758, %6759
  %6761 = xor i64 %6756, %6760
  %6762 = add i64 %6753, %6761
  %6763 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 54), align 16
  %6764 = add i64 %6762, %6763
  %6765 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6766 = load i64, i64* %6765, align 16
  %6767 = add i64 %6764, %6766
  store i64 %6767, i64* %13, align 8
  %6768 = load i64, i64* %5, align 8
  %6769 = lshr i64 %6768, 28
  %6770 = load i64, i64* %5, align 8
  %6771 = shl i64 %6770, 36
  %6772 = or i64 %6769, %6771
  %6773 = load i64, i64* %5, align 8
  %6774 = lshr i64 %6773, 34
  %6775 = load i64, i64* %5, align 8
  %6776 = shl i64 %6775, 30
  %6777 = or i64 %6774, %6776
  %6778 = xor i64 %6772, %6777
  %6779 = load i64, i64* %5, align 8
  %6780 = lshr i64 %6779, 39
  %6781 = load i64, i64* %5, align 8
  %6782 = shl i64 %6781, 25
  %6783 = or i64 %6780, %6782
  %6784 = xor i64 %6778, %6783
  %6785 = load i64, i64* %5, align 8
  %6786 = load i64, i64* %6, align 8
  %6787 = and i64 %6785, %6786
  %6788 = load i64, i64* %5, align 8
  %6789 = load i64, i64* %7, align 8
  %6790 = and i64 %6788, %6789
  %6791 = xor i64 %6787, %6790
  %6792 = load i64, i64* %6, align 8
  %6793 = load i64, i64* %7, align 8
  %6794 = and i64 %6792, %6793
  %6795 = xor i64 %6791, %6794
  %6796 = add i64 %6784, %6795
  store i64 %6796, i64* %14, align 8
  %6797 = load i64, i64* %11, align 8
  store i64 %6797, i64* %12, align 8
  %6798 = load i64, i64* %10, align 8
  store i64 %6798, i64* %11, align 8
  %6799 = load i64, i64* %9, align 8
  store i64 %6799, i64* %10, align 8
  %6800 = load i64, i64* %8, align 8
  %6801 = load i64, i64* %13, align 8
  %6802 = add i64 %6800, %6801
  store i64 %6802, i64* %9, align 8
  %6803 = load i64, i64* %7, align 8
  store i64 %6803, i64* %8, align 8
  %6804 = load i64, i64* %6, align 8
  store i64 %6804, i64* %7, align 8
  %6805 = load i64, i64* %5, align 8
  store i64 %6805, i64* %6, align 8
  %6806 = load i64, i64* %13, align 8
  %6807 = load i64, i64* %14, align 8
  %6808 = add i64 %6806, %6807
  store i64 %6808, i64* %5, align 8
  %6809 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6810 = load i64, i64* %6809, align 8
  %6811 = lshr i64 %6810, 19
  %6812 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6813 = load i64, i64* %6812, align 8
  %6814 = shl i64 %6813, 45
  %6815 = or i64 %6811, %6814
  %6816 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6817 = load i64, i64* %6816, align 8
  %6818 = lshr i64 %6817, 61
  %6819 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6820 = load i64, i64* %6819, align 8
  %6821 = shl i64 %6820, 3
  %6822 = or i64 %6818, %6821
  %6823 = xor i64 %6815, %6822
  %6824 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %6825 = load i64, i64* %6824, align 8
  %6826 = lshr i64 %6825, 6
  %6827 = xor i64 %6823, %6826
  %6828 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %6829 = load i64, i64* %6828, align 16
  %6830 = add i64 %6827, %6829
  %6831 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6832 = load i64, i64* %6831, align 16
  %6833 = lshr i64 %6832, 1
  %6834 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6835 = load i64, i64* %6834, align 16
  %6836 = shl i64 %6835, 63
  %6837 = or i64 %6833, %6836
  %6838 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6839 = load i64, i64* %6838, align 16
  %6840 = lshr i64 %6839, 8
  %6841 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6842 = load i64, i64* %6841, align 16
  %6843 = shl i64 %6842, 56
  %6844 = or i64 %6840, %6843
  %6845 = xor i64 %6837, %6844
  %6846 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6847 = load i64, i64* %6846, align 16
  %6848 = lshr i64 %6847, 7
  %6849 = xor i64 %6845, %6848
  %6850 = add i64 %6830, %6849
  %6851 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 39
  %6852 = load i64, i64* %6851, align 8
  %6853 = add i64 %6850, %6852
  %6854 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  store i64 %6853, i64* %6854, align 8
  %6855 = load i64, i64* %12, align 8
  %6856 = load i64, i64* %9, align 8
  %6857 = lshr i64 %6856, 14
  %6858 = load i64, i64* %9, align 8
  %6859 = shl i64 %6858, 50
  %6860 = or i64 %6857, %6859
  %6861 = load i64, i64* %9, align 8
  %6862 = lshr i64 %6861, 18
  %6863 = load i64, i64* %9, align 8
  %6864 = shl i64 %6863, 46
  %6865 = or i64 %6862, %6864
  %6866 = xor i64 %6860, %6865
  %6867 = load i64, i64* %9, align 8
  %6868 = lshr i64 %6867, 41
  %6869 = load i64, i64* %9, align 8
  %6870 = shl i64 %6869, 23
  %6871 = or i64 %6868, %6870
  %6872 = xor i64 %6866, %6871
  %6873 = add i64 %6855, %6872
  %6874 = load i64, i64* %9, align 8
  %6875 = load i64, i64* %10, align 8
  %6876 = and i64 %6874, %6875
  %6877 = load i64, i64* %9, align 8
  %6878 = xor i64 %6877, -1
  %6879 = load i64, i64* %11, align 8
  %6880 = and i64 %6878, %6879
  %6881 = xor i64 %6876, %6880
  %6882 = add i64 %6873, %6881
  %6883 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 55), align 8
  %6884 = add i64 %6882, %6883
  %6885 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %6886 = load i64, i64* %6885, align 8
  %6887 = add i64 %6884, %6886
  store i64 %6887, i64* %13, align 8
  %6888 = load i64, i64* %5, align 8
  %6889 = lshr i64 %6888, 28
  %6890 = load i64, i64* %5, align 8
  %6891 = shl i64 %6890, 36
  %6892 = or i64 %6889, %6891
  %6893 = load i64, i64* %5, align 8
  %6894 = lshr i64 %6893, 34
  %6895 = load i64, i64* %5, align 8
  %6896 = shl i64 %6895, 30
  %6897 = or i64 %6894, %6896
  %6898 = xor i64 %6892, %6897
  %6899 = load i64, i64* %5, align 8
  %6900 = lshr i64 %6899, 39
  %6901 = load i64, i64* %5, align 8
  %6902 = shl i64 %6901, 25
  %6903 = or i64 %6900, %6902
  %6904 = xor i64 %6898, %6903
  %6905 = load i64, i64* %5, align 8
  %6906 = load i64, i64* %6, align 8
  %6907 = and i64 %6905, %6906
  %6908 = load i64, i64* %5, align 8
  %6909 = load i64, i64* %7, align 8
  %6910 = and i64 %6908, %6909
  %6911 = xor i64 %6907, %6910
  %6912 = load i64, i64* %6, align 8
  %6913 = load i64, i64* %7, align 8
  %6914 = and i64 %6912, %6913
  %6915 = xor i64 %6911, %6914
  %6916 = add i64 %6904, %6915
  store i64 %6916, i64* %14, align 8
  %6917 = load i64, i64* %11, align 8
  store i64 %6917, i64* %12, align 8
  %6918 = load i64, i64* %10, align 8
  store i64 %6918, i64* %11, align 8
  %6919 = load i64, i64* %9, align 8
  store i64 %6919, i64* %10, align 8
  %6920 = load i64, i64* %8, align 8
  %6921 = load i64, i64* %13, align 8
  %6922 = add i64 %6920, %6921
  store i64 %6922, i64* %9, align 8
  %6923 = load i64, i64* %7, align 8
  store i64 %6923, i64* %8, align 8
  %6924 = load i64, i64* %6, align 8
  store i64 %6924, i64* %7, align 8
  %6925 = load i64, i64* %5, align 8
  store i64 %6925, i64* %6, align 8
  %6926 = load i64, i64* %13, align 8
  %6927 = load i64, i64* %14, align 8
  %6928 = add i64 %6926, %6927
  store i64 %6928, i64* %5, align 8
  %6929 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6930 = load i64, i64* %6929, align 16
  %6931 = lshr i64 %6930, 19
  %6932 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6933 = load i64, i64* %6932, align 16
  %6934 = shl i64 %6933, 45
  %6935 = or i64 %6931, %6934
  %6936 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6937 = load i64, i64* %6936, align 16
  %6938 = lshr i64 %6937, 61
  %6939 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6940 = load i64, i64* %6939, align 16
  %6941 = shl i64 %6940, 3
  %6942 = or i64 %6938, %6941
  %6943 = xor i64 %6935, %6942
  %6944 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %6945 = load i64, i64* %6944, align 16
  %6946 = lshr i64 %6945, 6
  %6947 = xor i64 %6943, %6946
  %6948 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %6949 = load i64, i64* %6948, align 8
  %6950 = add i64 %6947, %6949
  %6951 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %6952 = load i64, i64* %6951, align 8
  %6953 = lshr i64 %6952, 1
  %6954 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %6955 = load i64, i64* %6954, align 8
  %6956 = shl i64 %6955, 63
  %6957 = or i64 %6953, %6956
  %6958 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %6959 = load i64, i64* %6958, align 8
  %6960 = lshr i64 %6959, 8
  %6961 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %6962 = load i64, i64* %6961, align 8
  %6963 = shl i64 %6962, 56
  %6964 = or i64 %6960, %6963
  %6965 = xor i64 %6957, %6964
  %6966 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %6967 = load i64, i64* %6966, align 8
  %6968 = lshr i64 %6967, 7
  %6969 = xor i64 %6965, %6968
  %6970 = add i64 %6950, %6969
  %6971 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 40
  %6972 = load i64, i64* %6971, align 16
  %6973 = add i64 %6970, %6972
  %6974 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  store i64 %6973, i64* %6974, align 16
  %6975 = load i64, i64* %12, align 8
  %6976 = load i64, i64* %9, align 8
  %6977 = lshr i64 %6976, 14
  %6978 = load i64, i64* %9, align 8
  %6979 = shl i64 %6978, 50
  %6980 = or i64 %6977, %6979
  %6981 = load i64, i64* %9, align 8
  %6982 = lshr i64 %6981, 18
  %6983 = load i64, i64* %9, align 8
  %6984 = shl i64 %6983, 46
  %6985 = or i64 %6982, %6984
  %6986 = xor i64 %6980, %6985
  %6987 = load i64, i64* %9, align 8
  %6988 = lshr i64 %6987, 41
  %6989 = load i64, i64* %9, align 8
  %6990 = shl i64 %6989, 23
  %6991 = or i64 %6988, %6990
  %6992 = xor i64 %6986, %6991
  %6993 = add i64 %6975, %6992
  %6994 = load i64, i64* %9, align 8
  %6995 = load i64, i64* %10, align 8
  %6996 = and i64 %6994, %6995
  %6997 = load i64, i64* %9, align 8
  %6998 = xor i64 %6997, -1
  %6999 = load i64, i64* %11, align 8
  %7000 = and i64 %6998, %6999
  %7001 = xor i64 %6996, %7000
  %7002 = add i64 %6993, %7001
  %7003 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 56), align 16
  %7004 = add i64 %7002, %7003
  %7005 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7006 = load i64, i64* %7005, align 16
  %7007 = add i64 %7004, %7006
  store i64 %7007, i64* %13, align 8
  %7008 = load i64, i64* %5, align 8
  %7009 = lshr i64 %7008, 28
  %7010 = load i64, i64* %5, align 8
  %7011 = shl i64 %7010, 36
  %7012 = or i64 %7009, %7011
  %7013 = load i64, i64* %5, align 8
  %7014 = lshr i64 %7013, 34
  %7015 = load i64, i64* %5, align 8
  %7016 = shl i64 %7015, 30
  %7017 = or i64 %7014, %7016
  %7018 = xor i64 %7012, %7017
  %7019 = load i64, i64* %5, align 8
  %7020 = lshr i64 %7019, 39
  %7021 = load i64, i64* %5, align 8
  %7022 = shl i64 %7021, 25
  %7023 = or i64 %7020, %7022
  %7024 = xor i64 %7018, %7023
  %7025 = load i64, i64* %5, align 8
  %7026 = load i64, i64* %6, align 8
  %7027 = and i64 %7025, %7026
  %7028 = load i64, i64* %5, align 8
  %7029 = load i64, i64* %7, align 8
  %7030 = and i64 %7028, %7029
  %7031 = xor i64 %7027, %7030
  %7032 = load i64, i64* %6, align 8
  %7033 = load i64, i64* %7, align 8
  %7034 = and i64 %7032, %7033
  %7035 = xor i64 %7031, %7034
  %7036 = add i64 %7024, %7035
  store i64 %7036, i64* %14, align 8
  %7037 = load i64, i64* %11, align 8
  store i64 %7037, i64* %12, align 8
  %7038 = load i64, i64* %10, align 8
  store i64 %7038, i64* %11, align 8
  %7039 = load i64, i64* %9, align 8
  store i64 %7039, i64* %10, align 8
  %7040 = load i64, i64* %8, align 8
  %7041 = load i64, i64* %13, align 8
  %7042 = add i64 %7040, %7041
  store i64 %7042, i64* %9, align 8
  %7043 = load i64, i64* %7, align 8
  store i64 %7043, i64* %8, align 8
  %7044 = load i64, i64* %6, align 8
  store i64 %7044, i64* %7, align 8
  %7045 = load i64, i64* %5, align 8
  store i64 %7045, i64* %6, align 8
  %7046 = load i64, i64* %13, align 8
  %7047 = load i64, i64* %14, align 8
  %7048 = add i64 %7046, %7047
  store i64 %7048, i64* %5, align 8
  %7049 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7050 = load i64, i64* %7049, align 8
  %7051 = lshr i64 %7050, 19
  %7052 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7053 = load i64, i64* %7052, align 8
  %7054 = shl i64 %7053, 45
  %7055 = or i64 %7051, %7054
  %7056 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7057 = load i64, i64* %7056, align 8
  %7058 = lshr i64 %7057, 61
  %7059 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7060 = load i64, i64* %7059, align 8
  %7061 = shl i64 %7060, 3
  %7062 = or i64 %7058, %7061
  %7063 = xor i64 %7055, %7062
  %7064 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7065 = load i64, i64* %7064, align 8
  %7066 = lshr i64 %7065, 6
  %7067 = xor i64 %7063, %7066
  %7068 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %7069 = load i64, i64* %7068, align 16
  %7070 = add i64 %7067, %7069
  %7071 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7072 = load i64, i64* %7071, align 16
  %7073 = lshr i64 %7072, 1
  %7074 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7075 = load i64, i64* %7074, align 16
  %7076 = shl i64 %7075, 63
  %7077 = or i64 %7073, %7076
  %7078 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7079 = load i64, i64* %7078, align 16
  %7080 = lshr i64 %7079, 8
  %7081 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7082 = load i64, i64* %7081, align 16
  %7083 = shl i64 %7082, 56
  %7084 = or i64 %7080, %7083
  %7085 = xor i64 %7077, %7084
  %7086 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7087 = load i64, i64* %7086, align 16
  %7088 = lshr i64 %7087, 7
  %7089 = xor i64 %7085, %7088
  %7090 = add i64 %7070, %7089
  %7091 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 41
  %7092 = load i64, i64* %7091, align 8
  %7093 = add i64 %7090, %7092
  %7094 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  store i64 %7093, i64* %7094, align 8
  %7095 = load i64, i64* %12, align 8
  %7096 = load i64, i64* %9, align 8
  %7097 = lshr i64 %7096, 14
  %7098 = load i64, i64* %9, align 8
  %7099 = shl i64 %7098, 50
  %7100 = or i64 %7097, %7099
  %7101 = load i64, i64* %9, align 8
  %7102 = lshr i64 %7101, 18
  %7103 = load i64, i64* %9, align 8
  %7104 = shl i64 %7103, 46
  %7105 = or i64 %7102, %7104
  %7106 = xor i64 %7100, %7105
  %7107 = load i64, i64* %9, align 8
  %7108 = lshr i64 %7107, 41
  %7109 = load i64, i64* %9, align 8
  %7110 = shl i64 %7109, 23
  %7111 = or i64 %7108, %7110
  %7112 = xor i64 %7106, %7111
  %7113 = add i64 %7095, %7112
  %7114 = load i64, i64* %9, align 8
  %7115 = load i64, i64* %10, align 8
  %7116 = and i64 %7114, %7115
  %7117 = load i64, i64* %9, align 8
  %7118 = xor i64 %7117, -1
  %7119 = load i64, i64* %11, align 8
  %7120 = and i64 %7118, %7119
  %7121 = xor i64 %7116, %7120
  %7122 = add i64 %7113, %7121
  %7123 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 57), align 8
  %7124 = add i64 %7122, %7123
  %7125 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7126 = load i64, i64* %7125, align 8
  %7127 = add i64 %7124, %7126
  store i64 %7127, i64* %13, align 8
  %7128 = load i64, i64* %5, align 8
  %7129 = lshr i64 %7128, 28
  %7130 = load i64, i64* %5, align 8
  %7131 = shl i64 %7130, 36
  %7132 = or i64 %7129, %7131
  %7133 = load i64, i64* %5, align 8
  %7134 = lshr i64 %7133, 34
  %7135 = load i64, i64* %5, align 8
  %7136 = shl i64 %7135, 30
  %7137 = or i64 %7134, %7136
  %7138 = xor i64 %7132, %7137
  %7139 = load i64, i64* %5, align 8
  %7140 = lshr i64 %7139, 39
  %7141 = load i64, i64* %5, align 8
  %7142 = shl i64 %7141, 25
  %7143 = or i64 %7140, %7142
  %7144 = xor i64 %7138, %7143
  %7145 = load i64, i64* %5, align 8
  %7146 = load i64, i64* %6, align 8
  %7147 = and i64 %7145, %7146
  %7148 = load i64, i64* %5, align 8
  %7149 = load i64, i64* %7, align 8
  %7150 = and i64 %7148, %7149
  %7151 = xor i64 %7147, %7150
  %7152 = load i64, i64* %6, align 8
  %7153 = load i64, i64* %7, align 8
  %7154 = and i64 %7152, %7153
  %7155 = xor i64 %7151, %7154
  %7156 = add i64 %7144, %7155
  store i64 %7156, i64* %14, align 8
  %7157 = load i64, i64* %11, align 8
  store i64 %7157, i64* %12, align 8
  %7158 = load i64, i64* %10, align 8
  store i64 %7158, i64* %11, align 8
  %7159 = load i64, i64* %9, align 8
  store i64 %7159, i64* %10, align 8
  %7160 = load i64, i64* %8, align 8
  %7161 = load i64, i64* %13, align 8
  %7162 = add i64 %7160, %7161
  store i64 %7162, i64* %9, align 8
  %7163 = load i64, i64* %7, align 8
  store i64 %7163, i64* %8, align 8
  %7164 = load i64, i64* %6, align 8
  store i64 %7164, i64* %7, align 8
  %7165 = load i64, i64* %5, align 8
  store i64 %7165, i64* %6, align 8
  %7166 = load i64, i64* %13, align 8
  %7167 = load i64, i64* %14, align 8
  %7168 = add i64 %7166, %7167
  store i64 %7168, i64* %5, align 8
  %7169 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7170 = load i64, i64* %7169, align 16
  %7171 = lshr i64 %7170, 19
  %7172 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7173 = load i64, i64* %7172, align 16
  %7174 = shl i64 %7173, 45
  %7175 = or i64 %7171, %7174
  %7176 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7177 = load i64, i64* %7176, align 16
  %7178 = lshr i64 %7177, 61
  %7179 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7180 = load i64, i64* %7179, align 16
  %7181 = shl i64 %7180, 3
  %7182 = or i64 %7178, %7181
  %7183 = xor i64 %7175, %7182
  %7184 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7185 = load i64, i64* %7184, align 16
  %7186 = lshr i64 %7185, 6
  %7187 = xor i64 %7183, %7186
  %7188 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %7189 = load i64, i64* %7188, align 8
  %7190 = add i64 %7187, %7189
  %7191 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7192 = load i64, i64* %7191, align 8
  %7193 = lshr i64 %7192, 1
  %7194 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7195 = load i64, i64* %7194, align 8
  %7196 = shl i64 %7195, 63
  %7197 = or i64 %7193, %7196
  %7198 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7199 = load i64, i64* %7198, align 8
  %7200 = lshr i64 %7199, 8
  %7201 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7202 = load i64, i64* %7201, align 8
  %7203 = shl i64 %7202, 56
  %7204 = or i64 %7200, %7203
  %7205 = xor i64 %7197, %7204
  %7206 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7207 = load i64, i64* %7206, align 8
  %7208 = lshr i64 %7207, 7
  %7209 = xor i64 %7205, %7208
  %7210 = add i64 %7190, %7209
  %7211 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 42
  %7212 = load i64, i64* %7211, align 16
  %7213 = add i64 %7210, %7212
  %7214 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  store i64 %7213, i64* %7214, align 16
  %7215 = load i64, i64* %12, align 8
  %7216 = load i64, i64* %9, align 8
  %7217 = lshr i64 %7216, 14
  %7218 = load i64, i64* %9, align 8
  %7219 = shl i64 %7218, 50
  %7220 = or i64 %7217, %7219
  %7221 = load i64, i64* %9, align 8
  %7222 = lshr i64 %7221, 18
  %7223 = load i64, i64* %9, align 8
  %7224 = shl i64 %7223, 46
  %7225 = or i64 %7222, %7224
  %7226 = xor i64 %7220, %7225
  %7227 = load i64, i64* %9, align 8
  %7228 = lshr i64 %7227, 41
  %7229 = load i64, i64* %9, align 8
  %7230 = shl i64 %7229, 23
  %7231 = or i64 %7228, %7230
  %7232 = xor i64 %7226, %7231
  %7233 = add i64 %7215, %7232
  %7234 = load i64, i64* %9, align 8
  %7235 = load i64, i64* %10, align 8
  %7236 = and i64 %7234, %7235
  %7237 = load i64, i64* %9, align 8
  %7238 = xor i64 %7237, -1
  %7239 = load i64, i64* %11, align 8
  %7240 = and i64 %7238, %7239
  %7241 = xor i64 %7236, %7240
  %7242 = add i64 %7233, %7241
  %7243 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 58), align 16
  %7244 = add i64 %7242, %7243
  %7245 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7246 = load i64, i64* %7245, align 16
  %7247 = add i64 %7244, %7246
  store i64 %7247, i64* %13, align 8
  %7248 = load i64, i64* %5, align 8
  %7249 = lshr i64 %7248, 28
  %7250 = load i64, i64* %5, align 8
  %7251 = shl i64 %7250, 36
  %7252 = or i64 %7249, %7251
  %7253 = load i64, i64* %5, align 8
  %7254 = lshr i64 %7253, 34
  %7255 = load i64, i64* %5, align 8
  %7256 = shl i64 %7255, 30
  %7257 = or i64 %7254, %7256
  %7258 = xor i64 %7252, %7257
  %7259 = load i64, i64* %5, align 8
  %7260 = lshr i64 %7259, 39
  %7261 = load i64, i64* %5, align 8
  %7262 = shl i64 %7261, 25
  %7263 = or i64 %7260, %7262
  %7264 = xor i64 %7258, %7263
  %7265 = load i64, i64* %5, align 8
  %7266 = load i64, i64* %6, align 8
  %7267 = and i64 %7265, %7266
  %7268 = load i64, i64* %5, align 8
  %7269 = load i64, i64* %7, align 8
  %7270 = and i64 %7268, %7269
  %7271 = xor i64 %7267, %7270
  %7272 = load i64, i64* %6, align 8
  %7273 = load i64, i64* %7, align 8
  %7274 = and i64 %7272, %7273
  %7275 = xor i64 %7271, %7274
  %7276 = add i64 %7264, %7275
  store i64 %7276, i64* %14, align 8
  %7277 = load i64, i64* %11, align 8
  store i64 %7277, i64* %12, align 8
  %7278 = load i64, i64* %10, align 8
  store i64 %7278, i64* %11, align 8
  %7279 = load i64, i64* %9, align 8
  store i64 %7279, i64* %10, align 8
  %7280 = load i64, i64* %8, align 8
  %7281 = load i64, i64* %13, align 8
  %7282 = add i64 %7280, %7281
  store i64 %7282, i64* %9, align 8
  %7283 = load i64, i64* %7, align 8
  store i64 %7283, i64* %8, align 8
  %7284 = load i64, i64* %6, align 8
  store i64 %7284, i64* %7, align 8
  %7285 = load i64, i64* %5, align 8
  store i64 %7285, i64* %6, align 8
  %7286 = load i64, i64* %13, align 8
  %7287 = load i64, i64* %14, align 8
  %7288 = add i64 %7286, %7287
  store i64 %7288, i64* %5, align 8
  %7289 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7290 = load i64, i64* %7289, align 8
  %7291 = lshr i64 %7290, 19
  %7292 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7293 = load i64, i64* %7292, align 8
  %7294 = shl i64 %7293, 45
  %7295 = or i64 %7291, %7294
  %7296 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7297 = load i64, i64* %7296, align 8
  %7298 = lshr i64 %7297, 61
  %7299 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7300 = load i64, i64* %7299, align 8
  %7301 = shl i64 %7300, 3
  %7302 = or i64 %7298, %7301
  %7303 = xor i64 %7295, %7302
  %7304 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7305 = load i64, i64* %7304, align 8
  %7306 = lshr i64 %7305, 6
  %7307 = xor i64 %7303, %7306
  %7308 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %7309 = load i64, i64* %7308, align 16
  %7310 = add i64 %7307, %7309
  %7311 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7312 = load i64, i64* %7311, align 16
  %7313 = lshr i64 %7312, 1
  %7314 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7315 = load i64, i64* %7314, align 16
  %7316 = shl i64 %7315, 63
  %7317 = or i64 %7313, %7316
  %7318 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7319 = load i64, i64* %7318, align 16
  %7320 = lshr i64 %7319, 8
  %7321 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7322 = load i64, i64* %7321, align 16
  %7323 = shl i64 %7322, 56
  %7324 = or i64 %7320, %7323
  %7325 = xor i64 %7317, %7324
  %7326 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7327 = load i64, i64* %7326, align 16
  %7328 = lshr i64 %7327, 7
  %7329 = xor i64 %7325, %7328
  %7330 = add i64 %7310, %7329
  %7331 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 43
  %7332 = load i64, i64* %7331, align 8
  %7333 = add i64 %7330, %7332
  %7334 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  store i64 %7333, i64* %7334, align 8
  %7335 = load i64, i64* %12, align 8
  %7336 = load i64, i64* %9, align 8
  %7337 = lshr i64 %7336, 14
  %7338 = load i64, i64* %9, align 8
  %7339 = shl i64 %7338, 50
  %7340 = or i64 %7337, %7339
  %7341 = load i64, i64* %9, align 8
  %7342 = lshr i64 %7341, 18
  %7343 = load i64, i64* %9, align 8
  %7344 = shl i64 %7343, 46
  %7345 = or i64 %7342, %7344
  %7346 = xor i64 %7340, %7345
  %7347 = load i64, i64* %9, align 8
  %7348 = lshr i64 %7347, 41
  %7349 = load i64, i64* %9, align 8
  %7350 = shl i64 %7349, 23
  %7351 = or i64 %7348, %7350
  %7352 = xor i64 %7346, %7351
  %7353 = add i64 %7335, %7352
  %7354 = load i64, i64* %9, align 8
  %7355 = load i64, i64* %10, align 8
  %7356 = and i64 %7354, %7355
  %7357 = load i64, i64* %9, align 8
  %7358 = xor i64 %7357, -1
  %7359 = load i64, i64* %11, align 8
  %7360 = and i64 %7358, %7359
  %7361 = xor i64 %7356, %7360
  %7362 = add i64 %7353, %7361
  %7363 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 59), align 8
  %7364 = add i64 %7362, %7363
  %7365 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7366 = load i64, i64* %7365, align 8
  %7367 = add i64 %7364, %7366
  store i64 %7367, i64* %13, align 8
  %7368 = load i64, i64* %5, align 8
  %7369 = lshr i64 %7368, 28
  %7370 = load i64, i64* %5, align 8
  %7371 = shl i64 %7370, 36
  %7372 = or i64 %7369, %7371
  %7373 = load i64, i64* %5, align 8
  %7374 = lshr i64 %7373, 34
  %7375 = load i64, i64* %5, align 8
  %7376 = shl i64 %7375, 30
  %7377 = or i64 %7374, %7376
  %7378 = xor i64 %7372, %7377
  %7379 = load i64, i64* %5, align 8
  %7380 = lshr i64 %7379, 39
  %7381 = load i64, i64* %5, align 8
  %7382 = shl i64 %7381, 25
  %7383 = or i64 %7380, %7382
  %7384 = xor i64 %7378, %7383
  %7385 = load i64, i64* %5, align 8
  %7386 = load i64, i64* %6, align 8
  %7387 = and i64 %7385, %7386
  %7388 = load i64, i64* %5, align 8
  %7389 = load i64, i64* %7, align 8
  %7390 = and i64 %7388, %7389
  %7391 = xor i64 %7387, %7390
  %7392 = load i64, i64* %6, align 8
  %7393 = load i64, i64* %7, align 8
  %7394 = and i64 %7392, %7393
  %7395 = xor i64 %7391, %7394
  %7396 = add i64 %7384, %7395
  store i64 %7396, i64* %14, align 8
  %7397 = load i64, i64* %11, align 8
  store i64 %7397, i64* %12, align 8
  %7398 = load i64, i64* %10, align 8
  store i64 %7398, i64* %11, align 8
  %7399 = load i64, i64* %9, align 8
  store i64 %7399, i64* %10, align 8
  %7400 = load i64, i64* %8, align 8
  %7401 = load i64, i64* %13, align 8
  %7402 = add i64 %7400, %7401
  store i64 %7402, i64* %9, align 8
  %7403 = load i64, i64* %7, align 8
  store i64 %7403, i64* %8, align 8
  %7404 = load i64, i64* %6, align 8
  store i64 %7404, i64* %7, align 8
  %7405 = load i64, i64* %5, align 8
  store i64 %7405, i64* %6, align 8
  %7406 = load i64, i64* %13, align 8
  %7407 = load i64, i64* %14, align 8
  %7408 = add i64 %7406, %7407
  store i64 %7408, i64* %5, align 8
  %7409 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7410 = load i64, i64* %7409, align 16
  %7411 = lshr i64 %7410, 19
  %7412 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7413 = load i64, i64* %7412, align 16
  %7414 = shl i64 %7413, 45
  %7415 = or i64 %7411, %7414
  %7416 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7417 = load i64, i64* %7416, align 16
  %7418 = lshr i64 %7417, 61
  %7419 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7420 = load i64, i64* %7419, align 16
  %7421 = shl i64 %7420, 3
  %7422 = or i64 %7418, %7421
  %7423 = xor i64 %7415, %7422
  %7424 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %7425 = load i64, i64* %7424, align 16
  %7426 = lshr i64 %7425, 6
  %7427 = xor i64 %7423, %7426
  %7428 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %7429 = load i64, i64* %7428, align 8
  %7430 = add i64 %7427, %7429
  %7431 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7432 = load i64, i64* %7431, align 8
  %7433 = lshr i64 %7432, 1
  %7434 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7435 = load i64, i64* %7434, align 8
  %7436 = shl i64 %7435, 63
  %7437 = or i64 %7433, %7436
  %7438 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7439 = load i64, i64* %7438, align 8
  %7440 = lshr i64 %7439, 8
  %7441 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7442 = load i64, i64* %7441, align 8
  %7443 = shl i64 %7442, 56
  %7444 = or i64 %7440, %7443
  %7445 = xor i64 %7437, %7444
  %7446 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7447 = load i64, i64* %7446, align 8
  %7448 = lshr i64 %7447, 7
  %7449 = xor i64 %7445, %7448
  %7450 = add i64 %7430, %7449
  %7451 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 44
  %7452 = load i64, i64* %7451, align 16
  %7453 = add i64 %7450, %7452
  %7454 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  store i64 %7453, i64* %7454, align 16
  %7455 = load i64, i64* %12, align 8
  %7456 = load i64, i64* %9, align 8
  %7457 = lshr i64 %7456, 14
  %7458 = load i64, i64* %9, align 8
  %7459 = shl i64 %7458, 50
  %7460 = or i64 %7457, %7459
  %7461 = load i64, i64* %9, align 8
  %7462 = lshr i64 %7461, 18
  %7463 = load i64, i64* %9, align 8
  %7464 = shl i64 %7463, 46
  %7465 = or i64 %7462, %7464
  %7466 = xor i64 %7460, %7465
  %7467 = load i64, i64* %9, align 8
  %7468 = lshr i64 %7467, 41
  %7469 = load i64, i64* %9, align 8
  %7470 = shl i64 %7469, 23
  %7471 = or i64 %7468, %7470
  %7472 = xor i64 %7466, %7471
  %7473 = add i64 %7455, %7472
  %7474 = load i64, i64* %9, align 8
  %7475 = load i64, i64* %10, align 8
  %7476 = and i64 %7474, %7475
  %7477 = load i64, i64* %9, align 8
  %7478 = xor i64 %7477, -1
  %7479 = load i64, i64* %11, align 8
  %7480 = and i64 %7478, %7479
  %7481 = xor i64 %7476, %7480
  %7482 = add i64 %7473, %7481
  %7483 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 60), align 16
  %7484 = add i64 %7482, %7483
  %7485 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7486 = load i64, i64* %7485, align 16
  %7487 = add i64 %7484, %7486
  store i64 %7487, i64* %13, align 8
  %7488 = load i64, i64* %5, align 8
  %7489 = lshr i64 %7488, 28
  %7490 = load i64, i64* %5, align 8
  %7491 = shl i64 %7490, 36
  %7492 = or i64 %7489, %7491
  %7493 = load i64, i64* %5, align 8
  %7494 = lshr i64 %7493, 34
  %7495 = load i64, i64* %5, align 8
  %7496 = shl i64 %7495, 30
  %7497 = or i64 %7494, %7496
  %7498 = xor i64 %7492, %7497
  %7499 = load i64, i64* %5, align 8
  %7500 = lshr i64 %7499, 39
  %7501 = load i64, i64* %5, align 8
  %7502 = shl i64 %7501, 25
  %7503 = or i64 %7500, %7502
  %7504 = xor i64 %7498, %7503
  %7505 = load i64, i64* %5, align 8
  %7506 = load i64, i64* %6, align 8
  %7507 = and i64 %7505, %7506
  %7508 = load i64, i64* %5, align 8
  %7509 = load i64, i64* %7, align 8
  %7510 = and i64 %7508, %7509
  %7511 = xor i64 %7507, %7510
  %7512 = load i64, i64* %6, align 8
  %7513 = load i64, i64* %7, align 8
  %7514 = and i64 %7512, %7513
  %7515 = xor i64 %7511, %7514
  %7516 = add i64 %7504, %7515
  store i64 %7516, i64* %14, align 8
  %7517 = load i64, i64* %11, align 8
  store i64 %7517, i64* %12, align 8
  %7518 = load i64, i64* %10, align 8
  store i64 %7518, i64* %11, align 8
  %7519 = load i64, i64* %9, align 8
  store i64 %7519, i64* %10, align 8
  %7520 = load i64, i64* %8, align 8
  %7521 = load i64, i64* %13, align 8
  %7522 = add i64 %7520, %7521
  store i64 %7522, i64* %9, align 8
  %7523 = load i64, i64* %7, align 8
  store i64 %7523, i64* %8, align 8
  %7524 = load i64, i64* %6, align 8
  store i64 %7524, i64* %7, align 8
  %7525 = load i64, i64* %5, align 8
  store i64 %7525, i64* %6, align 8
  %7526 = load i64, i64* %13, align 8
  %7527 = load i64, i64* %14, align 8
  %7528 = add i64 %7526, %7527
  store i64 %7528, i64* %5, align 8
  %7529 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7530 = load i64, i64* %7529, align 8
  %7531 = lshr i64 %7530, 19
  %7532 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7533 = load i64, i64* %7532, align 8
  %7534 = shl i64 %7533, 45
  %7535 = or i64 %7531, %7534
  %7536 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7537 = load i64, i64* %7536, align 8
  %7538 = lshr i64 %7537, 61
  %7539 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7540 = load i64, i64* %7539, align 8
  %7541 = shl i64 %7540, 3
  %7542 = or i64 %7538, %7541
  %7543 = xor i64 %7535, %7542
  %7544 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %7545 = load i64, i64* %7544, align 8
  %7546 = lshr i64 %7545, 6
  %7547 = xor i64 %7543, %7546
  %7548 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %7549 = load i64, i64* %7548, align 16
  %7550 = add i64 %7547, %7549
  %7551 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7552 = load i64, i64* %7551, align 16
  %7553 = lshr i64 %7552, 1
  %7554 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7555 = load i64, i64* %7554, align 16
  %7556 = shl i64 %7555, 63
  %7557 = or i64 %7553, %7556
  %7558 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7559 = load i64, i64* %7558, align 16
  %7560 = lshr i64 %7559, 8
  %7561 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7562 = load i64, i64* %7561, align 16
  %7563 = shl i64 %7562, 56
  %7564 = or i64 %7560, %7563
  %7565 = xor i64 %7557, %7564
  %7566 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7567 = load i64, i64* %7566, align 16
  %7568 = lshr i64 %7567, 7
  %7569 = xor i64 %7565, %7568
  %7570 = add i64 %7550, %7569
  %7571 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 45
  %7572 = load i64, i64* %7571, align 8
  %7573 = add i64 %7570, %7572
  %7574 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  store i64 %7573, i64* %7574, align 8
  %7575 = load i64, i64* %12, align 8
  %7576 = load i64, i64* %9, align 8
  %7577 = lshr i64 %7576, 14
  %7578 = load i64, i64* %9, align 8
  %7579 = shl i64 %7578, 50
  %7580 = or i64 %7577, %7579
  %7581 = load i64, i64* %9, align 8
  %7582 = lshr i64 %7581, 18
  %7583 = load i64, i64* %9, align 8
  %7584 = shl i64 %7583, 46
  %7585 = or i64 %7582, %7584
  %7586 = xor i64 %7580, %7585
  %7587 = load i64, i64* %9, align 8
  %7588 = lshr i64 %7587, 41
  %7589 = load i64, i64* %9, align 8
  %7590 = shl i64 %7589, 23
  %7591 = or i64 %7588, %7590
  %7592 = xor i64 %7586, %7591
  %7593 = add i64 %7575, %7592
  %7594 = load i64, i64* %9, align 8
  %7595 = load i64, i64* %10, align 8
  %7596 = and i64 %7594, %7595
  %7597 = load i64, i64* %9, align 8
  %7598 = xor i64 %7597, -1
  %7599 = load i64, i64* %11, align 8
  %7600 = and i64 %7598, %7599
  %7601 = xor i64 %7596, %7600
  %7602 = add i64 %7593, %7601
  %7603 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 61), align 8
  %7604 = add i64 %7602, %7603
  %7605 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7606 = load i64, i64* %7605, align 8
  %7607 = add i64 %7604, %7606
  store i64 %7607, i64* %13, align 8
  %7608 = load i64, i64* %5, align 8
  %7609 = lshr i64 %7608, 28
  %7610 = load i64, i64* %5, align 8
  %7611 = shl i64 %7610, 36
  %7612 = or i64 %7609, %7611
  %7613 = load i64, i64* %5, align 8
  %7614 = lshr i64 %7613, 34
  %7615 = load i64, i64* %5, align 8
  %7616 = shl i64 %7615, 30
  %7617 = or i64 %7614, %7616
  %7618 = xor i64 %7612, %7617
  %7619 = load i64, i64* %5, align 8
  %7620 = lshr i64 %7619, 39
  %7621 = load i64, i64* %5, align 8
  %7622 = shl i64 %7621, 25
  %7623 = or i64 %7620, %7622
  %7624 = xor i64 %7618, %7623
  %7625 = load i64, i64* %5, align 8
  %7626 = load i64, i64* %6, align 8
  %7627 = and i64 %7625, %7626
  %7628 = load i64, i64* %5, align 8
  %7629 = load i64, i64* %7, align 8
  %7630 = and i64 %7628, %7629
  %7631 = xor i64 %7627, %7630
  %7632 = load i64, i64* %6, align 8
  %7633 = load i64, i64* %7, align 8
  %7634 = and i64 %7632, %7633
  %7635 = xor i64 %7631, %7634
  %7636 = add i64 %7624, %7635
  store i64 %7636, i64* %14, align 8
  %7637 = load i64, i64* %11, align 8
  store i64 %7637, i64* %12, align 8
  %7638 = load i64, i64* %10, align 8
  store i64 %7638, i64* %11, align 8
  %7639 = load i64, i64* %9, align 8
  store i64 %7639, i64* %10, align 8
  %7640 = load i64, i64* %8, align 8
  %7641 = load i64, i64* %13, align 8
  %7642 = add i64 %7640, %7641
  store i64 %7642, i64* %9, align 8
  %7643 = load i64, i64* %7, align 8
  store i64 %7643, i64* %8, align 8
  %7644 = load i64, i64* %6, align 8
  store i64 %7644, i64* %7, align 8
  %7645 = load i64, i64* %5, align 8
  store i64 %7645, i64* %6, align 8
  %7646 = load i64, i64* %13, align 8
  %7647 = load i64, i64* %14, align 8
  %7648 = add i64 %7646, %7647
  store i64 %7648, i64* %5, align 8
  %7649 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7650 = load i64, i64* %7649, align 16
  %7651 = lshr i64 %7650, 19
  %7652 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7653 = load i64, i64* %7652, align 16
  %7654 = shl i64 %7653, 45
  %7655 = or i64 %7651, %7654
  %7656 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7657 = load i64, i64* %7656, align 16
  %7658 = lshr i64 %7657, 61
  %7659 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7660 = load i64, i64* %7659, align 16
  %7661 = shl i64 %7660, 3
  %7662 = or i64 %7658, %7661
  %7663 = xor i64 %7655, %7662
  %7664 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %7665 = load i64, i64* %7664, align 16
  %7666 = lshr i64 %7665, 6
  %7667 = xor i64 %7663, %7666
  %7668 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %7669 = load i64, i64* %7668, align 8
  %7670 = add i64 %7667, %7669
  %7671 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7672 = load i64, i64* %7671, align 8
  %7673 = lshr i64 %7672, 1
  %7674 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7675 = load i64, i64* %7674, align 8
  %7676 = shl i64 %7675, 63
  %7677 = or i64 %7673, %7676
  %7678 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7679 = load i64, i64* %7678, align 8
  %7680 = lshr i64 %7679, 8
  %7681 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7682 = load i64, i64* %7681, align 8
  %7683 = shl i64 %7682, 56
  %7684 = or i64 %7680, %7683
  %7685 = xor i64 %7677, %7684
  %7686 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7687 = load i64, i64* %7686, align 8
  %7688 = lshr i64 %7687, 7
  %7689 = xor i64 %7685, %7688
  %7690 = add i64 %7670, %7689
  %7691 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 46
  %7692 = load i64, i64* %7691, align 16
  %7693 = add i64 %7690, %7692
  %7694 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  store i64 %7693, i64* %7694, align 16
  %7695 = load i64, i64* %12, align 8
  %7696 = load i64, i64* %9, align 8
  %7697 = lshr i64 %7696, 14
  %7698 = load i64, i64* %9, align 8
  %7699 = shl i64 %7698, 50
  %7700 = or i64 %7697, %7699
  %7701 = load i64, i64* %9, align 8
  %7702 = lshr i64 %7701, 18
  %7703 = load i64, i64* %9, align 8
  %7704 = shl i64 %7703, 46
  %7705 = or i64 %7702, %7704
  %7706 = xor i64 %7700, %7705
  %7707 = load i64, i64* %9, align 8
  %7708 = lshr i64 %7707, 41
  %7709 = load i64, i64* %9, align 8
  %7710 = shl i64 %7709, 23
  %7711 = or i64 %7708, %7710
  %7712 = xor i64 %7706, %7711
  %7713 = add i64 %7695, %7712
  %7714 = load i64, i64* %9, align 8
  %7715 = load i64, i64* %10, align 8
  %7716 = and i64 %7714, %7715
  %7717 = load i64, i64* %9, align 8
  %7718 = xor i64 %7717, -1
  %7719 = load i64, i64* %11, align 8
  %7720 = and i64 %7718, %7719
  %7721 = xor i64 %7716, %7720
  %7722 = add i64 %7713, %7721
  %7723 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 62), align 16
  %7724 = add i64 %7722, %7723
  %7725 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7726 = load i64, i64* %7725, align 16
  %7727 = add i64 %7724, %7726
  store i64 %7727, i64* %13, align 8
  %7728 = load i64, i64* %5, align 8
  %7729 = lshr i64 %7728, 28
  %7730 = load i64, i64* %5, align 8
  %7731 = shl i64 %7730, 36
  %7732 = or i64 %7729, %7731
  %7733 = load i64, i64* %5, align 8
  %7734 = lshr i64 %7733, 34
  %7735 = load i64, i64* %5, align 8
  %7736 = shl i64 %7735, 30
  %7737 = or i64 %7734, %7736
  %7738 = xor i64 %7732, %7737
  %7739 = load i64, i64* %5, align 8
  %7740 = lshr i64 %7739, 39
  %7741 = load i64, i64* %5, align 8
  %7742 = shl i64 %7741, 25
  %7743 = or i64 %7740, %7742
  %7744 = xor i64 %7738, %7743
  %7745 = load i64, i64* %5, align 8
  %7746 = load i64, i64* %6, align 8
  %7747 = and i64 %7745, %7746
  %7748 = load i64, i64* %5, align 8
  %7749 = load i64, i64* %7, align 8
  %7750 = and i64 %7748, %7749
  %7751 = xor i64 %7747, %7750
  %7752 = load i64, i64* %6, align 8
  %7753 = load i64, i64* %7, align 8
  %7754 = and i64 %7752, %7753
  %7755 = xor i64 %7751, %7754
  %7756 = add i64 %7744, %7755
  store i64 %7756, i64* %14, align 8
  %7757 = load i64, i64* %11, align 8
  store i64 %7757, i64* %12, align 8
  %7758 = load i64, i64* %10, align 8
  store i64 %7758, i64* %11, align 8
  %7759 = load i64, i64* %9, align 8
  store i64 %7759, i64* %10, align 8
  %7760 = load i64, i64* %8, align 8
  %7761 = load i64, i64* %13, align 8
  %7762 = add i64 %7760, %7761
  store i64 %7762, i64* %9, align 8
  %7763 = load i64, i64* %7, align 8
  store i64 %7763, i64* %8, align 8
  %7764 = load i64, i64* %6, align 8
  store i64 %7764, i64* %7, align 8
  %7765 = load i64, i64* %5, align 8
  store i64 %7765, i64* %6, align 8
  %7766 = load i64, i64* %13, align 8
  %7767 = load i64, i64* %14, align 8
  %7768 = add i64 %7766, %7767
  store i64 %7768, i64* %5, align 8
  %7769 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7770 = load i64, i64* %7769, align 8
  %7771 = lshr i64 %7770, 19
  %7772 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7773 = load i64, i64* %7772, align 8
  %7774 = shl i64 %7773, 45
  %7775 = or i64 %7771, %7774
  %7776 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7777 = load i64, i64* %7776, align 8
  %7778 = lshr i64 %7777, 61
  %7779 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7780 = load i64, i64* %7779, align 8
  %7781 = shl i64 %7780, 3
  %7782 = or i64 %7778, %7781
  %7783 = xor i64 %7775, %7782
  %7784 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %7785 = load i64, i64* %7784, align 8
  %7786 = lshr i64 %7785, 6
  %7787 = xor i64 %7783, %7786
  %7788 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %7789 = load i64, i64* %7788, align 16
  %7790 = add i64 %7787, %7789
  %7791 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7792 = load i64, i64* %7791, align 16
  %7793 = lshr i64 %7792, 1
  %7794 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7795 = load i64, i64* %7794, align 16
  %7796 = shl i64 %7795, 63
  %7797 = or i64 %7793, %7796
  %7798 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7799 = load i64, i64* %7798, align 16
  %7800 = lshr i64 %7799, 8
  %7801 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7802 = load i64, i64* %7801, align 16
  %7803 = shl i64 %7802, 56
  %7804 = or i64 %7800, %7803
  %7805 = xor i64 %7797, %7804
  %7806 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7807 = load i64, i64* %7806, align 16
  %7808 = lshr i64 %7807, 7
  %7809 = xor i64 %7805, %7808
  %7810 = add i64 %7790, %7809
  %7811 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 47
  %7812 = load i64, i64* %7811, align 8
  %7813 = add i64 %7810, %7812
  %7814 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  store i64 %7813, i64* %7814, align 8
  %7815 = load i64, i64* %12, align 8
  %7816 = load i64, i64* %9, align 8
  %7817 = lshr i64 %7816, 14
  %7818 = load i64, i64* %9, align 8
  %7819 = shl i64 %7818, 50
  %7820 = or i64 %7817, %7819
  %7821 = load i64, i64* %9, align 8
  %7822 = lshr i64 %7821, 18
  %7823 = load i64, i64* %9, align 8
  %7824 = shl i64 %7823, 46
  %7825 = or i64 %7822, %7824
  %7826 = xor i64 %7820, %7825
  %7827 = load i64, i64* %9, align 8
  %7828 = lshr i64 %7827, 41
  %7829 = load i64, i64* %9, align 8
  %7830 = shl i64 %7829, 23
  %7831 = or i64 %7828, %7830
  %7832 = xor i64 %7826, %7831
  %7833 = add i64 %7815, %7832
  %7834 = load i64, i64* %9, align 8
  %7835 = load i64, i64* %10, align 8
  %7836 = and i64 %7834, %7835
  %7837 = load i64, i64* %9, align 8
  %7838 = xor i64 %7837, -1
  %7839 = load i64, i64* %11, align 8
  %7840 = and i64 %7838, %7839
  %7841 = xor i64 %7836, %7840
  %7842 = add i64 %7833, %7841
  %7843 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 63), align 8
  %7844 = add i64 %7842, %7843
  %7845 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %7846 = load i64, i64* %7845, align 8
  %7847 = add i64 %7844, %7846
  store i64 %7847, i64* %13, align 8
  %7848 = load i64, i64* %5, align 8
  %7849 = lshr i64 %7848, 28
  %7850 = load i64, i64* %5, align 8
  %7851 = shl i64 %7850, 36
  %7852 = or i64 %7849, %7851
  %7853 = load i64, i64* %5, align 8
  %7854 = lshr i64 %7853, 34
  %7855 = load i64, i64* %5, align 8
  %7856 = shl i64 %7855, 30
  %7857 = or i64 %7854, %7856
  %7858 = xor i64 %7852, %7857
  %7859 = load i64, i64* %5, align 8
  %7860 = lshr i64 %7859, 39
  %7861 = load i64, i64* %5, align 8
  %7862 = shl i64 %7861, 25
  %7863 = or i64 %7860, %7862
  %7864 = xor i64 %7858, %7863
  %7865 = load i64, i64* %5, align 8
  %7866 = load i64, i64* %6, align 8
  %7867 = and i64 %7865, %7866
  %7868 = load i64, i64* %5, align 8
  %7869 = load i64, i64* %7, align 8
  %7870 = and i64 %7868, %7869
  %7871 = xor i64 %7867, %7870
  %7872 = load i64, i64* %6, align 8
  %7873 = load i64, i64* %7, align 8
  %7874 = and i64 %7872, %7873
  %7875 = xor i64 %7871, %7874
  %7876 = add i64 %7864, %7875
  store i64 %7876, i64* %14, align 8
  %7877 = load i64, i64* %11, align 8
  store i64 %7877, i64* %12, align 8
  %7878 = load i64, i64* %10, align 8
  store i64 %7878, i64* %11, align 8
  %7879 = load i64, i64* %9, align 8
  store i64 %7879, i64* %10, align 8
  %7880 = load i64, i64* %8, align 8
  %7881 = load i64, i64* %13, align 8
  %7882 = add i64 %7880, %7881
  store i64 %7882, i64* %9, align 8
  %7883 = load i64, i64* %7, align 8
  store i64 %7883, i64* %8, align 8
  %7884 = load i64, i64* %6, align 8
  store i64 %7884, i64* %7, align 8
  %7885 = load i64, i64* %5, align 8
  store i64 %7885, i64* %6, align 8
  %7886 = load i64, i64* %13, align 8
  %7887 = load i64, i64* %14, align 8
  %7888 = add i64 %7886, %7887
  store i64 %7888, i64* %5, align 8
  %7889 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7890 = load i64, i64* %7889, align 16
  %7891 = lshr i64 %7890, 19
  %7892 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7893 = load i64, i64* %7892, align 16
  %7894 = shl i64 %7893, 45
  %7895 = or i64 %7891, %7894
  %7896 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7897 = load i64, i64* %7896, align 16
  %7898 = lshr i64 %7897, 61
  %7899 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7900 = load i64, i64* %7899, align 16
  %7901 = shl i64 %7900, 3
  %7902 = or i64 %7898, %7901
  %7903 = xor i64 %7895, %7902
  %7904 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %7905 = load i64, i64* %7904, align 16
  %7906 = lshr i64 %7905, 6
  %7907 = xor i64 %7903, %7906
  %7908 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %7909 = load i64, i64* %7908, align 8
  %7910 = add i64 %7907, %7909
  %7911 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %7912 = load i64, i64* %7911, align 8
  %7913 = lshr i64 %7912, 1
  %7914 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %7915 = load i64, i64* %7914, align 8
  %7916 = shl i64 %7915, 63
  %7917 = or i64 %7913, %7916
  %7918 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %7919 = load i64, i64* %7918, align 8
  %7920 = lshr i64 %7919, 8
  %7921 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %7922 = load i64, i64* %7921, align 8
  %7923 = shl i64 %7922, 56
  %7924 = or i64 %7920, %7923
  %7925 = xor i64 %7917, %7924
  %7926 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %7927 = load i64, i64* %7926, align 8
  %7928 = lshr i64 %7927, 7
  %7929 = xor i64 %7925, %7928
  %7930 = add i64 %7910, %7929
  %7931 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 48
  %7932 = load i64, i64* %7931, align 16
  %7933 = add i64 %7930, %7932
  %7934 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  store i64 %7933, i64* %7934, align 16
  %7935 = load i64, i64* %12, align 8
  %7936 = load i64, i64* %9, align 8
  %7937 = lshr i64 %7936, 14
  %7938 = load i64, i64* %9, align 8
  %7939 = shl i64 %7938, 50
  %7940 = or i64 %7937, %7939
  %7941 = load i64, i64* %9, align 8
  %7942 = lshr i64 %7941, 18
  %7943 = load i64, i64* %9, align 8
  %7944 = shl i64 %7943, 46
  %7945 = or i64 %7942, %7944
  %7946 = xor i64 %7940, %7945
  %7947 = load i64, i64* %9, align 8
  %7948 = lshr i64 %7947, 41
  %7949 = load i64, i64* %9, align 8
  %7950 = shl i64 %7949, 23
  %7951 = or i64 %7948, %7950
  %7952 = xor i64 %7946, %7951
  %7953 = add i64 %7935, %7952
  %7954 = load i64, i64* %9, align 8
  %7955 = load i64, i64* %10, align 8
  %7956 = and i64 %7954, %7955
  %7957 = load i64, i64* %9, align 8
  %7958 = xor i64 %7957, -1
  %7959 = load i64, i64* %11, align 8
  %7960 = and i64 %7958, %7959
  %7961 = xor i64 %7956, %7960
  %7962 = add i64 %7953, %7961
  %7963 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 64), align 16
  %7964 = add i64 %7962, %7963
  %7965 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %7966 = load i64, i64* %7965, align 16
  %7967 = add i64 %7964, %7966
  store i64 %7967, i64* %13, align 8
  %7968 = load i64, i64* %5, align 8
  %7969 = lshr i64 %7968, 28
  %7970 = load i64, i64* %5, align 8
  %7971 = shl i64 %7970, 36
  %7972 = or i64 %7969, %7971
  %7973 = load i64, i64* %5, align 8
  %7974 = lshr i64 %7973, 34
  %7975 = load i64, i64* %5, align 8
  %7976 = shl i64 %7975, 30
  %7977 = or i64 %7974, %7976
  %7978 = xor i64 %7972, %7977
  %7979 = load i64, i64* %5, align 8
  %7980 = lshr i64 %7979, 39
  %7981 = load i64, i64* %5, align 8
  %7982 = shl i64 %7981, 25
  %7983 = or i64 %7980, %7982
  %7984 = xor i64 %7978, %7983
  %7985 = load i64, i64* %5, align 8
  %7986 = load i64, i64* %6, align 8
  %7987 = and i64 %7985, %7986
  %7988 = load i64, i64* %5, align 8
  %7989 = load i64, i64* %7, align 8
  %7990 = and i64 %7988, %7989
  %7991 = xor i64 %7987, %7990
  %7992 = load i64, i64* %6, align 8
  %7993 = load i64, i64* %7, align 8
  %7994 = and i64 %7992, %7993
  %7995 = xor i64 %7991, %7994
  %7996 = add i64 %7984, %7995
  store i64 %7996, i64* %14, align 8
  %7997 = load i64, i64* %11, align 8
  store i64 %7997, i64* %12, align 8
  %7998 = load i64, i64* %10, align 8
  store i64 %7998, i64* %11, align 8
  %7999 = load i64, i64* %9, align 8
  store i64 %7999, i64* %10, align 8
  %8000 = load i64, i64* %8, align 8
  %8001 = load i64, i64* %13, align 8
  %8002 = add i64 %8000, %8001
  store i64 %8002, i64* %9, align 8
  %8003 = load i64, i64* %7, align 8
  store i64 %8003, i64* %8, align 8
  %8004 = load i64, i64* %6, align 8
  store i64 %8004, i64* %7, align 8
  %8005 = load i64, i64* %5, align 8
  store i64 %8005, i64* %6, align 8
  %8006 = load i64, i64* %13, align 8
  %8007 = load i64, i64* %14, align 8
  %8008 = add i64 %8006, %8007
  store i64 %8008, i64* %5, align 8
  %8009 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8010 = load i64, i64* %8009, align 8
  %8011 = lshr i64 %8010, 19
  %8012 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8013 = load i64, i64* %8012, align 8
  %8014 = shl i64 %8013, 45
  %8015 = or i64 %8011, %8014
  %8016 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8017 = load i64, i64* %8016, align 8
  %8018 = lshr i64 %8017, 61
  %8019 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8020 = load i64, i64* %8019, align 8
  %8021 = shl i64 %8020, 3
  %8022 = or i64 %8018, %8021
  %8023 = xor i64 %8015, %8022
  %8024 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8025 = load i64, i64* %8024, align 8
  %8026 = lshr i64 %8025, 6
  %8027 = xor i64 %8023, %8026
  %8028 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %8029 = load i64, i64* %8028, align 16
  %8030 = add i64 %8027, %8029
  %8031 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8032 = load i64, i64* %8031, align 16
  %8033 = lshr i64 %8032, 1
  %8034 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8035 = load i64, i64* %8034, align 16
  %8036 = shl i64 %8035, 63
  %8037 = or i64 %8033, %8036
  %8038 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8039 = load i64, i64* %8038, align 16
  %8040 = lshr i64 %8039, 8
  %8041 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8042 = load i64, i64* %8041, align 16
  %8043 = shl i64 %8042, 56
  %8044 = or i64 %8040, %8043
  %8045 = xor i64 %8037, %8044
  %8046 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8047 = load i64, i64* %8046, align 16
  %8048 = lshr i64 %8047, 7
  %8049 = xor i64 %8045, %8048
  %8050 = add i64 %8030, %8049
  %8051 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 49
  %8052 = load i64, i64* %8051, align 8
  %8053 = add i64 %8050, %8052
  %8054 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  store i64 %8053, i64* %8054, align 8
  %8055 = load i64, i64* %12, align 8
  %8056 = load i64, i64* %9, align 8
  %8057 = lshr i64 %8056, 14
  %8058 = load i64, i64* %9, align 8
  %8059 = shl i64 %8058, 50
  %8060 = or i64 %8057, %8059
  %8061 = load i64, i64* %9, align 8
  %8062 = lshr i64 %8061, 18
  %8063 = load i64, i64* %9, align 8
  %8064 = shl i64 %8063, 46
  %8065 = or i64 %8062, %8064
  %8066 = xor i64 %8060, %8065
  %8067 = load i64, i64* %9, align 8
  %8068 = lshr i64 %8067, 41
  %8069 = load i64, i64* %9, align 8
  %8070 = shl i64 %8069, 23
  %8071 = or i64 %8068, %8070
  %8072 = xor i64 %8066, %8071
  %8073 = add i64 %8055, %8072
  %8074 = load i64, i64* %9, align 8
  %8075 = load i64, i64* %10, align 8
  %8076 = and i64 %8074, %8075
  %8077 = load i64, i64* %9, align 8
  %8078 = xor i64 %8077, -1
  %8079 = load i64, i64* %11, align 8
  %8080 = and i64 %8078, %8079
  %8081 = xor i64 %8076, %8080
  %8082 = add i64 %8073, %8081
  %8083 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 65), align 8
  %8084 = add i64 %8082, %8083
  %8085 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8086 = load i64, i64* %8085, align 8
  %8087 = add i64 %8084, %8086
  store i64 %8087, i64* %13, align 8
  %8088 = load i64, i64* %5, align 8
  %8089 = lshr i64 %8088, 28
  %8090 = load i64, i64* %5, align 8
  %8091 = shl i64 %8090, 36
  %8092 = or i64 %8089, %8091
  %8093 = load i64, i64* %5, align 8
  %8094 = lshr i64 %8093, 34
  %8095 = load i64, i64* %5, align 8
  %8096 = shl i64 %8095, 30
  %8097 = or i64 %8094, %8096
  %8098 = xor i64 %8092, %8097
  %8099 = load i64, i64* %5, align 8
  %8100 = lshr i64 %8099, 39
  %8101 = load i64, i64* %5, align 8
  %8102 = shl i64 %8101, 25
  %8103 = or i64 %8100, %8102
  %8104 = xor i64 %8098, %8103
  %8105 = load i64, i64* %5, align 8
  %8106 = load i64, i64* %6, align 8
  %8107 = and i64 %8105, %8106
  %8108 = load i64, i64* %5, align 8
  %8109 = load i64, i64* %7, align 8
  %8110 = and i64 %8108, %8109
  %8111 = xor i64 %8107, %8110
  %8112 = load i64, i64* %6, align 8
  %8113 = load i64, i64* %7, align 8
  %8114 = and i64 %8112, %8113
  %8115 = xor i64 %8111, %8114
  %8116 = add i64 %8104, %8115
  store i64 %8116, i64* %14, align 8
  %8117 = load i64, i64* %11, align 8
  store i64 %8117, i64* %12, align 8
  %8118 = load i64, i64* %10, align 8
  store i64 %8118, i64* %11, align 8
  %8119 = load i64, i64* %9, align 8
  store i64 %8119, i64* %10, align 8
  %8120 = load i64, i64* %8, align 8
  %8121 = load i64, i64* %13, align 8
  %8122 = add i64 %8120, %8121
  store i64 %8122, i64* %9, align 8
  %8123 = load i64, i64* %7, align 8
  store i64 %8123, i64* %8, align 8
  %8124 = load i64, i64* %6, align 8
  store i64 %8124, i64* %7, align 8
  %8125 = load i64, i64* %5, align 8
  store i64 %8125, i64* %6, align 8
  %8126 = load i64, i64* %13, align 8
  %8127 = load i64, i64* %14, align 8
  %8128 = add i64 %8126, %8127
  store i64 %8128, i64* %5, align 8
  %8129 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8130 = load i64, i64* %8129, align 16
  %8131 = lshr i64 %8130, 19
  %8132 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8133 = load i64, i64* %8132, align 16
  %8134 = shl i64 %8133, 45
  %8135 = or i64 %8131, %8134
  %8136 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8137 = load i64, i64* %8136, align 16
  %8138 = lshr i64 %8137, 61
  %8139 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8140 = load i64, i64* %8139, align 16
  %8141 = shl i64 %8140, 3
  %8142 = or i64 %8138, %8141
  %8143 = xor i64 %8135, %8142
  %8144 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8145 = load i64, i64* %8144, align 16
  %8146 = lshr i64 %8145, 6
  %8147 = xor i64 %8143, %8146
  %8148 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %8149 = load i64, i64* %8148, align 8
  %8150 = add i64 %8147, %8149
  %8151 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8152 = load i64, i64* %8151, align 8
  %8153 = lshr i64 %8152, 1
  %8154 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8155 = load i64, i64* %8154, align 8
  %8156 = shl i64 %8155, 63
  %8157 = or i64 %8153, %8156
  %8158 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8159 = load i64, i64* %8158, align 8
  %8160 = lshr i64 %8159, 8
  %8161 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8162 = load i64, i64* %8161, align 8
  %8163 = shl i64 %8162, 56
  %8164 = or i64 %8160, %8163
  %8165 = xor i64 %8157, %8164
  %8166 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8167 = load i64, i64* %8166, align 8
  %8168 = lshr i64 %8167, 7
  %8169 = xor i64 %8165, %8168
  %8170 = add i64 %8150, %8169
  %8171 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 50
  %8172 = load i64, i64* %8171, align 16
  %8173 = add i64 %8170, %8172
  %8174 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  store i64 %8173, i64* %8174, align 16
  %8175 = load i64, i64* %12, align 8
  %8176 = load i64, i64* %9, align 8
  %8177 = lshr i64 %8176, 14
  %8178 = load i64, i64* %9, align 8
  %8179 = shl i64 %8178, 50
  %8180 = or i64 %8177, %8179
  %8181 = load i64, i64* %9, align 8
  %8182 = lshr i64 %8181, 18
  %8183 = load i64, i64* %9, align 8
  %8184 = shl i64 %8183, 46
  %8185 = or i64 %8182, %8184
  %8186 = xor i64 %8180, %8185
  %8187 = load i64, i64* %9, align 8
  %8188 = lshr i64 %8187, 41
  %8189 = load i64, i64* %9, align 8
  %8190 = shl i64 %8189, 23
  %8191 = or i64 %8188, %8190
  %8192 = xor i64 %8186, %8191
  %8193 = add i64 %8175, %8192
  %8194 = load i64, i64* %9, align 8
  %8195 = load i64, i64* %10, align 8
  %8196 = and i64 %8194, %8195
  %8197 = load i64, i64* %9, align 8
  %8198 = xor i64 %8197, -1
  %8199 = load i64, i64* %11, align 8
  %8200 = and i64 %8198, %8199
  %8201 = xor i64 %8196, %8200
  %8202 = add i64 %8193, %8201
  %8203 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 66), align 16
  %8204 = add i64 %8202, %8203
  %8205 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8206 = load i64, i64* %8205, align 16
  %8207 = add i64 %8204, %8206
  store i64 %8207, i64* %13, align 8
  %8208 = load i64, i64* %5, align 8
  %8209 = lshr i64 %8208, 28
  %8210 = load i64, i64* %5, align 8
  %8211 = shl i64 %8210, 36
  %8212 = or i64 %8209, %8211
  %8213 = load i64, i64* %5, align 8
  %8214 = lshr i64 %8213, 34
  %8215 = load i64, i64* %5, align 8
  %8216 = shl i64 %8215, 30
  %8217 = or i64 %8214, %8216
  %8218 = xor i64 %8212, %8217
  %8219 = load i64, i64* %5, align 8
  %8220 = lshr i64 %8219, 39
  %8221 = load i64, i64* %5, align 8
  %8222 = shl i64 %8221, 25
  %8223 = or i64 %8220, %8222
  %8224 = xor i64 %8218, %8223
  %8225 = load i64, i64* %5, align 8
  %8226 = load i64, i64* %6, align 8
  %8227 = and i64 %8225, %8226
  %8228 = load i64, i64* %5, align 8
  %8229 = load i64, i64* %7, align 8
  %8230 = and i64 %8228, %8229
  %8231 = xor i64 %8227, %8230
  %8232 = load i64, i64* %6, align 8
  %8233 = load i64, i64* %7, align 8
  %8234 = and i64 %8232, %8233
  %8235 = xor i64 %8231, %8234
  %8236 = add i64 %8224, %8235
  store i64 %8236, i64* %14, align 8
  %8237 = load i64, i64* %11, align 8
  store i64 %8237, i64* %12, align 8
  %8238 = load i64, i64* %10, align 8
  store i64 %8238, i64* %11, align 8
  %8239 = load i64, i64* %9, align 8
  store i64 %8239, i64* %10, align 8
  %8240 = load i64, i64* %8, align 8
  %8241 = load i64, i64* %13, align 8
  %8242 = add i64 %8240, %8241
  store i64 %8242, i64* %9, align 8
  %8243 = load i64, i64* %7, align 8
  store i64 %8243, i64* %8, align 8
  %8244 = load i64, i64* %6, align 8
  store i64 %8244, i64* %7, align 8
  %8245 = load i64, i64* %5, align 8
  store i64 %8245, i64* %6, align 8
  %8246 = load i64, i64* %13, align 8
  %8247 = load i64, i64* %14, align 8
  %8248 = add i64 %8246, %8247
  store i64 %8248, i64* %5, align 8
  %8249 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8250 = load i64, i64* %8249, align 8
  %8251 = lshr i64 %8250, 19
  %8252 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8253 = load i64, i64* %8252, align 8
  %8254 = shl i64 %8253, 45
  %8255 = or i64 %8251, %8254
  %8256 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8257 = load i64, i64* %8256, align 8
  %8258 = lshr i64 %8257, 61
  %8259 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8260 = load i64, i64* %8259, align 8
  %8261 = shl i64 %8260, 3
  %8262 = or i64 %8258, %8261
  %8263 = xor i64 %8255, %8262
  %8264 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8265 = load i64, i64* %8264, align 8
  %8266 = lshr i64 %8265, 6
  %8267 = xor i64 %8263, %8266
  %8268 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %8269 = load i64, i64* %8268, align 16
  %8270 = add i64 %8267, %8269
  %8271 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8272 = load i64, i64* %8271, align 16
  %8273 = lshr i64 %8272, 1
  %8274 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8275 = load i64, i64* %8274, align 16
  %8276 = shl i64 %8275, 63
  %8277 = or i64 %8273, %8276
  %8278 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8279 = load i64, i64* %8278, align 16
  %8280 = lshr i64 %8279, 8
  %8281 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8282 = load i64, i64* %8281, align 16
  %8283 = shl i64 %8282, 56
  %8284 = or i64 %8280, %8283
  %8285 = xor i64 %8277, %8284
  %8286 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8287 = load i64, i64* %8286, align 16
  %8288 = lshr i64 %8287, 7
  %8289 = xor i64 %8285, %8288
  %8290 = add i64 %8270, %8289
  %8291 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 51
  %8292 = load i64, i64* %8291, align 8
  %8293 = add i64 %8290, %8292
  %8294 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  store i64 %8293, i64* %8294, align 8
  %8295 = load i64, i64* %12, align 8
  %8296 = load i64, i64* %9, align 8
  %8297 = lshr i64 %8296, 14
  %8298 = load i64, i64* %9, align 8
  %8299 = shl i64 %8298, 50
  %8300 = or i64 %8297, %8299
  %8301 = load i64, i64* %9, align 8
  %8302 = lshr i64 %8301, 18
  %8303 = load i64, i64* %9, align 8
  %8304 = shl i64 %8303, 46
  %8305 = or i64 %8302, %8304
  %8306 = xor i64 %8300, %8305
  %8307 = load i64, i64* %9, align 8
  %8308 = lshr i64 %8307, 41
  %8309 = load i64, i64* %9, align 8
  %8310 = shl i64 %8309, 23
  %8311 = or i64 %8308, %8310
  %8312 = xor i64 %8306, %8311
  %8313 = add i64 %8295, %8312
  %8314 = load i64, i64* %9, align 8
  %8315 = load i64, i64* %10, align 8
  %8316 = and i64 %8314, %8315
  %8317 = load i64, i64* %9, align 8
  %8318 = xor i64 %8317, -1
  %8319 = load i64, i64* %11, align 8
  %8320 = and i64 %8318, %8319
  %8321 = xor i64 %8316, %8320
  %8322 = add i64 %8313, %8321
  %8323 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 67), align 8
  %8324 = add i64 %8322, %8323
  %8325 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8326 = load i64, i64* %8325, align 8
  %8327 = add i64 %8324, %8326
  store i64 %8327, i64* %13, align 8
  %8328 = load i64, i64* %5, align 8
  %8329 = lshr i64 %8328, 28
  %8330 = load i64, i64* %5, align 8
  %8331 = shl i64 %8330, 36
  %8332 = or i64 %8329, %8331
  %8333 = load i64, i64* %5, align 8
  %8334 = lshr i64 %8333, 34
  %8335 = load i64, i64* %5, align 8
  %8336 = shl i64 %8335, 30
  %8337 = or i64 %8334, %8336
  %8338 = xor i64 %8332, %8337
  %8339 = load i64, i64* %5, align 8
  %8340 = lshr i64 %8339, 39
  %8341 = load i64, i64* %5, align 8
  %8342 = shl i64 %8341, 25
  %8343 = or i64 %8340, %8342
  %8344 = xor i64 %8338, %8343
  %8345 = load i64, i64* %5, align 8
  %8346 = load i64, i64* %6, align 8
  %8347 = and i64 %8345, %8346
  %8348 = load i64, i64* %5, align 8
  %8349 = load i64, i64* %7, align 8
  %8350 = and i64 %8348, %8349
  %8351 = xor i64 %8347, %8350
  %8352 = load i64, i64* %6, align 8
  %8353 = load i64, i64* %7, align 8
  %8354 = and i64 %8352, %8353
  %8355 = xor i64 %8351, %8354
  %8356 = add i64 %8344, %8355
  store i64 %8356, i64* %14, align 8
  %8357 = load i64, i64* %11, align 8
  store i64 %8357, i64* %12, align 8
  %8358 = load i64, i64* %10, align 8
  store i64 %8358, i64* %11, align 8
  %8359 = load i64, i64* %9, align 8
  store i64 %8359, i64* %10, align 8
  %8360 = load i64, i64* %8, align 8
  %8361 = load i64, i64* %13, align 8
  %8362 = add i64 %8360, %8361
  store i64 %8362, i64* %9, align 8
  %8363 = load i64, i64* %7, align 8
  store i64 %8363, i64* %8, align 8
  %8364 = load i64, i64* %6, align 8
  store i64 %8364, i64* %7, align 8
  %8365 = load i64, i64* %5, align 8
  store i64 %8365, i64* %6, align 8
  %8366 = load i64, i64* %13, align 8
  %8367 = load i64, i64* %14, align 8
  %8368 = add i64 %8366, %8367
  store i64 %8368, i64* %5, align 8
  %8369 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8370 = load i64, i64* %8369, align 16
  %8371 = lshr i64 %8370, 19
  %8372 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8373 = load i64, i64* %8372, align 16
  %8374 = shl i64 %8373, 45
  %8375 = or i64 %8371, %8374
  %8376 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8377 = load i64, i64* %8376, align 16
  %8378 = lshr i64 %8377, 61
  %8379 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8380 = load i64, i64* %8379, align 16
  %8381 = shl i64 %8380, 3
  %8382 = or i64 %8378, %8381
  %8383 = xor i64 %8375, %8382
  %8384 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8385 = load i64, i64* %8384, align 16
  %8386 = lshr i64 %8385, 6
  %8387 = xor i64 %8383, %8386
  %8388 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %8389 = load i64, i64* %8388, align 8
  %8390 = add i64 %8387, %8389
  %8391 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8392 = load i64, i64* %8391, align 8
  %8393 = lshr i64 %8392, 1
  %8394 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8395 = load i64, i64* %8394, align 8
  %8396 = shl i64 %8395, 63
  %8397 = or i64 %8393, %8396
  %8398 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8399 = load i64, i64* %8398, align 8
  %8400 = lshr i64 %8399, 8
  %8401 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8402 = load i64, i64* %8401, align 8
  %8403 = shl i64 %8402, 56
  %8404 = or i64 %8400, %8403
  %8405 = xor i64 %8397, %8404
  %8406 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8407 = load i64, i64* %8406, align 8
  %8408 = lshr i64 %8407, 7
  %8409 = xor i64 %8405, %8408
  %8410 = add i64 %8390, %8409
  %8411 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 52
  %8412 = load i64, i64* %8411, align 16
  %8413 = add i64 %8410, %8412
  %8414 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  store i64 %8413, i64* %8414, align 16
  %8415 = load i64, i64* %12, align 8
  %8416 = load i64, i64* %9, align 8
  %8417 = lshr i64 %8416, 14
  %8418 = load i64, i64* %9, align 8
  %8419 = shl i64 %8418, 50
  %8420 = or i64 %8417, %8419
  %8421 = load i64, i64* %9, align 8
  %8422 = lshr i64 %8421, 18
  %8423 = load i64, i64* %9, align 8
  %8424 = shl i64 %8423, 46
  %8425 = or i64 %8422, %8424
  %8426 = xor i64 %8420, %8425
  %8427 = load i64, i64* %9, align 8
  %8428 = lshr i64 %8427, 41
  %8429 = load i64, i64* %9, align 8
  %8430 = shl i64 %8429, 23
  %8431 = or i64 %8428, %8430
  %8432 = xor i64 %8426, %8431
  %8433 = add i64 %8415, %8432
  %8434 = load i64, i64* %9, align 8
  %8435 = load i64, i64* %10, align 8
  %8436 = and i64 %8434, %8435
  %8437 = load i64, i64* %9, align 8
  %8438 = xor i64 %8437, -1
  %8439 = load i64, i64* %11, align 8
  %8440 = and i64 %8438, %8439
  %8441 = xor i64 %8436, %8440
  %8442 = add i64 %8433, %8441
  %8443 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 68), align 16
  %8444 = add i64 %8442, %8443
  %8445 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8446 = load i64, i64* %8445, align 16
  %8447 = add i64 %8444, %8446
  store i64 %8447, i64* %13, align 8
  %8448 = load i64, i64* %5, align 8
  %8449 = lshr i64 %8448, 28
  %8450 = load i64, i64* %5, align 8
  %8451 = shl i64 %8450, 36
  %8452 = or i64 %8449, %8451
  %8453 = load i64, i64* %5, align 8
  %8454 = lshr i64 %8453, 34
  %8455 = load i64, i64* %5, align 8
  %8456 = shl i64 %8455, 30
  %8457 = or i64 %8454, %8456
  %8458 = xor i64 %8452, %8457
  %8459 = load i64, i64* %5, align 8
  %8460 = lshr i64 %8459, 39
  %8461 = load i64, i64* %5, align 8
  %8462 = shl i64 %8461, 25
  %8463 = or i64 %8460, %8462
  %8464 = xor i64 %8458, %8463
  %8465 = load i64, i64* %5, align 8
  %8466 = load i64, i64* %6, align 8
  %8467 = and i64 %8465, %8466
  %8468 = load i64, i64* %5, align 8
  %8469 = load i64, i64* %7, align 8
  %8470 = and i64 %8468, %8469
  %8471 = xor i64 %8467, %8470
  %8472 = load i64, i64* %6, align 8
  %8473 = load i64, i64* %7, align 8
  %8474 = and i64 %8472, %8473
  %8475 = xor i64 %8471, %8474
  %8476 = add i64 %8464, %8475
  store i64 %8476, i64* %14, align 8
  %8477 = load i64, i64* %11, align 8
  store i64 %8477, i64* %12, align 8
  %8478 = load i64, i64* %10, align 8
  store i64 %8478, i64* %11, align 8
  %8479 = load i64, i64* %9, align 8
  store i64 %8479, i64* %10, align 8
  %8480 = load i64, i64* %8, align 8
  %8481 = load i64, i64* %13, align 8
  %8482 = add i64 %8480, %8481
  store i64 %8482, i64* %9, align 8
  %8483 = load i64, i64* %7, align 8
  store i64 %8483, i64* %8, align 8
  %8484 = load i64, i64* %6, align 8
  store i64 %8484, i64* %7, align 8
  %8485 = load i64, i64* %5, align 8
  store i64 %8485, i64* %6, align 8
  %8486 = load i64, i64* %13, align 8
  %8487 = load i64, i64* %14, align 8
  %8488 = add i64 %8486, %8487
  store i64 %8488, i64* %5, align 8
  %8489 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8490 = load i64, i64* %8489, align 8
  %8491 = lshr i64 %8490, 19
  %8492 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8493 = load i64, i64* %8492, align 8
  %8494 = shl i64 %8493, 45
  %8495 = or i64 %8491, %8494
  %8496 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8497 = load i64, i64* %8496, align 8
  %8498 = lshr i64 %8497, 61
  %8499 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8500 = load i64, i64* %8499, align 8
  %8501 = shl i64 %8500, 3
  %8502 = or i64 %8498, %8501
  %8503 = xor i64 %8495, %8502
  %8504 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %8505 = load i64, i64* %8504, align 8
  %8506 = lshr i64 %8505, 6
  %8507 = xor i64 %8503, %8506
  %8508 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %8509 = load i64, i64* %8508, align 16
  %8510 = add i64 %8507, %8509
  %8511 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8512 = load i64, i64* %8511, align 16
  %8513 = lshr i64 %8512, 1
  %8514 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8515 = load i64, i64* %8514, align 16
  %8516 = shl i64 %8515, 63
  %8517 = or i64 %8513, %8516
  %8518 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8519 = load i64, i64* %8518, align 16
  %8520 = lshr i64 %8519, 8
  %8521 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8522 = load i64, i64* %8521, align 16
  %8523 = shl i64 %8522, 56
  %8524 = or i64 %8520, %8523
  %8525 = xor i64 %8517, %8524
  %8526 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8527 = load i64, i64* %8526, align 16
  %8528 = lshr i64 %8527, 7
  %8529 = xor i64 %8525, %8528
  %8530 = add i64 %8510, %8529
  %8531 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 53
  %8532 = load i64, i64* %8531, align 8
  %8533 = add i64 %8530, %8532
  %8534 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  store i64 %8533, i64* %8534, align 8
  %8535 = load i64, i64* %12, align 8
  %8536 = load i64, i64* %9, align 8
  %8537 = lshr i64 %8536, 14
  %8538 = load i64, i64* %9, align 8
  %8539 = shl i64 %8538, 50
  %8540 = or i64 %8537, %8539
  %8541 = load i64, i64* %9, align 8
  %8542 = lshr i64 %8541, 18
  %8543 = load i64, i64* %9, align 8
  %8544 = shl i64 %8543, 46
  %8545 = or i64 %8542, %8544
  %8546 = xor i64 %8540, %8545
  %8547 = load i64, i64* %9, align 8
  %8548 = lshr i64 %8547, 41
  %8549 = load i64, i64* %9, align 8
  %8550 = shl i64 %8549, 23
  %8551 = or i64 %8548, %8550
  %8552 = xor i64 %8546, %8551
  %8553 = add i64 %8535, %8552
  %8554 = load i64, i64* %9, align 8
  %8555 = load i64, i64* %10, align 8
  %8556 = and i64 %8554, %8555
  %8557 = load i64, i64* %9, align 8
  %8558 = xor i64 %8557, -1
  %8559 = load i64, i64* %11, align 8
  %8560 = and i64 %8558, %8559
  %8561 = xor i64 %8556, %8560
  %8562 = add i64 %8553, %8561
  %8563 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 69), align 8
  %8564 = add i64 %8562, %8563
  %8565 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8566 = load i64, i64* %8565, align 8
  %8567 = add i64 %8564, %8566
  store i64 %8567, i64* %13, align 8
  %8568 = load i64, i64* %5, align 8
  %8569 = lshr i64 %8568, 28
  %8570 = load i64, i64* %5, align 8
  %8571 = shl i64 %8570, 36
  %8572 = or i64 %8569, %8571
  %8573 = load i64, i64* %5, align 8
  %8574 = lshr i64 %8573, 34
  %8575 = load i64, i64* %5, align 8
  %8576 = shl i64 %8575, 30
  %8577 = or i64 %8574, %8576
  %8578 = xor i64 %8572, %8577
  %8579 = load i64, i64* %5, align 8
  %8580 = lshr i64 %8579, 39
  %8581 = load i64, i64* %5, align 8
  %8582 = shl i64 %8581, 25
  %8583 = or i64 %8580, %8582
  %8584 = xor i64 %8578, %8583
  %8585 = load i64, i64* %5, align 8
  %8586 = load i64, i64* %6, align 8
  %8587 = and i64 %8585, %8586
  %8588 = load i64, i64* %5, align 8
  %8589 = load i64, i64* %7, align 8
  %8590 = and i64 %8588, %8589
  %8591 = xor i64 %8587, %8590
  %8592 = load i64, i64* %6, align 8
  %8593 = load i64, i64* %7, align 8
  %8594 = and i64 %8592, %8593
  %8595 = xor i64 %8591, %8594
  %8596 = add i64 %8584, %8595
  store i64 %8596, i64* %14, align 8
  %8597 = load i64, i64* %11, align 8
  store i64 %8597, i64* %12, align 8
  %8598 = load i64, i64* %10, align 8
  store i64 %8598, i64* %11, align 8
  %8599 = load i64, i64* %9, align 8
  store i64 %8599, i64* %10, align 8
  %8600 = load i64, i64* %8, align 8
  %8601 = load i64, i64* %13, align 8
  %8602 = add i64 %8600, %8601
  store i64 %8602, i64* %9, align 8
  %8603 = load i64, i64* %7, align 8
  store i64 %8603, i64* %8, align 8
  %8604 = load i64, i64* %6, align 8
  store i64 %8604, i64* %7, align 8
  %8605 = load i64, i64* %5, align 8
  store i64 %8605, i64* %6, align 8
  %8606 = load i64, i64* %13, align 8
  %8607 = load i64, i64* %14, align 8
  %8608 = add i64 %8606, %8607
  store i64 %8608, i64* %5, align 8
  %8609 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8610 = load i64, i64* %8609, align 16
  %8611 = lshr i64 %8610, 19
  %8612 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8613 = load i64, i64* %8612, align 16
  %8614 = shl i64 %8613, 45
  %8615 = or i64 %8611, %8614
  %8616 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8617 = load i64, i64* %8616, align 16
  %8618 = lshr i64 %8617, 61
  %8619 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8620 = load i64, i64* %8619, align 16
  %8621 = shl i64 %8620, 3
  %8622 = or i64 %8618, %8621
  %8623 = xor i64 %8615, %8622
  %8624 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %8625 = load i64, i64* %8624, align 16
  %8626 = lshr i64 %8625, 6
  %8627 = xor i64 %8623, %8626
  %8628 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %8629 = load i64, i64* %8628, align 8
  %8630 = add i64 %8627, %8629
  %8631 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8632 = load i64, i64* %8631, align 8
  %8633 = lshr i64 %8632, 1
  %8634 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8635 = load i64, i64* %8634, align 8
  %8636 = shl i64 %8635, 63
  %8637 = or i64 %8633, %8636
  %8638 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8639 = load i64, i64* %8638, align 8
  %8640 = lshr i64 %8639, 8
  %8641 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8642 = load i64, i64* %8641, align 8
  %8643 = shl i64 %8642, 56
  %8644 = or i64 %8640, %8643
  %8645 = xor i64 %8637, %8644
  %8646 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8647 = load i64, i64* %8646, align 8
  %8648 = lshr i64 %8647, 7
  %8649 = xor i64 %8645, %8648
  %8650 = add i64 %8630, %8649
  %8651 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 54
  %8652 = load i64, i64* %8651, align 16
  %8653 = add i64 %8650, %8652
  %8654 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  store i64 %8653, i64* %8654, align 16
  %8655 = load i64, i64* %12, align 8
  %8656 = load i64, i64* %9, align 8
  %8657 = lshr i64 %8656, 14
  %8658 = load i64, i64* %9, align 8
  %8659 = shl i64 %8658, 50
  %8660 = or i64 %8657, %8659
  %8661 = load i64, i64* %9, align 8
  %8662 = lshr i64 %8661, 18
  %8663 = load i64, i64* %9, align 8
  %8664 = shl i64 %8663, 46
  %8665 = or i64 %8662, %8664
  %8666 = xor i64 %8660, %8665
  %8667 = load i64, i64* %9, align 8
  %8668 = lshr i64 %8667, 41
  %8669 = load i64, i64* %9, align 8
  %8670 = shl i64 %8669, 23
  %8671 = or i64 %8668, %8670
  %8672 = xor i64 %8666, %8671
  %8673 = add i64 %8655, %8672
  %8674 = load i64, i64* %9, align 8
  %8675 = load i64, i64* %10, align 8
  %8676 = and i64 %8674, %8675
  %8677 = load i64, i64* %9, align 8
  %8678 = xor i64 %8677, -1
  %8679 = load i64, i64* %11, align 8
  %8680 = and i64 %8678, %8679
  %8681 = xor i64 %8676, %8680
  %8682 = add i64 %8673, %8681
  %8683 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 70), align 16
  %8684 = add i64 %8682, %8683
  %8685 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8686 = load i64, i64* %8685, align 16
  %8687 = add i64 %8684, %8686
  store i64 %8687, i64* %13, align 8
  %8688 = load i64, i64* %5, align 8
  %8689 = lshr i64 %8688, 28
  %8690 = load i64, i64* %5, align 8
  %8691 = shl i64 %8690, 36
  %8692 = or i64 %8689, %8691
  %8693 = load i64, i64* %5, align 8
  %8694 = lshr i64 %8693, 34
  %8695 = load i64, i64* %5, align 8
  %8696 = shl i64 %8695, 30
  %8697 = or i64 %8694, %8696
  %8698 = xor i64 %8692, %8697
  %8699 = load i64, i64* %5, align 8
  %8700 = lshr i64 %8699, 39
  %8701 = load i64, i64* %5, align 8
  %8702 = shl i64 %8701, 25
  %8703 = or i64 %8700, %8702
  %8704 = xor i64 %8698, %8703
  %8705 = load i64, i64* %5, align 8
  %8706 = load i64, i64* %6, align 8
  %8707 = and i64 %8705, %8706
  %8708 = load i64, i64* %5, align 8
  %8709 = load i64, i64* %7, align 8
  %8710 = and i64 %8708, %8709
  %8711 = xor i64 %8707, %8710
  %8712 = load i64, i64* %6, align 8
  %8713 = load i64, i64* %7, align 8
  %8714 = and i64 %8712, %8713
  %8715 = xor i64 %8711, %8714
  %8716 = add i64 %8704, %8715
  store i64 %8716, i64* %14, align 8
  %8717 = load i64, i64* %11, align 8
  store i64 %8717, i64* %12, align 8
  %8718 = load i64, i64* %10, align 8
  store i64 %8718, i64* %11, align 8
  %8719 = load i64, i64* %9, align 8
  store i64 %8719, i64* %10, align 8
  %8720 = load i64, i64* %8, align 8
  %8721 = load i64, i64* %13, align 8
  %8722 = add i64 %8720, %8721
  store i64 %8722, i64* %9, align 8
  %8723 = load i64, i64* %7, align 8
  store i64 %8723, i64* %8, align 8
  %8724 = load i64, i64* %6, align 8
  store i64 %8724, i64* %7, align 8
  %8725 = load i64, i64* %5, align 8
  store i64 %8725, i64* %6, align 8
  %8726 = load i64, i64* %13, align 8
  %8727 = load i64, i64* %14, align 8
  %8728 = add i64 %8726, %8727
  store i64 %8728, i64* %5, align 8
  %8729 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8730 = load i64, i64* %8729, align 8
  %8731 = lshr i64 %8730, 19
  %8732 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8733 = load i64, i64* %8732, align 8
  %8734 = shl i64 %8733, 45
  %8735 = or i64 %8731, %8734
  %8736 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8737 = load i64, i64* %8736, align 8
  %8738 = lshr i64 %8737, 61
  %8739 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8740 = load i64, i64* %8739, align 8
  %8741 = shl i64 %8740, 3
  %8742 = or i64 %8738, %8741
  %8743 = xor i64 %8735, %8742
  %8744 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %8745 = load i64, i64* %8744, align 8
  %8746 = lshr i64 %8745, 6
  %8747 = xor i64 %8743, %8746
  %8748 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %8749 = load i64, i64* %8748, align 16
  %8750 = add i64 %8747, %8749
  %8751 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8752 = load i64, i64* %8751, align 16
  %8753 = lshr i64 %8752, 1
  %8754 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8755 = load i64, i64* %8754, align 16
  %8756 = shl i64 %8755, 63
  %8757 = or i64 %8753, %8756
  %8758 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8759 = load i64, i64* %8758, align 16
  %8760 = lshr i64 %8759, 8
  %8761 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8762 = load i64, i64* %8761, align 16
  %8763 = shl i64 %8762, 56
  %8764 = or i64 %8760, %8763
  %8765 = xor i64 %8757, %8764
  %8766 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8767 = load i64, i64* %8766, align 16
  %8768 = lshr i64 %8767, 7
  %8769 = xor i64 %8765, %8768
  %8770 = add i64 %8750, %8769
  %8771 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 55
  %8772 = load i64, i64* %8771, align 8
  %8773 = add i64 %8770, %8772
  %8774 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  store i64 %8773, i64* %8774, align 8
  %8775 = load i64, i64* %12, align 8
  %8776 = load i64, i64* %9, align 8
  %8777 = lshr i64 %8776, 14
  %8778 = load i64, i64* %9, align 8
  %8779 = shl i64 %8778, 50
  %8780 = or i64 %8777, %8779
  %8781 = load i64, i64* %9, align 8
  %8782 = lshr i64 %8781, 18
  %8783 = load i64, i64* %9, align 8
  %8784 = shl i64 %8783, 46
  %8785 = or i64 %8782, %8784
  %8786 = xor i64 %8780, %8785
  %8787 = load i64, i64* %9, align 8
  %8788 = lshr i64 %8787, 41
  %8789 = load i64, i64* %9, align 8
  %8790 = shl i64 %8789, 23
  %8791 = or i64 %8788, %8790
  %8792 = xor i64 %8786, %8791
  %8793 = add i64 %8775, %8792
  %8794 = load i64, i64* %9, align 8
  %8795 = load i64, i64* %10, align 8
  %8796 = and i64 %8794, %8795
  %8797 = load i64, i64* %9, align 8
  %8798 = xor i64 %8797, -1
  %8799 = load i64, i64* %11, align 8
  %8800 = and i64 %8798, %8799
  %8801 = xor i64 %8796, %8800
  %8802 = add i64 %8793, %8801
  %8803 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 71), align 8
  %8804 = add i64 %8802, %8803
  %8805 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8806 = load i64, i64* %8805, align 8
  %8807 = add i64 %8804, %8806
  store i64 %8807, i64* %13, align 8
  %8808 = load i64, i64* %5, align 8
  %8809 = lshr i64 %8808, 28
  %8810 = load i64, i64* %5, align 8
  %8811 = shl i64 %8810, 36
  %8812 = or i64 %8809, %8811
  %8813 = load i64, i64* %5, align 8
  %8814 = lshr i64 %8813, 34
  %8815 = load i64, i64* %5, align 8
  %8816 = shl i64 %8815, 30
  %8817 = or i64 %8814, %8816
  %8818 = xor i64 %8812, %8817
  %8819 = load i64, i64* %5, align 8
  %8820 = lshr i64 %8819, 39
  %8821 = load i64, i64* %5, align 8
  %8822 = shl i64 %8821, 25
  %8823 = or i64 %8820, %8822
  %8824 = xor i64 %8818, %8823
  %8825 = load i64, i64* %5, align 8
  %8826 = load i64, i64* %6, align 8
  %8827 = and i64 %8825, %8826
  %8828 = load i64, i64* %5, align 8
  %8829 = load i64, i64* %7, align 8
  %8830 = and i64 %8828, %8829
  %8831 = xor i64 %8827, %8830
  %8832 = load i64, i64* %6, align 8
  %8833 = load i64, i64* %7, align 8
  %8834 = and i64 %8832, %8833
  %8835 = xor i64 %8831, %8834
  %8836 = add i64 %8824, %8835
  store i64 %8836, i64* %14, align 8
  %8837 = load i64, i64* %11, align 8
  store i64 %8837, i64* %12, align 8
  %8838 = load i64, i64* %10, align 8
  store i64 %8838, i64* %11, align 8
  %8839 = load i64, i64* %9, align 8
  store i64 %8839, i64* %10, align 8
  %8840 = load i64, i64* %8, align 8
  %8841 = load i64, i64* %13, align 8
  %8842 = add i64 %8840, %8841
  store i64 %8842, i64* %9, align 8
  %8843 = load i64, i64* %7, align 8
  store i64 %8843, i64* %8, align 8
  %8844 = load i64, i64* %6, align 8
  store i64 %8844, i64* %7, align 8
  %8845 = load i64, i64* %5, align 8
  store i64 %8845, i64* %6, align 8
  %8846 = load i64, i64* %13, align 8
  %8847 = load i64, i64* %14, align 8
  %8848 = add i64 %8846, %8847
  store i64 %8848, i64* %5, align 8
  %8849 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8850 = load i64, i64* %8849, align 16
  %8851 = lshr i64 %8850, 19
  %8852 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8853 = load i64, i64* %8852, align 16
  %8854 = shl i64 %8853, 45
  %8855 = or i64 %8851, %8854
  %8856 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8857 = load i64, i64* %8856, align 16
  %8858 = lshr i64 %8857, 61
  %8859 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8860 = load i64, i64* %8859, align 16
  %8861 = shl i64 %8860, 3
  %8862 = or i64 %8858, %8861
  %8863 = xor i64 %8855, %8862
  %8864 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %8865 = load i64, i64* %8864, align 16
  %8866 = lshr i64 %8865, 6
  %8867 = xor i64 %8863, %8866
  %8868 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 65
  %8869 = load i64, i64* %8868, align 8
  %8870 = add i64 %8867, %8869
  %8871 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %8872 = load i64, i64* %8871, align 8
  %8873 = lshr i64 %8872, 1
  %8874 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %8875 = load i64, i64* %8874, align 8
  %8876 = shl i64 %8875, 63
  %8877 = or i64 %8873, %8876
  %8878 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %8879 = load i64, i64* %8878, align 8
  %8880 = lshr i64 %8879, 8
  %8881 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %8882 = load i64, i64* %8881, align 8
  %8883 = shl i64 %8882, 56
  %8884 = or i64 %8880, %8883
  %8885 = xor i64 %8877, %8884
  %8886 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %8887 = load i64, i64* %8886, align 8
  %8888 = lshr i64 %8887, 7
  %8889 = xor i64 %8885, %8888
  %8890 = add i64 %8870, %8889
  %8891 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 56
  %8892 = load i64, i64* %8891, align 16
  %8893 = add i64 %8890, %8892
  %8894 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  store i64 %8893, i64* %8894, align 16
  %8895 = load i64, i64* %12, align 8
  %8896 = load i64, i64* %9, align 8
  %8897 = lshr i64 %8896, 14
  %8898 = load i64, i64* %9, align 8
  %8899 = shl i64 %8898, 50
  %8900 = or i64 %8897, %8899
  %8901 = load i64, i64* %9, align 8
  %8902 = lshr i64 %8901, 18
  %8903 = load i64, i64* %9, align 8
  %8904 = shl i64 %8903, 46
  %8905 = or i64 %8902, %8904
  %8906 = xor i64 %8900, %8905
  %8907 = load i64, i64* %9, align 8
  %8908 = lshr i64 %8907, 41
  %8909 = load i64, i64* %9, align 8
  %8910 = shl i64 %8909, 23
  %8911 = or i64 %8908, %8910
  %8912 = xor i64 %8906, %8911
  %8913 = add i64 %8895, %8912
  %8914 = load i64, i64* %9, align 8
  %8915 = load i64, i64* %10, align 8
  %8916 = and i64 %8914, %8915
  %8917 = load i64, i64* %9, align 8
  %8918 = xor i64 %8917, -1
  %8919 = load i64, i64* %11, align 8
  %8920 = and i64 %8918, %8919
  %8921 = xor i64 %8916, %8920
  %8922 = add i64 %8913, %8921
  %8923 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 72), align 16
  %8924 = add i64 %8922, %8923
  %8925 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %8926 = load i64, i64* %8925, align 16
  %8927 = add i64 %8924, %8926
  store i64 %8927, i64* %13, align 8
  %8928 = load i64, i64* %5, align 8
  %8929 = lshr i64 %8928, 28
  %8930 = load i64, i64* %5, align 8
  %8931 = shl i64 %8930, 36
  %8932 = or i64 %8929, %8931
  %8933 = load i64, i64* %5, align 8
  %8934 = lshr i64 %8933, 34
  %8935 = load i64, i64* %5, align 8
  %8936 = shl i64 %8935, 30
  %8937 = or i64 %8934, %8936
  %8938 = xor i64 %8932, %8937
  %8939 = load i64, i64* %5, align 8
  %8940 = lshr i64 %8939, 39
  %8941 = load i64, i64* %5, align 8
  %8942 = shl i64 %8941, 25
  %8943 = or i64 %8940, %8942
  %8944 = xor i64 %8938, %8943
  %8945 = load i64, i64* %5, align 8
  %8946 = load i64, i64* %6, align 8
  %8947 = and i64 %8945, %8946
  %8948 = load i64, i64* %5, align 8
  %8949 = load i64, i64* %7, align 8
  %8950 = and i64 %8948, %8949
  %8951 = xor i64 %8947, %8950
  %8952 = load i64, i64* %6, align 8
  %8953 = load i64, i64* %7, align 8
  %8954 = and i64 %8952, %8953
  %8955 = xor i64 %8951, %8954
  %8956 = add i64 %8944, %8955
  store i64 %8956, i64* %14, align 8
  %8957 = load i64, i64* %11, align 8
  store i64 %8957, i64* %12, align 8
  %8958 = load i64, i64* %10, align 8
  store i64 %8958, i64* %11, align 8
  %8959 = load i64, i64* %9, align 8
  store i64 %8959, i64* %10, align 8
  %8960 = load i64, i64* %8, align 8
  %8961 = load i64, i64* %13, align 8
  %8962 = add i64 %8960, %8961
  store i64 %8962, i64* %9, align 8
  %8963 = load i64, i64* %7, align 8
  store i64 %8963, i64* %8, align 8
  %8964 = load i64, i64* %6, align 8
  store i64 %8964, i64* %7, align 8
  %8965 = load i64, i64* %5, align 8
  store i64 %8965, i64* %6, align 8
  %8966 = load i64, i64* %13, align 8
  %8967 = load i64, i64* %14, align 8
  %8968 = add i64 %8966, %8967
  store i64 %8968, i64* %5, align 8
  %8969 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8970 = load i64, i64* %8969, align 8
  %8971 = lshr i64 %8970, 19
  %8972 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8973 = load i64, i64* %8972, align 8
  %8974 = shl i64 %8973, 45
  %8975 = or i64 %8971, %8974
  %8976 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8977 = load i64, i64* %8976, align 8
  %8978 = lshr i64 %8977, 61
  %8979 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8980 = load i64, i64* %8979, align 8
  %8981 = shl i64 %8980, 3
  %8982 = or i64 %8978, %8981
  %8983 = xor i64 %8975, %8982
  %8984 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %8985 = load i64, i64* %8984, align 8
  %8986 = lshr i64 %8985, 6
  %8987 = xor i64 %8983, %8986
  %8988 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 66
  %8989 = load i64, i64* %8988, align 16
  %8990 = add i64 %8987, %8989
  %8991 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %8992 = load i64, i64* %8991, align 16
  %8993 = lshr i64 %8992, 1
  %8994 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %8995 = load i64, i64* %8994, align 16
  %8996 = shl i64 %8995, 63
  %8997 = or i64 %8993, %8996
  %8998 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %8999 = load i64, i64* %8998, align 16
  %9000 = lshr i64 %8999, 8
  %9001 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %9002 = load i64, i64* %9001, align 16
  %9003 = shl i64 %9002, 56
  %9004 = or i64 %9000, %9003
  %9005 = xor i64 %8997, %9004
  %9006 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %9007 = load i64, i64* %9006, align 16
  %9008 = lshr i64 %9007, 7
  %9009 = xor i64 %9005, %9008
  %9010 = add i64 %8990, %9009
  %9011 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 57
  %9012 = load i64, i64* %9011, align 8
  %9013 = add i64 %9010, %9012
  %9014 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  store i64 %9013, i64* %9014, align 8
  %9015 = load i64, i64* %12, align 8
  %9016 = load i64, i64* %9, align 8
  %9017 = lshr i64 %9016, 14
  %9018 = load i64, i64* %9, align 8
  %9019 = shl i64 %9018, 50
  %9020 = or i64 %9017, %9019
  %9021 = load i64, i64* %9, align 8
  %9022 = lshr i64 %9021, 18
  %9023 = load i64, i64* %9, align 8
  %9024 = shl i64 %9023, 46
  %9025 = or i64 %9022, %9024
  %9026 = xor i64 %9020, %9025
  %9027 = load i64, i64* %9, align 8
  %9028 = lshr i64 %9027, 41
  %9029 = load i64, i64* %9, align 8
  %9030 = shl i64 %9029, 23
  %9031 = or i64 %9028, %9030
  %9032 = xor i64 %9026, %9031
  %9033 = add i64 %9015, %9032
  %9034 = load i64, i64* %9, align 8
  %9035 = load i64, i64* %10, align 8
  %9036 = and i64 %9034, %9035
  %9037 = load i64, i64* %9, align 8
  %9038 = xor i64 %9037, -1
  %9039 = load i64, i64* %11, align 8
  %9040 = and i64 %9038, %9039
  %9041 = xor i64 %9036, %9040
  %9042 = add i64 %9033, %9041
  %9043 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 73), align 8
  %9044 = add i64 %9042, %9043
  %9045 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9046 = load i64, i64* %9045, align 8
  %9047 = add i64 %9044, %9046
  store i64 %9047, i64* %13, align 8
  %9048 = load i64, i64* %5, align 8
  %9049 = lshr i64 %9048, 28
  %9050 = load i64, i64* %5, align 8
  %9051 = shl i64 %9050, 36
  %9052 = or i64 %9049, %9051
  %9053 = load i64, i64* %5, align 8
  %9054 = lshr i64 %9053, 34
  %9055 = load i64, i64* %5, align 8
  %9056 = shl i64 %9055, 30
  %9057 = or i64 %9054, %9056
  %9058 = xor i64 %9052, %9057
  %9059 = load i64, i64* %5, align 8
  %9060 = lshr i64 %9059, 39
  %9061 = load i64, i64* %5, align 8
  %9062 = shl i64 %9061, 25
  %9063 = or i64 %9060, %9062
  %9064 = xor i64 %9058, %9063
  %9065 = load i64, i64* %5, align 8
  %9066 = load i64, i64* %6, align 8
  %9067 = and i64 %9065, %9066
  %9068 = load i64, i64* %5, align 8
  %9069 = load i64, i64* %7, align 8
  %9070 = and i64 %9068, %9069
  %9071 = xor i64 %9067, %9070
  %9072 = load i64, i64* %6, align 8
  %9073 = load i64, i64* %7, align 8
  %9074 = and i64 %9072, %9073
  %9075 = xor i64 %9071, %9074
  %9076 = add i64 %9064, %9075
  store i64 %9076, i64* %14, align 8
  %9077 = load i64, i64* %11, align 8
  store i64 %9077, i64* %12, align 8
  %9078 = load i64, i64* %10, align 8
  store i64 %9078, i64* %11, align 8
  %9079 = load i64, i64* %9, align 8
  store i64 %9079, i64* %10, align 8
  %9080 = load i64, i64* %8, align 8
  %9081 = load i64, i64* %13, align 8
  %9082 = add i64 %9080, %9081
  store i64 %9082, i64* %9, align 8
  %9083 = load i64, i64* %7, align 8
  store i64 %9083, i64* %8, align 8
  %9084 = load i64, i64* %6, align 8
  store i64 %9084, i64* %7, align 8
  %9085 = load i64, i64* %5, align 8
  store i64 %9085, i64* %6, align 8
  %9086 = load i64, i64* %13, align 8
  %9087 = load i64, i64* %14, align 8
  %9088 = add i64 %9086, %9087
  store i64 %9088, i64* %5, align 8
  %9089 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9090 = load i64, i64* %9089, align 16
  %9091 = lshr i64 %9090, 19
  %9092 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9093 = load i64, i64* %9092, align 16
  %9094 = shl i64 %9093, 45
  %9095 = or i64 %9091, %9094
  %9096 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9097 = load i64, i64* %9096, align 16
  %9098 = lshr i64 %9097, 61
  %9099 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9100 = load i64, i64* %9099, align 16
  %9101 = shl i64 %9100, 3
  %9102 = or i64 %9098, %9101
  %9103 = xor i64 %9095, %9102
  %9104 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9105 = load i64, i64* %9104, align 16
  %9106 = lshr i64 %9105, 6
  %9107 = xor i64 %9103, %9106
  %9108 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 67
  %9109 = load i64, i64* %9108, align 8
  %9110 = add i64 %9107, %9109
  %9111 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9112 = load i64, i64* %9111, align 8
  %9113 = lshr i64 %9112, 1
  %9114 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9115 = load i64, i64* %9114, align 8
  %9116 = shl i64 %9115, 63
  %9117 = or i64 %9113, %9116
  %9118 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9119 = load i64, i64* %9118, align 8
  %9120 = lshr i64 %9119, 8
  %9121 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9122 = load i64, i64* %9121, align 8
  %9123 = shl i64 %9122, 56
  %9124 = or i64 %9120, %9123
  %9125 = xor i64 %9117, %9124
  %9126 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9127 = load i64, i64* %9126, align 8
  %9128 = lshr i64 %9127, 7
  %9129 = xor i64 %9125, %9128
  %9130 = add i64 %9110, %9129
  %9131 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 58
  %9132 = load i64, i64* %9131, align 16
  %9133 = add i64 %9130, %9132
  %9134 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  store i64 %9133, i64* %9134, align 16
  %9135 = load i64, i64* %12, align 8
  %9136 = load i64, i64* %9, align 8
  %9137 = lshr i64 %9136, 14
  %9138 = load i64, i64* %9, align 8
  %9139 = shl i64 %9138, 50
  %9140 = or i64 %9137, %9139
  %9141 = load i64, i64* %9, align 8
  %9142 = lshr i64 %9141, 18
  %9143 = load i64, i64* %9, align 8
  %9144 = shl i64 %9143, 46
  %9145 = or i64 %9142, %9144
  %9146 = xor i64 %9140, %9145
  %9147 = load i64, i64* %9, align 8
  %9148 = lshr i64 %9147, 41
  %9149 = load i64, i64* %9, align 8
  %9150 = shl i64 %9149, 23
  %9151 = or i64 %9148, %9150
  %9152 = xor i64 %9146, %9151
  %9153 = add i64 %9135, %9152
  %9154 = load i64, i64* %9, align 8
  %9155 = load i64, i64* %10, align 8
  %9156 = and i64 %9154, %9155
  %9157 = load i64, i64* %9, align 8
  %9158 = xor i64 %9157, -1
  %9159 = load i64, i64* %11, align 8
  %9160 = and i64 %9158, %9159
  %9161 = xor i64 %9156, %9160
  %9162 = add i64 %9153, %9161
  %9163 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 74), align 16
  %9164 = add i64 %9162, %9163
  %9165 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9166 = load i64, i64* %9165, align 16
  %9167 = add i64 %9164, %9166
  store i64 %9167, i64* %13, align 8
  %9168 = load i64, i64* %5, align 8
  %9169 = lshr i64 %9168, 28
  %9170 = load i64, i64* %5, align 8
  %9171 = shl i64 %9170, 36
  %9172 = or i64 %9169, %9171
  %9173 = load i64, i64* %5, align 8
  %9174 = lshr i64 %9173, 34
  %9175 = load i64, i64* %5, align 8
  %9176 = shl i64 %9175, 30
  %9177 = or i64 %9174, %9176
  %9178 = xor i64 %9172, %9177
  %9179 = load i64, i64* %5, align 8
  %9180 = lshr i64 %9179, 39
  %9181 = load i64, i64* %5, align 8
  %9182 = shl i64 %9181, 25
  %9183 = or i64 %9180, %9182
  %9184 = xor i64 %9178, %9183
  %9185 = load i64, i64* %5, align 8
  %9186 = load i64, i64* %6, align 8
  %9187 = and i64 %9185, %9186
  %9188 = load i64, i64* %5, align 8
  %9189 = load i64, i64* %7, align 8
  %9190 = and i64 %9188, %9189
  %9191 = xor i64 %9187, %9190
  %9192 = load i64, i64* %6, align 8
  %9193 = load i64, i64* %7, align 8
  %9194 = and i64 %9192, %9193
  %9195 = xor i64 %9191, %9194
  %9196 = add i64 %9184, %9195
  store i64 %9196, i64* %14, align 8
  %9197 = load i64, i64* %11, align 8
  store i64 %9197, i64* %12, align 8
  %9198 = load i64, i64* %10, align 8
  store i64 %9198, i64* %11, align 8
  %9199 = load i64, i64* %9, align 8
  store i64 %9199, i64* %10, align 8
  %9200 = load i64, i64* %8, align 8
  %9201 = load i64, i64* %13, align 8
  %9202 = add i64 %9200, %9201
  store i64 %9202, i64* %9, align 8
  %9203 = load i64, i64* %7, align 8
  store i64 %9203, i64* %8, align 8
  %9204 = load i64, i64* %6, align 8
  store i64 %9204, i64* %7, align 8
  %9205 = load i64, i64* %5, align 8
  store i64 %9205, i64* %6, align 8
  %9206 = load i64, i64* %13, align 8
  %9207 = load i64, i64* %14, align 8
  %9208 = add i64 %9206, %9207
  store i64 %9208, i64* %5, align 8
  %9209 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9210 = load i64, i64* %9209, align 8
  %9211 = lshr i64 %9210, 19
  %9212 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9213 = load i64, i64* %9212, align 8
  %9214 = shl i64 %9213, 45
  %9215 = or i64 %9211, %9214
  %9216 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9217 = load i64, i64* %9216, align 8
  %9218 = lshr i64 %9217, 61
  %9219 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9220 = load i64, i64* %9219, align 8
  %9221 = shl i64 %9220, 3
  %9222 = or i64 %9218, %9221
  %9223 = xor i64 %9215, %9222
  %9224 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 73
  %9225 = load i64, i64* %9224, align 8
  %9226 = lshr i64 %9225, 6
  %9227 = xor i64 %9223, %9226
  %9228 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 68
  %9229 = load i64, i64* %9228, align 16
  %9230 = add i64 %9227, %9229
  %9231 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9232 = load i64, i64* %9231, align 16
  %9233 = lshr i64 %9232, 1
  %9234 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9235 = load i64, i64* %9234, align 16
  %9236 = shl i64 %9235, 63
  %9237 = or i64 %9233, %9236
  %9238 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9239 = load i64, i64* %9238, align 16
  %9240 = lshr i64 %9239, 8
  %9241 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9242 = load i64, i64* %9241, align 16
  %9243 = shl i64 %9242, 56
  %9244 = or i64 %9240, %9243
  %9245 = xor i64 %9237, %9244
  %9246 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9247 = load i64, i64* %9246, align 16
  %9248 = lshr i64 %9247, 7
  %9249 = xor i64 %9245, %9248
  %9250 = add i64 %9230, %9249
  %9251 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 59
  %9252 = load i64, i64* %9251, align 8
  %9253 = add i64 %9250, %9252
  %9254 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  store i64 %9253, i64* %9254, align 8
  %9255 = load i64, i64* %12, align 8
  %9256 = load i64, i64* %9, align 8
  %9257 = lshr i64 %9256, 14
  %9258 = load i64, i64* %9, align 8
  %9259 = shl i64 %9258, 50
  %9260 = or i64 %9257, %9259
  %9261 = load i64, i64* %9, align 8
  %9262 = lshr i64 %9261, 18
  %9263 = load i64, i64* %9, align 8
  %9264 = shl i64 %9263, 46
  %9265 = or i64 %9262, %9264
  %9266 = xor i64 %9260, %9265
  %9267 = load i64, i64* %9, align 8
  %9268 = lshr i64 %9267, 41
  %9269 = load i64, i64* %9, align 8
  %9270 = shl i64 %9269, 23
  %9271 = or i64 %9268, %9270
  %9272 = xor i64 %9266, %9271
  %9273 = add i64 %9255, %9272
  %9274 = load i64, i64* %9, align 8
  %9275 = load i64, i64* %10, align 8
  %9276 = and i64 %9274, %9275
  %9277 = load i64, i64* %9, align 8
  %9278 = xor i64 %9277, -1
  %9279 = load i64, i64* %11, align 8
  %9280 = and i64 %9278, %9279
  %9281 = xor i64 %9276, %9280
  %9282 = add i64 %9273, %9281
  %9283 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 75), align 8
  %9284 = add i64 %9282, %9283
  %9285 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9286 = load i64, i64* %9285, align 8
  %9287 = add i64 %9284, %9286
  store i64 %9287, i64* %13, align 8
  %9288 = load i64, i64* %5, align 8
  %9289 = lshr i64 %9288, 28
  %9290 = load i64, i64* %5, align 8
  %9291 = shl i64 %9290, 36
  %9292 = or i64 %9289, %9291
  %9293 = load i64, i64* %5, align 8
  %9294 = lshr i64 %9293, 34
  %9295 = load i64, i64* %5, align 8
  %9296 = shl i64 %9295, 30
  %9297 = or i64 %9294, %9296
  %9298 = xor i64 %9292, %9297
  %9299 = load i64, i64* %5, align 8
  %9300 = lshr i64 %9299, 39
  %9301 = load i64, i64* %5, align 8
  %9302 = shl i64 %9301, 25
  %9303 = or i64 %9300, %9302
  %9304 = xor i64 %9298, %9303
  %9305 = load i64, i64* %5, align 8
  %9306 = load i64, i64* %6, align 8
  %9307 = and i64 %9305, %9306
  %9308 = load i64, i64* %5, align 8
  %9309 = load i64, i64* %7, align 8
  %9310 = and i64 %9308, %9309
  %9311 = xor i64 %9307, %9310
  %9312 = load i64, i64* %6, align 8
  %9313 = load i64, i64* %7, align 8
  %9314 = and i64 %9312, %9313
  %9315 = xor i64 %9311, %9314
  %9316 = add i64 %9304, %9315
  store i64 %9316, i64* %14, align 8
  %9317 = load i64, i64* %11, align 8
  store i64 %9317, i64* %12, align 8
  %9318 = load i64, i64* %10, align 8
  store i64 %9318, i64* %11, align 8
  %9319 = load i64, i64* %9, align 8
  store i64 %9319, i64* %10, align 8
  %9320 = load i64, i64* %8, align 8
  %9321 = load i64, i64* %13, align 8
  %9322 = add i64 %9320, %9321
  store i64 %9322, i64* %9, align 8
  %9323 = load i64, i64* %7, align 8
  store i64 %9323, i64* %8, align 8
  %9324 = load i64, i64* %6, align 8
  store i64 %9324, i64* %7, align 8
  %9325 = load i64, i64* %5, align 8
  store i64 %9325, i64* %6, align 8
  %9326 = load i64, i64* %13, align 8
  %9327 = load i64, i64* %14, align 8
  %9328 = add i64 %9326, %9327
  store i64 %9328, i64* %5, align 8
  %9329 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9330 = load i64, i64* %9329, align 16
  %9331 = lshr i64 %9330, 19
  %9332 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9333 = load i64, i64* %9332, align 16
  %9334 = shl i64 %9333, 45
  %9335 = or i64 %9331, %9334
  %9336 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9337 = load i64, i64* %9336, align 16
  %9338 = lshr i64 %9337, 61
  %9339 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9340 = load i64, i64* %9339, align 16
  %9341 = shl i64 %9340, 3
  %9342 = or i64 %9338, %9341
  %9343 = xor i64 %9335, %9342
  %9344 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 74
  %9345 = load i64, i64* %9344, align 16
  %9346 = lshr i64 %9345, 6
  %9347 = xor i64 %9343, %9346
  %9348 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 69
  %9349 = load i64, i64* %9348, align 8
  %9350 = add i64 %9347, %9349
  %9351 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9352 = load i64, i64* %9351, align 8
  %9353 = lshr i64 %9352, 1
  %9354 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9355 = load i64, i64* %9354, align 8
  %9356 = shl i64 %9355, 63
  %9357 = or i64 %9353, %9356
  %9358 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9359 = load i64, i64* %9358, align 8
  %9360 = lshr i64 %9359, 8
  %9361 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9362 = load i64, i64* %9361, align 8
  %9363 = shl i64 %9362, 56
  %9364 = or i64 %9360, %9363
  %9365 = xor i64 %9357, %9364
  %9366 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9367 = load i64, i64* %9366, align 8
  %9368 = lshr i64 %9367, 7
  %9369 = xor i64 %9365, %9368
  %9370 = add i64 %9350, %9369
  %9371 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 60
  %9372 = load i64, i64* %9371, align 16
  %9373 = add i64 %9370, %9372
  %9374 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  store i64 %9373, i64* %9374, align 16
  %9375 = load i64, i64* %12, align 8
  %9376 = load i64, i64* %9, align 8
  %9377 = lshr i64 %9376, 14
  %9378 = load i64, i64* %9, align 8
  %9379 = shl i64 %9378, 50
  %9380 = or i64 %9377, %9379
  %9381 = load i64, i64* %9, align 8
  %9382 = lshr i64 %9381, 18
  %9383 = load i64, i64* %9, align 8
  %9384 = shl i64 %9383, 46
  %9385 = or i64 %9382, %9384
  %9386 = xor i64 %9380, %9385
  %9387 = load i64, i64* %9, align 8
  %9388 = lshr i64 %9387, 41
  %9389 = load i64, i64* %9, align 8
  %9390 = shl i64 %9389, 23
  %9391 = or i64 %9388, %9390
  %9392 = xor i64 %9386, %9391
  %9393 = add i64 %9375, %9392
  %9394 = load i64, i64* %9, align 8
  %9395 = load i64, i64* %10, align 8
  %9396 = and i64 %9394, %9395
  %9397 = load i64, i64* %9, align 8
  %9398 = xor i64 %9397, -1
  %9399 = load i64, i64* %11, align 8
  %9400 = and i64 %9398, %9399
  %9401 = xor i64 %9396, %9400
  %9402 = add i64 %9393, %9401
  %9403 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 76), align 16
  %9404 = add i64 %9402, %9403
  %9405 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9406 = load i64, i64* %9405, align 16
  %9407 = add i64 %9404, %9406
  store i64 %9407, i64* %13, align 8
  %9408 = load i64, i64* %5, align 8
  %9409 = lshr i64 %9408, 28
  %9410 = load i64, i64* %5, align 8
  %9411 = shl i64 %9410, 36
  %9412 = or i64 %9409, %9411
  %9413 = load i64, i64* %5, align 8
  %9414 = lshr i64 %9413, 34
  %9415 = load i64, i64* %5, align 8
  %9416 = shl i64 %9415, 30
  %9417 = or i64 %9414, %9416
  %9418 = xor i64 %9412, %9417
  %9419 = load i64, i64* %5, align 8
  %9420 = lshr i64 %9419, 39
  %9421 = load i64, i64* %5, align 8
  %9422 = shl i64 %9421, 25
  %9423 = or i64 %9420, %9422
  %9424 = xor i64 %9418, %9423
  %9425 = load i64, i64* %5, align 8
  %9426 = load i64, i64* %6, align 8
  %9427 = and i64 %9425, %9426
  %9428 = load i64, i64* %5, align 8
  %9429 = load i64, i64* %7, align 8
  %9430 = and i64 %9428, %9429
  %9431 = xor i64 %9427, %9430
  %9432 = load i64, i64* %6, align 8
  %9433 = load i64, i64* %7, align 8
  %9434 = and i64 %9432, %9433
  %9435 = xor i64 %9431, %9434
  %9436 = add i64 %9424, %9435
  store i64 %9436, i64* %14, align 8
  %9437 = load i64, i64* %11, align 8
  store i64 %9437, i64* %12, align 8
  %9438 = load i64, i64* %10, align 8
  store i64 %9438, i64* %11, align 8
  %9439 = load i64, i64* %9, align 8
  store i64 %9439, i64* %10, align 8
  %9440 = load i64, i64* %8, align 8
  %9441 = load i64, i64* %13, align 8
  %9442 = add i64 %9440, %9441
  store i64 %9442, i64* %9, align 8
  %9443 = load i64, i64* %7, align 8
  store i64 %9443, i64* %8, align 8
  %9444 = load i64, i64* %6, align 8
  store i64 %9444, i64* %7, align 8
  %9445 = load i64, i64* %5, align 8
  store i64 %9445, i64* %6, align 8
  %9446 = load i64, i64* %13, align 8
  %9447 = load i64, i64* %14, align 8
  %9448 = add i64 %9446, %9447
  store i64 %9448, i64* %5, align 8
  %9449 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9450 = load i64, i64* %9449, align 8
  %9451 = lshr i64 %9450, 19
  %9452 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9453 = load i64, i64* %9452, align 8
  %9454 = shl i64 %9453, 45
  %9455 = or i64 %9451, %9454
  %9456 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9457 = load i64, i64* %9456, align 8
  %9458 = lshr i64 %9457, 61
  %9459 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9460 = load i64, i64* %9459, align 8
  %9461 = shl i64 %9460, 3
  %9462 = or i64 %9458, %9461
  %9463 = xor i64 %9455, %9462
  %9464 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 75
  %9465 = load i64, i64* %9464, align 8
  %9466 = lshr i64 %9465, 6
  %9467 = xor i64 %9463, %9466
  %9468 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 70
  %9469 = load i64, i64* %9468, align 16
  %9470 = add i64 %9467, %9469
  %9471 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9472 = load i64, i64* %9471, align 16
  %9473 = lshr i64 %9472, 1
  %9474 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9475 = load i64, i64* %9474, align 16
  %9476 = shl i64 %9475, 63
  %9477 = or i64 %9473, %9476
  %9478 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9479 = load i64, i64* %9478, align 16
  %9480 = lshr i64 %9479, 8
  %9481 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9482 = load i64, i64* %9481, align 16
  %9483 = shl i64 %9482, 56
  %9484 = or i64 %9480, %9483
  %9485 = xor i64 %9477, %9484
  %9486 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9487 = load i64, i64* %9486, align 16
  %9488 = lshr i64 %9487, 7
  %9489 = xor i64 %9485, %9488
  %9490 = add i64 %9470, %9489
  %9491 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 61
  %9492 = load i64, i64* %9491, align 8
  %9493 = add i64 %9490, %9492
  %9494 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  store i64 %9493, i64* %9494, align 8
  %9495 = load i64, i64* %12, align 8
  %9496 = load i64, i64* %9, align 8
  %9497 = lshr i64 %9496, 14
  %9498 = load i64, i64* %9, align 8
  %9499 = shl i64 %9498, 50
  %9500 = or i64 %9497, %9499
  %9501 = load i64, i64* %9, align 8
  %9502 = lshr i64 %9501, 18
  %9503 = load i64, i64* %9, align 8
  %9504 = shl i64 %9503, 46
  %9505 = or i64 %9502, %9504
  %9506 = xor i64 %9500, %9505
  %9507 = load i64, i64* %9, align 8
  %9508 = lshr i64 %9507, 41
  %9509 = load i64, i64* %9, align 8
  %9510 = shl i64 %9509, 23
  %9511 = or i64 %9508, %9510
  %9512 = xor i64 %9506, %9511
  %9513 = add i64 %9495, %9512
  %9514 = load i64, i64* %9, align 8
  %9515 = load i64, i64* %10, align 8
  %9516 = and i64 %9514, %9515
  %9517 = load i64, i64* %9, align 8
  %9518 = xor i64 %9517, -1
  %9519 = load i64, i64* %11, align 8
  %9520 = and i64 %9518, %9519
  %9521 = xor i64 %9516, %9520
  %9522 = add i64 %9513, %9521
  %9523 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 77), align 8
  %9524 = add i64 %9522, %9523
  %9525 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9526 = load i64, i64* %9525, align 8
  %9527 = add i64 %9524, %9526
  store i64 %9527, i64* %13, align 8
  %9528 = load i64, i64* %5, align 8
  %9529 = lshr i64 %9528, 28
  %9530 = load i64, i64* %5, align 8
  %9531 = shl i64 %9530, 36
  %9532 = or i64 %9529, %9531
  %9533 = load i64, i64* %5, align 8
  %9534 = lshr i64 %9533, 34
  %9535 = load i64, i64* %5, align 8
  %9536 = shl i64 %9535, 30
  %9537 = or i64 %9534, %9536
  %9538 = xor i64 %9532, %9537
  %9539 = load i64, i64* %5, align 8
  %9540 = lshr i64 %9539, 39
  %9541 = load i64, i64* %5, align 8
  %9542 = shl i64 %9541, 25
  %9543 = or i64 %9540, %9542
  %9544 = xor i64 %9538, %9543
  %9545 = load i64, i64* %5, align 8
  %9546 = load i64, i64* %6, align 8
  %9547 = and i64 %9545, %9546
  %9548 = load i64, i64* %5, align 8
  %9549 = load i64, i64* %7, align 8
  %9550 = and i64 %9548, %9549
  %9551 = xor i64 %9547, %9550
  %9552 = load i64, i64* %6, align 8
  %9553 = load i64, i64* %7, align 8
  %9554 = and i64 %9552, %9553
  %9555 = xor i64 %9551, %9554
  %9556 = add i64 %9544, %9555
  store i64 %9556, i64* %14, align 8
  %9557 = load i64, i64* %11, align 8
  store i64 %9557, i64* %12, align 8
  %9558 = load i64, i64* %10, align 8
  store i64 %9558, i64* %11, align 8
  %9559 = load i64, i64* %9, align 8
  store i64 %9559, i64* %10, align 8
  %9560 = load i64, i64* %8, align 8
  %9561 = load i64, i64* %13, align 8
  %9562 = add i64 %9560, %9561
  store i64 %9562, i64* %9, align 8
  %9563 = load i64, i64* %7, align 8
  store i64 %9563, i64* %8, align 8
  %9564 = load i64, i64* %6, align 8
  store i64 %9564, i64* %7, align 8
  %9565 = load i64, i64* %5, align 8
  store i64 %9565, i64* %6, align 8
  %9566 = load i64, i64* %13, align 8
  %9567 = load i64, i64* %14, align 8
  %9568 = add i64 %9566, %9567
  store i64 %9568, i64* %5, align 8
  %9569 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9570 = load i64, i64* %9569, align 16
  %9571 = lshr i64 %9570, 19
  %9572 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9573 = load i64, i64* %9572, align 16
  %9574 = shl i64 %9573, 45
  %9575 = or i64 %9571, %9574
  %9576 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9577 = load i64, i64* %9576, align 16
  %9578 = lshr i64 %9577, 61
  %9579 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9580 = load i64, i64* %9579, align 16
  %9581 = shl i64 %9580, 3
  %9582 = or i64 %9578, %9581
  %9583 = xor i64 %9575, %9582
  %9584 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 76
  %9585 = load i64, i64* %9584, align 16
  %9586 = lshr i64 %9585, 6
  %9587 = xor i64 %9583, %9586
  %9588 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 71
  %9589 = load i64, i64* %9588, align 8
  %9590 = add i64 %9587, %9589
  %9591 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9592 = load i64, i64* %9591, align 8
  %9593 = lshr i64 %9592, 1
  %9594 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9595 = load i64, i64* %9594, align 8
  %9596 = shl i64 %9595, 63
  %9597 = or i64 %9593, %9596
  %9598 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9599 = load i64, i64* %9598, align 8
  %9600 = lshr i64 %9599, 8
  %9601 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9602 = load i64, i64* %9601, align 8
  %9603 = shl i64 %9602, 56
  %9604 = or i64 %9600, %9603
  %9605 = xor i64 %9597, %9604
  %9606 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9607 = load i64, i64* %9606, align 8
  %9608 = lshr i64 %9607, 7
  %9609 = xor i64 %9605, %9608
  %9610 = add i64 %9590, %9609
  %9611 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 62
  %9612 = load i64, i64* %9611, align 16
  %9613 = add i64 %9610, %9612
  %9614 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 78
  store i64 %9613, i64* %9614, align 16
  %9615 = load i64, i64* %12, align 8
  %9616 = load i64, i64* %9, align 8
  %9617 = lshr i64 %9616, 14
  %9618 = load i64, i64* %9, align 8
  %9619 = shl i64 %9618, 50
  %9620 = or i64 %9617, %9619
  %9621 = load i64, i64* %9, align 8
  %9622 = lshr i64 %9621, 18
  %9623 = load i64, i64* %9, align 8
  %9624 = shl i64 %9623, 46
  %9625 = or i64 %9622, %9624
  %9626 = xor i64 %9620, %9625
  %9627 = load i64, i64* %9, align 8
  %9628 = lshr i64 %9627, 41
  %9629 = load i64, i64* %9, align 8
  %9630 = shl i64 %9629, 23
  %9631 = or i64 %9628, %9630
  %9632 = xor i64 %9626, %9631
  %9633 = add i64 %9615, %9632
  %9634 = load i64, i64* %9, align 8
  %9635 = load i64, i64* %10, align 8
  %9636 = and i64 %9634, %9635
  %9637 = load i64, i64* %9, align 8
  %9638 = xor i64 %9637, -1
  %9639 = load i64, i64* %11, align 8
  %9640 = and i64 %9638, %9639
  %9641 = xor i64 %9636, %9640
  %9642 = add i64 %9633, %9641
  %9643 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 78), align 16
  %9644 = add i64 %9642, %9643
  %9645 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 78
  %9646 = load i64, i64* %9645, align 16
  %9647 = add i64 %9644, %9646
  store i64 %9647, i64* %13, align 8
  %9648 = load i64, i64* %5, align 8
  %9649 = lshr i64 %9648, 28
  %9650 = load i64, i64* %5, align 8
  %9651 = shl i64 %9650, 36
  %9652 = or i64 %9649, %9651
  %9653 = load i64, i64* %5, align 8
  %9654 = lshr i64 %9653, 34
  %9655 = load i64, i64* %5, align 8
  %9656 = shl i64 %9655, 30
  %9657 = or i64 %9654, %9656
  %9658 = xor i64 %9652, %9657
  %9659 = load i64, i64* %5, align 8
  %9660 = lshr i64 %9659, 39
  %9661 = load i64, i64* %5, align 8
  %9662 = shl i64 %9661, 25
  %9663 = or i64 %9660, %9662
  %9664 = xor i64 %9658, %9663
  %9665 = load i64, i64* %5, align 8
  %9666 = load i64, i64* %6, align 8
  %9667 = and i64 %9665, %9666
  %9668 = load i64, i64* %5, align 8
  %9669 = load i64, i64* %7, align 8
  %9670 = and i64 %9668, %9669
  %9671 = xor i64 %9667, %9670
  %9672 = load i64, i64* %6, align 8
  %9673 = load i64, i64* %7, align 8
  %9674 = and i64 %9672, %9673
  %9675 = xor i64 %9671, %9674
  %9676 = add i64 %9664, %9675
  store i64 %9676, i64* %14, align 8
  %9677 = load i64, i64* %11, align 8
  store i64 %9677, i64* %12, align 8
  %9678 = load i64, i64* %10, align 8
  store i64 %9678, i64* %11, align 8
  %9679 = load i64, i64* %9, align 8
  store i64 %9679, i64* %10, align 8
  %9680 = load i64, i64* %8, align 8
  %9681 = load i64, i64* %13, align 8
  %9682 = add i64 %9680, %9681
  store i64 %9682, i64* %9, align 8
  %9683 = load i64, i64* %7, align 8
  store i64 %9683, i64* %8, align 8
  %9684 = load i64, i64* %6, align 8
  store i64 %9684, i64* %7, align 8
  %9685 = load i64, i64* %5, align 8
  store i64 %9685, i64* %6, align 8
  %9686 = load i64, i64* %13, align 8
  %9687 = load i64, i64* %14, align 8
  %9688 = add i64 %9686, %9687
  store i64 %9688, i64* %5, align 8
  %9689 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9690 = load i64, i64* %9689, align 8
  %9691 = lshr i64 %9690, 19
  %9692 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9693 = load i64, i64* %9692, align 8
  %9694 = shl i64 %9693, 45
  %9695 = or i64 %9691, %9694
  %9696 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9697 = load i64, i64* %9696, align 8
  %9698 = lshr i64 %9697, 61
  %9699 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9700 = load i64, i64* %9699, align 8
  %9701 = shl i64 %9700, 3
  %9702 = or i64 %9698, %9701
  %9703 = xor i64 %9695, %9702
  %9704 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 77
  %9705 = load i64, i64* %9704, align 8
  %9706 = lshr i64 %9705, 6
  %9707 = xor i64 %9703, %9706
  %9708 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 72
  %9709 = load i64, i64* %9708, align 16
  %9710 = add i64 %9707, %9709
  %9711 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %9712 = load i64, i64* %9711, align 16
  %9713 = lshr i64 %9712, 1
  %9714 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %9715 = load i64, i64* %9714, align 16
  %9716 = shl i64 %9715, 63
  %9717 = or i64 %9713, %9716
  %9718 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %9719 = load i64, i64* %9718, align 16
  %9720 = lshr i64 %9719, 8
  %9721 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %9722 = load i64, i64* %9721, align 16
  %9723 = shl i64 %9722, 56
  %9724 = or i64 %9720, %9723
  %9725 = xor i64 %9717, %9724
  %9726 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 64
  %9727 = load i64, i64* %9726, align 16
  %9728 = lshr i64 %9727, 7
  %9729 = xor i64 %9725, %9728
  %9730 = add i64 %9710, %9729
  %9731 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 63
  %9732 = load i64, i64* %9731, align 8
  %9733 = add i64 %9730, %9732
  %9734 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 79
  store i64 %9733, i64* %9734, align 8
  %9735 = load i64, i64* %12, align 8
  %9736 = load i64, i64* %9, align 8
  %9737 = lshr i64 %9736, 14
  %9738 = load i64, i64* %9, align 8
  %9739 = shl i64 %9738, 50
  %9740 = or i64 %9737, %9739
  %9741 = load i64, i64* %9, align 8
  %9742 = lshr i64 %9741, 18
  %9743 = load i64, i64* %9, align 8
  %9744 = shl i64 %9743, 46
  %9745 = or i64 %9742, %9744
  %9746 = xor i64 %9740, %9745
  %9747 = load i64, i64* %9, align 8
  %9748 = lshr i64 %9747, 41
  %9749 = load i64, i64* %9, align 8
  %9750 = shl i64 %9749, 23
  %9751 = or i64 %9748, %9750
  %9752 = xor i64 %9746, %9751
  %9753 = add i64 %9735, %9752
  %9754 = load i64, i64* %9, align 8
  %9755 = load i64, i64* %10, align 8
  %9756 = and i64 %9754, %9755
  %9757 = load i64, i64* %9, align 8
  %9758 = xor i64 %9757, -1
  %9759 = load i64, i64* %11, align 8
  %9760 = and i64 %9758, %9759
  %9761 = xor i64 %9756, %9760
  %9762 = add i64 %9753, %9761
  %9763 = load i64, i64* getelementptr inbounds ([80 x i64], [80 x i64]* @sha2_512_words, i64 0, i64 79), align 8
  %9764 = add i64 %9762, %9763
  %9765 = getelementptr inbounds [80 x i64], [80 x i64]* %15, i64 0, i64 79
  %9766 = load i64, i64* %9765, align 8
  %9767 = add i64 %9764, %9766
  store i64 %9767, i64* %13, align 8
  %9768 = load i64, i64* %5, align 8
  %9769 = lshr i64 %9768, 28
  %9770 = load i64, i64* %5, align 8
  %9771 = shl i64 %9770, 36
  %9772 = or i64 %9769, %9771
  %9773 = load i64, i64* %5, align 8
  %9774 = lshr i64 %9773, 34
  %9775 = load i64, i64* %5, align 8
  %9776 = shl i64 %9775, 30
  %9777 = or i64 %9774, %9776
  %9778 = xor i64 %9772, %9777
  %9779 = load i64, i64* %5, align 8
  %9780 = lshr i64 %9779, 39
  %9781 = load i64, i64* %5, align 8
  %9782 = shl i64 %9781, 25
  %9783 = or i64 %9780, %9782
  %9784 = xor i64 %9778, %9783
  %9785 = load i64, i64* %5, align 8
  %9786 = load i64, i64* %6, align 8
  %9787 = and i64 %9785, %9786
  %9788 = load i64, i64* %5, align 8
  %9789 = load i64, i64* %7, align 8
  %9790 = and i64 %9788, %9789
  %9791 = xor i64 %9787, %9790
  %9792 = load i64, i64* %6, align 8
  %9793 = load i64, i64* %7, align 8
  %9794 = and i64 %9792, %9793
  %9795 = xor i64 %9791, %9794
  %9796 = add i64 %9784, %9795
  store i64 %9796, i64* %14, align 8
  %9797 = load i64, i64* %11, align 8
  store i64 %9797, i64* %12, align 8
  %9798 = load i64, i64* %10, align 8
  store i64 %9798, i64* %11, align 8
  %9799 = load i64, i64* %9, align 8
  store i64 %9799, i64* %10, align 8
  %9800 = load i64, i64* %8, align 8
  %9801 = load i64, i64* %13, align 8
  %9802 = add i64 %9800, %9801
  store i64 %9802, i64* %9, align 8
  %9803 = load i64, i64* %7, align 8
  store i64 %9803, i64* %8, align 8
  %9804 = load i64, i64* %6, align 8
  store i64 %9804, i64* %7, align 8
  %9805 = load i64, i64* %5, align 8
  store i64 %9805, i64* %6, align 8
  %9806 = load i64, i64* %13, align 8
  %9807 = load i64, i64* %14, align 8
  %9808 = add i64 %9806, %9807
  store i64 %9808, i64* %5, align 8
  %9809 = load i64, i64* %5, align 8
  %9810 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9811 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9810, i32 0, i32 2
  %9812 = bitcast %union.anon.33* %9811 to [8 x i64]*
  %9813 = getelementptr inbounds [8 x i64], [8 x i64]* %9812, i64 0, i64 0
  %9814 = load i64, i64* %9813, align 16
  %9815 = add i64 %9814, %9809
  store i64 %9815, i64* %9813, align 16
  %9816 = load i64, i64* %6, align 8
  %9817 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9818 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9817, i32 0, i32 2
  %9819 = bitcast %union.anon.33* %9818 to [8 x i64]*
  %9820 = getelementptr inbounds [8 x i64], [8 x i64]* %9819, i64 0, i64 1
  %9821 = load i64, i64* %9820, align 8
  %9822 = add i64 %9821, %9816
  store i64 %9822, i64* %9820, align 8
  %9823 = load i64, i64* %7, align 8
  %9824 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9825 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9824, i32 0, i32 2
  %9826 = bitcast %union.anon.33* %9825 to [8 x i64]*
  %9827 = getelementptr inbounds [8 x i64], [8 x i64]* %9826, i64 0, i64 2
  %9828 = load i64, i64* %9827, align 16
  %9829 = add i64 %9828, %9823
  store i64 %9829, i64* %9827, align 16
  %9830 = load i64, i64* %8, align 8
  %9831 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9832 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9831, i32 0, i32 2
  %9833 = bitcast %union.anon.33* %9832 to [8 x i64]*
  %9834 = getelementptr inbounds [8 x i64], [8 x i64]* %9833, i64 0, i64 3
  %9835 = load i64, i64* %9834, align 8
  %9836 = add i64 %9835, %9830
  store i64 %9836, i64* %9834, align 8
  %9837 = load i64, i64* %9, align 8
  %9838 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9839 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9838, i32 0, i32 2
  %9840 = bitcast %union.anon.33* %9839 to [8 x i64]*
  %9841 = getelementptr inbounds [8 x i64], [8 x i64]* %9840, i64 0, i64 4
  %9842 = load i64, i64* %9841, align 16
  %9843 = add i64 %9842, %9837
  store i64 %9843, i64* %9841, align 16
  %9844 = load i64, i64* %10, align 8
  %9845 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9846 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9845, i32 0, i32 2
  %9847 = bitcast %union.anon.33* %9846 to [8 x i64]*
  %9848 = getelementptr inbounds [8 x i64], [8 x i64]* %9847, i64 0, i64 5
  %9849 = load i64, i64* %9848, align 8
  %9850 = add i64 %9849, %9844
  store i64 %9850, i64* %9848, align 8
  %9851 = load i64, i64* %11, align 8
  %9852 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9853 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9852, i32 0, i32 2
  %9854 = bitcast %union.anon.33* %9853 to [8 x i64]*
  %9855 = getelementptr inbounds [8 x i64], [8 x i64]* %9854, i64 0, i64 6
  %9856 = load i64, i64* %9855, align 16
  %9857 = add i64 %9856, %9851
  store i64 %9857, i64* %9855, align 16
  %9858 = load i64, i64* %12, align 8
  %9859 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9860 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9859, i32 0, i32 2
  %9861 = bitcast %union.anon.33* %9860 to [8 x i64]*
  %9862 = getelementptr inbounds [8 x i64], [8 x i64]* %9861, i64 0, i64 7
  %9863 = load i64, i64* %9862, align 8
  %9864 = add i64 %9863, %9858
  store i64 %9864, i64* %9862, align 8
  br label %17334

9865:                                             ; preds = %2
  %9866 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9867 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9866, i32 0, i32 2
  %9868 = bitcast %union.anon.33* %9867 to [16 x i32]*
  %9869 = getelementptr inbounds [16 x i32], [16 x i32]* %9868, i64 0, i64 0
  %9870 = load i32, i32* %9869, align 16
  store i32 %9870, i32* %16, align 4
  %9871 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9872 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9871, i32 0, i32 2
  %9873 = bitcast %union.anon.33* %9872 to [16 x i32]*
  %9874 = getelementptr inbounds [16 x i32], [16 x i32]* %9873, i64 0, i64 1
  %9875 = load i32, i32* %9874, align 4
  store i32 %9875, i32* %17, align 4
  %9876 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9877 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9876, i32 0, i32 2
  %9878 = bitcast %union.anon.33* %9877 to [16 x i32]*
  %9879 = getelementptr inbounds [16 x i32], [16 x i32]* %9878, i64 0, i64 2
  %9880 = load i32, i32* %9879, align 8
  store i32 %9880, i32* %18, align 4
  %9881 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9882 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9881, i32 0, i32 2
  %9883 = bitcast %union.anon.33* %9882 to [16 x i32]*
  %9884 = getelementptr inbounds [16 x i32], [16 x i32]* %9883, i64 0, i64 3
  %9885 = load i32, i32* %9884, align 4
  store i32 %9885, i32* %19, align 4
  %9886 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9887 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9886, i32 0, i32 2
  %9888 = bitcast %union.anon.33* %9887 to [16 x i32]*
  %9889 = getelementptr inbounds [16 x i32], [16 x i32]* %9888, i64 0, i64 4
  %9890 = load i32, i32* %9889, align 16
  store i32 %9890, i32* %20, align 4
  %9891 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9892 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9891, i32 0, i32 2
  %9893 = bitcast %union.anon.33* %9892 to [16 x i32]*
  %9894 = getelementptr inbounds [16 x i32], [16 x i32]* %9893, i64 0, i64 5
  %9895 = load i32, i32* %9894, align 4
  store i32 %9895, i32* %21, align 4
  %9896 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9897 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9896, i32 0, i32 2
  %9898 = bitcast %union.anon.33* %9897 to [16 x i32]*
  %9899 = getelementptr inbounds [16 x i32], [16 x i32]* %9898, i64 0, i64 6
  %9900 = load i32, i32* %9899, align 8
  store i32 %9900, i32* %22, align 4
  %9901 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %9902 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9901, i32 0, i32 2
  %9903 = bitcast %union.anon.33* %9902 to [16 x i32]*
  %9904 = getelementptr inbounds [16 x i32], [16 x i32]* %9903, i64 0, i64 7
  %9905 = load i32, i32* %9904, align 4
  store i32 %9905, i32* %23, align 4
  %9906 = load i8*, i8** %4, align 8
  %9907 = getelementptr inbounds i8, i8* %9906, i64 0
  %9908 = load i8, i8* %9907, align 1
  %9909 = zext i8 %9908 to i32
  %9910 = shl i32 %9909, 24
  %9911 = load i8*, i8** %4, align 8
  %9912 = getelementptr inbounds i8, i8* %9911, i64 1
  %9913 = load i8, i8* %9912, align 1
  %9914 = zext i8 %9913 to i32
  %9915 = shl i32 %9914, 16
  %9916 = or i32 %9910, %9915
  %9917 = load i8*, i8** %4, align 8
  %9918 = getelementptr inbounds i8, i8* %9917, i64 2
  %9919 = load i8, i8* %9918, align 1
  %9920 = zext i8 %9919 to i32
  %9921 = shl i32 %9920, 8
  %9922 = or i32 %9916, %9921
  %9923 = load i8*, i8** %4, align 8
  %9924 = getelementptr inbounds i8, i8* %9923, i64 3
  %9925 = load i8, i8* %9924, align 1
  %9926 = zext i8 %9925 to i32
  %9927 = or i32 %9922, %9926
  %9928 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 0
  store i32 %9927, i32* %9928, align 16
  %9929 = load i8*, i8** %4, align 8
  %9930 = getelementptr inbounds i8, i8* %9929, i64 4
  %9931 = getelementptr inbounds i8, i8* %9930, i64 0
  %9932 = load i8, i8* %9931, align 1
  %9933 = zext i8 %9932 to i32
  %9934 = shl i32 %9933, 24
  %9935 = load i8*, i8** %4, align 8
  %9936 = getelementptr inbounds i8, i8* %9935, i64 4
  %9937 = getelementptr inbounds i8, i8* %9936, i64 1
  %9938 = load i8, i8* %9937, align 1
  %9939 = zext i8 %9938 to i32
  %9940 = shl i32 %9939, 16
  %9941 = or i32 %9934, %9940
  %9942 = load i8*, i8** %4, align 8
  %9943 = getelementptr inbounds i8, i8* %9942, i64 4
  %9944 = getelementptr inbounds i8, i8* %9943, i64 2
  %9945 = load i8, i8* %9944, align 1
  %9946 = zext i8 %9945 to i32
  %9947 = shl i32 %9946, 8
  %9948 = or i32 %9941, %9947
  %9949 = load i8*, i8** %4, align 8
  %9950 = getelementptr inbounds i8, i8* %9949, i64 4
  %9951 = getelementptr inbounds i8, i8* %9950, i64 3
  %9952 = load i8, i8* %9951, align 1
  %9953 = zext i8 %9952 to i32
  %9954 = or i32 %9948, %9953
  %9955 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  store i32 %9954, i32* %9955, align 4
  %9956 = load i8*, i8** %4, align 8
  %9957 = getelementptr inbounds i8, i8* %9956, i64 8
  %9958 = getelementptr inbounds i8, i8* %9957, i64 0
  %9959 = load i8, i8* %9958, align 1
  %9960 = zext i8 %9959 to i32
  %9961 = shl i32 %9960, 24
  %9962 = load i8*, i8** %4, align 8
  %9963 = getelementptr inbounds i8, i8* %9962, i64 8
  %9964 = getelementptr inbounds i8, i8* %9963, i64 1
  %9965 = load i8, i8* %9964, align 1
  %9966 = zext i8 %9965 to i32
  %9967 = shl i32 %9966, 16
  %9968 = or i32 %9961, %9967
  %9969 = load i8*, i8** %4, align 8
  %9970 = getelementptr inbounds i8, i8* %9969, i64 8
  %9971 = getelementptr inbounds i8, i8* %9970, i64 2
  %9972 = load i8, i8* %9971, align 1
  %9973 = zext i8 %9972 to i32
  %9974 = shl i32 %9973, 8
  %9975 = or i32 %9968, %9974
  %9976 = load i8*, i8** %4, align 8
  %9977 = getelementptr inbounds i8, i8* %9976, i64 8
  %9978 = getelementptr inbounds i8, i8* %9977, i64 3
  %9979 = load i8, i8* %9978, align 1
  %9980 = zext i8 %9979 to i32
  %9981 = or i32 %9975, %9980
  %9982 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  store i32 %9981, i32* %9982, align 8
  %9983 = load i8*, i8** %4, align 8
  %9984 = getelementptr inbounds i8, i8* %9983, i64 12
  %9985 = getelementptr inbounds i8, i8* %9984, i64 0
  %9986 = load i8, i8* %9985, align 1
  %9987 = zext i8 %9986 to i32
  %9988 = shl i32 %9987, 24
  %9989 = load i8*, i8** %4, align 8
  %9990 = getelementptr inbounds i8, i8* %9989, i64 12
  %9991 = getelementptr inbounds i8, i8* %9990, i64 1
  %9992 = load i8, i8* %9991, align 1
  %9993 = zext i8 %9992 to i32
  %9994 = shl i32 %9993, 16
  %9995 = or i32 %9988, %9994
  %9996 = load i8*, i8** %4, align 8
  %9997 = getelementptr inbounds i8, i8* %9996, i64 12
  %9998 = getelementptr inbounds i8, i8* %9997, i64 2
  %9999 = load i8, i8* %9998, align 1
  %10000 = zext i8 %9999 to i32
  %10001 = shl i32 %10000, 8
  %10002 = or i32 %9995, %10001
  %10003 = load i8*, i8** %4, align 8
  %10004 = getelementptr inbounds i8, i8* %10003, i64 12
  %10005 = getelementptr inbounds i8, i8* %10004, i64 3
  %10006 = load i8, i8* %10005, align 1
  %10007 = zext i8 %10006 to i32
  %10008 = or i32 %10002, %10007
  %10009 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  store i32 %10008, i32* %10009, align 4
  %10010 = load i8*, i8** %4, align 8
  %10011 = getelementptr inbounds i8, i8* %10010, i64 16
  %10012 = getelementptr inbounds i8, i8* %10011, i64 0
  %10013 = load i8, i8* %10012, align 1
  %10014 = zext i8 %10013 to i32
  %10015 = shl i32 %10014, 24
  %10016 = load i8*, i8** %4, align 8
  %10017 = getelementptr inbounds i8, i8* %10016, i64 16
  %10018 = getelementptr inbounds i8, i8* %10017, i64 1
  %10019 = load i8, i8* %10018, align 1
  %10020 = zext i8 %10019 to i32
  %10021 = shl i32 %10020, 16
  %10022 = or i32 %10015, %10021
  %10023 = load i8*, i8** %4, align 8
  %10024 = getelementptr inbounds i8, i8* %10023, i64 16
  %10025 = getelementptr inbounds i8, i8* %10024, i64 2
  %10026 = load i8, i8* %10025, align 1
  %10027 = zext i8 %10026 to i32
  %10028 = shl i32 %10027, 8
  %10029 = or i32 %10022, %10028
  %10030 = load i8*, i8** %4, align 8
  %10031 = getelementptr inbounds i8, i8* %10030, i64 16
  %10032 = getelementptr inbounds i8, i8* %10031, i64 3
  %10033 = load i8, i8* %10032, align 1
  %10034 = zext i8 %10033 to i32
  %10035 = or i32 %10029, %10034
  %10036 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  store i32 %10035, i32* %10036, align 16
  %10037 = load i8*, i8** %4, align 8
  %10038 = getelementptr inbounds i8, i8* %10037, i64 20
  %10039 = getelementptr inbounds i8, i8* %10038, i64 0
  %10040 = load i8, i8* %10039, align 1
  %10041 = zext i8 %10040 to i32
  %10042 = shl i32 %10041, 24
  %10043 = load i8*, i8** %4, align 8
  %10044 = getelementptr inbounds i8, i8* %10043, i64 20
  %10045 = getelementptr inbounds i8, i8* %10044, i64 1
  %10046 = load i8, i8* %10045, align 1
  %10047 = zext i8 %10046 to i32
  %10048 = shl i32 %10047, 16
  %10049 = or i32 %10042, %10048
  %10050 = load i8*, i8** %4, align 8
  %10051 = getelementptr inbounds i8, i8* %10050, i64 20
  %10052 = getelementptr inbounds i8, i8* %10051, i64 2
  %10053 = load i8, i8* %10052, align 1
  %10054 = zext i8 %10053 to i32
  %10055 = shl i32 %10054, 8
  %10056 = or i32 %10049, %10055
  %10057 = load i8*, i8** %4, align 8
  %10058 = getelementptr inbounds i8, i8* %10057, i64 20
  %10059 = getelementptr inbounds i8, i8* %10058, i64 3
  %10060 = load i8, i8* %10059, align 1
  %10061 = zext i8 %10060 to i32
  %10062 = or i32 %10056, %10061
  %10063 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  store i32 %10062, i32* %10063, align 4
  %10064 = load i8*, i8** %4, align 8
  %10065 = getelementptr inbounds i8, i8* %10064, i64 24
  %10066 = getelementptr inbounds i8, i8* %10065, i64 0
  %10067 = load i8, i8* %10066, align 1
  %10068 = zext i8 %10067 to i32
  %10069 = shl i32 %10068, 24
  %10070 = load i8*, i8** %4, align 8
  %10071 = getelementptr inbounds i8, i8* %10070, i64 24
  %10072 = getelementptr inbounds i8, i8* %10071, i64 1
  %10073 = load i8, i8* %10072, align 1
  %10074 = zext i8 %10073 to i32
  %10075 = shl i32 %10074, 16
  %10076 = or i32 %10069, %10075
  %10077 = load i8*, i8** %4, align 8
  %10078 = getelementptr inbounds i8, i8* %10077, i64 24
  %10079 = getelementptr inbounds i8, i8* %10078, i64 2
  %10080 = load i8, i8* %10079, align 1
  %10081 = zext i8 %10080 to i32
  %10082 = shl i32 %10081, 8
  %10083 = or i32 %10076, %10082
  %10084 = load i8*, i8** %4, align 8
  %10085 = getelementptr inbounds i8, i8* %10084, i64 24
  %10086 = getelementptr inbounds i8, i8* %10085, i64 3
  %10087 = load i8, i8* %10086, align 1
  %10088 = zext i8 %10087 to i32
  %10089 = or i32 %10083, %10088
  %10090 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  store i32 %10089, i32* %10090, align 8
  %10091 = load i8*, i8** %4, align 8
  %10092 = getelementptr inbounds i8, i8* %10091, i64 28
  %10093 = getelementptr inbounds i8, i8* %10092, i64 0
  %10094 = load i8, i8* %10093, align 1
  %10095 = zext i8 %10094 to i32
  %10096 = shl i32 %10095, 24
  %10097 = load i8*, i8** %4, align 8
  %10098 = getelementptr inbounds i8, i8* %10097, i64 28
  %10099 = getelementptr inbounds i8, i8* %10098, i64 1
  %10100 = load i8, i8* %10099, align 1
  %10101 = zext i8 %10100 to i32
  %10102 = shl i32 %10101, 16
  %10103 = or i32 %10096, %10102
  %10104 = load i8*, i8** %4, align 8
  %10105 = getelementptr inbounds i8, i8* %10104, i64 28
  %10106 = getelementptr inbounds i8, i8* %10105, i64 2
  %10107 = load i8, i8* %10106, align 1
  %10108 = zext i8 %10107 to i32
  %10109 = shl i32 %10108, 8
  %10110 = or i32 %10103, %10109
  %10111 = load i8*, i8** %4, align 8
  %10112 = getelementptr inbounds i8, i8* %10111, i64 28
  %10113 = getelementptr inbounds i8, i8* %10112, i64 3
  %10114 = load i8, i8* %10113, align 1
  %10115 = zext i8 %10114 to i32
  %10116 = or i32 %10110, %10115
  %10117 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  store i32 %10116, i32* %10117, align 4
  %10118 = load i8*, i8** %4, align 8
  %10119 = getelementptr inbounds i8, i8* %10118, i64 32
  %10120 = getelementptr inbounds i8, i8* %10119, i64 0
  %10121 = load i8, i8* %10120, align 1
  %10122 = zext i8 %10121 to i32
  %10123 = shl i32 %10122, 24
  %10124 = load i8*, i8** %4, align 8
  %10125 = getelementptr inbounds i8, i8* %10124, i64 32
  %10126 = getelementptr inbounds i8, i8* %10125, i64 1
  %10127 = load i8, i8* %10126, align 1
  %10128 = zext i8 %10127 to i32
  %10129 = shl i32 %10128, 16
  %10130 = or i32 %10123, %10129
  %10131 = load i8*, i8** %4, align 8
  %10132 = getelementptr inbounds i8, i8* %10131, i64 32
  %10133 = getelementptr inbounds i8, i8* %10132, i64 2
  %10134 = load i8, i8* %10133, align 1
  %10135 = zext i8 %10134 to i32
  %10136 = shl i32 %10135, 8
  %10137 = or i32 %10130, %10136
  %10138 = load i8*, i8** %4, align 8
  %10139 = getelementptr inbounds i8, i8* %10138, i64 32
  %10140 = getelementptr inbounds i8, i8* %10139, i64 3
  %10141 = load i8, i8* %10140, align 1
  %10142 = zext i8 %10141 to i32
  %10143 = or i32 %10137, %10142
  %10144 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  store i32 %10143, i32* %10144, align 16
  %10145 = load i8*, i8** %4, align 8
  %10146 = getelementptr inbounds i8, i8* %10145, i64 36
  %10147 = getelementptr inbounds i8, i8* %10146, i64 0
  %10148 = load i8, i8* %10147, align 1
  %10149 = zext i8 %10148 to i32
  %10150 = shl i32 %10149, 24
  %10151 = load i8*, i8** %4, align 8
  %10152 = getelementptr inbounds i8, i8* %10151, i64 36
  %10153 = getelementptr inbounds i8, i8* %10152, i64 1
  %10154 = load i8, i8* %10153, align 1
  %10155 = zext i8 %10154 to i32
  %10156 = shl i32 %10155, 16
  %10157 = or i32 %10150, %10156
  %10158 = load i8*, i8** %4, align 8
  %10159 = getelementptr inbounds i8, i8* %10158, i64 36
  %10160 = getelementptr inbounds i8, i8* %10159, i64 2
  %10161 = load i8, i8* %10160, align 1
  %10162 = zext i8 %10161 to i32
  %10163 = shl i32 %10162, 8
  %10164 = or i32 %10157, %10163
  %10165 = load i8*, i8** %4, align 8
  %10166 = getelementptr inbounds i8, i8* %10165, i64 36
  %10167 = getelementptr inbounds i8, i8* %10166, i64 3
  %10168 = load i8, i8* %10167, align 1
  %10169 = zext i8 %10168 to i32
  %10170 = or i32 %10164, %10169
  %10171 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  store i32 %10170, i32* %10171, align 4
  %10172 = load i8*, i8** %4, align 8
  %10173 = getelementptr inbounds i8, i8* %10172, i64 40
  %10174 = getelementptr inbounds i8, i8* %10173, i64 0
  %10175 = load i8, i8* %10174, align 1
  %10176 = zext i8 %10175 to i32
  %10177 = shl i32 %10176, 24
  %10178 = load i8*, i8** %4, align 8
  %10179 = getelementptr inbounds i8, i8* %10178, i64 40
  %10180 = getelementptr inbounds i8, i8* %10179, i64 1
  %10181 = load i8, i8* %10180, align 1
  %10182 = zext i8 %10181 to i32
  %10183 = shl i32 %10182, 16
  %10184 = or i32 %10177, %10183
  %10185 = load i8*, i8** %4, align 8
  %10186 = getelementptr inbounds i8, i8* %10185, i64 40
  %10187 = getelementptr inbounds i8, i8* %10186, i64 2
  %10188 = load i8, i8* %10187, align 1
  %10189 = zext i8 %10188 to i32
  %10190 = shl i32 %10189, 8
  %10191 = or i32 %10184, %10190
  %10192 = load i8*, i8** %4, align 8
  %10193 = getelementptr inbounds i8, i8* %10192, i64 40
  %10194 = getelementptr inbounds i8, i8* %10193, i64 3
  %10195 = load i8, i8* %10194, align 1
  %10196 = zext i8 %10195 to i32
  %10197 = or i32 %10191, %10196
  %10198 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  store i32 %10197, i32* %10198, align 8
  %10199 = load i8*, i8** %4, align 8
  %10200 = getelementptr inbounds i8, i8* %10199, i64 44
  %10201 = getelementptr inbounds i8, i8* %10200, i64 0
  %10202 = load i8, i8* %10201, align 1
  %10203 = zext i8 %10202 to i32
  %10204 = shl i32 %10203, 24
  %10205 = load i8*, i8** %4, align 8
  %10206 = getelementptr inbounds i8, i8* %10205, i64 44
  %10207 = getelementptr inbounds i8, i8* %10206, i64 1
  %10208 = load i8, i8* %10207, align 1
  %10209 = zext i8 %10208 to i32
  %10210 = shl i32 %10209, 16
  %10211 = or i32 %10204, %10210
  %10212 = load i8*, i8** %4, align 8
  %10213 = getelementptr inbounds i8, i8* %10212, i64 44
  %10214 = getelementptr inbounds i8, i8* %10213, i64 2
  %10215 = load i8, i8* %10214, align 1
  %10216 = zext i8 %10215 to i32
  %10217 = shl i32 %10216, 8
  %10218 = or i32 %10211, %10217
  %10219 = load i8*, i8** %4, align 8
  %10220 = getelementptr inbounds i8, i8* %10219, i64 44
  %10221 = getelementptr inbounds i8, i8* %10220, i64 3
  %10222 = load i8, i8* %10221, align 1
  %10223 = zext i8 %10222 to i32
  %10224 = or i32 %10218, %10223
  %10225 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  store i32 %10224, i32* %10225, align 4
  %10226 = load i8*, i8** %4, align 8
  %10227 = getelementptr inbounds i8, i8* %10226, i64 48
  %10228 = getelementptr inbounds i8, i8* %10227, i64 0
  %10229 = load i8, i8* %10228, align 1
  %10230 = zext i8 %10229 to i32
  %10231 = shl i32 %10230, 24
  %10232 = load i8*, i8** %4, align 8
  %10233 = getelementptr inbounds i8, i8* %10232, i64 48
  %10234 = getelementptr inbounds i8, i8* %10233, i64 1
  %10235 = load i8, i8* %10234, align 1
  %10236 = zext i8 %10235 to i32
  %10237 = shl i32 %10236, 16
  %10238 = or i32 %10231, %10237
  %10239 = load i8*, i8** %4, align 8
  %10240 = getelementptr inbounds i8, i8* %10239, i64 48
  %10241 = getelementptr inbounds i8, i8* %10240, i64 2
  %10242 = load i8, i8* %10241, align 1
  %10243 = zext i8 %10242 to i32
  %10244 = shl i32 %10243, 8
  %10245 = or i32 %10238, %10244
  %10246 = load i8*, i8** %4, align 8
  %10247 = getelementptr inbounds i8, i8* %10246, i64 48
  %10248 = getelementptr inbounds i8, i8* %10247, i64 3
  %10249 = load i8, i8* %10248, align 1
  %10250 = zext i8 %10249 to i32
  %10251 = or i32 %10245, %10250
  %10252 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  store i32 %10251, i32* %10252, align 16
  %10253 = load i8*, i8** %4, align 8
  %10254 = getelementptr inbounds i8, i8* %10253, i64 52
  %10255 = getelementptr inbounds i8, i8* %10254, i64 0
  %10256 = load i8, i8* %10255, align 1
  %10257 = zext i8 %10256 to i32
  %10258 = shl i32 %10257, 24
  %10259 = load i8*, i8** %4, align 8
  %10260 = getelementptr inbounds i8, i8* %10259, i64 52
  %10261 = getelementptr inbounds i8, i8* %10260, i64 1
  %10262 = load i8, i8* %10261, align 1
  %10263 = zext i8 %10262 to i32
  %10264 = shl i32 %10263, 16
  %10265 = or i32 %10258, %10264
  %10266 = load i8*, i8** %4, align 8
  %10267 = getelementptr inbounds i8, i8* %10266, i64 52
  %10268 = getelementptr inbounds i8, i8* %10267, i64 2
  %10269 = load i8, i8* %10268, align 1
  %10270 = zext i8 %10269 to i32
  %10271 = shl i32 %10270, 8
  %10272 = or i32 %10265, %10271
  %10273 = load i8*, i8** %4, align 8
  %10274 = getelementptr inbounds i8, i8* %10273, i64 52
  %10275 = getelementptr inbounds i8, i8* %10274, i64 3
  %10276 = load i8, i8* %10275, align 1
  %10277 = zext i8 %10276 to i32
  %10278 = or i32 %10272, %10277
  %10279 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  store i32 %10278, i32* %10279, align 4
  %10280 = load i8*, i8** %4, align 8
  %10281 = getelementptr inbounds i8, i8* %10280, i64 56
  %10282 = getelementptr inbounds i8, i8* %10281, i64 0
  %10283 = load i8, i8* %10282, align 1
  %10284 = zext i8 %10283 to i32
  %10285 = shl i32 %10284, 24
  %10286 = load i8*, i8** %4, align 8
  %10287 = getelementptr inbounds i8, i8* %10286, i64 56
  %10288 = getelementptr inbounds i8, i8* %10287, i64 1
  %10289 = load i8, i8* %10288, align 1
  %10290 = zext i8 %10289 to i32
  %10291 = shl i32 %10290, 16
  %10292 = or i32 %10285, %10291
  %10293 = load i8*, i8** %4, align 8
  %10294 = getelementptr inbounds i8, i8* %10293, i64 56
  %10295 = getelementptr inbounds i8, i8* %10294, i64 2
  %10296 = load i8, i8* %10295, align 1
  %10297 = zext i8 %10296 to i32
  %10298 = shl i32 %10297, 8
  %10299 = or i32 %10292, %10298
  %10300 = load i8*, i8** %4, align 8
  %10301 = getelementptr inbounds i8, i8* %10300, i64 56
  %10302 = getelementptr inbounds i8, i8* %10301, i64 3
  %10303 = load i8, i8* %10302, align 1
  %10304 = zext i8 %10303 to i32
  %10305 = or i32 %10299, %10304
  %10306 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  store i32 %10305, i32* %10306, align 8
  %10307 = load i8*, i8** %4, align 8
  %10308 = getelementptr inbounds i8, i8* %10307, i64 60
  %10309 = getelementptr inbounds i8, i8* %10308, i64 0
  %10310 = load i8, i8* %10309, align 1
  %10311 = zext i8 %10310 to i32
  %10312 = shl i32 %10311, 24
  %10313 = load i8*, i8** %4, align 8
  %10314 = getelementptr inbounds i8, i8* %10313, i64 60
  %10315 = getelementptr inbounds i8, i8* %10314, i64 1
  %10316 = load i8, i8* %10315, align 1
  %10317 = zext i8 %10316 to i32
  %10318 = shl i32 %10317, 16
  %10319 = or i32 %10312, %10318
  %10320 = load i8*, i8** %4, align 8
  %10321 = getelementptr inbounds i8, i8* %10320, i64 60
  %10322 = getelementptr inbounds i8, i8* %10321, i64 2
  %10323 = load i8, i8* %10322, align 1
  %10324 = zext i8 %10323 to i32
  %10325 = shl i32 %10324, 8
  %10326 = or i32 %10319, %10325
  %10327 = load i8*, i8** %4, align 8
  %10328 = getelementptr inbounds i8, i8* %10327, i64 60
  %10329 = getelementptr inbounds i8, i8* %10328, i64 3
  %10330 = load i8, i8* %10329, align 1
  %10331 = zext i8 %10330 to i32
  %10332 = or i32 %10326, %10331
  %10333 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  store i32 %10332, i32* %10333, align 4
  %10334 = load i32, i32* %23, align 4
  %10335 = load i32, i32* %20, align 4
  %10336 = lshr i32 %10335, 6
  %10337 = load i32, i32* %20, align 4
  %10338 = shl i32 %10337, 26
  %10339 = or i32 %10336, %10338
  %10340 = load i32, i32* %20, align 4
  %10341 = lshr i32 %10340, 11
  %10342 = load i32, i32* %20, align 4
  %10343 = shl i32 %10342, 21
  %10344 = or i32 %10341, %10343
  %10345 = xor i32 %10339, %10344
  %10346 = load i32, i32* %20, align 4
  %10347 = lshr i32 %10346, 25
  %10348 = load i32, i32* %20, align 4
  %10349 = shl i32 %10348, 7
  %10350 = or i32 %10347, %10349
  %10351 = xor i32 %10345, %10350
  %10352 = add i32 %10334, %10351
  %10353 = load i32, i32* %20, align 4
  %10354 = load i32, i32* %21, align 4
  %10355 = and i32 %10353, %10354
  %10356 = load i32, i32* %20, align 4
  %10357 = xor i32 %10356, -1
  %10358 = load i32, i32* %22, align 4
  %10359 = and i32 %10357, %10358
  %10360 = xor i32 %10355, %10359
  %10361 = add i32 %10352, %10360
  %10362 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 0), align 16
  %10363 = add i32 %10361, %10362
  %10364 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 0
  %10365 = load i32, i32* %10364, align 16
  %10366 = add i32 %10363, %10365
  store i32 %10366, i32* %24, align 4
  %10367 = load i32, i32* %16, align 4
  %10368 = lshr i32 %10367, 2
  %10369 = load i32, i32* %16, align 4
  %10370 = shl i32 %10369, 30
  %10371 = or i32 %10368, %10370
  %10372 = load i32, i32* %16, align 4
  %10373 = lshr i32 %10372, 13
  %10374 = load i32, i32* %16, align 4
  %10375 = shl i32 %10374, 19
  %10376 = or i32 %10373, %10375
  %10377 = xor i32 %10371, %10376
  %10378 = load i32, i32* %16, align 4
  %10379 = lshr i32 %10378, 22
  %10380 = load i32, i32* %16, align 4
  %10381 = shl i32 %10380, 10
  %10382 = or i32 %10379, %10381
  %10383 = xor i32 %10377, %10382
  %10384 = load i32, i32* %16, align 4
  %10385 = load i32, i32* %17, align 4
  %10386 = and i32 %10384, %10385
  %10387 = load i32, i32* %16, align 4
  %10388 = load i32, i32* %18, align 4
  %10389 = and i32 %10387, %10388
  %10390 = xor i32 %10386, %10389
  %10391 = load i32, i32* %17, align 4
  %10392 = load i32, i32* %18, align 4
  %10393 = and i32 %10391, %10392
  %10394 = xor i32 %10390, %10393
  %10395 = add i32 %10383, %10394
  store i32 %10395, i32* %25, align 4
  %10396 = load i32, i32* %22, align 4
  store i32 %10396, i32* %23, align 4
  %10397 = load i32, i32* %21, align 4
  store i32 %10397, i32* %22, align 4
  %10398 = load i32, i32* %20, align 4
  store i32 %10398, i32* %21, align 4
  %10399 = load i32, i32* %19, align 4
  %10400 = load i32, i32* %24, align 4
  %10401 = add i32 %10399, %10400
  store i32 %10401, i32* %20, align 4
  %10402 = load i32, i32* %18, align 4
  store i32 %10402, i32* %19, align 4
  %10403 = load i32, i32* %17, align 4
  store i32 %10403, i32* %18, align 4
  %10404 = load i32, i32* %16, align 4
  store i32 %10404, i32* %17, align 4
  %10405 = load i32, i32* %24, align 4
  %10406 = load i32, i32* %25, align 4
  %10407 = add i32 %10405, %10406
  store i32 %10407, i32* %16, align 4
  %10408 = load i32, i32* %23, align 4
  %10409 = load i32, i32* %20, align 4
  %10410 = lshr i32 %10409, 6
  %10411 = load i32, i32* %20, align 4
  %10412 = shl i32 %10411, 26
  %10413 = or i32 %10410, %10412
  %10414 = load i32, i32* %20, align 4
  %10415 = lshr i32 %10414, 11
  %10416 = load i32, i32* %20, align 4
  %10417 = shl i32 %10416, 21
  %10418 = or i32 %10415, %10417
  %10419 = xor i32 %10413, %10418
  %10420 = load i32, i32* %20, align 4
  %10421 = lshr i32 %10420, 25
  %10422 = load i32, i32* %20, align 4
  %10423 = shl i32 %10422, 7
  %10424 = or i32 %10421, %10423
  %10425 = xor i32 %10419, %10424
  %10426 = add i32 %10408, %10425
  %10427 = load i32, i32* %20, align 4
  %10428 = load i32, i32* %21, align 4
  %10429 = and i32 %10427, %10428
  %10430 = load i32, i32* %20, align 4
  %10431 = xor i32 %10430, -1
  %10432 = load i32, i32* %22, align 4
  %10433 = and i32 %10431, %10432
  %10434 = xor i32 %10429, %10433
  %10435 = add i32 %10426, %10434
  %10436 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 1), align 4
  %10437 = add i32 %10435, %10436
  %10438 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %10439 = load i32, i32* %10438, align 4
  %10440 = add i32 %10437, %10439
  store i32 %10440, i32* %24, align 4
  %10441 = load i32, i32* %16, align 4
  %10442 = lshr i32 %10441, 2
  %10443 = load i32, i32* %16, align 4
  %10444 = shl i32 %10443, 30
  %10445 = or i32 %10442, %10444
  %10446 = load i32, i32* %16, align 4
  %10447 = lshr i32 %10446, 13
  %10448 = load i32, i32* %16, align 4
  %10449 = shl i32 %10448, 19
  %10450 = or i32 %10447, %10449
  %10451 = xor i32 %10445, %10450
  %10452 = load i32, i32* %16, align 4
  %10453 = lshr i32 %10452, 22
  %10454 = load i32, i32* %16, align 4
  %10455 = shl i32 %10454, 10
  %10456 = or i32 %10453, %10455
  %10457 = xor i32 %10451, %10456
  %10458 = load i32, i32* %16, align 4
  %10459 = load i32, i32* %17, align 4
  %10460 = and i32 %10458, %10459
  %10461 = load i32, i32* %16, align 4
  %10462 = load i32, i32* %18, align 4
  %10463 = and i32 %10461, %10462
  %10464 = xor i32 %10460, %10463
  %10465 = load i32, i32* %17, align 4
  %10466 = load i32, i32* %18, align 4
  %10467 = and i32 %10465, %10466
  %10468 = xor i32 %10464, %10467
  %10469 = add i32 %10457, %10468
  store i32 %10469, i32* %25, align 4
  %10470 = load i32, i32* %22, align 4
  store i32 %10470, i32* %23, align 4
  %10471 = load i32, i32* %21, align 4
  store i32 %10471, i32* %22, align 4
  %10472 = load i32, i32* %20, align 4
  store i32 %10472, i32* %21, align 4
  %10473 = load i32, i32* %19, align 4
  %10474 = load i32, i32* %24, align 4
  %10475 = add i32 %10473, %10474
  store i32 %10475, i32* %20, align 4
  %10476 = load i32, i32* %18, align 4
  store i32 %10476, i32* %19, align 4
  %10477 = load i32, i32* %17, align 4
  store i32 %10477, i32* %18, align 4
  %10478 = load i32, i32* %16, align 4
  store i32 %10478, i32* %17, align 4
  %10479 = load i32, i32* %24, align 4
  %10480 = load i32, i32* %25, align 4
  %10481 = add i32 %10479, %10480
  store i32 %10481, i32* %16, align 4
  %10482 = load i32, i32* %23, align 4
  %10483 = load i32, i32* %20, align 4
  %10484 = lshr i32 %10483, 6
  %10485 = load i32, i32* %20, align 4
  %10486 = shl i32 %10485, 26
  %10487 = or i32 %10484, %10486
  %10488 = load i32, i32* %20, align 4
  %10489 = lshr i32 %10488, 11
  %10490 = load i32, i32* %20, align 4
  %10491 = shl i32 %10490, 21
  %10492 = or i32 %10489, %10491
  %10493 = xor i32 %10487, %10492
  %10494 = load i32, i32* %20, align 4
  %10495 = lshr i32 %10494, 25
  %10496 = load i32, i32* %20, align 4
  %10497 = shl i32 %10496, 7
  %10498 = or i32 %10495, %10497
  %10499 = xor i32 %10493, %10498
  %10500 = add i32 %10482, %10499
  %10501 = load i32, i32* %20, align 4
  %10502 = load i32, i32* %21, align 4
  %10503 = and i32 %10501, %10502
  %10504 = load i32, i32* %20, align 4
  %10505 = xor i32 %10504, -1
  %10506 = load i32, i32* %22, align 4
  %10507 = and i32 %10505, %10506
  %10508 = xor i32 %10503, %10507
  %10509 = add i32 %10500, %10508
  %10510 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 2), align 8
  %10511 = add i32 %10509, %10510
  %10512 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %10513 = load i32, i32* %10512, align 8
  %10514 = add i32 %10511, %10513
  store i32 %10514, i32* %24, align 4
  %10515 = load i32, i32* %16, align 4
  %10516 = lshr i32 %10515, 2
  %10517 = load i32, i32* %16, align 4
  %10518 = shl i32 %10517, 30
  %10519 = or i32 %10516, %10518
  %10520 = load i32, i32* %16, align 4
  %10521 = lshr i32 %10520, 13
  %10522 = load i32, i32* %16, align 4
  %10523 = shl i32 %10522, 19
  %10524 = or i32 %10521, %10523
  %10525 = xor i32 %10519, %10524
  %10526 = load i32, i32* %16, align 4
  %10527 = lshr i32 %10526, 22
  %10528 = load i32, i32* %16, align 4
  %10529 = shl i32 %10528, 10
  %10530 = or i32 %10527, %10529
  %10531 = xor i32 %10525, %10530
  %10532 = load i32, i32* %16, align 4
  %10533 = load i32, i32* %17, align 4
  %10534 = and i32 %10532, %10533
  %10535 = load i32, i32* %16, align 4
  %10536 = load i32, i32* %18, align 4
  %10537 = and i32 %10535, %10536
  %10538 = xor i32 %10534, %10537
  %10539 = load i32, i32* %17, align 4
  %10540 = load i32, i32* %18, align 4
  %10541 = and i32 %10539, %10540
  %10542 = xor i32 %10538, %10541
  %10543 = add i32 %10531, %10542
  store i32 %10543, i32* %25, align 4
  %10544 = load i32, i32* %22, align 4
  store i32 %10544, i32* %23, align 4
  %10545 = load i32, i32* %21, align 4
  store i32 %10545, i32* %22, align 4
  %10546 = load i32, i32* %20, align 4
  store i32 %10546, i32* %21, align 4
  %10547 = load i32, i32* %19, align 4
  %10548 = load i32, i32* %24, align 4
  %10549 = add i32 %10547, %10548
  store i32 %10549, i32* %20, align 4
  %10550 = load i32, i32* %18, align 4
  store i32 %10550, i32* %19, align 4
  %10551 = load i32, i32* %17, align 4
  store i32 %10551, i32* %18, align 4
  %10552 = load i32, i32* %16, align 4
  store i32 %10552, i32* %17, align 4
  %10553 = load i32, i32* %24, align 4
  %10554 = load i32, i32* %25, align 4
  %10555 = add i32 %10553, %10554
  store i32 %10555, i32* %16, align 4
  %10556 = load i32, i32* %23, align 4
  %10557 = load i32, i32* %20, align 4
  %10558 = lshr i32 %10557, 6
  %10559 = load i32, i32* %20, align 4
  %10560 = shl i32 %10559, 26
  %10561 = or i32 %10558, %10560
  %10562 = load i32, i32* %20, align 4
  %10563 = lshr i32 %10562, 11
  %10564 = load i32, i32* %20, align 4
  %10565 = shl i32 %10564, 21
  %10566 = or i32 %10563, %10565
  %10567 = xor i32 %10561, %10566
  %10568 = load i32, i32* %20, align 4
  %10569 = lshr i32 %10568, 25
  %10570 = load i32, i32* %20, align 4
  %10571 = shl i32 %10570, 7
  %10572 = or i32 %10569, %10571
  %10573 = xor i32 %10567, %10572
  %10574 = add i32 %10556, %10573
  %10575 = load i32, i32* %20, align 4
  %10576 = load i32, i32* %21, align 4
  %10577 = and i32 %10575, %10576
  %10578 = load i32, i32* %20, align 4
  %10579 = xor i32 %10578, -1
  %10580 = load i32, i32* %22, align 4
  %10581 = and i32 %10579, %10580
  %10582 = xor i32 %10577, %10581
  %10583 = add i32 %10574, %10582
  %10584 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 3), align 4
  %10585 = add i32 %10583, %10584
  %10586 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %10587 = load i32, i32* %10586, align 4
  %10588 = add i32 %10585, %10587
  store i32 %10588, i32* %24, align 4
  %10589 = load i32, i32* %16, align 4
  %10590 = lshr i32 %10589, 2
  %10591 = load i32, i32* %16, align 4
  %10592 = shl i32 %10591, 30
  %10593 = or i32 %10590, %10592
  %10594 = load i32, i32* %16, align 4
  %10595 = lshr i32 %10594, 13
  %10596 = load i32, i32* %16, align 4
  %10597 = shl i32 %10596, 19
  %10598 = or i32 %10595, %10597
  %10599 = xor i32 %10593, %10598
  %10600 = load i32, i32* %16, align 4
  %10601 = lshr i32 %10600, 22
  %10602 = load i32, i32* %16, align 4
  %10603 = shl i32 %10602, 10
  %10604 = or i32 %10601, %10603
  %10605 = xor i32 %10599, %10604
  %10606 = load i32, i32* %16, align 4
  %10607 = load i32, i32* %17, align 4
  %10608 = and i32 %10606, %10607
  %10609 = load i32, i32* %16, align 4
  %10610 = load i32, i32* %18, align 4
  %10611 = and i32 %10609, %10610
  %10612 = xor i32 %10608, %10611
  %10613 = load i32, i32* %17, align 4
  %10614 = load i32, i32* %18, align 4
  %10615 = and i32 %10613, %10614
  %10616 = xor i32 %10612, %10615
  %10617 = add i32 %10605, %10616
  store i32 %10617, i32* %25, align 4
  %10618 = load i32, i32* %22, align 4
  store i32 %10618, i32* %23, align 4
  %10619 = load i32, i32* %21, align 4
  store i32 %10619, i32* %22, align 4
  %10620 = load i32, i32* %20, align 4
  store i32 %10620, i32* %21, align 4
  %10621 = load i32, i32* %19, align 4
  %10622 = load i32, i32* %24, align 4
  %10623 = add i32 %10621, %10622
  store i32 %10623, i32* %20, align 4
  %10624 = load i32, i32* %18, align 4
  store i32 %10624, i32* %19, align 4
  %10625 = load i32, i32* %17, align 4
  store i32 %10625, i32* %18, align 4
  %10626 = load i32, i32* %16, align 4
  store i32 %10626, i32* %17, align 4
  %10627 = load i32, i32* %24, align 4
  %10628 = load i32, i32* %25, align 4
  %10629 = add i32 %10627, %10628
  store i32 %10629, i32* %16, align 4
  %10630 = load i32, i32* %23, align 4
  %10631 = load i32, i32* %20, align 4
  %10632 = lshr i32 %10631, 6
  %10633 = load i32, i32* %20, align 4
  %10634 = shl i32 %10633, 26
  %10635 = or i32 %10632, %10634
  %10636 = load i32, i32* %20, align 4
  %10637 = lshr i32 %10636, 11
  %10638 = load i32, i32* %20, align 4
  %10639 = shl i32 %10638, 21
  %10640 = or i32 %10637, %10639
  %10641 = xor i32 %10635, %10640
  %10642 = load i32, i32* %20, align 4
  %10643 = lshr i32 %10642, 25
  %10644 = load i32, i32* %20, align 4
  %10645 = shl i32 %10644, 7
  %10646 = or i32 %10643, %10645
  %10647 = xor i32 %10641, %10646
  %10648 = add i32 %10630, %10647
  %10649 = load i32, i32* %20, align 4
  %10650 = load i32, i32* %21, align 4
  %10651 = and i32 %10649, %10650
  %10652 = load i32, i32* %20, align 4
  %10653 = xor i32 %10652, -1
  %10654 = load i32, i32* %22, align 4
  %10655 = and i32 %10653, %10654
  %10656 = xor i32 %10651, %10655
  %10657 = add i32 %10648, %10656
  %10658 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 4), align 16
  %10659 = add i32 %10657, %10658
  %10660 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %10661 = load i32, i32* %10660, align 16
  %10662 = add i32 %10659, %10661
  store i32 %10662, i32* %24, align 4
  %10663 = load i32, i32* %16, align 4
  %10664 = lshr i32 %10663, 2
  %10665 = load i32, i32* %16, align 4
  %10666 = shl i32 %10665, 30
  %10667 = or i32 %10664, %10666
  %10668 = load i32, i32* %16, align 4
  %10669 = lshr i32 %10668, 13
  %10670 = load i32, i32* %16, align 4
  %10671 = shl i32 %10670, 19
  %10672 = or i32 %10669, %10671
  %10673 = xor i32 %10667, %10672
  %10674 = load i32, i32* %16, align 4
  %10675 = lshr i32 %10674, 22
  %10676 = load i32, i32* %16, align 4
  %10677 = shl i32 %10676, 10
  %10678 = or i32 %10675, %10677
  %10679 = xor i32 %10673, %10678
  %10680 = load i32, i32* %16, align 4
  %10681 = load i32, i32* %17, align 4
  %10682 = and i32 %10680, %10681
  %10683 = load i32, i32* %16, align 4
  %10684 = load i32, i32* %18, align 4
  %10685 = and i32 %10683, %10684
  %10686 = xor i32 %10682, %10685
  %10687 = load i32, i32* %17, align 4
  %10688 = load i32, i32* %18, align 4
  %10689 = and i32 %10687, %10688
  %10690 = xor i32 %10686, %10689
  %10691 = add i32 %10679, %10690
  store i32 %10691, i32* %25, align 4
  %10692 = load i32, i32* %22, align 4
  store i32 %10692, i32* %23, align 4
  %10693 = load i32, i32* %21, align 4
  store i32 %10693, i32* %22, align 4
  %10694 = load i32, i32* %20, align 4
  store i32 %10694, i32* %21, align 4
  %10695 = load i32, i32* %19, align 4
  %10696 = load i32, i32* %24, align 4
  %10697 = add i32 %10695, %10696
  store i32 %10697, i32* %20, align 4
  %10698 = load i32, i32* %18, align 4
  store i32 %10698, i32* %19, align 4
  %10699 = load i32, i32* %17, align 4
  store i32 %10699, i32* %18, align 4
  %10700 = load i32, i32* %16, align 4
  store i32 %10700, i32* %17, align 4
  %10701 = load i32, i32* %24, align 4
  %10702 = load i32, i32* %25, align 4
  %10703 = add i32 %10701, %10702
  store i32 %10703, i32* %16, align 4
  %10704 = load i32, i32* %23, align 4
  %10705 = load i32, i32* %20, align 4
  %10706 = lshr i32 %10705, 6
  %10707 = load i32, i32* %20, align 4
  %10708 = shl i32 %10707, 26
  %10709 = or i32 %10706, %10708
  %10710 = load i32, i32* %20, align 4
  %10711 = lshr i32 %10710, 11
  %10712 = load i32, i32* %20, align 4
  %10713 = shl i32 %10712, 21
  %10714 = or i32 %10711, %10713
  %10715 = xor i32 %10709, %10714
  %10716 = load i32, i32* %20, align 4
  %10717 = lshr i32 %10716, 25
  %10718 = load i32, i32* %20, align 4
  %10719 = shl i32 %10718, 7
  %10720 = or i32 %10717, %10719
  %10721 = xor i32 %10715, %10720
  %10722 = add i32 %10704, %10721
  %10723 = load i32, i32* %20, align 4
  %10724 = load i32, i32* %21, align 4
  %10725 = and i32 %10723, %10724
  %10726 = load i32, i32* %20, align 4
  %10727 = xor i32 %10726, -1
  %10728 = load i32, i32* %22, align 4
  %10729 = and i32 %10727, %10728
  %10730 = xor i32 %10725, %10729
  %10731 = add i32 %10722, %10730
  %10732 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 5), align 4
  %10733 = add i32 %10731, %10732
  %10734 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %10735 = load i32, i32* %10734, align 4
  %10736 = add i32 %10733, %10735
  store i32 %10736, i32* %24, align 4
  %10737 = load i32, i32* %16, align 4
  %10738 = lshr i32 %10737, 2
  %10739 = load i32, i32* %16, align 4
  %10740 = shl i32 %10739, 30
  %10741 = or i32 %10738, %10740
  %10742 = load i32, i32* %16, align 4
  %10743 = lshr i32 %10742, 13
  %10744 = load i32, i32* %16, align 4
  %10745 = shl i32 %10744, 19
  %10746 = or i32 %10743, %10745
  %10747 = xor i32 %10741, %10746
  %10748 = load i32, i32* %16, align 4
  %10749 = lshr i32 %10748, 22
  %10750 = load i32, i32* %16, align 4
  %10751 = shl i32 %10750, 10
  %10752 = or i32 %10749, %10751
  %10753 = xor i32 %10747, %10752
  %10754 = load i32, i32* %16, align 4
  %10755 = load i32, i32* %17, align 4
  %10756 = and i32 %10754, %10755
  %10757 = load i32, i32* %16, align 4
  %10758 = load i32, i32* %18, align 4
  %10759 = and i32 %10757, %10758
  %10760 = xor i32 %10756, %10759
  %10761 = load i32, i32* %17, align 4
  %10762 = load i32, i32* %18, align 4
  %10763 = and i32 %10761, %10762
  %10764 = xor i32 %10760, %10763
  %10765 = add i32 %10753, %10764
  store i32 %10765, i32* %25, align 4
  %10766 = load i32, i32* %22, align 4
  store i32 %10766, i32* %23, align 4
  %10767 = load i32, i32* %21, align 4
  store i32 %10767, i32* %22, align 4
  %10768 = load i32, i32* %20, align 4
  store i32 %10768, i32* %21, align 4
  %10769 = load i32, i32* %19, align 4
  %10770 = load i32, i32* %24, align 4
  %10771 = add i32 %10769, %10770
  store i32 %10771, i32* %20, align 4
  %10772 = load i32, i32* %18, align 4
  store i32 %10772, i32* %19, align 4
  %10773 = load i32, i32* %17, align 4
  store i32 %10773, i32* %18, align 4
  %10774 = load i32, i32* %16, align 4
  store i32 %10774, i32* %17, align 4
  %10775 = load i32, i32* %24, align 4
  %10776 = load i32, i32* %25, align 4
  %10777 = add i32 %10775, %10776
  store i32 %10777, i32* %16, align 4
  %10778 = load i32, i32* %23, align 4
  %10779 = load i32, i32* %20, align 4
  %10780 = lshr i32 %10779, 6
  %10781 = load i32, i32* %20, align 4
  %10782 = shl i32 %10781, 26
  %10783 = or i32 %10780, %10782
  %10784 = load i32, i32* %20, align 4
  %10785 = lshr i32 %10784, 11
  %10786 = load i32, i32* %20, align 4
  %10787 = shl i32 %10786, 21
  %10788 = or i32 %10785, %10787
  %10789 = xor i32 %10783, %10788
  %10790 = load i32, i32* %20, align 4
  %10791 = lshr i32 %10790, 25
  %10792 = load i32, i32* %20, align 4
  %10793 = shl i32 %10792, 7
  %10794 = or i32 %10791, %10793
  %10795 = xor i32 %10789, %10794
  %10796 = add i32 %10778, %10795
  %10797 = load i32, i32* %20, align 4
  %10798 = load i32, i32* %21, align 4
  %10799 = and i32 %10797, %10798
  %10800 = load i32, i32* %20, align 4
  %10801 = xor i32 %10800, -1
  %10802 = load i32, i32* %22, align 4
  %10803 = and i32 %10801, %10802
  %10804 = xor i32 %10799, %10803
  %10805 = add i32 %10796, %10804
  %10806 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 6), align 8
  %10807 = add i32 %10805, %10806
  %10808 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %10809 = load i32, i32* %10808, align 8
  %10810 = add i32 %10807, %10809
  store i32 %10810, i32* %24, align 4
  %10811 = load i32, i32* %16, align 4
  %10812 = lshr i32 %10811, 2
  %10813 = load i32, i32* %16, align 4
  %10814 = shl i32 %10813, 30
  %10815 = or i32 %10812, %10814
  %10816 = load i32, i32* %16, align 4
  %10817 = lshr i32 %10816, 13
  %10818 = load i32, i32* %16, align 4
  %10819 = shl i32 %10818, 19
  %10820 = or i32 %10817, %10819
  %10821 = xor i32 %10815, %10820
  %10822 = load i32, i32* %16, align 4
  %10823 = lshr i32 %10822, 22
  %10824 = load i32, i32* %16, align 4
  %10825 = shl i32 %10824, 10
  %10826 = or i32 %10823, %10825
  %10827 = xor i32 %10821, %10826
  %10828 = load i32, i32* %16, align 4
  %10829 = load i32, i32* %17, align 4
  %10830 = and i32 %10828, %10829
  %10831 = load i32, i32* %16, align 4
  %10832 = load i32, i32* %18, align 4
  %10833 = and i32 %10831, %10832
  %10834 = xor i32 %10830, %10833
  %10835 = load i32, i32* %17, align 4
  %10836 = load i32, i32* %18, align 4
  %10837 = and i32 %10835, %10836
  %10838 = xor i32 %10834, %10837
  %10839 = add i32 %10827, %10838
  store i32 %10839, i32* %25, align 4
  %10840 = load i32, i32* %22, align 4
  store i32 %10840, i32* %23, align 4
  %10841 = load i32, i32* %21, align 4
  store i32 %10841, i32* %22, align 4
  %10842 = load i32, i32* %20, align 4
  store i32 %10842, i32* %21, align 4
  %10843 = load i32, i32* %19, align 4
  %10844 = load i32, i32* %24, align 4
  %10845 = add i32 %10843, %10844
  store i32 %10845, i32* %20, align 4
  %10846 = load i32, i32* %18, align 4
  store i32 %10846, i32* %19, align 4
  %10847 = load i32, i32* %17, align 4
  store i32 %10847, i32* %18, align 4
  %10848 = load i32, i32* %16, align 4
  store i32 %10848, i32* %17, align 4
  %10849 = load i32, i32* %24, align 4
  %10850 = load i32, i32* %25, align 4
  %10851 = add i32 %10849, %10850
  store i32 %10851, i32* %16, align 4
  %10852 = load i32, i32* %23, align 4
  %10853 = load i32, i32* %20, align 4
  %10854 = lshr i32 %10853, 6
  %10855 = load i32, i32* %20, align 4
  %10856 = shl i32 %10855, 26
  %10857 = or i32 %10854, %10856
  %10858 = load i32, i32* %20, align 4
  %10859 = lshr i32 %10858, 11
  %10860 = load i32, i32* %20, align 4
  %10861 = shl i32 %10860, 21
  %10862 = or i32 %10859, %10861
  %10863 = xor i32 %10857, %10862
  %10864 = load i32, i32* %20, align 4
  %10865 = lshr i32 %10864, 25
  %10866 = load i32, i32* %20, align 4
  %10867 = shl i32 %10866, 7
  %10868 = or i32 %10865, %10867
  %10869 = xor i32 %10863, %10868
  %10870 = add i32 %10852, %10869
  %10871 = load i32, i32* %20, align 4
  %10872 = load i32, i32* %21, align 4
  %10873 = and i32 %10871, %10872
  %10874 = load i32, i32* %20, align 4
  %10875 = xor i32 %10874, -1
  %10876 = load i32, i32* %22, align 4
  %10877 = and i32 %10875, %10876
  %10878 = xor i32 %10873, %10877
  %10879 = add i32 %10870, %10878
  %10880 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 7), align 4
  %10881 = add i32 %10879, %10880
  %10882 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %10883 = load i32, i32* %10882, align 4
  %10884 = add i32 %10881, %10883
  store i32 %10884, i32* %24, align 4
  %10885 = load i32, i32* %16, align 4
  %10886 = lshr i32 %10885, 2
  %10887 = load i32, i32* %16, align 4
  %10888 = shl i32 %10887, 30
  %10889 = or i32 %10886, %10888
  %10890 = load i32, i32* %16, align 4
  %10891 = lshr i32 %10890, 13
  %10892 = load i32, i32* %16, align 4
  %10893 = shl i32 %10892, 19
  %10894 = or i32 %10891, %10893
  %10895 = xor i32 %10889, %10894
  %10896 = load i32, i32* %16, align 4
  %10897 = lshr i32 %10896, 22
  %10898 = load i32, i32* %16, align 4
  %10899 = shl i32 %10898, 10
  %10900 = or i32 %10897, %10899
  %10901 = xor i32 %10895, %10900
  %10902 = load i32, i32* %16, align 4
  %10903 = load i32, i32* %17, align 4
  %10904 = and i32 %10902, %10903
  %10905 = load i32, i32* %16, align 4
  %10906 = load i32, i32* %18, align 4
  %10907 = and i32 %10905, %10906
  %10908 = xor i32 %10904, %10907
  %10909 = load i32, i32* %17, align 4
  %10910 = load i32, i32* %18, align 4
  %10911 = and i32 %10909, %10910
  %10912 = xor i32 %10908, %10911
  %10913 = add i32 %10901, %10912
  store i32 %10913, i32* %25, align 4
  %10914 = load i32, i32* %22, align 4
  store i32 %10914, i32* %23, align 4
  %10915 = load i32, i32* %21, align 4
  store i32 %10915, i32* %22, align 4
  %10916 = load i32, i32* %20, align 4
  store i32 %10916, i32* %21, align 4
  %10917 = load i32, i32* %19, align 4
  %10918 = load i32, i32* %24, align 4
  %10919 = add i32 %10917, %10918
  store i32 %10919, i32* %20, align 4
  %10920 = load i32, i32* %18, align 4
  store i32 %10920, i32* %19, align 4
  %10921 = load i32, i32* %17, align 4
  store i32 %10921, i32* %18, align 4
  %10922 = load i32, i32* %16, align 4
  store i32 %10922, i32* %17, align 4
  %10923 = load i32, i32* %24, align 4
  %10924 = load i32, i32* %25, align 4
  %10925 = add i32 %10923, %10924
  store i32 %10925, i32* %16, align 4
  %10926 = load i32, i32* %23, align 4
  %10927 = load i32, i32* %20, align 4
  %10928 = lshr i32 %10927, 6
  %10929 = load i32, i32* %20, align 4
  %10930 = shl i32 %10929, 26
  %10931 = or i32 %10928, %10930
  %10932 = load i32, i32* %20, align 4
  %10933 = lshr i32 %10932, 11
  %10934 = load i32, i32* %20, align 4
  %10935 = shl i32 %10934, 21
  %10936 = or i32 %10933, %10935
  %10937 = xor i32 %10931, %10936
  %10938 = load i32, i32* %20, align 4
  %10939 = lshr i32 %10938, 25
  %10940 = load i32, i32* %20, align 4
  %10941 = shl i32 %10940, 7
  %10942 = or i32 %10939, %10941
  %10943 = xor i32 %10937, %10942
  %10944 = add i32 %10926, %10943
  %10945 = load i32, i32* %20, align 4
  %10946 = load i32, i32* %21, align 4
  %10947 = and i32 %10945, %10946
  %10948 = load i32, i32* %20, align 4
  %10949 = xor i32 %10948, -1
  %10950 = load i32, i32* %22, align 4
  %10951 = and i32 %10949, %10950
  %10952 = xor i32 %10947, %10951
  %10953 = add i32 %10944, %10952
  %10954 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 8), align 16
  %10955 = add i32 %10953, %10954
  %10956 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %10957 = load i32, i32* %10956, align 16
  %10958 = add i32 %10955, %10957
  store i32 %10958, i32* %24, align 4
  %10959 = load i32, i32* %16, align 4
  %10960 = lshr i32 %10959, 2
  %10961 = load i32, i32* %16, align 4
  %10962 = shl i32 %10961, 30
  %10963 = or i32 %10960, %10962
  %10964 = load i32, i32* %16, align 4
  %10965 = lshr i32 %10964, 13
  %10966 = load i32, i32* %16, align 4
  %10967 = shl i32 %10966, 19
  %10968 = or i32 %10965, %10967
  %10969 = xor i32 %10963, %10968
  %10970 = load i32, i32* %16, align 4
  %10971 = lshr i32 %10970, 22
  %10972 = load i32, i32* %16, align 4
  %10973 = shl i32 %10972, 10
  %10974 = or i32 %10971, %10973
  %10975 = xor i32 %10969, %10974
  %10976 = load i32, i32* %16, align 4
  %10977 = load i32, i32* %17, align 4
  %10978 = and i32 %10976, %10977
  %10979 = load i32, i32* %16, align 4
  %10980 = load i32, i32* %18, align 4
  %10981 = and i32 %10979, %10980
  %10982 = xor i32 %10978, %10981
  %10983 = load i32, i32* %17, align 4
  %10984 = load i32, i32* %18, align 4
  %10985 = and i32 %10983, %10984
  %10986 = xor i32 %10982, %10985
  %10987 = add i32 %10975, %10986
  store i32 %10987, i32* %25, align 4
  %10988 = load i32, i32* %22, align 4
  store i32 %10988, i32* %23, align 4
  %10989 = load i32, i32* %21, align 4
  store i32 %10989, i32* %22, align 4
  %10990 = load i32, i32* %20, align 4
  store i32 %10990, i32* %21, align 4
  %10991 = load i32, i32* %19, align 4
  %10992 = load i32, i32* %24, align 4
  %10993 = add i32 %10991, %10992
  store i32 %10993, i32* %20, align 4
  %10994 = load i32, i32* %18, align 4
  store i32 %10994, i32* %19, align 4
  %10995 = load i32, i32* %17, align 4
  store i32 %10995, i32* %18, align 4
  %10996 = load i32, i32* %16, align 4
  store i32 %10996, i32* %17, align 4
  %10997 = load i32, i32* %24, align 4
  %10998 = load i32, i32* %25, align 4
  %10999 = add i32 %10997, %10998
  store i32 %10999, i32* %16, align 4
  %11000 = load i32, i32* %23, align 4
  %11001 = load i32, i32* %20, align 4
  %11002 = lshr i32 %11001, 6
  %11003 = load i32, i32* %20, align 4
  %11004 = shl i32 %11003, 26
  %11005 = or i32 %11002, %11004
  %11006 = load i32, i32* %20, align 4
  %11007 = lshr i32 %11006, 11
  %11008 = load i32, i32* %20, align 4
  %11009 = shl i32 %11008, 21
  %11010 = or i32 %11007, %11009
  %11011 = xor i32 %11005, %11010
  %11012 = load i32, i32* %20, align 4
  %11013 = lshr i32 %11012, 25
  %11014 = load i32, i32* %20, align 4
  %11015 = shl i32 %11014, 7
  %11016 = or i32 %11013, %11015
  %11017 = xor i32 %11011, %11016
  %11018 = add i32 %11000, %11017
  %11019 = load i32, i32* %20, align 4
  %11020 = load i32, i32* %21, align 4
  %11021 = and i32 %11019, %11020
  %11022 = load i32, i32* %20, align 4
  %11023 = xor i32 %11022, -1
  %11024 = load i32, i32* %22, align 4
  %11025 = and i32 %11023, %11024
  %11026 = xor i32 %11021, %11025
  %11027 = add i32 %11018, %11026
  %11028 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 9), align 4
  %11029 = add i32 %11027, %11028
  %11030 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %11031 = load i32, i32* %11030, align 4
  %11032 = add i32 %11029, %11031
  store i32 %11032, i32* %24, align 4
  %11033 = load i32, i32* %16, align 4
  %11034 = lshr i32 %11033, 2
  %11035 = load i32, i32* %16, align 4
  %11036 = shl i32 %11035, 30
  %11037 = or i32 %11034, %11036
  %11038 = load i32, i32* %16, align 4
  %11039 = lshr i32 %11038, 13
  %11040 = load i32, i32* %16, align 4
  %11041 = shl i32 %11040, 19
  %11042 = or i32 %11039, %11041
  %11043 = xor i32 %11037, %11042
  %11044 = load i32, i32* %16, align 4
  %11045 = lshr i32 %11044, 22
  %11046 = load i32, i32* %16, align 4
  %11047 = shl i32 %11046, 10
  %11048 = or i32 %11045, %11047
  %11049 = xor i32 %11043, %11048
  %11050 = load i32, i32* %16, align 4
  %11051 = load i32, i32* %17, align 4
  %11052 = and i32 %11050, %11051
  %11053 = load i32, i32* %16, align 4
  %11054 = load i32, i32* %18, align 4
  %11055 = and i32 %11053, %11054
  %11056 = xor i32 %11052, %11055
  %11057 = load i32, i32* %17, align 4
  %11058 = load i32, i32* %18, align 4
  %11059 = and i32 %11057, %11058
  %11060 = xor i32 %11056, %11059
  %11061 = add i32 %11049, %11060
  store i32 %11061, i32* %25, align 4
  %11062 = load i32, i32* %22, align 4
  store i32 %11062, i32* %23, align 4
  %11063 = load i32, i32* %21, align 4
  store i32 %11063, i32* %22, align 4
  %11064 = load i32, i32* %20, align 4
  store i32 %11064, i32* %21, align 4
  %11065 = load i32, i32* %19, align 4
  %11066 = load i32, i32* %24, align 4
  %11067 = add i32 %11065, %11066
  store i32 %11067, i32* %20, align 4
  %11068 = load i32, i32* %18, align 4
  store i32 %11068, i32* %19, align 4
  %11069 = load i32, i32* %17, align 4
  store i32 %11069, i32* %18, align 4
  %11070 = load i32, i32* %16, align 4
  store i32 %11070, i32* %17, align 4
  %11071 = load i32, i32* %24, align 4
  %11072 = load i32, i32* %25, align 4
  %11073 = add i32 %11071, %11072
  store i32 %11073, i32* %16, align 4
  %11074 = load i32, i32* %23, align 4
  %11075 = load i32, i32* %20, align 4
  %11076 = lshr i32 %11075, 6
  %11077 = load i32, i32* %20, align 4
  %11078 = shl i32 %11077, 26
  %11079 = or i32 %11076, %11078
  %11080 = load i32, i32* %20, align 4
  %11081 = lshr i32 %11080, 11
  %11082 = load i32, i32* %20, align 4
  %11083 = shl i32 %11082, 21
  %11084 = or i32 %11081, %11083
  %11085 = xor i32 %11079, %11084
  %11086 = load i32, i32* %20, align 4
  %11087 = lshr i32 %11086, 25
  %11088 = load i32, i32* %20, align 4
  %11089 = shl i32 %11088, 7
  %11090 = or i32 %11087, %11089
  %11091 = xor i32 %11085, %11090
  %11092 = add i32 %11074, %11091
  %11093 = load i32, i32* %20, align 4
  %11094 = load i32, i32* %21, align 4
  %11095 = and i32 %11093, %11094
  %11096 = load i32, i32* %20, align 4
  %11097 = xor i32 %11096, -1
  %11098 = load i32, i32* %22, align 4
  %11099 = and i32 %11097, %11098
  %11100 = xor i32 %11095, %11099
  %11101 = add i32 %11092, %11100
  %11102 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 10), align 8
  %11103 = add i32 %11101, %11102
  %11104 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %11105 = load i32, i32* %11104, align 8
  %11106 = add i32 %11103, %11105
  store i32 %11106, i32* %24, align 4
  %11107 = load i32, i32* %16, align 4
  %11108 = lshr i32 %11107, 2
  %11109 = load i32, i32* %16, align 4
  %11110 = shl i32 %11109, 30
  %11111 = or i32 %11108, %11110
  %11112 = load i32, i32* %16, align 4
  %11113 = lshr i32 %11112, 13
  %11114 = load i32, i32* %16, align 4
  %11115 = shl i32 %11114, 19
  %11116 = or i32 %11113, %11115
  %11117 = xor i32 %11111, %11116
  %11118 = load i32, i32* %16, align 4
  %11119 = lshr i32 %11118, 22
  %11120 = load i32, i32* %16, align 4
  %11121 = shl i32 %11120, 10
  %11122 = or i32 %11119, %11121
  %11123 = xor i32 %11117, %11122
  %11124 = load i32, i32* %16, align 4
  %11125 = load i32, i32* %17, align 4
  %11126 = and i32 %11124, %11125
  %11127 = load i32, i32* %16, align 4
  %11128 = load i32, i32* %18, align 4
  %11129 = and i32 %11127, %11128
  %11130 = xor i32 %11126, %11129
  %11131 = load i32, i32* %17, align 4
  %11132 = load i32, i32* %18, align 4
  %11133 = and i32 %11131, %11132
  %11134 = xor i32 %11130, %11133
  %11135 = add i32 %11123, %11134
  store i32 %11135, i32* %25, align 4
  %11136 = load i32, i32* %22, align 4
  store i32 %11136, i32* %23, align 4
  %11137 = load i32, i32* %21, align 4
  store i32 %11137, i32* %22, align 4
  %11138 = load i32, i32* %20, align 4
  store i32 %11138, i32* %21, align 4
  %11139 = load i32, i32* %19, align 4
  %11140 = load i32, i32* %24, align 4
  %11141 = add i32 %11139, %11140
  store i32 %11141, i32* %20, align 4
  %11142 = load i32, i32* %18, align 4
  store i32 %11142, i32* %19, align 4
  %11143 = load i32, i32* %17, align 4
  store i32 %11143, i32* %18, align 4
  %11144 = load i32, i32* %16, align 4
  store i32 %11144, i32* %17, align 4
  %11145 = load i32, i32* %24, align 4
  %11146 = load i32, i32* %25, align 4
  %11147 = add i32 %11145, %11146
  store i32 %11147, i32* %16, align 4
  %11148 = load i32, i32* %23, align 4
  %11149 = load i32, i32* %20, align 4
  %11150 = lshr i32 %11149, 6
  %11151 = load i32, i32* %20, align 4
  %11152 = shl i32 %11151, 26
  %11153 = or i32 %11150, %11152
  %11154 = load i32, i32* %20, align 4
  %11155 = lshr i32 %11154, 11
  %11156 = load i32, i32* %20, align 4
  %11157 = shl i32 %11156, 21
  %11158 = or i32 %11155, %11157
  %11159 = xor i32 %11153, %11158
  %11160 = load i32, i32* %20, align 4
  %11161 = lshr i32 %11160, 25
  %11162 = load i32, i32* %20, align 4
  %11163 = shl i32 %11162, 7
  %11164 = or i32 %11161, %11163
  %11165 = xor i32 %11159, %11164
  %11166 = add i32 %11148, %11165
  %11167 = load i32, i32* %20, align 4
  %11168 = load i32, i32* %21, align 4
  %11169 = and i32 %11167, %11168
  %11170 = load i32, i32* %20, align 4
  %11171 = xor i32 %11170, -1
  %11172 = load i32, i32* %22, align 4
  %11173 = and i32 %11171, %11172
  %11174 = xor i32 %11169, %11173
  %11175 = add i32 %11166, %11174
  %11176 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 11), align 4
  %11177 = add i32 %11175, %11176
  %11178 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %11179 = load i32, i32* %11178, align 4
  %11180 = add i32 %11177, %11179
  store i32 %11180, i32* %24, align 4
  %11181 = load i32, i32* %16, align 4
  %11182 = lshr i32 %11181, 2
  %11183 = load i32, i32* %16, align 4
  %11184 = shl i32 %11183, 30
  %11185 = or i32 %11182, %11184
  %11186 = load i32, i32* %16, align 4
  %11187 = lshr i32 %11186, 13
  %11188 = load i32, i32* %16, align 4
  %11189 = shl i32 %11188, 19
  %11190 = or i32 %11187, %11189
  %11191 = xor i32 %11185, %11190
  %11192 = load i32, i32* %16, align 4
  %11193 = lshr i32 %11192, 22
  %11194 = load i32, i32* %16, align 4
  %11195 = shl i32 %11194, 10
  %11196 = or i32 %11193, %11195
  %11197 = xor i32 %11191, %11196
  %11198 = load i32, i32* %16, align 4
  %11199 = load i32, i32* %17, align 4
  %11200 = and i32 %11198, %11199
  %11201 = load i32, i32* %16, align 4
  %11202 = load i32, i32* %18, align 4
  %11203 = and i32 %11201, %11202
  %11204 = xor i32 %11200, %11203
  %11205 = load i32, i32* %17, align 4
  %11206 = load i32, i32* %18, align 4
  %11207 = and i32 %11205, %11206
  %11208 = xor i32 %11204, %11207
  %11209 = add i32 %11197, %11208
  store i32 %11209, i32* %25, align 4
  %11210 = load i32, i32* %22, align 4
  store i32 %11210, i32* %23, align 4
  %11211 = load i32, i32* %21, align 4
  store i32 %11211, i32* %22, align 4
  %11212 = load i32, i32* %20, align 4
  store i32 %11212, i32* %21, align 4
  %11213 = load i32, i32* %19, align 4
  %11214 = load i32, i32* %24, align 4
  %11215 = add i32 %11213, %11214
  store i32 %11215, i32* %20, align 4
  %11216 = load i32, i32* %18, align 4
  store i32 %11216, i32* %19, align 4
  %11217 = load i32, i32* %17, align 4
  store i32 %11217, i32* %18, align 4
  %11218 = load i32, i32* %16, align 4
  store i32 %11218, i32* %17, align 4
  %11219 = load i32, i32* %24, align 4
  %11220 = load i32, i32* %25, align 4
  %11221 = add i32 %11219, %11220
  store i32 %11221, i32* %16, align 4
  %11222 = load i32, i32* %23, align 4
  %11223 = load i32, i32* %20, align 4
  %11224 = lshr i32 %11223, 6
  %11225 = load i32, i32* %20, align 4
  %11226 = shl i32 %11225, 26
  %11227 = or i32 %11224, %11226
  %11228 = load i32, i32* %20, align 4
  %11229 = lshr i32 %11228, 11
  %11230 = load i32, i32* %20, align 4
  %11231 = shl i32 %11230, 21
  %11232 = or i32 %11229, %11231
  %11233 = xor i32 %11227, %11232
  %11234 = load i32, i32* %20, align 4
  %11235 = lshr i32 %11234, 25
  %11236 = load i32, i32* %20, align 4
  %11237 = shl i32 %11236, 7
  %11238 = or i32 %11235, %11237
  %11239 = xor i32 %11233, %11238
  %11240 = add i32 %11222, %11239
  %11241 = load i32, i32* %20, align 4
  %11242 = load i32, i32* %21, align 4
  %11243 = and i32 %11241, %11242
  %11244 = load i32, i32* %20, align 4
  %11245 = xor i32 %11244, -1
  %11246 = load i32, i32* %22, align 4
  %11247 = and i32 %11245, %11246
  %11248 = xor i32 %11243, %11247
  %11249 = add i32 %11240, %11248
  %11250 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 12), align 16
  %11251 = add i32 %11249, %11250
  %11252 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %11253 = load i32, i32* %11252, align 16
  %11254 = add i32 %11251, %11253
  store i32 %11254, i32* %24, align 4
  %11255 = load i32, i32* %16, align 4
  %11256 = lshr i32 %11255, 2
  %11257 = load i32, i32* %16, align 4
  %11258 = shl i32 %11257, 30
  %11259 = or i32 %11256, %11258
  %11260 = load i32, i32* %16, align 4
  %11261 = lshr i32 %11260, 13
  %11262 = load i32, i32* %16, align 4
  %11263 = shl i32 %11262, 19
  %11264 = or i32 %11261, %11263
  %11265 = xor i32 %11259, %11264
  %11266 = load i32, i32* %16, align 4
  %11267 = lshr i32 %11266, 22
  %11268 = load i32, i32* %16, align 4
  %11269 = shl i32 %11268, 10
  %11270 = or i32 %11267, %11269
  %11271 = xor i32 %11265, %11270
  %11272 = load i32, i32* %16, align 4
  %11273 = load i32, i32* %17, align 4
  %11274 = and i32 %11272, %11273
  %11275 = load i32, i32* %16, align 4
  %11276 = load i32, i32* %18, align 4
  %11277 = and i32 %11275, %11276
  %11278 = xor i32 %11274, %11277
  %11279 = load i32, i32* %17, align 4
  %11280 = load i32, i32* %18, align 4
  %11281 = and i32 %11279, %11280
  %11282 = xor i32 %11278, %11281
  %11283 = add i32 %11271, %11282
  store i32 %11283, i32* %25, align 4
  %11284 = load i32, i32* %22, align 4
  store i32 %11284, i32* %23, align 4
  %11285 = load i32, i32* %21, align 4
  store i32 %11285, i32* %22, align 4
  %11286 = load i32, i32* %20, align 4
  store i32 %11286, i32* %21, align 4
  %11287 = load i32, i32* %19, align 4
  %11288 = load i32, i32* %24, align 4
  %11289 = add i32 %11287, %11288
  store i32 %11289, i32* %20, align 4
  %11290 = load i32, i32* %18, align 4
  store i32 %11290, i32* %19, align 4
  %11291 = load i32, i32* %17, align 4
  store i32 %11291, i32* %18, align 4
  %11292 = load i32, i32* %16, align 4
  store i32 %11292, i32* %17, align 4
  %11293 = load i32, i32* %24, align 4
  %11294 = load i32, i32* %25, align 4
  %11295 = add i32 %11293, %11294
  store i32 %11295, i32* %16, align 4
  %11296 = load i32, i32* %23, align 4
  %11297 = load i32, i32* %20, align 4
  %11298 = lshr i32 %11297, 6
  %11299 = load i32, i32* %20, align 4
  %11300 = shl i32 %11299, 26
  %11301 = or i32 %11298, %11300
  %11302 = load i32, i32* %20, align 4
  %11303 = lshr i32 %11302, 11
  %11304 = load i32, i32* %20, align 4
  %11305 = shl i32 %11304, 21
  %11306 = or i32 %11303, %11305
  %11307 = xor i32 %11301, %11306
  %11308 = load i32, i32* %20, align 4
  %11309 = lshr i32 %11308, 25
  %11310 = load i32, i32* %20, align 4
  %11311 = shl i32 %11310, 7
  %11312 = or i32 %11309, %11311
  %11313 = xor i32 %11307, %11312
  %11314 = add i32 %11296, %11313
  %11315 = load i32, i32* %20, align 4
  %11316 = load i32, i32* %21, align 4
  %11317 = and i32 %11315, %11316
  %11318 = load i32, i32* %20, align 4
  %11319 = xor i32 %11318, -1
  %11320 = load i32, i32* %22, align 4
  %11321 = and i32 %11319, %11320
  %11322 = xor i32 %11317, %11321
  %11323 = add i32 %11314, %11322
  %11324 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 13), align 4
  %11325 = add i32 %11323, %11324
  %11326 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %11327 = load i32, i32* %11326, align 4
  %11328 = add i32 %11325, %11327
  store i32 %11328, i32* %24, align 4
  %11329 = load i32, i32* %16, align 4
  %11330 = lshr i32 %11329, 2
  %11331 = load i32, i32* %16, align 4
  %11332 = shl i32 %11331, 30
  %11333 = or i32 %11330, %11332
  %11334 = load i32, i32* %16, align 4
  %11335 = lshr i32 %11334, 13
  %11336 = load i32, i32* %16, align 4
  %11337 = shl i32 %11336, 19
  %11338 = or i32 %11335, %11337
  %11339 = xor i32 %11333, %11338
  %11340 = load i32, i32* %16, align 4
  %11341 = lshr i32 %11340, 22
  %11342 = load i32, i32* %16, align 4
  %11343 = shl i32 %11342, 10
  %11344 = or i32 %11341, %11343
  %11345 = xor i32 %11339, %11344
  %11346 = load i32, i32* %16, align 4
  %11347 = load i32, i32* %17, align 4
  %11348 = and i32 %11346, %11347
  %11349 = load i32, i32* %16, align 4
  %11350 = load i32, i32* %18, align 4
  %11351 = and i32 %11349, %11350
  %11352 = xor i32 %11348, %11351
  %11353 = load i32, i32* %17, align 4
  %11354 = load i32, i32* %18, align 4
  %11355 = and i32 %11353, %11354
  %11356 = xor i32 %11352, %11355
  %11357 = add i32 %11345, %11356
  store i32 %11357, i32* %25, align 4
  %11358 = load i32, i32* %22, align 4
  store i32 %11358, i32* %23, align 4
  %11359 = load i32, i32* %21, align 4
  store i32 %11359, i32* %22, align 4
  %11360 = load i32, i32* %20, align 4
  store i32 %11360, i32* %21, align 4
  %11361 = load i32, i32* %19, align 4
  %11362 = load i32, i32* %24, align 4
  %11363 = add i32 %11361, %11362
  store i32 %11363, i32* %20, align 4
  %11364 = load i32, i32* %18, align 4
  store i32 %11364, i32* %19, align 4
  %11365 = load i32, i32* %17, align 4
  store i32 %11365, i32* %18, align 4
  %11366 = load i32, i32* %16, align 4
  store i32 %11366, i32* %17, align 4
  %11367 = load i32, i32* %24, align 4
  %11368 = load i32, i32* %25, align 4
  %11369 = add i32 %11367, %11368
  store i32 %11369, i32* %16, align 4
  %11370 = load i32, i32* %23, align 4
  %11371 = load i32, i32* %20, align 4
  %11372 = lshr i32 %11371, 6
  %11373 = load i32, i32* %20, align 4
  %11374 = shl i32 %11373, 26
  %11375 = or i32 %11372, %11374
  %11376 = load i32, i32* %20, align 4
  %11377 = lshr i32 %11376, 11
  %11378 = load i32, i32* %20, align 4
  %11379 = shl i32 %11378, 21
  %11380 = or i32 %11377, %11379
  %11381 = xor i32 %11375, %11380
  %11382 = load i32, i32* %20, align 4
  %11383 = lshr i32 %11382, 25
  %11384 = load i32, i32* %20, align 4
  %11385 = shl i32 %11384, 7
  %11386 = or i32 %11383, %11385
  %11387 = xor i32 %11381, %11386
  %11388 = add i32 %11370, %11387
  %11389 = load i32, i32* %20, align 4
  %11390 = load i32, i32* %21, align 4
  %11391 = and i32 %11389, %11390
  %11392 = load i32, i32* %20, align 4
  %11393 = xor i32 %11392, -1
  %11394 = load i32, i32* %22, align 4
  %11395 = and i32 %11393, %11394
  %11396 = xor i32 %11391, %11395
  %11397 = add i32 %11388, %11396
  %11398 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 14), align 8
  %11399 = add i32 %11397, %11398
  %11400 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11401 = load i32, i32* %11400, align 8
  %11402 = add i32 %11399, %11401
  store i32 %11402, i32* %24, align 4
  %11403 = load i32, i32* %16, align 4
  %11404 = lshr i32 %11403, 2
  %11405 = load i32, i32* %16, align 4
  %11406 = shl i32 %11405, 30
  %11407 = or i32 %11404, %11406
  %11408 = load i32, i32* %16, align 4
  %11409 = lshr i32 %11408, 13
  %11410 = load i32, i32* %16, align 4
  %11411 = shl i32 %11410, 19
  %11412 = or i32 %11409, %11411
  %11413 = xor i32 %11407, %11412
  %11414 = load i32, i32* %16, align 4
  %11415 = lshr i32 %11414, 22
  %11416 = load i32, i32* %16, align 4
  %11417 = shl i32 %11416, 10
  %11418 = or i32 %11415, %11417
  %11419 = xor i32 %11413, %11418
  %11420 = load i32, i32* %16, align 4
  %11421 = load i32, i32* %17, align 4
  %11422 = and i32 %11420, %11421
  %11423 = load i32, i32* %16, align 4
  %11424 = load i32, i32* %18, align 4
  %11425 = and i32 %11423, %11424
  %11426 = xor i32 %11422, %11425
  %11427 = load i32, i32* %17, align 4
  %11428 = load i32, i32* %18, align 4
  %11429 = and i32 %11427, %11428
  %11430 = xor i32 %11426, %11429
  %11431 = add i32 %11419, %11430
  store i32 %11431, i32* %25, align 4
  %11432 = load i32, i32* %22, align 4
  store i32 %11432, i32* %23, align 4
  %11433 = load i32, i32* %21, align 4
  store i32 %11433, i32* %22, align 4
  %11434 = load i32, i32* %20, align 4
  store i32 %11434, i32* %21, align 4
  %11435 = load i32, i32* %19, align 4
  %11436 = load i32, i32* %24, align 4
  %11437 = add i32 %11435, %11436
  store i32 %11437, i32* %20, align 4
  %11438 = load i32, i32* %18, align 4
  store i32 %11438, i32* %19, align 4
  %11439 = load i32, i32* %17, align 4
  store i32 %11439, i32* %18, align 4
  %11440 = load i32, i32* %16, align 4
  store i32 %11440, i32* %17, align 4
  %11441 = load i32, i32* %24, align 4
  %11442 = load i32, i32* %25, align 4
  %11443 = add i32 %11441, %11442
  store i32 %11443, i32* %16, align 4
  %11444 = load i32, i32* %23, align 4
  %11445 = load i32, i32* %20, align 4
  %11446 = lshr i32 %11445, 6
  %11447 = load i32, i32* %20, align 4
  %11448 = shl i32 %11447, 26
  %11449 = or i32 %11446, %11448
  %11450 = load i32, i32* %20, align 4
  %11451 = lshr i32 %11450, 11
  %11452 = load i32, i32* %20, align 4
  %11453 = shl i32 %11452, 21
  %11454 = or i32 %11451, %11453
  %11455 = xor i32 %11449, %11454
  %11456 = load i32, i32* %20, align 4
  %11457 = lshr i32 %11456, 25
  %11458 = load i32, i32* %20, align 4
  %11459 = shl i32 %11458, 7
  %11460 = or i32 %11457, %11459
  %11461 = xor i32 %11455, %11460
  %11462 = add i32 %11444, %11461
  %11463 = load i32, i32* %20, align 4
  %11464 = load i32, i32* %21, align 4
  %11465 = and i32 %11463, %11464
  %11466 = load i32, i32* %20, align 4
  %11467 = xor i32 %11466, -1
  %11468 = load i32, i32* %22, align 4
  %11469 = and i32 %11467, %11468
  %11470 = xor i32 %11465, %11469
  %11471 = add i32 %11462, %11470
  %11472 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 15), align 4
  %11473 = add i32 %11471, %11472
  %11474 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11475 = load i32, i32* %11474, align 4
  %11476 = add i32 %11473, %11475
  store i32 %11476, i32* %24, align 4
  %11477 = load i32, i32* %16, align 4
  %11478 = lshr i32 %11477, 2
  %11479 = load i32, i32* %16, align 4
  %11480 = shl i32 %11479, 30
  %11481 = or i32 %11478, %11480
  %11482 = load i32, i32* %16, align 4
  %11483 = lshr i32 %11482, 13
  %11484 = load i32, i32* %16, align 4
  %11485 = shl i32 %11484, 19
  %11486 = or i32 %11483, %11485
  %11487 = xor i32 %11481, %11486
  %11488 = load i32, i32* %16, align 4
  %11489 = lshr i32 %11488, 22
  %11490 = load i32, i32* %16, align 4
  %11491 = shl i32 %11490, 10
  %11492 = or i32 %11489, %11491
  %11493 = xor i32 %11487, %11492
  %11494 = load i32, i32* %16, align 4
  %11495 = load i32, i32* %17, align 4
  %11496 = and i32 %11494, %11495
  %11497 = load i32, i32* %16, align 4
  %11498 = load i32, i32* %18, align 4
  %11499 = and i32 %11497, %11498
  %11500 = xor i32 %11496, %11499
  %11501 = load i32, i32* %17, align 4
  %11502 = load i32, i32* %18, align 4
  %11503 = and i32 %11501, %11502
  %11504 = xor i32 %11500, %11503
  %11505 = add i32 %11493, %11504
  store i32 %11505, i32* %25, align 4
  %11506 = load i32, i32* %22, align 4
  store i32 %11506, i32* %23, align 4
  %11507 = load i32, i32* %21, align 4
  store i32 %11507, i32* %22, align 4
  %11508 = load i32, i32* %20, align 4
  store i32 %11508, i32* %21, align 4
  %11509 = load i32, i32* %19, align 4
  %11510 = load i32, i32* %24, align 4
  %11511 = add i32 %11509, %11510
  store i32 %11511, i32* %20, align 4
  %11512 = load i32, i32* %18, align 4
  store i32 %11512, i32* %19, align 4
  %11513 = load i32, i32* %17, align 4
  store i32 %11513, i32* %18, align 4
  %11514 = load i32, i32* %16, align 4
  store i32 %11514, i32* %17, align 4
  %11515 = load i32, i32* %24, align 4
  %11516 = load i32, i32* %25, align 4
  %11517 = add i32 %11515, %11516
  store i32 %11517, i32* %16, align 4
  %11518 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11519 = load i32, i32* %11518, align 8
  %11520 = lshr i32 %11519, 17
  %11521 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11522 = load i32, i32* %11521, align 8
  %11523 = shl i32 %11522, 15
  %11524 = or i32 %11520, %11523
  %11525 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11526 = load i32, i32* %11525, align 8
  %11527 = lshr i32 %11526, 19
  %11528 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11529 = load i32, i32* %11528, align 8
  %11530 = shl i32 %11529, 13
  %11531 = or i32 %11527, %11530
  %11532 = xor i32 %11524, %11531
  %11533 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %11534 = load i32, i32* %11533, align 8
  %11535 = lshr i32 %11534, 10
  %11536 = xor i32 %11532, %11535
  %11537 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %11538 = load i32, i32* %11537, align 4
  %11539 = add i32 %11536, %11538
  %11540 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11541 = load i32, i32* %11540, align 4
  %11542 = lshr i32 %11541, 7
  %11543 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11544 = load i32, i32* %11543, align 4
  %11545 = shl i32 %11544, 25
  %11546 = or i32 %11542, %11545
  %11547 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11548 = load i32, i32* %11547, align 4
  %11549 = lshr i32 %11548, 18
  %11550 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11551 = load i32, i32* %11550, align 4
  %11552 = shl i32 %11551, 14
  %11553 = or i32 %11549, %11552
  %11554 = xor i32 %11546, %11553
  %11555 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11556 = load i32, i32* %11555, align 4
  %11557 = lshr i32 %11556, 3
  %11558 = xor i32 %11554, %11557
  %11559 = add i32 %11539, %11558
  %11560 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 0
  %11561 = load i32, i32* %11560, align 16
  %11562 = add i32 %11559, %11561
  %11563 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  store i32 %11562, i32* %11563, align 16
  %11564 = load i32, i32* %23, align 4
  %11565 = load i32, i32* %20, align 4
  %11566 = lshr i32 %11565, 6
  %11567 = load i32, i32* %20, align 4
  %11568 = shl i32 %11567, 26
  %11569 = or i32 %11566, %11568
  %11570 = load i32, i32* %20, align 4
  %11571 = lshr i32 %11570, 11
  %11572 = load i32, i32* %20, align 4
  %11573 = shl i32 %11572, 21
  %11574 = or i32 %11571, %11573
  %11575 = xor i32 %11569, %11574
  %11576 = load i32, i32* %20, align 4
  %11577 = lshr i32 %11576, 25
  %11578 = load i32, i32* %20, align 4
  %11579 = shl i32 %11578, 7
  %11580 = or i32 %11577, %11579
  %11581 = xor i32 %11575, %11580
  %11582 = add i32 %11564, %11581
  %11583 = load i32, i32* %20, align 4
  %11584 = load i32, i32* %21, align 4
  %11585 = and i32 %11583, %11584
  %11586 = load i32, i32* %20, align 4
  %11587 = xor i32 %11586, -1
  %11588 = load i32, i32* %22, align 4
  %11589 = and i32 %11587, %11588
  %11590 = xor i32 %11585, %11589
  %11591 = add i32 %11582, %11590
  %11592 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 16), align 16
  %11593 = add i32 %11591, %11592
  %11594 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11595 = load i32, i32* %11594, align 16
  %11596 = add i32 %11593, %11595
  store i32 %11596, i32* %24, align 4
  %11597 = load i32, i32* %16, align 4
  %11598 = lshr i32 %11597, 2
  %11599 = load i32, i32* %16, align 4
  %11600 = shl i32 %11599, 30
  %11601 = or i32 %11598, %11600
  %11602 = load i32, i32* %16, align 4
  %11603 = lshr i32 %11602, 13
  %11604 = load i32, i32* %16, align 4
  %11605 = shl i32 %11604, 19
  %11606 = or i32 %11603, %11605
  %11607 = xor i32 %11601, %11606
  %11608 = load i32, i32* %16, align 4
  %11609 = lshr i32 %11608, 22
  %11610 = load i32, i32* %16, align 4
  %11611 = shl i32 %11610, 10
  %11612 = or i32 %11609, %11611
  %11613 = xor i32 %11607, %11612
  %11614 = load i32, i32* %16, align 4
  %11615 = load i32, i32* %17, align 4
  %11616 = and i32 %11614, %11615
  %11617 = load i32, i32* %16, align 4
  %11618 = load i32, i32* %18, align 4
  %11619 = and i32 %11617, %11618
  %11620 = xor i32 %11616, %11619
  %11621 = load i32, i32* %17, align 4
  %11622 = load i32, i32* %18, align 4
  %11623 = and i32 %11621, %11622
  %11624 = xor i32 %11620, %11623
  %11625 = add i32 %11613, %11624
  store i32 %11625, i32* %25, align 4
  %11626 = load i32, i32* %22, align 4
  store i32 %11626, i32* %23, align 4
  %11627 = load i32, i32* %21, align 4
  store i32 %11627, i32* %22, align 4
  %11628 = load i32, i32* %20, align 4
  store i32 %11628, i32* %21, align 4
  %11629 = load i32, i32* %19, align 4
  %11630 = load i32, i32* %24, align 4
  %11631 = add i32 %11629, %11630
  store i32 %11631, i32* %20, align 4
  %11632 = load i32, i32* %18, align 4
  store i32 %11632, i32* %19, align 4
  %11633 = load i32, i32* %17, align 4
  store i32 %11633, i32* %18, align 4
  %11634 = load i32, i32* %16, align 4
  store i32 %11634, i32* %17, align 4
  %11635 = load i32, i32* %24, align 4
  %11636 = load i32, i32* %25, align 4
  %11637 = add i32 %11635, %11636
  store i32 %11637, i32* %16, align 4
  %11638 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11639 = load i32, i32* %11638, align 4
  %11640 = lshr i32 %11639, 17
  %11641 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11642 = load i32, i32* %11641, align 4
  %11643 = shl i32 %11642, 15
  %11644 = or i32 %11640, %11643
  %11645 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11646 = load i32, i32* %11645, align 4
  %11647 = lshr i32 %11646, 19
  %11648 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11649 = load i32, i32* %11648, align 4
  %11650 = shl i32 %11649, 13
  %11651 = or i32 %11647, %11650
  %11652 = xor i32 %11644, %11651
  %11653 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %11654 = load i32, i32* %11653, align 4
  %11655 = lshr i32 %11654, 10
  %11656 = xor i32 %11652, %11655
  %11657 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %11658 = load i32, i32* %11657, align 8
  %11659 = add i32 %11656, %11658
  %11660 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11661 = load i32, i32* %11660, align 8
  %11662 = lshr i32 %11661, 7
  %11663 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11664 = load i32, i32* %11663, align 8
  %11665 = shl i32 %11664, 25
  %11666 = or i32 %11662, %11665
  %11667 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11668 = load i32, i32* %11667, align 8
  %11669 = lshr i32 %11668, 18
  %11670 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11671 = load i32, i32* %11670, align 8
  %11672 = shl i32 %11671, 14
  %11673 = or i32 %11669, %11672
  %11674 = xor i32 %11666, %11673
  %11675 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11676 = load i32, i32* %11675, align 8
  %11677 = lshr i32 %11676, 3
  %11678 = xor i32 %11674, %11677
  %11679 = add i32 %11659, %11678
  %11680 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 1
  %11681 = load i32, i32* %11680, align 4
  %11682 = add i32 %11679, %11681
  %11683 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  store i32 %11682, i32* %11683, align 4
  %11684 = load i32, i32* %23, align 4
  %11685 = load i32, i32* %20, align 4
  %11686 = lshr i32 %11685, 6
  %11687 = load i32, i32* %20, align 4
  %11688 = shl i32 %11687, 26
  %11689 = or i32 %11686, %11688
  %11690 = load i32, i32* %20, align 4
  %11691 = lshr i32 %11690, 11
  %11692 = load i32, i32* %20, align 4
  %11693 = shl i32 %11692, 21
  %11694 = or i32 %11691, %11693
  %11695 = xor i32 %11689, %11694
  %11696 = load i32, i32* %20, align 4
  %11697 = lshr i32 %11696, 25
  %11698 = load i32, i32* %20, align 4
  %11699 = shl i32 %11698, 7
  %11700 = or i32 %11697, %11699
  %11701 = xor i32 %11695, %11700
  %11702 = add i32 %11684, %11701
  %11703 = load i32, i32* %20, align 4
  %11704 = load i32, i32* %21, align 4
  %11705 = and i32 %11703, %11704
  %11706 = load i32, i32* %20, align 4
  %11707 = xor i32 %11706, -1
  %11708 = load i32, i32* %22, align 4
  %11709 = and i32 %11707, %11708
  %11710 = xor i32 %11705, %11709
  %11711 = add i32 %11702, %11710
  %11712 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 17), align 4
  %11713 = add i32 %11711, %11712
  %11714 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11715 = load i32, i32* %11714, align 4
  %11716 = add i32 %11713, %11715
  store i32 %11716, i32* %24, align 4
  %11717 = load i32, i32* %16, align 4
  %11718 = lshr i32 %11717, 2
  %11719 = load i32, i32* %16, align 4
  %11720 = shl i32 %11719, 30
  %11721 = or i32 %11718, %11720
  %11722 = load i32, i32* %16, align 4
  %11723 = lshr i32 %11722, 13
  %11724 = load i32, i32* %16, align 4
  %11725 = shl i32 %11724, 19
  %11726 = or i32 %11723, %11725
  %11727 = xor i32 %11721, %11726
  %11728 = load i32, i32* %16, align 4
  %11729 = lshr i32 %11728, 22
  %11730 = load i32, i32* %16, align 4
  %11731 = shl i32 %11730, 10
  %11732 = or i32 %11729, %11731
  %11733 = xor i32 %11727, %11732
  %11734 = load i32, i32* %16, align 4
  %11735 = load i32, i32* %17, align 4
  %11736 = and i32 %11734, %11735
  %11737 = load i32, i32* %16, align 4
  %11738 = load i32, i32* %18, align 4
  %11739 = and i32 %11737, %11738
  %11740 = xor i32 %11736, %11739
  %11741 = load i32, i32* %17, align 4
  %11742 = load i32, i32* %18, align 4
  %11743 = and i32 %11741, %11742
  %11744 = xor i32 %11740, %11743
  %11745 = add i32 %11733, %11744
  store i32 %11745, i32* %25, align 4
  %11746 = load i32, i32* %22, align 4
  store i32 %11746, i32* %23, align 4
  %11747 = load i32, i32* %21, align 4
  store i32 %11747, i32* %22, align 4
  %11748 = load i32, i32* %20, align 4
  store i32 %11748, i32* %21, align 4
  %11749 = load i32, i32* %19, align 4
  %11750 = load i32, i32* %24, align 4
  %11751 = add i32 %11749, %11750
  store i32 %11751, i32* %20, align 4
  %11752 = load i32, i32* %18, align 4
  store i32 %11752, i32* %19, align 4
  %11753 = load i32, i32* %17, align 4
  store i32 %11753, i32* %18, align 4
  %11754 = load i32, i32* %16, align 4
  store i32 %11754, i32* %17, align 4
  %11755 = load i32, i32* %24, align 4
  %11756 = load i32, i32* %25, align 4
  %11757 = add i32 %11755, %11756
  store i32 %11757, i32* %16, align 4
  %11758 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11759 = load i32, i32* %11758, align 16
  %11760 = lshr i32 %11759, 17
  %11761 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11762 = load i32, i32* %11761, align 16
  %11763 = shl i32 %11762, 15
  %11764 = or i32 %11760, %11763
  %11765 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11766 = load i32, i32* %11765, align 16
  %11767 = lshr i32 %11766, 19
  %11768 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11769 = load i32, i32* %11768, align 16
  %11770 = shl i32 %11769, 13
  %11771 = or i32 %11767, %11770
  %11772 = xor i32 %11764, %11771
  %11773 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %11774 = load i32, i32* %11773, align 16
  %11775 = lshr i32 %11774, 10
  %11776 = xor i32 %11772, %11775
  %11777 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %11778 = load i32, i32* %11777, align 4
  %11779 = add i32 %11776, %11778
  %11780 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11781 = load i32, i32* %11780, align 4
  %11782 = lshr i32 %11781, 7
  %11783 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11784 = load i32, i32* %11783, align 4
  %11785 = shl i32 %11784, 25
  %11786 = or i32 %11782, %11785
  %11787 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11788 = load i32, i32* %11787, align 4
  %11789 = lshr i32 %11788, 18
  %11790 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11791 = load i32, i32* %11790, align 4
  %11792 = shl i32 %11791, 14
  %11793 = or i32 %11789, %11792
  %11794 = xor i32 %11786, %11793
  %11795 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11796 = load i32, i32* %11795, align 4
  %11797 = lshr i32 %11796, 3
  %11798 = xor i32 %11794, %11797
  %11799 = add i32 %11779, %11798
  %11800 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 2
  %11801 = load i32, i32* %11800, align 8
  %11802 = add i32 %11799, %11801
  %11803 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  store i32 %11802, i32* %11803, align 8
  %11804 = load i32, i32* %23, align 4
  %11805 = load i32, i32* %20, align 4
  %11806 = lshr i32 %11805, 6
  %11807 = load i32, i32* %20, align 4
  %11808 = shl i32 %11807, 26
  %11809 = or i32 %11806, %11808
  %11810 = load i32, i32* %20, align 4
  %11811 = lshr i32 %11810, 11
  %11812 = load i32, i32* %20, align 4
  %11813 = shl i32 %11812, 21
  %11814 = or i32 %11811, %11813
  %11815 = xor i32 %11809, %11814
  %11816 = load i32, i32* %20, align 4
  %11817 = lshr i32 %11816, 25
  %11818 = load i32, i32* %20, align 4
  %11819 = shl i32 %11818, 7
  %11820 = or i32 %11817, %11819
  %11821 = xor i32 %11815, %11820
  %11822 = add i32 %11804, %11821
  %11823 = load i32, i32* %20, align 4
  %11824 = load i32, i32* %21, align 4
  %11825 = and i32 %11823, %11824
  %11826 = load i32, i32* %20, align 4
  %11827 = xor i32 %11826, -1
  %11828 = load i32, i32* %22, align 4
  %11829 = and i32 %11827, %11828
  %11830 = xor i32 %11825, %11829
  %11831 = add i32 %11822, %11830
  %11832 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 18), align 8
  %11833 = add i32 %11831, %11832
  %11834 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %11835 = load i32, i32* %11834, align 8
  %11836 = add i32 %11833, %11835
  store i32 %11836, i32* %24, align 4
  %11837 = load i32, i32* %16, align 4
  %11838 = lshr i32 %11837, 2
  %11839 = load i32, i32* %16, align 4
  %11840 = shl i32 %11839, 30
  %11841 = or i32 %11838, %11840
  %11842 = load i32, i32* %16, align 4
  %11843 = lshr i32 %11842, 13
  %11844 = load i32, i32* %16, align 4
  %11845 = shl i32 %11844, 19
  %11846 = or i32 %11843, %11845
  %11847 = xor i32 %11841, %11846
  %11848 = load i32, i32* %16, align 4
  %11849 = lshr i32 %11848, 22
  %11850 = load i32, i32* %16, align 4
  %11851 = shl i32 %11850, 10
  %11852 = or i32 %11849, %11851
  %11853 = xor i32 %11847, %11852
  %11854 = load i32, i32* %16, align 4
  %11855 = load i32, i32* %17, align 4
  %11856 = and i32 %11854, %11855
  %11857 = load i32, i32* %16, align 4
  %11858 = load i32, i32* %18, align 4
  %11859 = and i32 %11857, %11858
  %11860 = xor i32 %11856, %11859
  %11861 = load i32, i32* %17, align 4
  %11862 = load i32, i32* %18, align 4
  %11863 = and i32 %11861, %11862
  %11864 = xor i32 %11860, %11863
  %11865 = add i32 %11853, %11864
  store i32 %11865, i32* %25, align 4
  %11866 = load i32, i32* %22, align 4
  store i32 %11866, i32* %23, align 4
  %11867 = load i32, i32* %21, align 4
  store i32 %11867, i32* %22, align 4
  %11868 = load i32, i32* %20, align 4
  store i32 %11868, i32* %21, align 4
  %11869 = load i32, i32* %19, align 4
  %11870 = load i32, i32* %24, align 4
  %11871 = add i32 %11869, %11870
  store i32 %11871, i32* %20, align 4
  %11872 = load i32, i32* %18, align 4
  store i32 %11872, i32* %19, align 4
  %11873 = load i32, i32* %17, align 4
  store i32 %11873, i32* %18, align 4
  %11874 = load i32, i32* %16, align 4
  store i32 %11874, i32* %17, align 4
  %11875 = load i32, i32* %24, align 4
  %11876 = load i32, i32* %25, align 4
  %11877 = add i32 %11875, %11876
  store i32 %11877, i32* %16, align 4
  %11878 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11879 = load i32, i32* %11878, align 4
  %11880 = lshr i32 %11879, 17
  %11881 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11882 = load i32, i32* %11881, align 4
  %11883 = shl i32 %11882, 15
  %11884 = or i32 %11880, %11883
  %11885 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11886 = load i32, i32* %11885, align 4
  %11887 = lshr i32 %11886, 19
  %11888 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11889 = load i32, i32* %11888, align 4
  %11890 = shl i32 %11889, 13
  %11891 = or i32 %11887, %11890
  %11892 = xor i32 %11884, %11891
  %11893 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %11894 = load i32, i32* %11893, align 4
  %11895 = lshr i32 %11894, 10
  %11896 = xor i32 %11892, %11895
  %11897 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %11898 = load i32, i32* %11897, align 16
  %11899 = add i32 %11896, %11898
  %11900 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %11901 = load i32, i32* %11900, align 16
  %11902 = lshr i32 %11901, 7
  %11903 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %11904 = load i32, i32* %11903, align 16
  %11905 = shl i32 %11904, 25
  %11906 = or i32 %11902, %11905
  %11907 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %11908 = load i32, i32* %11907, align 16
  %11909 = lshr i32 %11908, 18
  %11910 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %11911 = load i32, i32* %11910, align 16
  %11912 = shl i32 %11911, 14
  %11913 = or i32 %11909, %11912
  %11914 = xor i32 %11906, %11913
  %11915 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %11916 = load i32, i32* %11915, align 16
  %11917 = lshr i32 %11916, 3
  %11918 = xor i32 %11914, %11917
  %11919 = add i32 %11899, %11918
  %11920 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 3
  %11921 = load i32, i32* %11920, align 4
  %11922 = add i32 %11919, %11921
  %11923 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  store i32 %11922, i32* %11923, align 4
  %11924 = load i32, i32* %23, align 4
  %11925 = load i32, i32* %20, align 4
  %11926 = lshr i32 %11925, 6
  %11927 = load i32, i32* %20, align 4
  %11928 = shl i32 %11927, 26
  %11929 = or i32 %11926, %11928
  %11930 = load i32, i32* %20, align 4
  %11931 = lshr i32 %11930, 11
  %11932 = load i32, i32* %20, align 4
  %11933 = shl i32 %11932, 21
  %11934 = or i32 %11931, %11933
  %11935 = xor i32 %11929, %11934
  %11936 = load i32, i32* %20, align 4
  %11937 = lshr i32 %11936, 25
  %11938 = load i32, i32* %20, align 4
  %11939 = shl i32 %11938, 7
  %11940 = or i32 %11937, %11939
  %11941 = xor i32 %11935, %11940
  %11942 = add i32 %11924, %11941
  %11943 = load i32, i32* %20, align 4
  %11944 = load i32, i32* %21, align 4
  %11945 = and i32 %11943, %11944
  %11946 = load i32, i32* %20, align 4
  %11947 = xor i32 %11946, -1
  %11948 = load i32, i32* %22, align 4
  %11949 = and i32 %11947, %11948
  %11950 = xor i32 %11945, %11949
  %11951 = add i32 %11942, %11950
  %11952 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 19), align 4
  %11953 = add i32 %11951, %11952
  %11954 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %11955 = load i32, i32* %11954, align 4
  %11956 = add i32 %11953, %11955
  store i32 %11956, i32* %24, align 4
  %11957 = load i32, i32* %16, align 4
  %11958 = lshr i32 %11957, 2
  %11959 = load i32, i32* %16, align 4
  %11960 = shl i32 %11959, 30
  %11961 = or i32 %11958, %11960
  %11962 = load i32, i32* %16, align 4
  %11963 = lshr i32 %11962, 13
  %11964 = load i32, i32* %16, align 4
  %11965 = shl i32 %11964, 19
  %11966 = or i32 %11963, %11965
  %11967 = xor i32 %11961, %11966
  %11968 = load i32, i32* %16, align 4
  %11969 = lshr i32 %11968, 22
  %11970 = load i32, i32* %16, align 4
  %11971 = shl i32 %11970, 10
  %11972 = or i32 %11969, %11971
  %11973 = xor i32 %11967, %11972
  %11974 = load i32, i32* %16, align 4
  %11975 = load i32, i32* %17, align 4
  %11976 = and i32 %11974, %11975
  %11977 = load i32, i32* %16, align 4
  %11978 = load i32, i32* %18, align 4
  %11979 = and i32 %11977, %11978
  %11980 = xor i32 %11976, %11979
  %11981 = load i32, i32* %17, align 4
  %11982 = load i32, i32* %18, align 4
  %11983 = and i32 %11981, %11982
  %11984 = xor i32 %11980, %11983
  %11985 = add i32 %11973, %11984
  store i32 %11985, i32* %25, align 4
  %11986 = load i32, i32* %22, align 4
  store i32 %11986, i32* %23, align 4
  %11987 = load i32, i32* %21, align 4
  store i32 %11987, i32* %22, align 4
  %11988 = load i32, i32* %20, align 4
  store i32 %11988, i32* %21, align 4
  %11989 = load i32, i32* %19, align 4
  %11990 = load i32, i32* %24, align 4
  %11991 = add i32 %11989, %11990
  store i32 %11991, i32* %20, align 4
  %11992 = load i32, i32* %18, align 4
  store i32 %11992, i32* %19, align 4
  %11993 = load i32, i32* %17, align 4
  store i32 %11993, i32* %18, align 4
  %11994 = load i32, i32* %16, align 4
  store i32 %11994, i32* %17, align 4
  %11995 = load i32, i32* %24, align 4
  %11996 = load i32, i32* %25, align 4
  %11997 = add i32 %11995, %11996
  store i32 %11997, i32* %16, align 4
  %11998 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %11999 = load i32, i32* %11998, align 8
  %12000 = lshr i32 %11999, 17
  %12001 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %12002 = load i32, i32* %12001, align 8
  %12003 = shl i32 %12002, 15
  %12004 = or i32 %12000, %12003
  %12005 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %12006 = load i32, i32* %12005, align 8
  %12007 = lshr i32 %12006, 19
  %12008 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %12009 = load i32, i32* %12008, align 8
  %12010 = shl i32 %12009, 13
  %12011 = or i32 %12007, %12010
  %12012 = xor i32 %12004, %12011
  %12013 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %12014 = load i32, i32* %12013, align 8
  %12015 = lshr i32 %12014, 10
  %12016 = xor i32 %12012, %12015
  %12017 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12018 = load i32, i32* %12017, align 4
  %12019 = add i32 %12016, %12018
  %12020 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12021 = load i32, i32* %12020, align 4
  %12022 = lshr i32 %12021, 7
  %12023 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12024 = load i32, i32* %12023, align 4
  %12025 = shl i32 %12024, 25
  %12026 = or i32 %12022, %12025
  %12027 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12028 = load i32, i32* %12027, align 4
  %12029 = lshr i32 %12028, 18
  %12030 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12031 = load i32, i32* %12030, align 4
  %12032 = shl i32 %12031, 14
  %12033 = or i32 %12029, %12032
  %12034 = xor i32 %12026, %12033
  %12035 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12036 = load i32, i32* %12035, align 4
  %12037 = lshr i32 %12036, 3
  %12038 = xor i32 %12034, %12037
  %12039 = add i32 %12019, %12038
  %12040 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 4
  %12041 = load i32, i32* %12040, align 16
  %12042 = add i32 %12039, %12041
  %12043 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  store i32 %12042, i32* %12043, align 16
  %12044 = load i32, i32* %23, align 4
  %12045 = load i32, i32* %20, align 4
  %12046 = lshr i32 %12045, 6
  %12047 = load i32, i32* %20, align 4
  %12048 = shl i32 %12047, 26
  %12049 = or i32 %12046, %12048
  %12050 = load i32, i32* %20, align 4
  %12051 = lshr i32 %12050, 11
  %12052 = load i32, i32* %20, align 4
  %12053 = shl i32 %12052, 21
  %12054 = or i32 %12051, %12053
  %12055 = xor i32 %12049, %12054
  %12056 = load i32, i32* %20, align 4
  %12057 = lshr i32 %12056, 25
  %12058 = load i32, i32* %20, align 4
  %12059 = shl i32 %12058, 7
  %12060 = or i32 %12057, %12059
  %12061 = xor i32 %12055, %12060
  %12062 = add i32 %12044, %12061
  %12063 = load i32, i32* %20, align 4
  %12064 = load i32, i32* %21, align 4
  %12065 = and i32 %12063, %12064
  %12066 = load i32, i32* %20, align 4
  %12067 = xor i32 %12066, -1
  %12068 = load i32, i32* %22, align 4
  %12069 = and i32 %12067, %12068
  %12070 = xor i32 %12065, %12069
  %12071 = add i32 %12062, %12070
  %12072 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 20), align 16
  %12073 = add i32 %12071, %12072
  %12074 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12075 = load i32, i32* %12074, align 16
  %12076 = add i32 %12073, %12075
  store i32 %12076, i32* %24, align 4
  %12077 = load i32, i32* %16, align 4
  %12078 = lshr i32 %12077, 2
  %12079 = load i32, i32* %16, align 4
  %12080 = shl i32 %12079, 30
  %12081 = or i32 %12078, %12080
  %12082 = load i32, i32* %16, align 4
  %12083 = lshr i32 %12082, 13
  %12084 = load i32, i32* %16, align 4
  %12085 = shl i32 %12084, 19
  %12086 = or i32 %12083, %12085
  %12087 = xor i32 %12081, %12086
  %12088 = load i32, i32* %16, align 4
  %12089 = lshr i32 %12088, 22
  %12090 = load i32, i32* %16, align 4
  %12091 = shl i32 %12090, 10
  %12092 = or i32 %12089, %12091
  %12093 = xor i32 %12087, %12092
  %12094 = load i32, i32* %16, align 4
  %12095 = load i32, i32* %17, align 4
  %12096 = and i32 %12094, %12095
  %12097 = load i32, i32* %16, align 4
  %12098 = load i32, i32* %18, align 4
  %12099 = and i32 %12097, %12098
  %12100 = xor i32 %12096, %12099
  %12101 = load i32, i32* %17, align 4
  %12102 = load i32, i32* %18, align 4
  %12103 = and i32 %12101, %12102
  %12104 = xor i32 %12100, %12103
  %12105 = add i32 %12093, %12104
  store i32 %12105, i32* %25, align 4
  %12106 = load i32, i32* %22, align 4
  store i32 %12106, i32* %23, align 4
  %12107 = load i32, i32* %21, align 4
  store i32 %12107, i32* %22, align 4
  %12108 = load i32, i32* %20, align 4
  store i32 %12108, i32* %21, align 4
  %12109 = load i32, i32* %19, align 4
  %12110 = load i32, i32* %24, align 4
  %12111 = add i32 %12109, %12110
  store i32 %12111, i32* %20, align 4
  %12112 = load i32, i32* %18, align 4
  store i32 %12112, i32* %19, align 4
  %12113 = load i32, i32* %17, align 4
  store i32 %12113, i32* %18, align 4
  %12114 = load i32, i32* %16, align 4
  store i32 %12114, i32* %17, align 4
  %12115 = load i32, i32* %24, align 4
  %12116 = load i32, i32* %25, align 4
  %12117 = add i32 %12115, %12116
  store i32 %12117, i32* %16, align 4
  %12118 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12119 = load i32, i32* %12118, align 4
  %12120 = lshr i32 %12119, 17
  %12121 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12122 = load i32, i32* %12121, align 4
  %12123 = shl i32 %12122, 15
  %12124 = or i32 %12120, %12123
  %12125 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12126 = load i32, i32* %12125, align 4
  %12127 = lshr i32 %12126, 19
  %12128 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12129 = load i32, i32* %12128, align 4
  %12130 = shl i32 %12129, 13
  %12131 = or i32 %12127, %12130
  %12132 = xor i32 %12124, %12131
  %12133 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12134 = load i32, i32* %12133, align 4
  %12135 = lshr i32 %12134, 10
  %12136 = xor i32 %12132, %12135
  %12137 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %12138 = load i32, i32* %12137, align 8
  %12139 = add i32 %12136, %12138
  %12140 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12141 = load i32, i32* %12140, align 8
  %12142 = lshr i32 %12141, 7
  %12143 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12144 = load i32, i32* %12143, align 8
  %12145 = shl i32 %12144, 25
  %12146 = or i32 %12142, %12145
  %12147 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12148 = load i32, i32* %12147, align 8
  %12149 = lshr i32 %12148, 18
  %12150 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12151 = load i32, i32* %12150, align 8
  %12152 = shl i32 %12151, 14
  %12153 = or i32 %12149, %12152
  %12154 = xor i32 %12146, %12153
  %12155 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12156 = load i32, i32* %12155, align 8
  %12157 = lshr i32 %12156, 3
  %12158 = xor i32 %12154, %12157
  %12159 = add i32 %12139, %12158
  %12160 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 5
  %12161 = load i32, i32* %12160, align 4
  %12162 = add i32 %12159, %12161
  %12163 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  store i32 %12162, i32* %12163, align 4
  %12164 = load i32, i32* %23, align 4
  %12165 = load i32, i32* %20, align 4
  %12166 = lshr i32 %12165, 6
  %12167 = load i32, i32* %20, align 4
  %12168 = shl i32 %12167, 26
  %12169 = or i32 %12166, %12168
  %12170 = load i32, i32* %20, align 4
  %12171 = lshr i32 %12170, 11
  %12172 = load i32, i32* %20, align 4
  %12173 = shl i32 %12172, 21
  %12174 = or i32 %12171, %12173
  %12175 = xor i32 %12169, %12174
  %12176 = load i32, i32* %20, align 4
  %12177 = lshr i32 %12176, 25
  %12178 = load i32, i32* %20, align 4
  %12179 = shl i32 %12178, 7
  %12180 = or i32 %12177, %12179
  %12181 = xor i32 %12175, %12180
  %12182 = add i32 %12164, %12181
  %12183 = load i32, i32* %20, align 4
  %12184 = load i32, i32* %21, align 4
  %12185 = and i32 %12183, %12184
  %12186 = load i32, i32* %20, align 4
  %12187 = xor i32 %12186, -1
  %12188 = load i32, i32* %22, align 4
  %12189 = and i32 %12187, %12188
  %12190 = xor i32 %12185, %12189
  %12191 = add i32 %12182, %12190
  %12192 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 21), align 4
  %12193 = add i32 %12191, %12192
  %12194 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12195 = load i32, i32* %12194, align 4
  %12196 = add i32 %12193, %12195
  store i32 %12196, i32* %24, align 4
  %12197 = load i32, i32* %16, align 4
  %12198 = lshr i32 %12197, 2
  %12199 = load i32, i32* %16, align 4
  %12200 = shl i32 %12199, 30
  %12201 = or i32 %12198, %12200
  %12202 = load i32, i32* %16, align 4
  %12203 = lshr i32 %12202, 13
  %12204 = load i32, i32* %16, align 4
  %12205 = shl i32 %12204, 19
  %12206 = or i32 %12203, %12205
  %12207 = xor i32 %12201, %12206
  %12208 = load i32, i32* %16, align 4
  %12209 = lshr i32 %12208, 22
  %12210 = load i32, i32* %16, align 4
  %12211 = shl i32 %12210, 10
  %12212 = or i32 %12209, %12211
  %12213 = xor i32 %12207, %12212
  %12214 = load i32, i32* %16, align 4
  %12215 = load i32, i32* %17, align 4
  %12216 = and i32 %12214, %12215
  %12217 = load i32, i32* %16, align 4
  %12218 = load i32, i32* %18, align 4
  %12219 = and i32 %12217, %12218
  %12220 = xor i32 %12216, %12219
  %12221 = load i32, i32* %17, align 4
  %12222 = load i32, i32* %18, align 4
  %12223 = and i32 %12221, %12222
  %12224 = xor i32 %12220, %12223
  %12225 = add i32 %12213, %12224
  store i32 %12225, i32* %25, align 4
  %12226 = load i32, i32* %22, align 4
  store i32 %12226, i32* %23, align 4
  %12227 = load i32, i32* %21, align 4
  store i32 %12227, i32* %22, align 4
  %12228 = load i32, i32* %20, align 4
  store i32 %12228, i32* %21, align 4
  %12229 = load i32, i32* %19, align 4
  %12230 = load i32, i32* %24, align 4
  %12231 = add i32 %12229, %12230
  store i32 %12231, i32* %20, align 4
  %12232 = load i32, i32* %18, align 4
  store i32 %12232, i32* %19, align 4
  %12233 = load i32, i32* %17, align 4
  store i32 %12233, i32* %18, align 4
  %12234 = load i32, i32* %16, align 4
  store i32 %12234, i32* %17, align 4
  %12235 = load i32, i32* %24, align 4
  %12236 = load i32, i32* %25, align 4
  %12237 = add i32 %12235, %12236
  store i32 %12237, i32* %16, align 4
  %12238 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12239 = load i32, i32* %12238, align 16
  %12240 = lshr i32 %12239, 17
  %12241 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12242 = load i32, i32* %12241, align 16
  %12243 = shl i32 %12242, 15
  %12244 = or i32 %12240, %12243
  %12245 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12246 = load i32, i32* %12245, align 16
  %12247 = lshr i32 %12246, 19
  %12248 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12249 = load i32, i32* %12248, align 16
  %12250 = shl i32 %12249, 13
  %12251 = or i32 %12247, %12250
  %12252 = xor i32 %12244, %12251
  %12253 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12254 = load i32, i32* %12253, align 16
  %12255 = lshr i32 %12254, 10
  %12256 = xor i32 %12252, %12255
  %12257 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %12258 = load i32, i32* %12257, align 4
  %12259 = add i32 %12256, %12258
  %12260 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12261 = load i32, i32* %12260, align 4
  %12262 = lshr i32 %12261, 7
  %12263 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12264 = load i32, i32* %12263, align 4
  %12265 = shl i32 %12264, 25
  %12266 = or i32 %12262, %12265
  %12267 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12268 = load i32, i32* %12267, align 4
  %12269 = lshr i32 %12268, 18
  %12270 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12271 = load i32, i32* %12270, align 4
  %12272 = shl i32 %12271, 14
  %12273 = or i32 %12269, %12272
  %12274 = xor i32 %12266, %12273
  %12275 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12276 = load i32, i32* %12275, align 4
  %12277 = lshr i32 %12276, 3
  %12278 = xor i32 %12274, %12277
  %12279 = add i32 %12259, %12278
  %12280 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 6
  %12281 = load i32, i32* %12280, align 8
  %12282 = add i32 %12279, %12281
  %12283 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  store i32 %12282, i32* %12283, align 8
  %12284 = load i32, i32* %23, align 4
  %12285 = load i32, i32* %20, align 4
  %12286 = lshr i32 %12285, 6
  %12287 = load i32, i32* %20, align 4
  %12288 = shl i32 %12287, 26
  %12289 = or i32 %12286, %12288
  %12290 = load i32, i32* %20, align 4
  %12291 = lshr i32 %12290, 11
  %12292 = load i32, i32* %20, align 4
  %12293 = shl i32 %12292, 21
  %12294 = or i32 %12291, %12293
  %12295 = xor i32 %12289, %12294
  %12296 = load i32, i32* %20, align 4
  %12297 = lshr i32 %12296, 25
  %12298 = load i32, i32* %20, align 4
  %12299 = shl i32 %12298, 7
  %12300 = or i32 %12297, %12299
  %12301 = xor i32 %12295, %12300
  %12302 = add i32 %12284, %12301
  %12303 = load i32, i32* %20, align 4
  %12304 = load i32, i32* %21, align 4
  %12305 = and i32 %12303, %12304
  %12306 = load i32, i32* %20, align 4
  %12307 = xor i32 %12306, -1
  %12308 = load i32, i32* %22, align 4
  %12309 = and i32 %12307, %12308
  %12310 = xor i32 %12305, %12309
  %12311 = add i32 %12302, %12310
  %12312 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 22), align 8
  %12313 = add i32 %12311, %12312
  %12314 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12315 = load i32, i32* %12314, align 8
  %12316 = add i32 %12313, %12315
  store i32 %12316, i32* %24, align 4
  %12317 = load i32, i32* %16, align 4
  %12318 = lshr i32 %12317, 2
  %12319 = load i32, i32* %16, align 4
  %12320 = shl i32 %12319, 30
  %12321 = or i32 %12318, %12320
  %12322 = load i32, i32* %16, align 4
  %12323 = lshr i32 %12322, 13
  %12324 = load i32, i32* %16, align 4
  %12325 = shl i32 %12324, 19
  %12326 = or i32 %12323, %12325
  %12327 = xor i32 %12321, %12326
  %12328 = load i32, i32* %16, align 4
  %12329 = lshr i32 %12328, 22
  %12330 = load i32, i32* %16, align 4
  %12331 = shl i32 %12330, 10
  %12332 = or i32 %12329, %12331
  %12333 = xor i32 %12327, %12332
  %12334 = load i32, i32* %16, align 4
  %12335 = load i32, i32* %17, align 4
  %12336 = and i32 %12334, %12335
  %12337 = load i32, i32* %16, align 4
  %12338 = load i32, i32* %18, align 4
  %12339 = and i32 %12337, %12338
  %12340 = xor i32 %12336, %12339
  %12341 = load i32, i32* %17, align 4
  %12342 = load i32, i32* %18, align 4
  %12343 = and i32 %12341, %12342
  %12344 = xor i32 %12340, %12343
  %12345 = add i32 %12333, %12344
  store i32 %12345, i32* %25, align 4
  %12346 = load i32, i32* %22, align 4
  store i32 %12346, i32* %23, align 4
  %12347 = load i32, i32* %21, align 4
  store i32 %12347, i32* %22, align 4
  %12348 = load i32, i32* %20, align 4
  store i32 %12348, i32* %21, align 4
  %12349 = load i32, i32* %19, align 4
  %12350 = load i32, i32* %24, align 4
  %12351 = add i32 %12349, %12350
  store i32 %12351, i32* %20, align 4
  %12352 = load i32, i32* %18, align 4
  store i32 %12352, i32* %19, align 4
  %12353 = load i32, i32* %17, align 4
  store i32 %12353, i32* %18, align 4
  %12354 = load i32, i32* %16, align 4
  store i32 %12354, i32* %17, align 4
  %12355 = load i32, i32* %24, align 4
  %12356 = load i32, i32* %25, align 4
  %12357 = add i32 %12355, %12356
  store i32 %12357, i32* %16, align 4
  %12358 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12359 = load i32, i32* %12358, align 4
  %12360 = lshr i32 %12359, 17
  %12361 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12362 = load i32, i32* %12361, align 4
  %12363 = shl i32 %12362, 15
  %12364 = or i32 %12360, %12363
  %12365 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12366 = load i32, i32* %12365, align 4
  %12367 = lshr i32 %12366, 19
  %12368 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12369 = load i32, i32* %12368, align 4
  %12370 = shl i32 %12369, 13
  %12371 = or i32 %12367, %12370
  %12372 = xor i32 %12364, %12371
  %12373 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12374 = load i32, i32* %12373, align 4
  %12375 = lshr i32 %12374, 10
  %12376 = xor i32 %12372, %12375
  %12377 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %12378 = load i32, i32* %12377, align 16
  %12379 = add i32 %12376, %12378
  %12380 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12381 = load i32, i32* %12380, align 16
  %12382 = lshr i32 %12381, 7
  %12383 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12384 = load i32, i32* %12383, align 16
  %12385 = shl i32 %12384, 25
  %12386 = or i32 %12382, %12385
  %12387 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12388 = load i32, i32* %12387, align 16
  %12389 = lshr i32 %12388, 18
  %12390 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12391 = load i32, i32* %12390, align 16
  %12392 = shl i32 %12391, 14
  %12393 = or i32 %12389, %12392
  %12394 = xor i32 %12386, %12393
  %12395 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12396 = load i32, i32* %12395, align 16
  %12397 = lshr i32 %12396, 3
  %12398 = xor i32 %12394, %12397
  %12399 = add i32 %12379, %12398
  %12400 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 7
  %12401 = load i32, i32* %12400, align 4
  %12402 = add i32 %12399, %12401
  %12403 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  store i32 %12402, i32* %12403, align 4
  %12404 = load i32, i32* %23, align 4
  %12405 = load i32, i32* %20, align 4
  %12406 = lshr i32 %12405, 6
  %12407 = load i32, i32* %20, align 4
  %12408 = shl i32 %12407, 26
  %12409 = or i32 %12406, %12408
  %12410 = load i32, i32* %20, align 4
  %12411 = lshr i32 %12410, 11
  %12412 = load i32, i32* %20, align 4
  %12413 = shl i32 %12412, 21
  %12414 = or i32 %12411, %12413
  %12415 = xor i32 %12409, %12414
  %12416 = load i32, i32* %20, align 4
  %12417 = lshr i32 %12416, 25
  %12418 = load i32, i32* %20, align 4
  %12419 = shl i32 %12418, 7
  %12420 = or i32 %12417, %12419
  %12421 = xor i32 %12415, %12420
  %12422 = add i32 %12404, %12421
  %12423 = load i32, i32* %20, align 4
  %12424 = load i32, i32* %21, align 4
  %12425 = and i32 %12423, %12424
  %12426 = load i32, i32* %20, align 4
  %12427 = xor i32 %12426, -1
  %12428 = load i32, i32* %22, align 4
  %12429 = and i32 %12427, %12428
  %12430 = xor i32 %12425, %12429
  %12431 = add i32 %12422, %12430
  %12432 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 23), align 4
  %12433 = add i32 %12431, %12432
  %12434 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12435 = load i32, i32* %12434, align 4
  %12436 = add i32 %12433, %12435
  store i32 %12436, i32* %24, align 4
  %12437 = load i32, i32* %16, align 4
  %12438 = lshr i32 %12437, 2
  %12439 = load i32, i32* %16, align 4
  %12440 = shl i32 %12439, 30
  %12441 = or i32 %12438, %12440
  %12442 = load i32, i32* %16, align 4
  %12443 = lshr i32 %12442, 13
  %12444 = load i32, i32* %16, align 4
  %12445 = shl i32 %12444, 19
  %12446 = or i32 %12443, %12445
  %12447 = xor i32 %12441, %12446
  %12448 = load i32, i32* %16, align 4
  %12449 = lshr i32 %12448, 22
  %12450 = load i32, i32* %16, align 4
  %12451 = shl i32 %12450, 10
  %12452 = or i32 %12449, %12451
  %12453 = xor i32 %12447, %12452
  %12454 = load i32, i32* %16, align 4
  %12455 = load i32, i32* %17, align 4
  %12456 = and i32 %12454, %12455
  %12457 = load i32, i32* %16, align 4
  %12458 = load i32, i32* %18, align 4
  %12459 = and i32 %12457, %12458
  %12460 = xor i32 %12456, %12459
  %12461 = load i32, i32* %17, align 4
  %12462 = load i32, i32* %18, align 4
  %12463 = and i32 %12461, %12462
  %12464 = xor i32 %12460, %12463
  %12465 = add i32 %12453, %12464
  store i32 %12465, i32* %25, align 4
  %12466 = load i32, i32* %22, align 4
  store i32 %12466, i32* %23, align 4
  %12467 = load i32, i32* %21, align 4
  store i32 %12467, i32* %22, align 4
  %12468 = load i32, i32* %20, align 4
  store i32 %12468, i32* %21, align 4
  %12469 = load i32, i32* %19, align 4
  %12470 = load i32, i32* %24, align 4
  %12471 = add i32 %12469, %12470
  store i32 %12471, i32* %20, align 4
  %12472 = load i32, i32* %18, align 4
  store i32 %12472, i32* %19, align 4
  %12473 = load i32, i32* %17, align 4
  store i32 %12473, i32* %18, align 4
  %12474 = load i32, i32* %16, align 4
  store i32 %12474, i32* %17, align 4
  %12475 = load i32, i32* %24, align 4
  %12476 = load i32, i32* %25, align 4
  %12477 = add i32 %12475, %12476
  store i32 %12477, i32* %16, align 4
  %12478 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12479 = load i32, i32* %12478, align 8
  %12480 = lshr i32 %12479, 17
  %12481 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12482 = load i32, i32* %12481, align 8
  %12483 = shl i32 %12482, 15
  %12484 = or i32 %12480, %12483
  %12485 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12486 = load i32, i32* %12485, align 8
  %12487 = lshr i32 %12486, 19
  %12488 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12489 = load i32, i32* %12488, align 8
  %12490 = shl i32 %12489, 13
  %12491 = or i32 %12487, %12490
  %12492 = xor i32 %12484, %12491
  %12493 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %12494 = load i32, i32* %12493, align 8
  %12495 = lshr i32 %12494, 10
  %12496 = xor i32 %12492, %12495
  %12497 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %12498 = load i32, i32* %12497, align 4
  %12499 = add i32 %12496, %12498
  %12500 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12501 = load i32, i32* %12500, align 4
  %12502 = lshr i32 %12501, 7
  %12503 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12504 = load i32, i32* %12503, align 4
  %12505 = shl i32 %12504, 25
  %12506 = or i32 %12502, %12505
  %12507 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12508 = load i32, i32* %12507, align 4
  %12509 = lshr i32 %12508, 18
  %12510 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12511 = load i32, i32* %12510, align 4
  %12512 = shl i32 %12511, 14
  %12513 = or i32 %12509, %12512
  %12514 = xor i32 %12506, %12513
  %12515 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12516 = load i32, i32* %12515, align 4
  %12517 = lshr i32 %12516, 3
  %12518 = xor i32 %12514, %12517
  %12519 = add i32 %12499, %12518
  %12520 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 8
  %12521 = load i32, i32* %12520, align 16
  %12522 = add i32 %12519, %12521
  %12523 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  store i32 %12522, i32* %12523, align 16
  %12524 = load i32, i32* %23, align 4
  %12525 = load i32, i32* %20, align 4
  %12526 = lshr i32 %12525, 6
  %12527 = load i32, i32* %20, align 4
  %12528 = shl i32 %12527, 26
  %12529 = or i32 %12526, %12528
  %12530 = load i32, i32* %20, align 4
  %12531 = lshr i32 %12530, 11
  %12532 = load i32, i32* %20, align 4
  %12533 = shl i32 %12532, 21
  %12534 = or i32 %12531, %12533
  %12535 = xor i32 %12529, %12534
  %12536 = load i32, i32* %20, align 4
  %12537 = lshr i32 %12536, 25
  %12538 = load i32, i32* %20, align 4
  %12539 = shl i32 %12538, 7
  %12540 = or i32 %12537, %12539
  %12541 = xor i32 %12535, %12540
  %12542 = add i32 %12524, %12541
  %12543 = load i32, i32* %20, align 4
  %12544 = load i32, i32* %21, align 4
  %12545 = and i32 %12543, %12544
  %12546 = load i32, i32* %20, align 4
  %12547 = xor i32 %12546, -1
  %12548 = load i32, i32* %22, align 4
  %12549 = and i32 %12547, %12548
  %12550 = xor i32 %12545, %12549
  %12551 = add i32 %12542, %12550
  %12552 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 24), align 16
  %12553 = add i32 %12551, %12552
  %12554 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12555 = load i32, i32* %12554, align 16
  %12556 = add i32 %12553, %12555
  store i32 %12556, i32* %24, align 4
  %12557 = load i32, i32* %16, align 4
  %12558 = lshr i32 %12557, 2
  %12559 = load i32, i32* %16, align 4
  %12560 = shl i32 %12559, 30
  %12561 = or i32 %12558, %12560
  %12562 = load i32, i32* %16, align 4
  %12563 = lshr i32 %12562, 13
  %12564 = load i32, i32* %16, align 4
  %12565 = shl i32 %12564, 19
  %12566 = or i32 %12563, %12565
  %12567 = xor i32 %12561, %12566
  %12568 = load i32, i32* %16, align 4
  %12569 = lshr i32 %12568, 22
  %12570 = load i32, i32* %16, align 4
  %12571 = shl i32 %12570, 10
  %12572 = or i32 %12569, %12571
  %12573 = xor i32 %12567, %12572
  %12574 = load i32, i32* %16, align 4
  %12575 = load i32, i32* %17, align 4
  %12576 = and i32 %12574, %12575
  %12577 = load i32, i32* %16, align 4
  %12578 = load i32, i32* %18, align 4
  %12579 = and i32 %12577, %12578
  %12580 = xor i32 %12576, %12579
  %12581 = load i32, i32* %17, align 4
  %12582 = load i32, i32* %18, align 4
  %12583 = and i32 %12581, %12582
  %12584 = xor i32 %12580, %12583
  %12585 = add i32 %12573, %12584
  store i32 %12585, i32* %25, align 4
  %12586 = load i32, i32* %22, align 4
  store i32 %12586, i32* %23, align 4
  %12587 = load i32, i32* %21, align 4
  store i32 %12587, i32* %22, align 4
  %12588 = load i32, i32* %20, align 4
  store i32 %12588, i32* %21, align 4
  %12589 = load i32, i32* %19, align 4
  %12590 = load i32, i32* %24, align 4
  %12591 = add i32 %12589, %12590
  store i32 %12591, i32* %20, align 4
  %12592 = load i32, i32* %18, align 4
  store i32 %12592, i32* %19, align 4
  %12593 = load i32, i32* %17, align 4
  store i32 %12593, i32* %18, align 4
  %12594 = load i32, i32* %16, align 4
  store i32 %12594, i32* %17, align 4
  %12595 = load i32, i32* %24, align 4
  %12596 = load i32, i32* %25, align 4
  %12597 = add i32 %12595, %12596
  store i32 %12597, i32* %16, align 4
  %12598 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12599 = load i32, i32* %12598, align 4
  %12600 = lshr i32 %12599, 17
  %12601 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12602 = load i32, i32* %12601, align 4
  %12603 = shl i32 %12602, 15
  %12604 = or i32 %12600, %12603
  %12605 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12606 = load i32, i32* %12605, align 4
  %12607 = lshr i32 %12606, 19
  %12608 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12609 = load i32, i32* %12608, align 4
  %12610 = shl i32 %12609, 13
  %12611 = or i32 %12607, %12610
  %12612 = xor i32 %12604, %12611
  %12613 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %12614 = load i32, i32* %12613, align 4
  %12615 = lshr i32 %12614, 10
  %12616 = xor i32 %12612, %12615
  %12617 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %12618 = load i32, i32* %12617, align 8
  %12619 = add i32 %12616, %12618
  %12620 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12621 = load i32, i32* %12620, align 8
  %12622 = lshr i32 %12621, 7
  %12623 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12624 = load i32, i32* %12623, align 8
  %12625 = shl i32 %12624, 25
  %12626 = or i32 %12622, %12625
  %12627 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12628 = load i32, i32* %12627, align 8
  %12629 = lshr i32 %12628, 18
  %12630 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12631 = load i32, i32* %12630, align 8
  %12632 = shl i32 %12631, 14
  %12633 = or i32 %12629, %12632
  %12634 = xor i32 %12626, %12633
  %12635 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12636 = load i32, i32* %12635, align 8
  %12637 = lshr i32 %12636, 3
  %12638 = xor i32 %12634, %12637
  %12639 = add i32 %12619, %12638
  %12640 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 9
  %12641 = load i32, i32* %12640, align 4
  %12642 = add i32 %12639, %12641
  %12643 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  store i32 %12642, i32* %12643, align 4
  %12644 = load i32, i32* %23, align 4
  %12645 = load i32, i32* %20, align 4
  %12646 = lshr i32 %12645, 6
  %12647 = load i32, i32* %20, align 4
  %12648 = shl i32 %12647, 26
  %12649 = or i32 %12646, %12648
  %12650 = load i32, i32* %20, align 4
  %12651 = lshr i32 %12650, 11
  %12652 = load i32, i32* %20, align 4
  %12653 = shl i32 %12652, 21
  %12654 = or i32 %12651, %12653
  %12655 = xor i32 %12649, %12654
  %12656 = load i32, i32* %20, align 4
  %12657 = lshr i32 %12656, 25
  %12658 = load i32, i32* %20, align 4
  %12659 = shl i32 %12658, 7
  %12660 = or i32 %12657, %12659
  %12661 = xor i32 %12655, %12660
  %12662 = add i32 %12644, %12661
  %12663 = load i32, i32* %20, align 4
  %12664 = load i32, i32* %21, align 4
  %12665 = and i32 %12663, %12664
  %12666 = load i32, i32* %20, align 4
  %12667 = xor i32 %12666, -1
  %12668 = load i32, i32* %22, align 4
  %12669 = and i32 %12667, %12668
  %12670 = xor i32 %12665, %12669
  %12671 = add i32 %12662, %12670
  %12672 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 25), align 4
  %12673 = add i32 %12671, %12672
  %12674 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12675 = load i32, i32* %12674, align 4
  %12676 = add i32 %12673, %12675
  store i32 %12676, i32* %24, align 4
  %12677 = load i32, i32* %16, align 4
  %12678 = lshr i32 %12677, 2
  %12679 = load i32, i32* %16, align 4
  %12680 = shl i32 %12679, 30
  %12681 = or i32 %12678, %12680
  %12682 = load i32, i32* %16, align 4
  %12683 = lshr i32 %12682, 13
  %12684 = load i32, i32* %16, align 4
  %12685 = shl i32 %12684, 19
  %12686 = or i32 %12683, %12685
  %12687 = xor i32 %12681, %12686
  %12688 = load i32, i32* %16, align 4
  %12689 = lshr i32 %12688, 22
  %12690 = load i32, i32* %16, align 4
  %12691 = shl i32 %12690, 10
  %12692 = or i32 %12689, %12691
  %12693 = xor i32 %12687, %12692
  %12694 = load i32, i32* %16, align 4
  %12695 = load i32, i32* %17, align 4
  %12696 = and i32 %12694, %12695
  %12697 = load i32, i32* %16, align 4
  %12698 = load i32, i32* %18, align 4
  %12699 = and i32 %12697, %12698
  %12700 = xor i32 %12696, %12699
  %12701 = load i32, i32* %17, align 4
  %12702 = load i32, i32* %18, align 4
  %12703 = and i32 %12701, %12702
  %12704 = xor i32 %12700, %12703
  %12705 = add i32 %12693, %12704
  store i32 %12705, i32* %25, align 4
  %12706 = load i32, i32* %22, align 4
  store i32 %12706, i32* %23, align 4
  %12707 = load i32, i32* %21, align 4
  store i32 %12707, i32* %22, align 4
  %12708 = load i32, i32* %20, align 4
  store i32 %12708, i32* %21, align 4
  %12709 = load i32, i32* %19, align 4
  %12710 = load i32, i32* %24, align 4
  %12711 = add i32 %12709, %12710
  store i32 %12711, i32* %20, align 4
  %12712 = load i32, i32* %18, align 4
  store i32 %12712, i32* %19, align 4
  %12713 = load i32, i32* %17, align 4
  store i32 %12713, i32* %18, align 4
  %12714 = load i32, i32* %16, align 4
  store i32 %12714, i32* %17, align 4
  %12715 = load i32, i32* %24, align 4
  %12716 = load i32, i32* %25, align 4
  %12717 = add i32 %12715, %12716
  store i32 %12717, i32* %16, align 4
  %12718 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12719 = load i32, i32* %12718, align 16
  %12720 = lshr i32 %12719, 17
  %12721 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12722 = load i32, i32* %12721, align 16
  %12723 = shl i32 %12722, 15
  %12724 = or i32 %12720, %12723
  %12725 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12726 = load i32, i32* %12725, align 16
  %12727 = lshr i32 %12726, 19
  %12728 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12729 = load i32, i32* %12728, align 16
  %12730 = shl i32 %12729, 13
  %12731 = or i32 %12727, %12730
  %12732 = xor i32 %12724, %12731
  %12733 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %12734 = load i32, i32* %12733, align 16
  %12735 = lshr i32 %12734, 10
  %12736 = xor i32 %12732, %12735
  %12737 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %12738 = load i32, i32* %12737, align 4
  %12739 = add i32 %12736, %12738
  %12740 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12741 = load i32, i32* %12740, align 4
  %12742 = lshr i32 %12741, 7
  %12743 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12744 = load i32, i32* %12743, align 4
  %12745 = shl i32 %12744, 25
  %12746 = or i32 %12742, %12745
  %12747 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12748 = load i32, i32* %12747, align 4
  %12749 = lshr i32 %12748, 18
  %12750 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12751 = load i32, i32* %12750, align 4
  %12752 = shl i32 %12751, 14
  %12753 = or i32 %12749, %12752
  %12754 = xor i32 %12746, %12753
  %12755 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12756 = load i32, i32* %12755, align 4
  %12757 = lshr i32 %12756, 3
  %12758 = xor i32 %12754, %12757
  %12759 = add i32 %12739, %12758
  %12760 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 10
  %12761 = load i32, i32* %12760, align 8
  %12762 = add i32 %12759, %12761
  %12763 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  store i32 %12762, i32* %12763, align 8
  %12764 = load i32, i32* %23, align 4
  %12765 = load i32, i32* %20, align 4
  %12766 = lshr i32 %12765, 6
  %12767 = load i32, i32* %20, align 4
  %12768 = shl i32 %12767, 26
  %12769 = or i32 %12766, %12768
  %12770 = load i32, i32* %20, align 4
  %12771 = lshr i32 %12770, 11
  %12772 = load i32, i32* %20, align 4
  %12773 = shl i32 %12772, 21
  %12774 = or i32 %12771, %12773
  %12775 = xor i32 %12769, %12774
  %12776 = load i32, i32* %20, align 4
  %12777 = lshr i32 %12776, 25
  %12778 = load i32, i32* %20, align 4
  %12779 = shl i32 %12778, 7
  %12780 = or i32 %12777, %12779
  %12781 = xor i32 %12775, %12780
  %12782 = add i32 %12764, %12781
  %12783 = load i32, i32* %20, align 4
  %12784 = load i32, i32* %21, align 4
  %12785 = and i32 %12783, %12784
  %12786 = load i32, i32* %20, align 4
  %12787 = xor i32 %12786, -1
  %12788 = load i32, i32* %22, align 4
  %12789 = and i32 %12787, %12788
  %12790 = xor i32 %12785, %12789
  %12791 = add i32 %12782, %12790
  %12792 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 26), align 8
  %12793 = add i32 %12791, %12792
  %12794 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12795 = load i32, i32* %12794, align 8
  %12796 = add i32 %12793, %12795
  store i32 %12796, i32* %24, align 4
  %12797 = load i32, i32* %16, align 4
  %12798 = lshr i32 %12797, 2
  %12799 = load i32, i32* %16, align 4
  %12800 = shl i32 %12799, 30
  %12801 = or i32 %12798, %12800
  %12802 = load i32, i32* %16, align 4
  %12803 = lshr i32 %12802, 13
  %12804 = load i32, i32* %16, align 4
  %12805 = shl i32 %12804, 19
  %12806 = or i32 %12803, %12805
  %12807 = xor i32 %12801, %12806
  %12808 = load i32, i32* %16, align 4
  %12809 = lshr i32 %12808, 22
  %12810 = load i32, i32* %16, align 4
  %12811 = shl i32 %12810, 10
  %12812 = or i32 %12809, %12811
  %12813 = xor i32 %12807, %12812
  %12814 = load i32, i32* %16, align 4
  %12815 = load i32, i32* %17, align 4
  %12816 = and i32 %12814, %12815
  %12817 = load i32, i32* %16, align 4
  %12818 = load i32, i32* %18, align 4
  %12819 = and i32 %12817, %12818
  %12820 = xor i32 %12816, %12819
  %12821 = load i32, i32* %17, align 4
  %12822 = load i32, i32* %18, align 4
  %12823 = and i32 %12821, %12822
  %12824 = xor i32 %12820, %12823
  %12825 = add i32 %12813, %12824
  store i32 %12825, i32* %25, align 4
  %12826 = load i32, i32* %22, align 4
  store i32 %12826, i32* %23, align 4
  %12827 = load i32, i32* %21, align 4
  store i32 %12827, i32* %22, align 4
  %12828 = load i32, i32* %20, align 4
  store i32 %12828, i32* %21, align 4
  %12829 = load i32, i32* %19, align 4
  %12830 = load i32, i32* %24, align 4
  %12831 = add i32 %12829, %12830
  store i32 %12831, i32* %20, align 4
  %12832 = load i32, i32* %18, align 4
  store i32 %12832, i32* %19, align 4
  %12833 = load i32, i32* %17, align 4
  store i32 %12833, i32* %18, align 4
  %12834 = load i32, i32* %16, align 4
  store i32 %12834, i32* %17, align 4
  %12835 = load i32, i32* %24, align 4
  %12836 = load i32, i32* %25, align 4
  %12837 = add i32 %12835, %12836
  store i32 %12837, i32* %16, align 4
  %12838 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12839 = load i32, i32* %12838, align 4
  %12840 = lshr i32 %12839, 17
  %12841 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12842 = load i32, i32* %12841, align 4
  %12843 = shl i32 %12842, 15
  %12844 = or i32 %12840, %12843
  %12845 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12846 = load i32, i32* %12845, align 4
  %12847 = lshr i32 %12846, 19
  %12848 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12849 = load i32, i32* %12848, align 4
  %12850 = shl i32 %12849, 13
  %12851 = or i32 %12847, %12850
  %12852 = xor i32 %12844, %12851
  %12853 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %12854 = load i32, i32* %12853, align 4
  %12855 = lshr i32 %12854, 10
  %12856 = xor i32 %12852, %12855
  %12857 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %12858 = load i32, i32* %12857, align 16
  %12859 = add i32 %12856, %12858
  %12860 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %12861 = load i32, i32* %12860, align 16
  %12862 = lshr i32 %12861, 7
  %12863 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %12864 = load i32, i32* %12863, align 16
  %12865 = shl i32 %12864, 25
  %12866 = or i32 %12862, %12865
  %12867 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %12868 = load i32, i32* %12867, align 16
  %12869 = lshr i32 %12868, 18
  %12870 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %12871 = load i32, i32* %12870, align 16
  %12872 = shl i32 %12871, 14
  %12873 = or i32 %12869, %12872
  %12874 = xor i32 %12866, %12873
  %12875 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %12876 = load i32, i32* %12875, align 16
  %12877 = lshr i32 %12876, 3
  %12878 = xor i32 %12874, %12877
  %12879 = add i32 %12859, %12878
  %12880 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 11
  %12881 = load i32, i32* %12880, align 4
  %12882 = add i32 %12879, %12881
  %12883 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  store i32 %12882, i32* %12883, align 4
  %12884 = load i32, i32* %23, align 4
  %12885 = load i32, i32* %20, align 4
  %12886 = lshr i32 %12885, 6
  %12887 = load i32, i32* %20, align 4
  %12888 = shl i32 %12887, 26
  %12889 = or i32 %12886, %12888
  %12890 = load i32, i32* %20, align 4
  %12891 = lshr i32 %12890, 11
  %12892 = load i32, i32* %20, align 4
  %12893 = shl i32 %12892, 21
  %12894 = or i32 %12891, %12893
  %12895 = xor i32 %12889, %12894
  %12896 = load i32, i32* %20, align 4
  %12897 = lshr i32 %12896, 25
  %12898 = load i32, i32* %20, align 4
  %12899 = shl i32 %12898, 7
  %12900 = or i32 %12897, %12899
  %12901 = xor i32 %12895, %12900
  %12902 = add i32 %12884, %12901
  %12903 = load i32, i32* %20, align 4
  %12904 = load i32, i32* %21, align 4
  %12905 = and i32 %12903, %12904
  %12906 = load i32, i32* %20, align 4
  %12907 = xor i32 %12906, -1
  %12908 = load i32, i32* %22, align 4
  %12909 = and i32 %12907, %12908
  %12910 = xor i32 %12905, %12909
  %12911 = add i32 %12902, %12910
  %12912 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 27), align 4
  %12913 = add i32 %12911, %12912
  %12914 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %12915 = load i32, i32* %12914, align 4
  %12916 = add i32 %12913, %12915
  store i32 %12916, i32* %24, align 4
  %12917 = load i32, i32* %16, align 4
  %12918 = lshr i32 %12917, 2
  %12919 = load i32, i32* %16, align 4
  %12920 = shl i32 %12919, 30
  %12921 = or i32 %12918, %12920
  %12922 = load i32, i32* %16, align 4
  %12923 = lshr i32 %12922, 13
  %12924 = load i32, i32* %16, align 4
  %12925 = shl i32 %12924, 19
  %12926 = or i32 %12923, %12925
  %12927 = xor i32 %12921, %12926
  %12928 = load i32, i32* %16, align 4
  %12929 = lshr i32 %12928, 22
  %12930 = load i32, i32* %16, align 4
  %12931 = shl i32 %12930, 10
  %12932 = or i32 %12929, %12931
  %12933 = xor i32 %12927, %12932
  %12934 = load i32, i32* %16, align 4
  %12935 = load i32, i32* %17, align 4
  %12936 = and i32 %12934, %12935
  %12937 = load i32, i32* %16, align 4
  %12938 = load i32, i32* %18, align 4
  %12939 = and i32 %12937, %12938
  %12940 = xor i32 %12936, %12939
  %12941 = load i32, i32* %17, align 4
  %12942 = load i32, i32* %18, align 4
  %12943 = and i32 %12941, %12942
  %12944 = xor i32 %12940, %12943
  %12945 = add i32 %12933, %12944
  store i32 %12945, i32* %25, align 4
  %12946 = load i32, i32* %22, align 4
  store i32 %12946, i32* %23, align 4
  %12947 = load i32, i32* %21, align 4
  store i32 %12947, i32* %22, align 4
  %12948 = load i32, i32* %20, align 4
  store i32 %12948, i32* %21, align 4
  %12949 = load i32, i32* %19, align 4
  %12950 = load i32, i32* %24, align 4
  %12951 = add i32 %12949, %12950
  store i32 %12951, i32* %20, align 4
  %12952 = load i32, i32* %18, align 4
  store i32 %12952, i32* %19, align 4
  %12953 = load i32, i32* %17, align 4
  store i32 %12953, i32* %18, align 4
  %12954 = load i32, i32* %16, align 4
  store i32 %12954, i32* %17, align 4
  %12955 = load i32, i32* %24, align 4
  %12956 = load i32, i32* %25, align 4
  %12957 = add i32 %12955, %12956
  store i32 %12957, i32* %16, align 4
  %12958 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12959 = load i32, i32* %12958, align 8
  %12960 = lshr i32 %12959, 17
  %12961 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12962 = load i32, i32* %12961, align 8
  %12963 = shl i32 %12962, 15
  %12964 = or i32 %12960, %12963
  %12965 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12966 = load i32, i32* %12965, align 8
  %12967 = lshr i32 %12966, 19
  %12968 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12969 = load i32, i32* %12968, align 8
  %12970 = shl i32 %12969, 13
  %12971 = or i32 %12967, %12970
  %12972 = xor i32 %12964, %12971
  %12973 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %12974 = load i32, i32* %12973, align 8
  %12975 = lshr i32 %12974, 10
  %12976 = xor i32 %12972, %12975
  %12977 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %12978 = load i32, i32* %12977, align 4
  %12979 = add i32 %12976, %12978
  %12980 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12981 = load i32, i32* %12980, align 4
  %12982 = lshr i32 %12981, 7
  %12983 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12984 = load i32, i32* %12983, align 4
  %12985 = shl i32 %12984, 25
  %12986 = or i32 %12982, %12985
  %12987 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12988 = load i32, i32* %12987, align 4
  %12989 = lshr i32 %12988, 18
  %12990 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12991 = load i32, i32* %12990, align 4
  %12992 = shl i32 %12991, 14
  %12993 = or i32 %12989, %12992
  %12994 = xor i32 %12986, %12993
  %12995 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %12996 = load i32, i32* %12995, align 4
  %12997 = lshr i32 %12996, 3
  %12998 = xor i32 %12994, %12997
  %12999 = add i32 %12979, %12998
  %13000 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 12
  %13001 = load i32, i32* %13000, align 16
  %13002 = add i32 %12999, %13001
  %13003 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  store i32 %13002, i32* %13003, align 16
  %13004 = load i32, i32* %23, align 4
  %13005 = load i32, i32* %20, align 4
  %13006 = lshr i32 %13005, 6
  %13007 = load i32, i32* %20, align 4
  %13008 = shl i32 %13007, 26
  %13009 = or i32 %13006, %13008
  %13010 = load i32, i32* %20, align 4
  %13011 = lshr i32 %13010, 11
  %13012 = load i32, i32* %20, align 4
  %13013 = shl i32 %13012, 21
  %13014 = or i32 %13011, %13013
  %13015 = xor i32 %13009, %13014
  %13016 = load i32, i32* %20, align 4
  %13017 = lshr i32 %13016, 25
  %13018 = load i32, i32* %20, align 4
  %13019 = shl i32 %13018, 7
  %13020 = or i32 %13017, %13019
  %13021 = xor i32 %13015, %13020
  %13022 = add i32 %13004, %13021
  %13023 = load i32, i32* %20, align 4
  %13024 = load i32, i32* %21, align 4
  %13025 = and i32 %13023, %13024
  %13026 = load i32, i32* %20, align 4
  %13027 = xor i32 %13026, -1
  %13028 = load i32, i32* %22, align 4
  %13029 = and i32 %13027, %13028
  %13030 = xor i32 %13025, %13029
  %13031 = add i32 %13022, %13030
  %13032 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 28), align 16
  %13033 = add i32 %13031, %13032
  %13034 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13035 = load i32, i32* %13034, align 16
  %13036 = add i32 %13033, %13035
  store i32 %13036, i32* %24, align 4
  %13037 = load i32, i32* %16, align 4
  %13038 = lshr i32 %13037, 2
  %13039 = load i32, i32* %16, align 4
  %13040 = shl i32 %13039, 30
  %13041 = or i32 %13038, %13040
  %13042 = load i32, i32* %16, align 4
  %13043 = lshr i32 %13042, 13
  %13044 = load i32, i32* %16, align 4
  %13045 = shl i32 %13044, 19
  %13046 = or i32 %13043, %13045
  %13047 = xor i32 %13041, %13046
  %13048 = load i32, i32* %16, align 4
  %13049 = lshr i32 %13048, 22
  %13050 = load i32, i32* %16, align 4
  %13051 = shl i32 %13050, 10
  %13052 = or i32 %13049, %13051
  %13053 = xor i32 %13047, %13052
  %13054 = load i32, i32* %16, align 4
  %13055 = load i32, i32* %17, align 4
  %13056 = and i32 %13054, %13055
  %13057 = load i32, i32* %16, align 4
  %13058 = load i32, i32* %18, align 4
  %13059 = and i32 %13057, %13058
  %13060 = xor i32 %13056, %13059
  %13061 = load i32, i32* %17, align 4
  %13062 = load i32, i32* %18, align 4
  %13063 = and i32 %13061, %13062
  %13064 = xor i32 %13060, %13063
  %13065 = add i32 %13053, %13064
  store i32 %13065, i32* %25, align 4
  %13066 = load i32, i32* %22, align 4
  store i32 %13066, i32* %23, align 4
  %13067 = load i32, i32* %21, align 4
  store i32 %13067, i32* %22, align 4
  %13068 = load i32, i32* %20, align 4
  store i32 %13068, i32* %21, align 4
  %13069 = load i32, i32* %19, align 4
  %13070 = load i32, i32* %24, align 4
  %13071 = add i32 %13069, %13070
  store i32 %13071, i32* %20, align 4
  %13072 = load i32, i32* %18, align 4
  store i32 %13072, i32* %19, align 4
  %13073 = load i32, i32* %17, align 4
  store i32 %13073, i32* %18, align 4
  %13074 = load i32, i32* %16, align 4
  store i32 %13074, i32* %17, align 4
  %13075 = load i32, i32* %24, align 4
  %13076 = load i32, i32* %25, align 4
  %13077 = add i32 %13075, %13076
  store i32 %13077, i32* %16, align 4
  %13078 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13079 = load i32, i32* %13078, align 4
  %13080 = lshr i32 %13079, 17
  %13081 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13082 = load i32, i32* %13081, align 4
  %13083 = shl i32 %13082, 15
  %13084 = or i32 %13080, %13083
  %13085 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13086 = load i32, i32* %13085, align 4
  %13087 = lshr i32 %13086, 19
  %13088 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13089 = load i32, i32* %13088, align 4
  %13090 = shl i32 %13089, 13
  %13091 = or i32 %13087, %13090
  %13092 = xor i32 %13084, %13091
  %13093 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13094 = load i32, i32* %13093, align 4
  %13095 = lshr i32 %13094, 10
  %13096 = xor i32 %13092, %13095
  %13097 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %13098 = load i32, i32* %13097, align 8
  %13099 = add i32 %13096, %13098
  %13100 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13101 = load i32, i32* %13100, align 8
  %13102 = lshr i32 %13101, 7
  %13103 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13104 = load i32, i32* %13103, align 8
  %13105 = shl i32 %13104, 25
  %13106 = or i32 %13102, %13105
  %13107 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13108 = load i32, i32* %13107, align 8
  %13109 = lshr i32 %13108, 18
  %13110 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13111 = load i32, i32* %13110, align 8
  %13112 = shl i32 %13111, 14
  %13113 = or i32 %13109, %13112
  %13114 = xor i32 %13106, %13113
  %13115 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13116 = load i32, i32* %13115, align 8
  %13117 = lshr i32 %13116, 3
  %13118 = xor i32 %13114, %13117
  %13119 = add i32 %13099, %13118
  %13120 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 13
  %13121 = load i32, i32* %13120, align 4
  %13122 = add i32 %13119, %13121
  %13123 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  store i32 %13122, i32* %13123, align 4
  %13124 = load i32, i32* %23, align 4
  %13125 = load i32, i32* %20, align 4
  %13126 = lshr i32 %13125, 6
  %13127 = load i32, i32* %20, align 4
  %13128 = shl i32 %13127, 26
  %13129 = or i32 %13126, %13128
  %13130 = load i32, i32* %20, align 4
  %13131 = lshr i32 %13130, 11
  %13132 = load i32, i32* %20, align 4
  %13133 = shl i32 %13132, 21
  %13134 = or i32 %13131, %13133
  %13135 = xor i32 %13129, %13134
  %13136 = load i32, i32* %20, align 4
  %13137 = lshr i32 %13136, 25
  %13138 = load i32, i32* %20, align 4
  %13139 = shl i32 %13138, 7
  %13140 = or i32 %13137, %13139
  %13141 = xor i32 %13135, %13140
  %13142 = add i32 %13124, %13141
  %13143 = load i32, i32* %20, align 4
  %13144 = load i32, i32* %21, align 4
  %13145 = and i32 %13143, %13144
  %13146 = load i32, i32* %20, align 4
  %13147 = xor i32 %13146, -1
  %13148 = load i32, i32* %22, align 4
  %13149 = and i32 %13147, %13148
  %13150 = xor i32 %13145, %13149
  %13151 = add i32 %13142, %13150
  %13152 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 29), align 4
  %13153 = add i32 %13151, %13152
  %13154 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13155 = load i32, i32* %13154, align 4
  %13156 = add i32 %13153, %13155
  store i32 %13156, i32* %24, align 4
  %13157 = load i32, i32* %16, align 4
  %13158 = lshr i32 %13157, 2
  %13159 = load i32, i32* %16, align 4
  %13160 = shl i32 %13159, 30
  %13161 = or i32 %13158, %13160
  %13162 = load i32, i32* %16, align 4
  %13163 = lshr i32 %13162, 13
  %13164 = load i32, i32* %16, align 4
  %13165 = shl i32 %13164, 19
  %13166 = or i32 %13163, %13165
  %13167 = xor i32 %13161, %13166
  %13168 = load i32, i32* %16, align 4
  %13169 = lshr i32 %13168, 22
  %13170 = load i32, i32* %16, align 4
  %13171 = shl i32 %13170, 10
  %13172 = or i32 %13169, %13171
  %13173 = xor i32 %13167, %13172
  %13174 = load i32, i32* %16, align 4
  %13175 = load i32, i32* %17, align 4
  %13176 = and i32 %13174, %13175
  %13177 = load i32, i32* %16, align 4
  %13178 = load i32, i32* %18, align 4
  %13179 = and i32 %13177, %13178
  %13180 = xor i32 %13176, %13179
  %13181 = load i32, i32* %17, align 4
  %13182 = load i32, i32* %18, align 4
  %13183 = and i32 %13181, %13182
  %13184 = xor i32 %13180, %13183
  %13185 = add i32 %13173, %13184
  store i32 %13185, i32* %25, align 4
  %13186 = load i32, i32* %22, align 4
  store i32 %13186, i32* %23, align 4
  %13187 = load i32, i32* %21, align 4
  store i32 %13187, i32* %22, align 4
  %13188 = load i32, i32* %20, align 4
  store i32 %13188, i32* %21, align 4
  %13189 = load i32, i32* %19, align 4
  %13190 = load i32, i32* %24, align 4
  %13191 = add i32 %13189, %13190
  store i32 %13191, i32* %20, align 4
  %13192 = load i32, i32* %18, align 4
  store i32 %13192, i32* %19, align 4
  %13193 = load i32, i32* %17, align 4
  store i32 %13193, i32* %18, align 4
  %13194 = load i32, i32* %16, align 4
  store i32 %13194, i32* %17, align 4
  %13195 = load i32, i32* %24, align 4
  %13196 = load i32, i32* %25, align 4
  %13197 = add i32 %13195, %13196
  store i32 %13197, i32* %16, align 4
  %13198 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13199 = load i32, i32* %13198, align 16
  %13200 = lshr i32 %13199, 17
  %13201 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13202 = load i32, i32* %13201, align 16
  %13203 = shl i32 %13202, 15
  %13204 = or i32 %13200, %13203
  %13205 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13206 = load i32, i32* %13205, align 16
  %13207 = lshr i32 %13206, 19
  %13208 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13209 = load i32, i32* %13208, align 16
  %13210 = shl i32 %13209, 13
  %13211 = or i32 %13207, %13210
  %13212 = xor i32 %13204, %13211
  %13213 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13214 = load i32, i32* %13213, align 16
  %13215 = lshr i32 %13214, 10
  %13216 = xor i32 %13212, %13215
  %13217 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %13218 = load i32, i32* %13217, align 4
  %13219 = add i32 %13216, %13218
  %13220 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13221 = load i32, i32* %13220, align 4
  %13222 = lshr i32 %13221, 7
  %13223 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13224 = load i32, i32* %13223, align 4
  %13225 = shl i32 %13224, 25
  %13226 = or i32 %13222, %13225
  %13227 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13228 = load i32, i32* %13227, align 4
  %13229 = lshr i32 %13228, 18
  %13230 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13231 = load i32, i32* %13230, align 4
  %13232 = shl i32 %13231, 14
  %13233 = or i32 %13229, %13232
  %13234 = xor i32 %13226, %13233
  %13235 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13236 = load i32, i32* %13235, align 4
  %13237 = lshr i32 %13236, 3
  %13238 = xor i32 %13234, %13237
  %13239 = add i32 %13219, %13238
  %13240 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 14
  %13241 = load i32, i32* %13240, align 8
  %13242 = add i32 %13239, %13241
  %13243 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  store i32 %13242, i32* %13243, align 8
  %13244 = load i32, i32* %23, align 4
  %13245 = load i32, i32* %20, align 4
  %13246 = lshr i32 %13245, 6
  %13247 = load i32, i32* %20, align 4
  %13248 = shl i32 %13247, 26
  %13249 = or i32 %13246, %13248
  %13250 = load i32, i32* %20, align 4
  %13251 = lshr i32 %13250, 11
  %13252 = load i32, i32* %20, align 4
  %13253 = shl i32 %13252, 21
  %13254 = or i32 %13251, %13253
  %13255 = xor i32 %13249, %13254
  %13256 = load i32, i32* %20, align 4
  %13257 = lshr i32 %13256, 25
  %13258 = load i32, i32* %20, align 4
  %13259 = shl i32 %13258, 7
  %13260 = or i32 %13257, %13259
  %13261 = xor i32 %13255, %13260
  %13262 = add i32 %13244, %13261
  %13263 = load i32, i32* %20, align 4
  %13264 = load i32, i32* %21, align 4
  %13265 = and i32 %13263, %13264
  %13266 = load i32, i32* %20, align 4
  %13267 = xor i32 %13266, -1
  %13268 = load i32, i32* %22, align 4
  %13269 = and i32 %13267, %13268
  %13270 = xor i32 %13265, %13269
  %13271 = add i32 %13262, %13270
  %13272 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 30), align 8
  %13273 = add i32 %13271, %13272
  %13274 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13275 = load i32, i32* %13274, align 8
  %13276 = add i32 %13273, %13275
  store i32 %13276, i32* %24, align 4
  %13277 = load i32, i32* %16, align 4
  %13278 = lshr i32 %13277, 2
  %13279 = load i32, i32* %16, align 4
  %13280 = shl i32 %13279, 30
  %13281 = or i32 %13278, %13280
  %13282 = load i32, i32* %16, align 4
  %13283 = lshr i32 %13282, 13
  %13284 = load i32, i32* %16, align 4
  %13285 = shl i32 %13284, 19
  %13286 = or i32 %13283, %13285
  %13287 = xor i32 %13281, %13286
  %13288 = load i32, i32* %16, align 4
  %13289 = lshr i32 %13288, 22
  %13290 = load i32, i32* %16, align 4
  %13291 = shl i32 %13290, 10
  %13292 = or i32 %13289, %13291
  %13293 = xor i32 %13287, %13292
  %13294 = load i32, i32* %16, align 4
  %13295 = load i32, i32* %17, align 4
  %13296 = and i32 %13294, %13295
  %13297 = load i32, i32* %16, align 4
  %13298 = load i32, i32* %18, align 4
  %13299 = and i32 %13297, %13298
  %13300 = xor i32 %13296, %13299
  %13301 = load i32, i32* %17, align 4
  %13302 = load i32, i32* %18, align 4
  %13303 = and i32 %13301, %13302
  %13304 = xor i32 %13300, %13303
  %13305 = add i32 %13293, %13304
  store i32 %13305, i32* %25, align 4
  %13306 = load i32, i32* %22, align 4
  store i32 %13306, i32* %23, align 4
  %13307 = load i32, i32* %21, align 4
  store i32 %13307, i32* %22, align 4
  %13308 = load i32, i32* %20, align 4
  store i32 %13308, i32* %21, align 4
  %13309 = load i32, i32* %19, align 4
  %13310 = load i32, i32* %24, align 4
  %13311 = add i32 %13309, %13310
  store i32 %13311, i32* %20, align 4
  %13312 = load i32, i32* %18, align 4
  store i32 %13312, i32* %19, align 4
  %13313 = load i32, i32* %17, align 4
  store i32 %13313, i32* %18, align 4
  %13314 = load i32, i32* %16, align 4
  store i32 %13314, i32* %17, align 4
  %13315 = load i32, i32* %24, align 4
  %13316 = load i32, i32* %25, align 4
  %13317 = add i32 %13315, %13316
  store i32 %13317, i32* %16, align 4
  %13318 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13319 = load i32, i32* %13318, align 4
  %13320 = lshr i32 %13319, 17
  %13321 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13322 = load i32, i32* %13321, align 4
  %13323 = shl i32 %13322, 15
  %13324 = or i32 %13320, %13323
  %13325 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13326 = load i32, i32* %13325, align 4
  %13327 = lshr i32 %13326, 19
  %13328 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13329 = load i32, i32* %13328, align 4
  %13330 = shl i32 %13329, 13
  %13331 = or i32 %13327, %13330
  %13332 = xor i32 %13324, %13331
  %13333 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13334 = load i32, i32* %13333, align 4
  %13335 = lshr i32 %13334, 10
  %13336 = xor i32 %13332, %13335
  %13337 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %13338 = load i32, i32* %13337, align 16
  %13339 = add i32 %13336, %13338
  %13340 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13341 = load i32, i32* %13340, align 16
  %13342 = lshr i32 %13341, 7
  %13343 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13344 = load i32, i32* %13343, align 16
  %13345 = shl i32 %13344, 25
  %13346 = or i32 %13342, %13345
  %13347 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13348 = load i32, i32* %13347, align 16
  %13349 = lshr i32 %13348, 18
  %13350 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13351 = load i32, i32* %13350, align 16
  %13352 = shl i32 %13351, 14
  %13353 = or i32 %13349, %13352
  %13354 = xor i32 %13346, %13353
  %13355 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13356 = load i32, i32* %13355, align 16
  %13357 = lshr i32 %13356, 3
  %13358 = xor i32 %13354, %13357
  %13359 = add i32 %13339, %13358
  %13360 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 15
  %13361 = load i32, i32* %13360, align 4
  %13362 = add i32 %13359, %13361
  %13363 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  store i32 %13362, i32* %13363, align 4
  %13364 = load i32, i32* %23, align 4
  %13365 = load i32, i32* %20, align 4
  %13366 = lshr i32 %13365, 6
  %13367 = load i32, i32* %20, align 4
  %13368 = shl i32 %13367, 26
  %13369 = or i32 %13366, %13368
  %13370 = load i32, i32* %20, align 4
  %13371 = lshr i32 %13370, 11
  %13372 = load i32, i32* %20, align 4
  %13373 = shl i32 %13372, 21
  %13374 = or i32 %13371, %13373
  %13375 = xor i32 %13369, %13374
  %13376 = load i32, i32* %20, align 4
  %13377 = lshr i32 %13376, 25
  %13378 = load i32, i32* %20, align 4
  %13379 = shl i32 %13378, 7
  %13380 = or i32 %13377, %13379
  %13381 = xor i32 %13375, %13380
  %13382 = add i32 %13364, %13381
  %13383 = load i32, i32* %20, align 4
  %13384 = load i32, i32* %21, align 4
  %13385 = and i32 %13383, %13384
  %13386 = load i32, i32* %20, align 4
  %13387 = xor i32 %13386, -1
  %13388 = load i32, i32* %22, align 4
  %13389 = and i32 %13387, %13388
  %13390 = xor i32 %13385, %13389
  %13391 = add i32 %13382, %13390
  %13392 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 31), align 4
  %13393 = add i32 %13391, %13392
  %13394 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13395 = load i32, i32* %13394, align 4
  %13396 = add i32 %13393, %13395
  store i32 %13396, i32* %24, align 4
  %13397 = load i32, i32* %16, align 4
  %13398 = lshr i32 %13397, 2
  %13399 = load i32, i32* %16, align 4
  %13400 = shl i32 %13399, 30
  %13401 = or i32 %13398, %13400
  %13402 = load i32, i32* %16, align 4
  %13403 = lshr i32 %13402, 13
  %13404 = load i32, i32* %16, align 4
  %13405 = shl i32 %13404, 19
  %13406 = or i32 %13403, %13405
  %13407 = xor i32 %13401, %13406
  %13408 = load i32, i32* %16, align 4
  %13409 = lshr i32 %13408, 22
  %13410 = load i32, i32* %16, align 4
  %13411 = shl i32 %13410, 10
  %13412 = or i32 %13409, %13411
  %13413 = xor i32 %13407, %13412
  %13414 = load i32, i32* %16, align 4
  %13415 = load i32, i32* %17, align 4
  %13416 = and i32 %13414, %13415
  %13417 = load i32, i32* %16, align 4
  %13418 = load i32, i32* %18, align 4
  %13419 = and i32 %13417, %13418
  %13420 = xor i32 %13416, %13419
  %13421 = load i32, i32* %17, align 4
  %13422 = load i32, i32* %18, align 4
  %13423 = and i32 %13421, %13422
  %13424 = xor i32 %13420, %13423
  %13425 = add i32 %13413, %13424
  store i32 %13425, i32* %25, align 4
  %13426 = load i32, i32* %22, align 4
  store i32 %13426, i32* %23, align 4
  %13427 = load i32, i32* %21, align 4
  store i32 %13427, i32* %22, align 4
  %13428 = load i32, i32* %20, align 4
  store i32 %13428, i32* %21, align 4
  %13429 = load i32, i32* %19, align 4
  %13430 = load i32, i32* %24, align 4
  %13431 = add i32 %13429, %13430
  store i32 %13431, i32* %20, align 4
  %13432 = load i32, i32* %18, align 4
  store i32 %13432, i32* %19, align 4
  %13433 = load i32, i32* %17, align 4
  store i32 %13433, i32* %18, align 4
  %13434 = load i32, i32* %16, align 4
  store i32 %13434, i32* %17, align 4
  %13435 = load i32, i32* %24, align 4
  %13436 = load i32, i32* %25, align 4
  %13437 = add i32 %13435, %13436
  store i32 %13437, i32* %16, align 4
  %13438 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13439 = load i32, i32* %13438, align 8
  %13440 = lshr i32 %13439, 17
  %13441 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13442 = load i32, i32* %13441, align 8
  %13443 = shl i32 %13442, 15
  %13444 = or i32 %13440, %13443
  %13445 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13446 = load i32, i32* %13445, align 8
  %13447 = lshr i32 %13446, 19
  %13448 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13449 = load i32, i32* %13448, align 8
  %13450 = shl i32 %13449, 13
  %13451 = or i32 %13447, %13450
  %13452 = xor i32 %13444, %13451
  %13453 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %13454 = load i32, i32* %13453, align 8
  %13455 = lshr i32 %13454, 10
  %13456 = xor i32 %13452, %13455
  %13457 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %13458 = load i32, i32* %13457, align 4
  %13459 = add i32 %13456, %13458
  %13460 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13461 = load i32, i32* %13460, align 4
  %13462 = lshr i32 %13461, 7
  %13463 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13464 = load i32, i32* %13463, align 4
  %13465 = shl i32 %13464, 25
  %13466 = or i32 %13462, %13465
  %13467 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13468 = load i32, i32* %13467, align 4
  %13469 = lshr i32 %13468, 18
  %13470 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13471 = load i32, i32* %13470, align 4
  %13472 = shl i32 %13471, 14
  %13473 = or i32 %13469, %13472
  %13474 = xor i32 %13466, %13473
  %13475 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13476 = load i32, i32* %13475, align 4
  %13477 = lshr i32 %13476, 3
  %13478 = xor i32 %13474, %13477
  %13479 = add i32 %13459, %13478
  %13480 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 16
  %13481 = load i32, i32* %13480, align 16
  %13482 = add i32 %13479, %13481
  %13483 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  store i32 %13482, i32* %13483, align 16
  %13484 = load i32, i32* %23, align 4
  %13485 = load i32, i32* %20, align 4
  %13486 = lshr i32 %13485, 6
  %13487 = load i32, i32* %20, align 4
  %13488 = shl i32 %13487, 26
  %13489 = or i32 %13486, %13488
  %13490 = load i32, i32* %20, align 4
  %13491 = lshr i32 %13490, 11
  %13492 = load i32, i32* %20, align 4
  %13493 = shl i32 %13492, 21
  %13494 = or i32 %13491, %13493
  %13495 = xor i32 %13489, %13494
  %13496 = load i32, i32* %20, align 4
  %13497 = lshr i32 %13496, 25
  %13498 = load i32, i32* %20, align 4
  %13499 = shl i32 %13498, 7
  %13500 = or i32 %13497, %13499
  %13501 = xor i32 %13495, %13500
  %13502 = add i32 %13484, %13501
  %13503 = load i32, i32* %20, align 4
  %13504 = load i32, i32* %21, align 4
  %13505 = and i32 %13503, %13504
  %13506 = load i32, i32* %20, align 4
  %13507 = xor i32 %13506, -1
  %13508 = load i32, i32* %22, align 4
  %13509 = and i32 %13507, %13508
  %13510 = xor i32 %13505, %13509
  %13511 = add i32 %13502, %13510
  %13512 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 32), align 16
  %13513 = add i32 %13511, %13512
  %13514 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13515 = load i32, i32* %13514, align 16
  %13516 = add i32 %13513, %13515
  store i32 %13516, i32* %24, align 4
  %13517 = load i32, i32* %16, align 4
  %13518 = lshr i32 %13517, 2
  %13519 = load i32, i32* %16, align 4
  %13520 = shl i32 %13519, 30
  %13521 = or i32 %13518, %13520
  %13522 = load i32, i32* %16, align 4
  %13523 = lshr i32 %13522, 13
  %13524 = load i32, i32* %16, align 4
  %13525 = shl i32 %13524, 19
  %13526 = or i32 %13523, %13525
  %13527 = xor i32 %13521, %13526
  %13528 = load i32, i32* %16, align 4
  %13529 = lshr i32 %13528, 22
  %13530 = load i32, i32* %16, align 4
  %13531 = shl i32 %13530, 10
  %13532 = or i32 %13529, %13531
  %13533 = xor i32 %13527, %13532
  %13534 = load i32, i32* %16, align 4
  %13535 = load i32, i32* %17, align 4
  %13536 = and i32 %13534, %13535
  %13537 = load i32, i32* %16, align 4
  %13538 = load i32, i32* %18, align 4
  %13539 = and i32 %13537, %13538
  %13540 = xor i32 %13536, %13539
  %13541 = load i32, i32* %17, align 4
  %13542 = load i32, i32* %18, align 4
  %13543 = and i32 %13541, %13542
  %13544 = xor i32 %13540, %13543
  %13545 = add i32 %13533, %13544
  store i32 %13545, i32* %25, align 4
  %13546 = load i32, i32* %22, align 4
  store i32 %13546, i32* %23, align 4
  %13547 = load i32, i32* %21, align 4
  store i32 %13547, i32* %22, align 4
  %13548 = load i32, i32* %20, align 4
  store i32 %13548, i32* %21, align 4
  %13549 = load i32, i32* %19, align 4
  %13550 = load i32, i32* %24, align 4
  %13551 = add i32 %13549, %13550
  store i32 %13551, i32* %20, align 4
  %13552 = load i32, i32* %18, align 4
  store i32 %13552, i32* %19, align 4
  %13553 = load i32, i32* %17, align 4
  store i32 %13553, i32* %18, align 4
  %13554 = load i32, i32* %16, align 4
  store i32 %13554, i32* %17, align 4
  %13555 = load i32, i32* %24, align 4
  %13556 = load i32, i32* %25, align 4
  %13557 = add i32 %13555, %13556
  store i32 %13557, i32* %16, align 4
  %13558 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13559 = load i32, i32* %13558, align 4
  %13560 = lshr i32 %13559, 17
  %13561 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13562 = load i32, i32* %13561, align 4
  %13563 = shl i32 %13562, 15
  %13564 = or i32 %13560, %13563
  %13565 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13566 = load i32, i32* %13565, align 4
  %13567 = lshr i32 %13566, 19
  %13568 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13569 = load i32, i32* %13568, align 4
  %13570 = shl i32 %13569, 13
  %13571 = or i32 %13567, %13570
  %13572 = xor i32 %13564, %13571
  %13573 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %13574 = load i32, i32* %13573, align 4
  %13575 = lshr i32 %13574, 10
  %13576 = xor i32 %13572, %13575
  %13577 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %13578 = load i32, i32* %13577, align 8
  %13579 = add i32 %13576, %13578
  %13580 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13581 = load i32, i32* %13580, align 8
  %13582 = lshr i32 %13581, 7
  %13583 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13584 = load i32, i32* %13583, align 8
  %13585 = shl i32 %13584, 25
  %13586 = or i32 %13582, %13585
  %13587 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13588 = load i32, i32* %13587, align 8
  %13589 = lshr i32 %13588, 18
  %13590 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13591 = load i32, i32* %13590, align 8
  %13592 = shl i32 %13591, 14
  %13593 = or i32 %13589, %13592
  %13594 = xor i32 %13586, %13593
  %13595 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13596 = load i32, i32* %13595, align 8
  %13597 = lshr i32 %13596, 3
  %13598 = xor i32 %13594, %13597
  %13599 = add i32 %13579, %13598
  %13600 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 17
  %13601 = load i32, i32* %13600, align 4
  %13602 = add i32 %13599, %13601
  %13603 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  store i32 %13602, i32* %13603, align 4
  %13604 = load i32, i32* %23, align 4
  %13605 = load i32, i32* %20, align 4
  %13606 = lshr i32 %13605, 6
  %13607 = load i32, i32* %20, align 4
  %13608 = shl i32 %13607, 26
  %13609 = or i32 %13606, %13608
  %13610 = load i32, i32* %20, align 4
  %13611 = lshr i32 %13610, 11
  %13612 = load i32, i32* %20, align 4
  %13613 = shl i32 %13612, 21
  %13614 = or i32 %13611, %13613
  %13615 = xor i32 %13609, %13614
  %13616 = load i32, i32* %20, align 4
  %13617 = lshr i32 %13616, 25
  %13618 = load i32, i32* %20, align 4
  %13619 = shl i32 %13618, 7
  %13620 = or i32 %13617, %13619
  %13621 = xor i32 %13615, %13620
  %13622 = add i32 %13604, %13621
  %13623 = load i32, i32* %20, align 4
  %13624 = load i32, i32* %21, align 4
  %13625 = and i32 %13623, %13624
  %13626 = load i32, i32* %20, align 4
  %13627 = xor i32 %13626, -1
  %13628 = load i32, i32* %22, align 4
  %13629 = and i32 %13627, %13628
  %13630 = xor i32 %13625, %13629
  %13631 = add i32 %13622, %13630
  %13632 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 33), align 4
  %13633 = add i32 %13631, %13632
  %13634 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13635 = load i32, i32* %13634, align 4
  %13636 = add i32 %13633, %13635
  store i32 %13636, i32* %24, align 4
  %13637 = load i32, i32* %16, align 4
  %13638 = lshr i32 %13637, 2
  %13639 = load i32, i32* %16, align 4
  %13640 = shl i32 %13639, 30
  %13641 = or i32 %13638, %13640
  %13642 = load i32, i32* %16, align 4
  %13643 = lshr i32 %13642, 13
  %13644 = load i32, i32* %16, align 4
  %13645 = shl i32 %13644, 19
  %13646 = or i32 %13643, %13645
  %13647 = xor i32 %13641, %13646
  %13648 = load i32, i32* %16, align 4
  %13649 = lshr i32 %13648, 22
  %13650 = load i32, i32* %16, align 4
  %13651 = shl i32 %13650, 10
  %13652 = or i32 %13649, %13651
  %13653 = xor i32 %13647, %13652
  %13654 = load i32, i32* %16, align 4
  %13655 = load i32, i32* %17, align 4
  %13656 = and i32 %13654, %13655
  %13657 = load i32, i32* %16, align 4
  %13658 = load i32, i32* %18, align 4
  %13659 = and i32 %13657, %13658
  %13660 = xor i32 %13656, %13659
  %13661 = load i32, i32* %17, align 4
  %13662 = load i32, i32* %18, align 4
  %13663 = and i32 %13661, %13662
  %13664 = xor i32 %13660, %13663
  %13665 = add i32 %13653, %13664
  store i32 %13665, i32* %25, align 4
  %13666 = load i32, i32* %22, align 4
  store i32 %13666, i32* %23, align 4
  %13667 = load i32, i32* %21, align 4
  store i32 %13667, i32* %22, align 4
  %13668 = load i32, i32* %20, align 4
  store i32 %13668, i32* %21, align 4
  %13669 = load i32, i32* %19, align 4
  %13670 = load i32, i32* %24, align 4
  %13671 = add i32 %13669, %13670
  store i32 %13671, i32* %20, align 4
  %13672 = load i32, i32* %18, align 4
  store i32 %13672, i32* %19, align 4
  %13673 = load i32, i32* %17, align 4
  store i32 %13673, i32* %18, align 4
  %13674 = load i32, i32* %16, align 4
  store i32 %13674, i32* %17, align 4
  %13675 = load i32, i32* %24, align 4
  %13676 = load i32, i32* %25, align 4
  %13677 = add i32 %13675, %13676
  store i32 %13677, i32* %16, align 4
  %13678 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13679 = load i32, i32* %13678, align 16
  %13680 = lshr i32 %13679, 17
  %13681 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13682 = load i32, i32* %13681, align 16
  %13683 = shl i32 %13682, 15
  %13684 = or i32 %13680, %13683
  %13685 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13686 = load i32, i32* %13685, align 16
  %13687 = lshr i32 %13686, 19
  %13688 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13689 = load i32, i32* %13688, align 16
  %13690 = shl i32 %13689, 13
  %13691 = or i32 %13687, %13690
  %13692 = xor i32 %13684, %13691
  %13693 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %13694 = load i32, i32* %13693, align 16
  %13695 = lshr i32 %13694, 10
  %13696 = xor i32 %13692, %13695
  %13697 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %13698 = load i32, i32* %13697, align 4
  %13699 = add i32 %13696, %13698
  %13700 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13701 = load i32, i32* %13700, align 4
  %13702 = lshr i32 %13701, 7
  %13703 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13704 = load i32, i32* %13703, align 4
  %13705 = shl i32 %13704, 25
  %13706 = or i32 %13702, %13705
  %13707 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13708 = load i32, i32* %13707, align 4
  %13709 = lshr i32 %13708, 18
  %13710 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13711 = load i32, i32* %13710, align 4
  %13712 = shl i32 %13711, 14
  %13713 = or i32 %13709, %13712
  %13714 = xor i32 %13706, %13713
  %13715 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13716 = load i32, i32* %13715, align 4
  %13717 = lshr i32 %13716, 3
  %13718 = xor i32 %13714, %13717
  %13719 = add i32 %13699, %13718
  %13720 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 18
  %13721 = load i32, i32* %13720, align 8
  %13722 = add i32 %13719, %13721
  %13723 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  store i32 %13722, i32* %13723, align 8
  %13724 = load i32, i32* %23, align 4
  %13725 = load i32, i32* %20, align 4
  %13726 = lshr i32 %13725, 6
  %13727 = load i32, i32* %20, align 4
  %13728 = shl i32 %13727, 26
  %13729 = or i32 %13726, %13728
  %13730 = load i32, i32* %20, align 4
  %13731 = lshr i32 %13730, 11
  %13732 = load i32, i32* %20, align 4
  %13733 = shl i32 %13732, 21
  %13734 = or i32 %13731, %13733
  %13735 = xor i32 %13729, %13734
  %13736 = load i32, i32* %20, align 4
  %13737 = lshr i32 %13736, 25
  %13738 = load i32, i32* %20, align 4
  %13739 = shl i32 %13738, 7
  %13740 = or i32 %13737, %13739
  %13741 = xor i32 %13735, %13740
  %13742 = add i32 %13724, %13741
  %13743 = load i32, i32* %20, align 4
  %13744 = load i32, i32* %21, align 4
  %13745 = and i32 %13743, %13744
  %13746 = load i32, i32* %20, align 4
  %13747 = xor i32 %13746, -1
  %13748 = load i32, i32* %22, align 4
  %13749 = and i32 %13747, %13748
  %13750 = xor i32 %13745, %13749
  %13751 = add i32 %13742, %13750
  %13752 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 34), align 8
  %13753 = add i32 %13751, %13752
  %13754 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13755 = load i32, i32* %13754, align 8
  %13756 = add i32 %13753, %13755
  store i32 %13756, i32* %24, align 4
  %13757 = load i32, i32* %16, align 4
  %13758 = lshr i32 %13757, 2
  %13759 = load i32, i32* %16, align 4
  %13760 = shl i32 %13759, 30
  %13761 = or i32 %13758, %13760
  %13762 = load i32, i32* %16, align 4
  %13763 = lshr i32 %13762, 13
  %13764 = load i32, i32* %16, align 4
  %13765 = shl i32 %13764, 19
  %13766 = or i32 %13763, %13765
  %13767 = xor i32 %13761, %13766
  %13768 = load i32, i32* %16, align 4
  %13769 = lshr i32 %13768, 22
  %13770 = load i32, i32* %16, align 4
  %13771 = shl i32 %13770, 10
  %13772 = or i32 %13769, %13771
  %13773 = xor i32 %13767, %13772
  %13774 = load i32, i32* %16, align 4
  %13775 = load i32, i32* %17, align 4
  %13776 = and i32 %13774, %13775
  %13777 = load i32, i32* %16, align 4
  %13778 = load i32, i32* %18, align 4
  %13779 = and i32 %13777, %13778
  %13780 = xor i32 %13776, %13779
  %13781 = load i32, i32* %17, align 4
  %13782 = load i32, i32* %18, align 4
  %13783 = and i32 %13781, %13782
  %13784 = xor i32 %13780, %13783
  %13785 = add i32 %13773, %13784
  store i32 %13785, i32* %25, align 4
  %13786 = load i32, i32* %22, align 4
  store i32 %13786, i32* %23, align 4
  %13787 = load i32, i32* %21, align 4
  store i32 %13787, i32* %22, align 4
  %13788 = load i32, i32* %20, align 4
  store i32 %13788, i32* %21, align 4
  %13789 = load i32, i32* %19, align 4
  %13790 = load i32, i32* %24, align 4
  %13791 = add i32 %13789, %13790
  store i32 %13791, i32* %20, align 4
  %13792 = load i32, i32* %18, align 4
  store i32 %13792, i32* %19, align 4
  %13793 = load i32, i32* %17, align 4
  store i32 %13793, i32* %18, align 4
  %13794 = load i32, i32* %16, align 4
  store i32 %13794, i32* %17, align 4
  %13795 = load i32, i32* %24, align 4
  %13796 = load i32, i32* %25, align 4
  %13797 = add i32 %13795, %13796
  store i32 %13797, i32* %16, align 4
  %13798 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13799 = load i32, i32* %13798, align 4
  %13800 = lshr i32 %13799, 17
  %13801 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13802 = load i32, i32* %13801, align 4
  %13803 = shl i32 %13802, 15
  %13804 = or i32 %13800, %13803
  %13805 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13806 = load i32, i32* %13805, align 4
  %13807 = lshr i32 %13806, 19
  %13808 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13809 = load i32, i32* %13808, align 4
  %13810 = shl i32 %13809, 13
  %13811 = or i32 %13807, %13810
  %13812 = xor i32 %13804, %13811
  %13813 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %13814 = load i32, i32* %13813, align 4
  %13815 = lshr i32 %13814, 10
  %13816 = xor i32 %13812, %13815
  %13817 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %13818 = load i32, i32* %13817, align 16
  %13819 = add i32 %13816, %13818
  %13820 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13821 = load i32, i32* %13820, align 16
  %13822 = lshr i32 %13821, 7
  %13823 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13824 = load i32, i32* %13823, align 16
  %13825 = shl i32 %13824, 25
  %13826 = or i32 %13822, %13825
  %13827 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13828 = load i32, i32* %13827, align 16
  %13829 = lshr i32 %13828, 18
  %13830 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13831 = load i32, i32* %13830, align 16
  %13832 = shl i32 %13831, 14
  %13833 = or i32 %13829, %13832
  %13834 = xor i32 %13826, %13833
  %13835 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13836 = load i32, i32* %13835, align 16
  %13837 = lshr i32 %13836, 3
  %13838 = xor i32 %13834, %13837
  %13839 = add i32 %13819, %13838
  %13840 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 19
  %13841 = load i32, i32* %13840, align 4
  %13842 = add i32 %13839, %13841
  %13843 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  store i32 %13842, i32* %13843, align 4
  %13844 = load i32, i32* %23, align 4
  %13845 = load i32, i32* %20, align 4
  %13846 = lshr i32 %13845, 6
  %13847 = load i32, i32* %20, align 4
  %13848 = shl i32 %13847, 26
  %13849 = or i32 %13846, %13848
  %13850 = load i32, i32* %20, align 4
  %13851 = lshr i32 %13850, 11
  %13852 = load i32, i32* %20, align 4
  %13853 = shl i32 %13852, 21
  %13854 = or i32 %13851, %13853
  %13855 = xor i32 %13849, %13854
  %13856 = load i32, i32* %20, align 4
  %13857 = lshr i32 %13856, 25
  %13858 = load i32, i32* %20, align 4
  %13859 = shl i32 %13858, 7
  %13860 = or i32 %13857, %13859
  %13861 = xor i32 %13855, %13860
  %13862 = add i32 %13844, %13861
  %13863 = load i32, i32* %20, align 4
  %13864 = load i32, i32* %21, align 4
  %13865 = and i32 %13863, %13864
  %13866 = load i32, i32* %20, align 4
  %13867 = xor i32 %13866, -1
  %13868 = load i32, i32* %22, align 4
  %13869 = and i32 %13867, %13868
  %13870 = xor i32 %13865, %13869
  %13871 = add i32 %13862, %13870
  %13872 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 35), align 4
  %13873 = add i32 %13871, %13872
  %13874 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %13875 = load i32, i32* %13874, align 4
  %13876 = add i32 %13873, %13875
  store i32 %13876, i32* %24, align 4
  %13877 = load i32, i32* %16, align 4
  %13878 = lshr i32 %13877, 2
  %13879 = load i32, i32* %16, align 4
  %13880 = shl i32 %13879, 30
  %13881 = or i32 %13878, %13880
  %13882 = load i32, i32* %16, align 4
  %13883 = lshr i32 %13882, 13
  %13884 = load i32, i32* %16, align 4
  %13885 = shl i32 %13884, 19
  %13886 = or i32 %13883, %13885
  %13887 = xor i32 %13881, %13886
  %13888 = load i32, i32* %16, align 4
  %13889 = lshr i32 %13888, 22
  %13890 = load i32, i32* %16, align 4
  %13891 = shl i32 %13890, 10
  %13892 = or i32 %13889, %13891
  %13893 = xor i32 %13887, %13892
  %13894 = load i32, i32* %16, align 4
  %13895 = load i32, i32* %17, align 4
  %13896 = and i32 %13894, %13895
  %13897 = load i32, i32* %16, align 4
  %13898 = load i32, i32* %18, align 4
  %13899 = and i32 %13897, %13898
  %13900 = xor i32 %13896, %13899
  %13901 = load i32, i32* %17, align 4
  %13902 = load i32, i32* %18, align 4
  %13903 = and i32 %13901, %13902
  %13904 = xor i32 %13900, %13903
  %13905 = add i32 %13893, %13904
  store i32 %13905, i32* %25, align 4
  %13906 = load i32, i32* %22, align 4
  store i32 %13906, i32* %23, align 4
  %13907 = load i32, i32* %21, align 4
  store i32 %13907, i32* %22, align 4
  %13908 = load i32, i32* %20, align 4
  store i32 %13908, i32* %21, align 4
  %13909 = load i32, i32* %19, align 4
  %13910 = load i32, i32* %24, align 4
  %13911 = add i32 %13909, %13910
  store i32 %13911, i32* %20, align 4
  %13912 = load i32, i32* %18, align 4
  store i32 %13912, i32* %19, align 4
  %13913 = load i32, i32* %17, align 4
  store i32 %13913, i32* %18, align 4
  %13914 = load i32, i32* %16, align 4
  store i32 %13914, i32* %17, align 4
  %13915 = load i32, i32* %24, align 4
  %13916 = load i32, i32* %25, align 4
  %13917 = add i32 %13915, %13916
  store i32 %13917, i32* %16, align 4
  %13918 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13919 = load i32, i32* %13918, align 8
  %13920 = lshr i32 %13919, 17
  %13921 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13922 = load i32, i32* %13921, align 8
  %13923 = shl i32 %13922, 15
  %13924 = or i32 %13920, %13923
  %13925 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13926 = load i32, i32* %13925, align 8
  %13927 = lshr i32 %13926, 19
  %13928 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13929 = load i32, i32* %13928, align 8
  %13930 = shl i32 %13929, 13
  %13931 = or i32 %13927, %13930
  %13932 = xor i32 %13924, %13931
  %13933 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %13934 = load i32, i32* %13933, align 8
  %13935 = lshr i32 %13934, 10
  %13936 = xor i32 %13932, %13935
  %13937 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %13938 = load i32, i32* %13937, align 4
  %13939 = add i32 %13936, %13938
  %13940 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %13941 = load i32, i32* %13940, align 4
  %13942 = lshr i32 %13941, 7
  %13943 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %13944 = load i32, i32* %13943, align 4
  %13945 = shl i32 %13944, 25
  %13946 = or i32 %13942, %13945
  %13947 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %13948 = load i32, i32* %13947, align 4
  %13949 = lshr i32 %13948, 18
  %13950 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %13951 = load i32, i32* %13950, align 4
  %13952 = shl i32 %13951, 14
  %13953 = or i32 %13949, %13952
  %13954 = xor i32 %13946, %13953
  %13955 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %13956 = load i32, i32* %13955, align 4
  %13957 = lshr i32 %13956, 3
  %13958 = xor i32 %13954, %13957
  %13959 = add i32 %13939, %13958
  %13960 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 20
  %13961 = load i32, i32* %13960, align 16
  %13962 = add i32 %13959, %13961
  %13963 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  store i32 %13962, i32* %13963, align 16
  %13964 = load i32, i32* %23, align 4
  %13965 = load i32, i32* %20, align 4
  %13966 = lshr i32 %13965, 6
  %13967 = load i32, i32* %20, align 4
  %13968 = shl i32 %13967, 26
  %13969 = or i32 %13966, %13968
  %13970 = load i32, i32* %20, align 4
  %13971 = lshr i32 %13970, 11
  %13972 = load i32, i32* %20, align 4
  %13973 = shl i32 %13972, 21
  %13974 = or i32 %13971, %13973
  %13975 = xor i32 %13969, %13974
  %13976 = load i32, i32* %20, align 4
  %13977 = lshr i32 %13976, 25
  %13978 = load i32, i32* %20, align 4
  %13979 = shl i32 %13978, 7
  %13980 = or i32 %13977, %13979
  %13981 = xor i32 %13975, %13980
  %13982 = add i32 %13964, %13981
  %13983 = load i32, i32* %20, align 4
  %13984 = load i32, i32* %21, align 4
  %13985 = and i32 %13983, %13984
  %13986 = load i32, i32* %20, align 4
  %13987 = xor i32 %13986, -1
  %13988 = load i32, i32* %22, align 4
  %13989 = and i32 %13987, %13988
  %13990 = xor i32 %13985, %13989
  %13991 = add i32 %13982, %13990
  %13992 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 36), align 16
  %13993 = add i32 %13991, %13992
  %13994 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %13995 = load i32, i32* %13994, align 16
  %13996 = add i32 %13993, %13995
  store i32 %13996, i32* %24, align 4
  %13997 = load i32, i32* %16, align 4
  %13998 = lshr i32 %13997, 2
  %13999 = load i32, i32* %16, align 4
  %14000 = shl i32 %13999, 30
  %14001 = or i32 %13998, %14000
  %14002 = load i32, i32* %16, align 4
  %14003 = lshr i32 %14002, 13
  %14004 = load i32, i32* %16, align 4
  %14005 = shl i32 %14004, 19
  %14006 = or i32 %14003, %14005
  %14007 = xor i32 %14001, %14006
  %14008 = load i32, i32* %16, align 4
  %14009 = lshr i32 %14008, 22
  %14010 = load i32, i32* %16, align 4
  %14011 = shl i32 %14010, 10
  %14012 = or i32 %14009, %14011
  %14013 = xor i32 %14007, %14012
  %14014 = load i32, i32* %16, align 4
  %14015 = load i32, i32* %17, align 4
  %14016 = and i32 %14014, %14015
  %14017 = load i32, i32* %16, align 4
  %14018 = load i32, i32* %18, align 4
  %14019 = and i32 %14017, %14018
  %14020 = xor i32 %14016, %14019
  %14021 = load i32, i32* %17, align 4
  %14022 = load i32, i32* %18, align 4
  %14023 = and i32 %14021, %14022
  %14024 = xor i32 %14020, %14023
  %14025 = add i32 %14013, %14024
  store i32 %14025, i32* %25, align 4
  %14026 = load i32, i32* %22, align 4
  store i32 %14026, i32* %23, align 4
  %14027 = load i32, i32* %21, align 4
  store i32 %14027, i32* %22, align 4
  %14028 = load i32, i32* %20, align 4
  store i32 %14028, i32* %21, align 4
  %14029 = load i32, i32* %19, align 4
  %14030 = load i32, i32* %24, align 4
  %14031 = add i32 %14029, %14030
  store i32 %14031, i32* %20, align 4
  %14032 = load i32, i32* %18, align 4
  store i32 %14032, i32* %19, align 4
  %14033 = load i32, i32* %17, align 4
  store i32 %14033, i32* %18, align 4
  %14034 = load i32, i32* %16, align 4
  store i32 %14034, i32* %17, align 4
  %14035 = load i32, i32* %24, align 4
  %14036 = load i32, i32* %25, align 4
  %14037 = add i32 %14035, %14036
  store i32 %14037, i32* %16, align 4
  %14038 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14039 = load i32, i32* %14038, align 4
  %14040 = lshr i32 %14039, 17
  %14041 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14042 = load i32, i32* %14041, align 4
  %14043 = shl i32 %14042, 15
  %14044 = or i32 %14040, %14043
  %14045 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14046 = load i32, i32* %14045, align 4
  %14047 = lshr i32 %14046, 19
  %14048 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14049 = load i32, i32* %14048, align 4
  %14050 = shl i32 %14049, 13
  %14051 = or i32 %14047, %14050
  %14052 = xor i32 %14044, %14051
  %14053 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14054 = load i32, i32* %14053, align 4
  %14055 = lshr i32 %14054, 10
  %14056 = xor i32 %14052, %14055
  %14057 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %14058 = load i32, i32* %14057, align 8
  %14059 = add i32 %14056, %14058
  %14060 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14061 = load i32, i32* %14060, align 8
  %14062 = lshr i32 %14061, 7
  %14063 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14064 = load i32, i32* %14063, align 8
  %14065 = shl i32 %14064, 25
  %14066 = or i32 %14062, %14065
  %14067 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14068 = load i32, i32* %14067, align 8
  %14069 = lshr i32 %14068, 18
  %14070 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14071 = load i32, i32* %14070, align 8
  %14072 = shl i32 %14071, 14
  %14073 = or i32 %14069, %14072
  %14074 = xor i32 %14066, %14073
  %14075 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14076 = load i32, i32* %14075, align 8
  %14077 = lshr i32 %14076, 3
  %14078 = xor i32 %14074, %14077
  %14079 = add i32 %14059, %14078
  %14080 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 21
  %14081 = load i32, i32* %14080, align 4
  %14082 = add i32 %14079, %14081
  %14083 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  store i32 %14082, i32* %14083, align 4
  %14084 = load i32, i32* %23, align 4
  %14085 = load i32, i32* %20, align 4
  %14086 = lshr i32 %14085, 6
  %14087 = load i32, i32* %20, align 4
  %14088 = shl i32 %14087, 26
  %14089 = or i32 %14086, %14088
  %14090 = load i32, i32* %20, align 4
  %14091 = lshr i32 %14090, 11
  %14092 = load i32, i32* %20, align 4
  %14093 = shl i32 %14092, 21
  %14094 = or i32 %14091, %14093
  %14095 = xor i32 %14089, %14094
  %14096 = load i32, i32* %20, align 4
  %14097 = lshr i32 %14096, 25
  %14098 = load i32, i32* %20, align 4
  %14099 = shl i32 %14098, 7
  %14100 = or i32 %14097, %14099
  %14101 = xor i32 %14095, %14100
  %14102 = add i32 %14084, %14101
  %14103 = load i32, i32* %20, align 4
  %14104 = load i32, i32* %21, align 4
  %14105 = and i32 %14103, %14104
  %14106 = load i32, i32* %20, align 4
  %14107 = xor i32 %14106, -1
  %14108 = load i32, i32* %22, align 4
  %14109 = and i32 %14107, %14108
  %14110 = xor i32 %14105, %14109
  %14111 = add i32 %14102, %14110
  %14112 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 37), align 4
  %14113 = add i32 %14111, %14112
  %14114 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14115 = load i32, i32* %14114, align 4
  %14116 = add i32 %14113, %14115
  store i32 %14116, i32* %24, align 4
  %14117 = load i32, i32* %16, align 4
  %14118 = lshr i32 %14117, 2
  %14119 = load i32, i32* %16, align 4
  %14120 = shl i32 %14119, 30
  %14121 = or i32 %14118, %14120
  %14122 = load i32, i32* %16, align 4
  %14123 = lshr i32 %14122, 13
  %14124 = load i32, i32* %16, align 4
  %14125 = shl i32 %14124, 19
  %14126 = or i32 %14123, %14125
  %14127 = xor i32 %14121, %14126
  %14128 = load i32, i32* %16, align 4
  %14129 = lshr i32 %14128, 22
  %14130 = load i32, i32* %16, align 4
  %14131 = shl i32 %14130, 10
  %14132 = or i32 %14129, %14131
  %14133 = xor i32 %14127, %14132
  %14134 = load i32, i32* %16, align 4
  %14135 = load i32, i32* %17, align 4
  %14136 = and i32 %14134, %14135
  %14137 = load i32, i32* %16, align 4
  %14138 = load i32, i32* %18, align 4
  %14139 = and i32 %14137, %14138
  %14140 = xor i32 %14136, %14139
  %14141 = load i32, i32* %17, align 4
  %14142 = load i32, i32* %18, align 4
  %14143 = and i32 %14141, %14142
  %14144 = xor i32 %14140, %14143
  %14145 = add i32 %14133, %14144
  store i32 %14145, i32* %25, align 4
  %14146 = load i32, i32* %22, align 4
  store i32 %14146, i32* %23, align 4
  %14147 = load i32, i32* %21, align 4
  store i32 %14147, i32* %22, align 4
  %14148 = load i32, i32* %20, align 4
  store i32 %14148, i32* %21, align 4
  %14149 = load i32, i32* %19, align 4
  %14150 = load i32, i32* %24, align 4
  %14151 = add i32 %14149, %14150
  store i32 %14151, i32* %20, align 4
  %14152 = load i32, i32* %18, align 4
  store i32 %14152, i32* %19, align 4
  %14153 = load i32, i32* %17, align 4
  store i32 %14153, i32* %18, align 4
  %14154 = load i32, i32* %16, align 4
  store i32 %14154, i32* %17, align 4
  %14155 = load i32, i32* %24, align 4
  %14156 = load i32, i32* %25, align 4
  %14157 = add i32 %14155, %14156
  store i32 %14157, i32* %16, align 4
  %14158 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14159 = load i32, i32* %14158, align 16
  %14160 = lshr i32 %14159, 17
  %14161 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14162 = load i32, i32* %14161, align 16
  %14163 = shl i32 %14162, 15
  %14164 = or i32 %14160, %14163
  %14165 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14166 = load i32, i32* %14165, align 16
  %14167 = lshr i32 %14166, 19
  %14168 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14169 = load i32, i32* %14168, align 16
  %14170 = shl i32 %14169, 13
  %14171 = or i32 %14167, %14170
  %14172 = xor i32 %14164, %14171
  %14173 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14174 = load i32, i32* %14173, align 16
  %14175 = lshr i32 %14174, 10
  %14176 = xor i32 %14172, %14175
  %14177 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %14178 = load i32, i32* %14177, align 4
  %14179 = add i32 %14176, %14178
  %14180 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14181 = load i32, i32* %14180, align 4
  %14182 = lshr i32 %14181, 7
  %14183 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14184 = load i32, i32* %14183, align 4
  %14185 = shl i32 %14184, 25
  %14186 = or i32 %14182, %14185
  %14187 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14188 = load i32, i32* %14187, align 4
  %14189 = lshr i32 %14188, 18
  %14190 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14191 = load i32, i32* %14190, align 4
  %14192 = shl i32 %14191, 14
  %14193 = or i32 %14189, %14192
  %14194 = xor i32 %14186, %14193
  %14195 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14196 = load i32, i32* %14195, align 4
  %14197 = lshr i32 %14196, 3
  %14198 = xor i32 %14194, %14197
  %14199 = add i32 %14179, %14198
  %14200 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 22
  %14201 = load i32, i32* %14200, align 8
  %14202 = add i32 %14199, %14201
  %14203 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  store i32 %14202, i32* %14203, align 8
  %14204 = load i32, i32* %23, align 4
  %14205 = load i32, i32* %20, align 4
  %14206 = lshr i32 %14205, 6
  %14207 = load i32, i32* %20, align 4
  %14208 = shl i32 %14207, 26
  %14209 = or i32 %14206, %14208
  %14210 = load i32, i32* %20, align 4
  %14211 = lshr i32 %14210, 11
  %14212 = load i32, i32* %20, align 4
  %14213 = shl i32 %14212, 21
  %14214 = or i32 %14211, %14213
  %14215 = xor i32 %14209, %14214
  %14216 = load i32, i32* %20, align 4
  %14217 = lshr i32 %14216, 25
  %14218 = load i32, i32* %20, align 4
  %14219 = shl i32 %14218, 7
  %14220 = or i32 %14217, %14219
  %14221 = xor i32 %14215, %14220
  %14222 = add i32 %14204, %14221
  %14223 = load i32, i32* %20, align 4
  %14224 = load i32, i32* %21, align 4
  %14225 = and i32 %14223, %14224
  %14226 = load i32, i32* %20, align 4
  %14227 = xor i32 %14226, -1
  %14228 = load i32, i32* %22, align 4
  %14229 = and i32 %14227, %14228
  %14230 = xor i32 %14225, %14229
  %14231 = add i32 %14222, %14230
  %14232 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 38), align 8
  %14233 = add i32 %14231, %14232
  %14234 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14235 = load i32, i32* %14234, align 8
  %14236 = add i32 %14233, %14235
  store i32 %14236, i32* %24, align 4
  %14237 = load i32, i32* %16, align 4
  %14238 = lshr i32 %14237, 2
  %14239 = load i32, i32* %16, align 4
  %14240 = shl i32 %14239, 30
  %14241 = or i32 %14238, %14240
  %14242 = load i32, i32* %16, align 4
  %14243 = lshr i32 %14242, 13
  %14244 = load i32, i32* %16, align 4
  %14245 = shl i32 %14244, 19
  %14246 = or i32 %14243, %14245
  %14247 = xor i32 %14241, %14246
  %14248 = load i32, i32* %16, align 4
  %14249 = lshr i32 %14248, 22
  %14250 = load i32, i32* %16, align 4
  %14251 = shl i32 %14250, 10
  %14252 = or i32 %14249, %14251
  %14253 = xor i32 %14247, %14252
  %14254 = load i32, i32* %16, align 4
  %14255 = load i32, i32* %17, align 4
  %14256 = and i32 %14254, %14255
  %14257 = load i32, i32* %16, align 4
  %14258 = load i32, i32* %18, align 4
  %14259 = and i32 %14257, %14258
  %14260 = xor i32 %14256, %14259
  %14261 = load i32, i32* %17, align 4
  %14262 = load i32, i32* %18, align 4
  %14263 = and i32 %14261, %14262
  %14264 = xor i32 %14260, %14263
  %14265 = add i32 %14253, %14264
  store i32 %14265, i32* %25, align 4
  %14266 = load i32, i32* %22, align 4
  store i32 %14266, i32* %23, align 4
  %14267 = load i32, i32* %21, align 4
  store i32 %14267, i32* %22, align 4
  %14268 = load i32, i32* %20, align 4
  store i32 %14268, i32* %21, align 4
  %14269 = load i32, i32* %19, align 4
  %14270 = load i32, i32* %24, align 4
  %14271 = add i32 %14269, %14270
  store i32 %14271, i32* %20, align 4
  %14272 = load i32, i32* %18, align 4
  store i32 %14272, i32* %19, align 4
  %14273 = load i32, i32* %17, align 4
  store i32 %14273, i32* %18, align 4
  %14274 = load i32, i32* %16, align 4
  store i32 %14274, i32* %17, align 4
  %14275 = load i32, i32* %24, align 4
  %14276 = load i32, i32* %25, align 4
  %14277 = add i32 %14275, %14276
  store i32 %14277, i32* %16, align 4
  %14278 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14279 = load i32, i32* %14278, align 4
  %14280 = lshr i32 %14279, 17
  %14281 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14282 = load i32, i32* %14281, align 4
  %14283 = shl i32 %14282, 15
  %14284 = or i32 %14280, %14283
  %14285 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14286 = load i32, i32* %14285, align 4
  %14287 = lshr i32 %14286, 19
  %14288 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14289 = load i32, i32* %14288, align 4
  %14290 = shl i32 %14289, 13
  %14291 = or i32 %14287, %14290
  %14292 = xor i32 %14284, %14291
  %14293 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14294 = load i32, i32* %14293, align 4
  %14295 = lshr i32 %14294, 10
  %14296 = xor i32 %14292, %14295
  %14297 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %14298 = load i32, i32* %14297, align 16
  %14299 = add i32 %14296, %14298
  %14300 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14301 = load i32, i32* %14300, align 16
  %14302 = lshr i32 %14301, 7
  %14303 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14304 = load i32, i32* %14303, align 16
  %14305 = shl i32 %14304, 25
  %14306 = or i32 %14302, %14305
  %14307 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14308 = load i32, i32* %14307, align 16
  %14309 = lshr i32 %14308, 18
  %14310 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14311 = load i32, i32* %14310, align 16
  %14312 = shl i32 %14311, 14
  %14313 = or i32 %14309, %14312
  %14314 = xor i32 %14306, %14313
  %14315 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14316 = load i32, i32* %14315, align 16
  %14317 = lshr i32 %14316, 3
  %14318 = xor i32 %14314, %14317
  %14319 = add i32 %14299, %14318
  %14320 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 23
  %14321 = load i32, i32* %14320, align 4
  %14322 = add i32 %14319, %14321
  %14323 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  store i32 %14322, i32* %14323, align 4
  %14324 = load i32, i32* %23, align 4
  %14325 = load i32, i32* %20, align 4
  %14326 = lshr i32 %14325, 6
  %14327 = load i32, i32* %20, align 4
  %14328 = shl i32 %14327, 26
  %14329 = or i32 %14326, %14328
  %14330 = load i32, i32* %20, align 4
  %14331 = lshr i32 %14330, 11
  %14332 = load i32, i32* %20, align 4
  %14333 = shl i32 %14332, 21
  %14334 = or i32 %14331, %14333
  %14335 = xor i32 %14329, %14334
  %14336 = load i32, i32* %20, align 4
  %14337 = lshr i32 %14336, 25
  %14338 = load i32, i32* %20, align 4
  %14339 = shl i32 %14338, 7
  %14340 = or i32 %14337, %14339
  %14341 = xor i32 %14335, %14340
  %14342 = add i32 %14324, %14341
  %14343 = load i32, i32* %20, align 4
  %14344 = load i32, i32* %21, align 4
  %14345 = and i32 %14343, %14344
  %14346 = load i32, i32* %20, align 4
  %14347 = xor i32 %14346, -1
  %14348 = load i32, i32* %22, align 4
  %14349 = and i32 %14347, %14348
  %14350 = xor i32 %14345, %14349
  %14351 = add i32 %14342, %14350
  %14352 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 39), align 4
  %14353 = add i32 %14351, %14352
  %14354 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14355 = load i32, i32* %14354, align 4
  %14356 = add i32 %14353, %14355
  store i32 %14356, i32* %24, align 4
  %14357 = load i32, i32* %16, align 4
  %14358 = lshr i32 %14357, 2
  %14359 = load i32, i32* %16, align 4
  %14360 = shl i32 %14359, 30
  %14361 = or i32 %14358, %14360
  %14362 = load i32, i32* %16, align 4
  %14363 = lshr i32 %14362, 13
  %14364 = load i32, i32* %16, align 4
  %14365 = shl i32 %14364, 19
  %14366 = or i32 %14363, %14365
  %14367 = xor i32 %14361, %14366
  %14368 = load i32, i32* %16, align 4
  %14369 = lshr i32 %14368, 22
  %14370 = load i32, i32* %16, align 4
  %14371 = shl i32 %14370, 10
  %14372 = or i32 %14369, %14371
  %14373 = xor i32 %14367, %14372
  %14374 = load i32, i32* %16, align 4
  %14375 = load i32, i32* %17, align 4
  %14376 = and i32 %14374, %14375
  %14377 = load i32, i32* %16, align 4
  %14378 = load i32, i32* %18, align 4
  %14379 = and i32 %14377, %14378
  %14380 = xor i32 %14376, %14379
  %14381 = load i32, i32* %17, align 4
  %14382 = load i32, i32* %18, align 4
  %14383 = and i32 %14381, %14382
  %14384 = xor i32 %14380, %14383
  %14385 = add i32 %14373, %14384
  store i32 %14385, i32* %25, align 4
  %14386 = load i32, i32* %22, align 4
  store i32 %14386, i32* %23, align 4
  %14387 = load i32, i32* %21, align 4
  store i32 %14387, i32* %22, align 4
  %14388 = load i32, i32* %20, align 4
  store i32 %14388, i32* %21, align 4
  %14389 = load i32, i32* %19, align 4
  %14390 = load i32, i32* %24, align 4
  %14391 = add i32 %14389, %14390
  store i32 %14391, i32* %20, align 4
  %14392 = load i32, i32* %18, align 4
  store i32 %14392, i32* %19, align 4
  %14393 = load i32, i32* %17, align 4
  store i32 %14393, i32* %18, align 4
  %14394 = load i32, i32* %16, align 4
  store i32 %14394, i32* %17, align 4
  %14395 = load i32, i32* %24, align 4
  %14396 = load i32, i32* %25, align 4
  %14397 = add i32 %14395, %14396
  store i32 %14397, i32* %16, align 4
  %14398 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14399 = load i32, i32* %14398, align 8
  %14400 = lshr i32 %14399, 17
  %14401 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14402 = load i32, i32* %14401, align 8
  %14403 = shl i32 %14402, 15
  %14404 = or i32 %14400, %14403
  %14405 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14406 = load i32, i32* %14405, align 8
  %14407 = lshr i32 %14406, 19
  %14408 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14409 = load i32, i32* %14408, align 8
  %14410 = shl i32 %14409, 13
  %14411 = or i32 %14407, %14410
  %14412 = xor i32 %14404, %14411
  %14413 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %14414 = load i32, i32* %14413, align 8
  %14415 = lshr i32 %14414, 10
  %14416 = xor i32 %14412, %14415
  %14417 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %14418 = load i32, i32* %14417, align 4
  %14419 = add i32 %14416, %14418
  %14420 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14421 = load i32, i32* %14420, align 4
  %14422 = lshr i32 %14421, 7
  %14423 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14424 = load i32, i32* %14423, align 4
  %14425 = shl i32 %14424, 25
  %14426 = or i32 %14422, %14425
  %14427 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14428 = load i32, i32* %14427, align 4
  %14429 = lshr i32 %14428, 18
  %14430 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14431 = load i32, i32* %14430, align 4
  %14432 = shl i32 %14431, 14
  %14433 = or i32 %14429, %14432
  %14434 = xor i32 %14426, %14433
  %14435 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14436 = load i32, i32* %14435, align 4
  %14437 = lshr i32 %14436, 3
  %14438 = xor i32 %14434, %14437
  %14439 = add i32 %14419, %14438
  %14440 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 24
  %14441 = load i32, i32* %14440, align 16
  %14442 = add i32 %14439, %14441
  %14443 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  store i32 %14442, i32* %14443, align 16
  %14444 = load i32, i32* %23, align 4
  %14445 = load i32, i32* %20, align 4
  %14446 = lshr i32 %14445, 6
  %14447 = load i32, i32* %20, align 4
  %14448 = shl i32 %14447, 26
  %14449 = or i32 %14446, %14448
  %14450 = load i32, i32* %20, align 4
  %14451 = lshr i32 %14450, 11
  %14452 = load i32, i32* %20, align 4
  %14453 = shl i32 %14452, 21
  %14454 = or i32 %14451, %14453
  %14455 = xor i32 %14449, %14454
  %14456 = load i32, i32* %20, align 4
  %14457 = lshr i32 %14456, 25
  %14458 = load i32, i32* %20, align 4
  %14459 = shl i32 %14458, 7
  %14460 = or i32 %14457, %14459
  %14461 = xor i32 %14455, %14460
  %14462 = add i32 %14444, %14461
  %14463 = load i32, i32* %20, align 4
  %14464 = load i32, i32* %21, align 4
  %14465 = and i32 %14463, %14464
  %14466 = load i32, i32* %20, align 4
  %14467 = xor i32 %14466, -1
  %14468 = load i32, i32* %22, align 4
  %14469 = and i32 %14467, %14468
  %14470 = xor i32 %14465, %14469
  %14471 = add i32 %14462, %14470
  %14472 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 40), align 16
  %14473 = add i32 %14471, %14472
  %14474 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14475 = load i32, i32* %14474, align 16
  %14476 = add i32 %14473, %14475
  store i32 %14476, i32* %24, align 4
  %14477 = load i32, i32* %16, align 4
  %14478 = lshr i32 %14477, 2
  %14479 = load i32, i32* %16, align 4
  %14480 = shl i32 %14479, 30
  %14481 = or i32 %14478, %14480
  %14482 = load i32, i32* %16, align 4
  %14483 = lshr i32 %14482, 13
  %14484 = load i32, i32* %16, align 4
  %14485 = shl i32 %14484, 19
  %14486 = or i32 %14483, %14485
  %14487 = xor i32 %14481, %14486
  %14488 = load i32, i32* %16, align 4
  %14489 = lshr i32 %14488, 22
  %14490 = load i32, i32* %16, align 4
  %14491 = shl i32 %14490, 10
  %14492 = or i32 %14489, %14491
  %14493 = xor i32 %14487, %14492
  %14494 = load i32, i32* %16, align 4
  %14495 = load i32, i32* %17, align 4
  %14496 = and i32 %14494, %14495
  %14497 = load i32, i32* %16, align 4
  %14498 = load i32, i32* %18, align 4
  %14499 = and i32 %14497, %14498
  %14500 = xor i32 %14496, %14499
  %14501 = load i32, i32* %17, align 4
  %14502 = load i32, i32* %18, align 4
  %14503 = and i32 %14501, %14502
  %14504 = xor i32 %14500, %14503
  %14505 = add i32 %14493, %14504
  store i32 %14505, i32* %25, align 4
  %14506 = load i32, i32* %22, align 4
  store i32 %14506, i32* %23, align 4
  %14507 = load i32, i32* %21, align 4
  store i32 %14507, i32* %22, align 4
  %14508 = load i32, i32* %20, align 4
  store i32 %14508, i32* %21, align 4
  %14509 = load i32, i32* %19, align 4
  %14510 = load i32, i32* %24, align 4
  %14511 = add i32 %14509, %14510
  store i32 %14511, i32* %20, align 4
  %14512 = load i32, i32* %18, align 4
  store i32 %14512, i32* %19, align 4
  %14513 = load i32, i32* %17, align 4
  store i32 %14513, i32* %18, align 4
  %14514 = load i32, i32* %16, align 4
  store i32 %14514, i32* %17, align 4
  %14515 = load i32, i32* %24, align 4
  %14516 = load i32, i32* %25, align 4
  %14517 = add i32 %14515, %14516
  store i32 %14517, i32* %16, align 4
  %14518 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14519 = load i32, i32* %14518, align 4
  %14520 = lshr i32 %14519, 17
  %14521 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14522 = load i32, i32* %14521, align 4
  %14523 = shl i32 %14522, 15
  %14524 = or i32 %14520, %14523
  %14525 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14526 = load i32, i32* %14525, align 4
  %14527 = lshr i32 %14526, 19
  %14528 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14529 = load i32, i32* %14528, align 4
  %14530 = shl i32 %14529, 13
  %14531 = or i32 %14527, %14530
  %14532 = xor i32 %14524, %14531
  %14533 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %14534 = load i32, i32* %14533, align 4
  %14535 = lshr i32 %14534, 10
  %14536 = xor i32 %14532, %14535
  %14537 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %14538 = load i32, i32* %14537, align 8
  %14539 = add i32 %14536, %14538
  %14540 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14541 = load i32, i32* %14540, align 8
  %14542 = lshr i32 %14541, 7
  %14543 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14544 = load i32, i32* %14543, align 8
  %14545 = shl i32 %14544, 25
  %14546 = or i32 %14542, %14545
  %14547 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14548 = load i32, i32* %14547, align 8
  %14549 = lshr i32 %14548, 18
  %14550 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14551 = load i32, i32* %14550, align 8
  %14552 = shl i32 %14551, 14
  %14553 = or i32 %14549, %14552
  %14554 = xor i32 %14546, %14553
  %14555 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14556 = load i32, i32* %14555, align 8
  %14557 = lshr i32 %14556, 3
  %14558 = xor i32 %14554, %14557
  %14559 = add i32 %14539, %14558
  %14560 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 25
  %14561 = load i32, i32* %14560, align 4
  %14562 = add i32 %14559, %14561
  %14563 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  store i32 %14562, i32* %14563, align 4
  %14564 = load i32, i32* %23, align 4
  %14565 = load i32, i32* %20, align 4
  %14566 = lshr i32 %14565, 6
  %14567 = load i32, i32* %20, align 4
  %14568 = shl i32 %14567, 26
  %14569 = or i32 %14566, %14568
  %14570 = load i32, i32* %20, align 4
  %14571 = lshr i32 %14570, 11
  %14572 = load i32, i32* %20, align 4
  %14573 = shl i32 %14572, 21
  %14574 = or i32 %14571, %14573
  %14575 = xor i32 %14569, %14574
  %14576 = load i32, i32* %20, align 4
  %14577 = lshr i32 %14576, 25
  %14578 = load i32, i32* %20, align 4
  %14579 = shl i32 %14578, 7
  %14580 = or i32 %14577, %14579
  %14581 = xor i32 %14575, %14580
  %14582 = add i32 %14564, %14581
  %14583 = load i32, i32* %20, align 4
  %14584 = load i32, i32* %21, align 4
  %14585 = and i32 %14583, %14584
  %14586 = load i32, i32* %20, align 4
  %14587 = xor i32 %14586, -1
  %14588 = load i32, i32* %22, align 4
  %14589 = and i32 %14587, %14588
  %14590 = xor i32 %14585, %14589
  %14591 = add i32 %14582, %14590
  %14592 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 41), align 4
  %14593 = add i32 %14591, %14592
  %14594 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14595 = load i32, i32* %14594, align 4
  %14596 = add i32 %14593, %14595
  store i32 %14596, i32* %24, align 4
  %14597 = load i32, i32* %16, align 4
  %14598 = lshr i32 %14597, 2
  %14599 = load i32, i32* %16, align 4
  %14600 = shl i32 %14599, 30
  %14601 = or i32 %14598, %14600
  %14602 = load i32, i32* %16, align 4
  %14603 = lshr i32 %14602, 13
  %14604 = load i32, i32* %16, align 4
  %14605 = shl i32 %14604, 19
  %14606 = or i32 %14603, %14605
  %14607 = xor i32 %14601, %14606
  %14608 = load i32, i32* %16, align 4
  %14609 = lshr i32 %14608, 22
  %14610 = load i32, i32* %16, align 4
  %14611 = shl i32 %14610, 10
  %14612 = or i32 %14609, %14611
  %14613 = xor i32 %14607, %14612
  %14614 = load i32, i32* %16, align 4
  %14615 = load i32, i32* %17, align 4
  %14616 = and i32 %14614, %14615
  %14617 = load i32, i32* %16, align 4
  %14618 = load i32, i32* %18, align 4
  %14619 = and i32 %14617, %14618
  %14620 = xor i32 %14616, %14619
  %14621 = load i32, i32* %17, align 4
  %14622 = load i32, i32* %18, align 4
  %14623 = and i32 %14621, %14622
  %14624 = xor i32 %14620, %14623
  %14625 = add i32 %14613, %14624
  store i32 %14625, i32* %25, align 4
  %14626 = load i32, i32* %22, align 4
  store i32 %14626, i32* %23, align 4
  %14627 = load i32, i32* %21, align 4
  store i32 %14627, i32* %22, align 4
  %14628 = load i32, i32* %20, align 4
  store i32 %14628, i32* %21, align 4
  %14629 = load i32, i32* %19, align 4
  %14630 = load i32, i32* %24, align 4
  %14631 = add i32 %14629, %14630
  store i32 %14631, i32* %20, align 4
  %14632 = load i32, i32* %18, align 4
  store i32 %14632, i32* %19, align 4
  %14633 = load i32, i32* %17, align 4
  store i32 %14633, i32* %18, align 4
  %14634 = load i32, i32* %16, align 4
  store i32 %14634, i32* %17, align 4
  %14635 = load i32, i32* %24, align 4
  %14636 = load i32, i32* %25, align 4
  %14637 = add i32 %14635, %14636
  store i32 %14637, i32* %16, align 4
  %14638 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14639 = load i32, i32* %14638, align 16
  %14640 = lshr i32 %14639, 17
  %14641 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14642 = load i32, i32* %14641, align 16
  %14643 = shl i32 %14642, 15
  %14644 = or i32 %14640, %14643
  %14645 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14646 = load i32, i32* %14645, align 16
  %14647 = lshr i32 %14646, 19
  %14648 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14649 = load i32, i32* %14648, align 16
  %14650 = shl i32 %14649, 13
  %14651 = or i32 %14647, %14650
  %14652 = xor i32 %14644, %14651
  %14653 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %14654 = load i32, i32* %14653, align 16
  %14655 = lshr i32 %14654, 10
  %14656 = xor i32 %14652, %14655
  %14657 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %14658 = load i32, i32* %14657, align 4
  %14659 = add i32 %14656, %14658
  %14660 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14661 = load i32, i32* %14660, align 4
  %14662 = lshr i32 %14661, 7
  %14663 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14664 = load i32, i32* %14663, align 4
  %14665 = shl i32 %14664, 25
  %14666 = or i32 %14662, %14665
  %14667 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14668 = load i32, i32* %14667, align 4
  %14669 = lshr i32 %14668, 18
  %14670 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14671 = load i32, i32* %14670, align 4
  %14672 = shl i32 %14671, 14
  %14673 = or i32 %14669, %14672
  %14674 = xor i32 %14666, %14673
  %14675 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14676 = load i32, i32* %14675, align 4
  %14677 = lshr i32 %14676, 3
  %14678 = xor i32 %14674, %14677
  %14679 = add i32 %14659, %14678
  %14680 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 26
  %14681 = load i32, i32* %14680, align 8
  %14682 = add i32 %14679, %14681
  %14683 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  store i32 %14682, i32* %14683, align 8
  %14684 = load i32, i32* %23, align 4
  %14685 = load i32, i32* %20, align 4
  %14686 = lshr i32 %14685, 6
  %14687 = load i32, i32* %20, align 4
  %14688 = shl i32 %14687, 26
  %14689 = or i32 %14686, %14688
  %14690 = load i32, i32* %20, align 4
  %14691 = lshr i32 %14690, 11
  %14692 = load i32, i32* %20, align 4
  %14693 = shl i32 %14692, 21
  %14694 = or i32 %14691, %14693
  %14695 = xor i32 %14689, %14694
  %14696 = load i32, i32* %20, align 4
  %14697 = lshr i32 %14696, 25
  %14698 = load i32, i32* %20, align 4
  %14699 = shl i32 %14698, 7
  %14700 = or i32 %14697, %14699
  %14701 = xor i32 %14695, %14700
  %14702 = add i32 %14684, %14701
  %14703 = load i32, i32* %20, align 4
  %14704 = load i32, i32* %21, align 4
  %14705 = and i32 %14703, %14704
  %14706 = load i32, i32* %20, align 4
  %14707 = xor i32 %14706, -1
  %14708 = load i32, i32* %22, align 4
  %14709 = and i32 %14707, %14708
  %14710 = xor i32 %14705, %14709
  %14711 = add i32 %14702, %14710
  %14712 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 42), align 8
  %14713 = add i32 %14711, %14712
  %14714 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14715 = load i32, i32* %14714, align 8
  %14716 = add i32 %14713, %14715
  store i32 %14716, i32* %24, align 4
  %14717 = load i32, i32* %16, align 4
  %14718 = lshr i32 %14717, 2
  %14719 = load i32, i32* %16, align 4
  %14720 = shl i32 %14719, 30
  %14721 = or i32 %14718, %14720
  %14722 = load i32, i32* %16, align 4
  %14723 = lshr i32 %14722, 13
  %14724 = load i32, i32* %16, align 4
  %14725 = shl i32 %14724, 19
  %14726 = or i32 %14723, %14725
  %14727 = xor i32 %14721, %14726
  %14728 = load i32, i32* %16, align 4
  %14729 = lshr i32 %14728, 22
  %14730 = load i32, i32* %16, align 4
  %14731 = shl i32 %14730, 10
  %14732 = or i32 %14729, %14731
  %14733 = xor i32 %14727, %14732
  %14734 = load i32, i32* %16, align 4
  %14735 = load i32, i32* %17, align 4
  %14736 = and i32 %14734, %14735
  %14737 = load i32, i32* %16, align 4
  %14738 = load i32, i32* %18, align 4
  %14739 = and i32 %14737, %14738
  %14740 = xor i32 %14736, %14739
  %14741 = load i32, i32* %17, align 4
  %14742 = load i32, i32* %18, align 4
  %14743 = and i32 %14741, %14742
  %14744 = xor i32 %14740, %14743
  %14745 = add i32 %14733, %14744
  store i32 %14745, i32* %25, align 4
  %14746 = load i32, i32* %22, align 4
  store i32 %14746, i32* %23, align 4
  %14747 = load i32, i32* %21, align 4
  store i32 %14747, i32* %22, align 4
  %14748 = load i32, i32* %20, align 4
  store i32 %14748, i32* %21, align 4
  %14749 = load i32, i32* %19, align 4
  %14750 = load i32, i32* %24, align 4
  %14751 = add i32 %14749, %14750
  store i32 %14751, i32* %20, align 4
  %14752 = load i32, i32* %18, align 4
  store i32 %14752, i32* %19, align 4
  %14753 = load i32, i32* %17, align 4
  store i32 %14753, i32* %18, align 4
  %14754 = load i32, i32* %16, align 4
  store i32 %14754, i32* %17, align 4
  %14755 = load i32, i32* %24, align 4
  %14756 = load i32, i32* %25, align 4
  %14757 = add i32 %14755, %14756
  store i32 %14757, i32* %16, align 4
  %14758 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14759 = load i32, i32* %14758, align 4
  %14760 = lshr i32 %14759, 17
  %14761 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14762 = load i32, i32* %14761, align 4
  %14763 = shl i32 %14762, 15
  %14764 = or i32 %14760, %14763
  %14765 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14766 = load i32, i32* %14765, align 4
  %14767 = lshr i32 %14766, 19
  %14768 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14769 = load i32, i32* %14768, align 4
  %14770 = shl i32 %14769, 13
  %14771 = or i32 %14767, %14770
  %14772 = xor i32 %14764, %14771
  %14773 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %14774 = load i32, i32* %14773, align 4
  %14775 = lshr i32 %14774, 10
  %14776 = xor i32 %14772, %14775
  %14777 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %14778 = load i32, i32* %14777, align 16
  %14779 = add i32 %14776, %14778
  %14780 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14781 = load i32, i32* %14780, align 16
  %14782 = lshr i32 %14781, 7
  %14783 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14784 = load i32, i32* %14783, align 16
  %14785 = shl i32 %14784, 25
  %14786 = or i32 %14782, %14785
  %14787 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14788 = load i32, i32* %14787, align 16
  %14789 = lshr i32 %14788, 18
  %14790 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14791 = load i32, i32* %14790, align 16
  %14792 = shl i32 %14791, 14
  %14793 = or i32 %14789, %14792
  %14794 = xor i32 %14786, %14793
  %14795 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14796 = load i32, i32* %14795, align 16
  %14797 = lshr i32 %14796, 3
  %14798 = xor i32 %14794, %14797
  %14799 = add i32 %14779, %14798
  %14800 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 27
  %14801 = load i32, i32* %14800, align 4
  %14802 = add i32 %14799, %14801
  %14803 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  store i32 %14802, i32* %14803, align 4
  %14804 = load i32, i32* %23, align 4
  %14805 = load i32, i32* %20, align 4
  %14806 = lshr i32 %14805, 6
  %14807 = load i32, i32* %20, align 4
  %14808 = shl i32 %14807, 26
  %14809 = or i32 %14806, %14808
  %14810 = load i32, i32* %20, align 4
  %14811 = lshr i32 %14810, 11
  %14812 = load i32, i32* %20, align 4
  %14813 = shl i32 %14812, 21
  %14814 = or i32 %14811, %14813
  %14815 = xor i32 %14809, %14814
  %14816 = load i32, i32* %20, align 4
  %14817 = lshr i32 %14816, 25
  %14818 = load i32, i32* %20, align 4
  %14819 = shl i32 %14818, 7
  %14820 = or i32 %14817, %14819
  %14821 = xor i32 %14815, %14820
  %14822 = add i32 %14804, %14821
  %14823 = load i32, i32* %20, align 4
  %14824 = load i32, i32* %21, align 4
  %14825 = and i32 %14823, %14824
  %14826 = load i32, i32* %20, align 4
  %14827 = xor i32 %14826, -1
  %14828 = load i32, i32* %22, align 4
  %14829 = and i32 %14827, %14828
  %14830 = xor i32 %14825, %14829
  %14831 = add i32 %14822, %14830
  %14832 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 43), align 4
  %14833 = add i32 %14831, %14832
  %14834 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %14835 = load i32, i32* %14834, align 4
  %14836 = add i32 %14833, %14835
  store i32 %14836, i32* %24, align 4
  %14837 = load i32, i32* %16, align 4
  %14838 = lshr i32 %14837, 2
  %14839 = load i32, i32* %16, align 4
  %14840 = shl i32 %14839, 30
  %14841 = or i32 %14838, %14840
  %14842 = load i32, i32* %16, align 4
  %14843 = lshr i32 %14842, 13
  %14844 = load i32, i32* %16, align 4
  %14845 = shl i32 %14844, 19
  %14846 = or i32 %14843, %14845
  %14847 = xor i32 %14841, %14846
  %14848 = load i32, i32* %16, align 4
  %14849 = lshr i32 %14848, 22
  %14850 = load i32, i32* %16, align 4
  %14851 = shl i32 %14850, 10
  %14852 = or i32 %14849, %14851
  %14853 = xor i32 %14847, %14852
  %14854 = load i32, i32* %16, align 4
  %14855 = load i32, i32* %17, align 4
  %14856 = and i32 %14854, %14855
  %14857 = load i32, i32* %16, align 4
  %14858 = load i32, i32* %18, align 4
  %14859 = and i32 %14857, %14858
  %14860 = xor i32 %14856, %14859
  %14861 = load i32, i32* %17, align 4
  %14862 = load i32, i32* %18, align 4
  %14863 = and i32 %14861, %14862
  %14864 = xor i32 %14860, %14863
  %14865 = add i32 %14853, %14864
  store i32 %14865, i32* %25, align 4
  %14866 = load i32, i32* %22, align 4
  store i32 %14866, i32* %23, align 4
  %14867 = load i32, i32* %21, align 4
  store i32 %14867, i32* %22, align 4
  %14868 = load i32, i32* %20, align 4
  store i32 %14868, i32* %21, align 4
  %14869 = load i32, i32* %19, align 4
  %14870 = load i32, i32* %24, align 4
  %14871 = add i32 %14869, %14870
  store i32 %14871, i32* %20, align 4
  %14872 = load i32, i32* %18, align 4
  store i32 %14872, i32* %19, align 4
  %14873 = load i32, i32* %17, align 4
  store i32 %14873, i32* %18, align 4
  %14874 = load i32, i32* %16, align 4
  store i32 %14874, i32* %17, align 4
  %14875 = load i32, i32* %24, align 4
  %14876 = load i32, i32* %25, align 4
  %14877 = add i32 %14875, %14876
  store i32 %14877, i32* %16, align 4
  %14878 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14879 = load i32, i32* %14878, align 8
  %14880 = lshr i32 %14879, 17
  %14881 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14882 = load i32, i32* %14881, align 8
  %14883 = shl i32 %14882, 15
  %14884 = or i32 %14880, %14883
  %14885 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14886 = load i32, i32* %14885, align 8
  %14887 = lshr i32 %14886, 19
  %14888 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14889 = load i32, i32* %14888, align 8
  %14890 = shl i32 %14889, 13
  %14891 = or i32 %14887, %14890
  %14892 = xor i32 %14884, %14891
  %14893 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %14894 = load i32, i32* %14893, align 8
  %14895 = lshr i32 %14894, 10
  %14896 = xor i32 %14892, %14895
  %14897 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %14898 = load i32, i32* %14897, align 4
  %14899 = add i32 %14896, %14898
  %14900 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %14901 = load i32, i32* %14900, align 4
  %14902 = lshr i32 %14901, 7
  %14903 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %14904 = load i32, i32* %14903, align 4
  %14905 = shl i32 %14904, 25
  %14906 = or i32 %14902, %14905
  %14907 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %14908 = load i32, i32* %14907, align 4
  %14909 = lshr i32 %14908, 18
  %14910 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %14911 = load i32, i32* %14910, align 4
  %14912 = shl i32 %14911, 14
  %14913 = or i32 %14909, %14912
  %14914 = xor i32 %14906, %14913
  %14915 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %14916 = load i32, i32* %14915, align 4
  %14917 = lshr i32 %14916, 3
  %14918 = xor i32 %14914, %14917
  %14919 = add i32 %14899, %14918
  %14920 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 28
  %14921 = load i32, i32* %14920, align 16
  %14922 = add i32 %14919, %14921
  %14923 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  store i32 %14922, i32* %14923, align 16
  %14924 = load i32, i32* %23, align 4
  %14925 = load i32, i32* %20, align 4
  %14926 = lshr i32 %14925, 6
  %14927 = load i32, i32* %20, align 4
  %14928 = shl i32 %14927, 26
  %14929 = or i32 %14926, %14928
  %14930 = load i32, i32* %20, align 4
  %14931 = lshr i32 %14930, 11
  %14932 = load i32, i32* %20, align 4
  %14933 = shl i32 %14932, 21
  %14934 = or i32 %14931, %14933
  %14935 = xor i32 %14929, %14934
  %14936 = load i32, i32* %20, align 4
  %14937 = lshr i32 %14936, 25
  %14938 = load i32, i32* %20, align 4
  %14939 = shl i32 %14938, 7
  %14940 = or i32 %14937, %14939
  %14941 = xor i32 %14935, %14940
  %14942 = add i32 %14924, %14941
  %14943 = load i32, i32* %20, align 4
  %14944 = load i32, i32* %21, align 4
  %14945 = and i32 %14943, %14944
  %14946 = load i32, i32* %20, align 4
  %14947 = xor i32 %14946, -1
  %14948 = load i32, i32* %22, align 4
  %14949 = and i32 %14947, %14948
  %14950 = xor i32 %14945, %14949
  %14951 = add i32 %14942, %14950
  %14952 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 44), align 16
  %14953 = add i32 %14951, %14952
  %14954 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %14955 = load i32, i32* %14954, align 16
  %14956 = add i32 %14953, %14955
  store i32 %14956, i32* %24, align 4
  %14957 = load i32, i32* %16, align 4
  %14958 = lshr i32 %14957, 2
  %14959 = load i32, i32* %16, align 4
  %14960 = shl i32 %14959, 30
  %14961 = or i32 %14958, %14960
  %14962 = load i32, i32* %16, align 4
  %14963 = lshr i32 %14962, 13
  %14964 = load i32, i32* %16, align 4
  %14965 = shl i32 %14964, 19
  %14966 = or i32 %14963, %14965
  %14967 = xor i32 %14961, %14966
  %14968 = load i32, i32* %16, align 4
  %14969 = lshr i32 %14968, 22
  %14970 = load i32, i32* %16, align 4
  %14971 = shl i32 %14970, 10
  %14972 = or i32 %14969, %14971
  %14973 = xor i32 %14967, %14972
  %14974 = load i32, i32* %16, align 4
  %14975 = load i32, i32* %17, align 4
  %14976 = and i32 %14974, %14975
  %14977 = load i32, i32* %16, align 4
  %14978 = load i32, i32* %18, align 4
  %14979 = and i32 %14977, %14978
  %14980 = xor i32 %14976, %14979
  %14981 = load i32, i32* %17, align 4
  %14982 = load i32, i32* %18, align 4
  %14983 = and i32 %14981, %14982
  %14984 = xor i32 %14980, %14983
  %14985 = add i32 %14973, %14984
  store i32 %14985, i32* %25, align 4
  %14986 = load i32, i32* %22, align 4
  store i32 %14986, i32* %23, align 4
  %14987 = load i32, i32* %21, align 4
  store i32 %14987, i32* %22, align 4
  %14988 = load i32, i32* %20, align 4
  store i32 %14988, i32* %21, align 4
  %14989 = load i32, i32* %19, align 4
  %14990 = load i32, i32* %24, align 4
  %14991 = add i32 %14989, %14990
  store i32 %14991, i32* %20, align 4
  %14992 = load i32, i32* %18, align 4
  store i32 %14992, i32* %19, align 4
  %14993 = load i32, i32* %17, align 4
  store i32 %14993, i32* %18, align 4
  %14994 = load i32, i32* %16, align 4
  store i32 %14994, i32* %17, align 4
  %14995 = load i32, i32* %24, align 4
  %14996 = load i32, i32* %25, align 4
  %14997 = add i32 %14995, %14996
  store i32 %14997, i32* %16, align 4
  %14998 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %14999 = load i32, i32* %14998, align 4
  %15000 = lshr i32 %14999, 17
  %15001 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %15002 = load i32, i32* %15001, align 4
  %15003 = shl i32 %15002, 15
  %15004 = or i32 %15000, %15003
  %15005 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %15006 = load i32, i32* %15005, align 4
  %15007 = lshr i32 %15006, 19
  %15008 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %15009 = load i32, i32* %15008, align 4
  %15010 = shl i32 %15009, 13
  %15011 = or i32 %15007, %15010
  %15012 = xor i32 %15004, %15011
  %15013 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %15014 = load i32, i32* %15013, align 4
  %15015 = lshr i32 %15014, 10
  %15016 = xor i32 %15012, %15015
  %15017 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15018 = load i32, i32* %15017, align 8
  %15019 = add i32 %15016, %15018
  %15020 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15021 = load i32, i32* %15020, align 8
  %15022 = lshr i32 %15021, 7
  %15023 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15024 = load i32, i32* %15023, align 8
  %15025 = shl i32 %15024, 25
  %15026 = or i32 %15022, %15025
  %15027 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15028 = load i32, i32* %15027, align 8
  %15029 = lshr i32 %15028, 18
  %15030 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15031 = load i32, i32* %15030, align 8
  %15032 = shl i32 %15031, 14
  %15033 = or i32 %15029, %15032
  %15034 = xor i32 %15026, %15033
  %15035 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15036 = load i32, i32* %15035, align 8
  %15037 = lshr i32 %15036, 3
  %15038 = xor i32 %15034, %15037
  %15039 = add i32 %15019, %15038
  %15040 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 29
  %15041 = load i32, i32* %15040, align 4
  %15042 = add i32 %15039, %15041
  %15043 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  store i32 %15042, i32* %15043, align 4
  %15044 = load i32, i32* %23, align 4
  %15045 = load i32, i32* %20, align 4
  %15046 = lshr i32 %15045, 6
  %15047 = load i32, i32* %20, align 4
  %15048 = shl i32 %15047, 26
  %15049 = or i32 %15046, %15048
  %15050 = load i32, i32* %20, align 4
  %15051 = lshr i32 %15050, 11
  %15052 = load i32, i32* %20, align 4
  %15053 = shl i32 %15052, 21
  %15054 = or i32 %15051, %15053
  %15055 = xor i32 %15049, %15054
  %15056 = load i32, i32* %20, align 4
  %15057 = lshr i32 %15056, 25
  %15058 = load i32, i32* %20, align 4
  %15059 = shl i32 %15058, 7
  %15060 = or i32 %15057, %15059
  %15061 = xor i32 %15055, %15060
  %15062 = add i32 %15044, %15061
  %15063 = load i32, i32* %20, align 4
  %15064 = load i32, i32* %21, align 4
  %15065 = and i32 %15063, %15064
  %15066 = load i32, i32* %20, align 4
  %15067 = xor i32 %15066, -1
  %15068 = load i32, i32* %22, align 4
  %15069 = and i32 %15067, %15068
  %15070 = xor i32 %15065, %15069
  %15071 = add i32 %15062, %15070
  %15072 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 45), align 4
  %15073 = add i32 %15071, %15072
  %15074 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15075 = load i32, i32* %15074, align 4
  %15076 = add i32 %15073, %15075
  store i32 %15076, i32* %24, align 4
  %15077 = load i32, i32* %16, align 4
  %15078 = lshr i32 %15077, 2
  %15079 = load i32, i32* %16, align 4
  %15080 = shl i32 %15079, 30
  %15081 = or i32 %15078, %15080
  %15082 = load i32, i32* %16, align 4
  %15083 = lshr i32 %15082, 13
  %15084 = load i32, i32* %16, align 4
  %15085 = shl i32 %15084, 19
  %15086 = or i32 %15083, %15085
  %15087 = xor i32 %15081, %15086
  %15088 = load i32, i32* %16, align 4
  %15089 = lshr i32 %15088, 22
  %15090 = load i32, i32* %16, align 4
  %15091 = shl i32 %15090, 10
  %15092 = or i32 %15089, %15091
  %15093 = xor i32 %15087, %15092
  %15094 = load i32, i32* %16, align 4
  %15095 = load i32, i32* %17, align 4
  %15096 = and i32 %15094, %15095
  %15097 = load i32, i32* %16, align 4
  %15098 = load i32, i32* %18, align 4
  %15099 = and i32 %15097, %15098
  %15100 = xor i32 %15096, %15099
  %15101 = load i32, i32* %17, align 4
  %15102 = load i32, i32* %18, align 4
  %15103 = and i32 %15101, %15102
  %15104 = xor i32 %15100, %15103
  %15105 = add i32 %15093, %15104
  store i32 %15105, i32* %25, align 4
  %15106 = load i32, i32* %22, align 4
  store i32 %15106, i32* %23, align 4
  %15107 = load i32, i32* %21, align 4
  store i32 %15107, i32* %22, align 4
  %15108 = load i32, i32* %20, align 4
  store i32 %15108, i32* %21, align 4
  %15109 = load i32, i32* %19, align 4
  %15110 = load i32, i32* %24, align 4
  %15111 = add i32 %15109, %15110
  store i32 %15111, i32* %20, align 4
  %15112 = load i32, i32* %18, align 4
  store i32 %15112, i32* %19, align 4
  %15113 = load i32, i32* %17, align 4
  store i32 %15113, i32* %18, align 4
  %15114 = load i32, i32* %16, align 4
  store i32 %15114, i32* %17, align 4
  %15115 = load i32, i32* %24, align 4
  %15116 = load i32, i32* %25, align 4
  %15117 = add i32 %15115, %15116
  store i32 %15117, i32* %16, align 4
  %15118 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15119 = load i32, i32* %15118, align 16
  %15120 = lshr i32 %15119, 17
  %15121 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15122 = load i32, i32* %15121, align 16
  %15123 = shl i32 %15122, 15
  %15124 = or i32 %15120, %15123
  %15125 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15126 = load i32, i32* %15125, align 16
  %15127 = lshr i32 %15126, 19
  %15128 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15129 = load i32, i32* %15128, align 16
  %15130 = shl i32 %15129, 13
  %15131 = or i32 %15127, %15130
  %15132 = xor i32 %15124, %15131
  %15133 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15134 = load i32, i32* %15133, align 16
  %15135 = lshr i32 %15134, 10
  %15136 = xor i32 %15132, %15135
  %15137 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %15138 = load i32, i32* %15137, align 4
  %15139 = add i32 %15136, %15138
  %15140 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15141 = load i32, i32* %15140, align 4
  %15142 = lshr i32 %15141, 7
  %15143 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15144 = load i32, i32* %15143, align 4
  %15145 = shl i32 %15144, 25
  %15146 = or i32 %15142, %15145
  %15147 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15148 = load i32, i32* %15147, align 4
  %15149 = lshr i32 %15148, 18
  %15150 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15151 = load i32, i32* %15150, align 4
  %15152 = shl i32 %15151, 14
  %15153 = or i32 %15149, %15152
  %15154 = xor i32 %15146, %15153
  %15155 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15156 = load i32, i32* %15155, align 4
  %15157 = lshr i32 %15156, 3
  %15158 = xor i32 %15154, %15157
  %15159 = add i32 %15139, %15158
  %15160 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 30
  %15161 = load i32, i32* %15160, align 8
  %15162 = add i32 %15159, %15161
  %15163 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  store i32 %15162, i32* %15163, align 8
  %15164 = load i32, i32* %23, align 4
  %15165 = load i32, i32* %20, align 4
  %15166 = lshr i32 %15165, 6
  %15167 = load i32, i32* %20, align 4
  %15168 = shl i32 %15167, 26
  %15169 = or i32 %15166, %15168
  %15170 = load i32, i32* %20, align 4
  %15171 = lshr i32 %15170, 11
  %15172 = load i32, i32* %20, align 4
  %15173 = shl i32 %15172, 21
  %15174 = or i32 %15171, %15173
  %15175 = xor i32 %15169, %15174
  %15176 = load i32, i32* %20, align 4
  %15177 = lshr i32 %15176, 25
  %15178 = load i32, i32* %20, align 4
  %15179 = shl i32 %15178, 7
  %15180 = or i32 %15177, %15179
  %15181 = xor i32 %15175, %15180
  %15182 = add i32 %15164, %15181
  %15183 = load i32, i32* %20, align 4
  %15184 = load i32, i32* %21, align 4
  %15185 = and i32 %15183, %15184
  %15186 = load i32, i32* %20, align 4
  %15187 = xor i32 %15186, -1
  %15188 = load i32, i32* %22, align 4
  %15189 = and i32 %15187, %15188
  %15190 = xor i32 %15185, %15189
  %15191 = add i32 %15182, %15190
  %15192 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 46), align 8
  %15193 = add i32 %15191, %15192
  %15194 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15195 = load i32, i32* %15194, align 8
  %15196 = add i32 %15193, %15195
  store i32 %15196, i32* %24, align 4
  %15197 = load i32, i32* %16, align 4
  %15198 = lshr i32 %15197, 2
  %15199 = load i32, i32* %16, align 4
  %15200 = shl i32 %15199, 30
  %15201 = or i32 %15198, %15200
  %15202 = load i32, i32* %16, align 4
  %15203 = lshr i32 %15202, 13
  %15204 = load i32, i32* %16, align 4
  %15205 = shl i32 %15204, 19
  %15206 = or i32 %15203, %15205
  %15207 = xor i32 %15201, %15206
  %15208 = load i32, i32* %16, align 4
  %15209 = lshr i32 %15208, 22
  %15210 = load i32, i32* %16, align 4
  %15211 = shl i32 %15210, 10
  %15212 = or i32 %15209, %15211
  %15213 = xor i32 %15207, %15212
  %15214 = load i32, i32* %16, align 4
  %15215 = load i32, i32* %17, align 4
  %15216 = and i32 %15214, %15215
  %15217 = load i32, i32* %16, align 4
  %15218 = load i32, i32* %18, align 4
  %15219 = and i32 %15217, %15218
  %15220 = xor i32 %15216, %15219
  %15221 = load i32, i32* %17, align 4
  %15222 = load i32, i32* %18, align 4
  %15223 = and i32 %15221, %15222
  %15224 = xor i32 %15220, %15223
  %15225 = add i32 %15213, %15224
  store i32 %15225, i32* %25, align 4
  %15226 = load i32, i32* %22, align 4
  store i32 %15226, i32* %23, align 4
  %15227 = load i32, i32* %21, align 4
  store i32 %15227, i32* %22, align 4
  %15228 = load i32, i32* %20, align 4
  store i32 %15228, i32* %21, align 4
  %15229 = load i32, i32* %19, align 4
  %15230 = load i32, i32* %24, align 4
  %15231 = add i32 %15229, %15230
  store i32 %15231, i32* %20, align 4
  %15232 = load i32, i32* %18, align 4
  store i32 %15232, i32* %19, align 4
  %15233 = load i32, i32* %17, align 4
  store i32 %15233, i32* %18, align 4
  %15234 = load i32, i32* %16, align 4
  store i32 %15234, i32* %17, align 4
  %15235 = load i32, i32* %24, align 4
  %15236 = load i32, i32* %25, align 4
  %15237 = add i32 %15235, %15236
  store i32 %15237, i32* %16, align 4
  %15238 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15239 = load i32, i32* %15238, align 4
  %15240 = lshr i32 %15239, 17
  %15241 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15242 = load i32, i32* %15241, align 4
  %15243 = shl i32 %15242, 15
  %15244 = or i32 %15240, %15243
  %15245 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15246 = load i32, i32* %15245, align 4
  %15247 = lshr i32 %15246, 19
  %15248 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15249 = load i32, i32* %15248, align 4
  %15250 = shl i32 %15249, 13
  %15251 = or i32 %15247, %15250
  %15252 = xor i32 %15244, %15251
  %15253 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15254 = load i32, i32* %15253, align 4
  %15255 = lshr i32 %15254, 10
  %15256 = xor i32 %15252, %15255
  %15257 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %15258 = load i32, i32* %15257, align 16
  %15259 = add i32 %15256, %15258
  %15260 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15261 = load i32, i32* %15260, align 16
  %15262 = lshr i32 %15261, 7
  %15263 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15264 = load i32, i32* %15263, align 16
  %15265 = shl i32 %15264, 25
  %15266 = or i32 %15262, %15265
  %15267 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15268 = load i32, i32* %15267, align 16
  %15269 = lshr i32 %15268, 18
  %15270 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15271 = load i32, i32* %15270, align 16
  %15272 = shl i32 %15271, 14
  %15273 = or i32 %15269, %15272
  %15274 = xor i32 %15266, %15273
  %15275 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15276 = load i32, i32* %15275, align 16
  %15277 = lshr i32 %15276, 3
  %15278 = xor i32 %15274, %15277
  %15279 = add i32 %15259, %15278
  %15280 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 31
  %15281 = load i32, i32* %15280, align 4
  %15282 = add i32 %15279, %15281
  %15283 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  store i32 %15282, i32* %15283, align 4
  %15284 = load i32, i32* %23, align 4
  %15285 = load i32, i32* %20, align 4
  %15286 = lshr i32 %15285, 6
  %15287 = load i32, i32* %20, align 4
  %15288 = shl i32 %15287, 26
  %15289 = or i32 %15286, %15288
  %15290 = load i32, i32* %20, align 4
  %15291 = lshr i32 %15290, 11
  %15292 = load i32, i32* %20, align 4
  %15293 = shl i32 %15292, 21
  %15294 = or i32 %15291, %15293
  %15295 = xor i32 %15289, %15294
  %15296 = load i32, i32* %20, align 4
  %15297 = lshr i32 %15296, 25
  %15298 = load i32, i32* %20, align 4
  %15299 = shl i32 %15298, 7
  %15300 = or i32 %15297, %15299
  %15301 = xor i32 %15295, %15300
  %15302 = add i32 %15284, %15301
  %15303 = load i32, i32* %20, align 4
  %15304 = load i32, i32* %21, align 4
  %15305 = and i32 %15303, %15304
  %15306 = load i32, i32* %20, align 4
  %15307 = xor i32 %15306, -1
  %15308 = load i32, i32* %22, align 4
  %15309 = and i32 %15307, %15308
  %15310 = xor i32 %15305, %15309
  %15311 = add i32 %15302, %15310
  %15312 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 47), align 4
  %15313 = add i32 %15311, %15312
  %15314 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15315 = load i32, i32* %15314, align 4
  %15316 = add i32 %15313, %15315
  store i32 %15316, i32* %24, align 4
  %15317 = load i32, i32* %16, align 4
  %15318 = lshr i32 %15317, 2
  %15319 = load i32, i32* %16, align 4
  %15320 = shl i32 %15319, 30
  %15321 = or i32 %15318, %15320
  %15322 = load i32, i32* %16, align 4
  %15323 = lshr i32 %15322, 13
  %15324 = load i32, i32* %16, align 4
  %15325 = shl i32 %15324, 19
  %15326 = or i32 %15323, %15325
  %15327 = xor i32 %15321, %15326
  %15328 = load i32, i32* %16, align 4
  %15329 = lshr i32 %15328, 22
  %15330 = load i32, i32* %16, align 4
  %15331 = shl i32 %15330, 10
  %15332 = or i32 %15329, %15331
  %15333 = xor i32 %15327, %15332
  %15334 = load i32, i32* %16, align 4
  %15335 = load i32, i32* %17, align 4
  %15336 = and i32 %15334, %15335
  %15337 = load i32, i32* %16, align 4
  %15338 = load i32, i32* %18, align 4
  %15339 = and i32 %15337, %15338
  %15340 = xor i32 %15336, %15339
  %15341 = load i32, i32* %17, align 4
  %15342 = load i32, i32* %18, align 4
  %15343 = and i32 %15341, %15342
  %15344 = xor i32 %15340, %15343
  %15345 = add i32 %15333, %15344
  store i32 %15345, i32* %25, align 4
  %15346 = load i32, i32* %22, align 4
  store i32 %15346, i32* %23, align 4
  %15347 = load i32, i32* %21, align 4
  store i32 %15347, i32* %22, align 4
  %15348 = load i32, i32* %20, align 4
  store i32 %15348, i32* %21, align 4
  %15349 = load i32, i32* %19, align 4
  %15350 = load i32, i32* %24, align 4
  %15351 = add i32 %15349, %15350
  store i32 %15351, i32* %20, align 4
  %15352 = load i32, i32* %18, align 4
  store i32 %15352, i32* %19, align 4
  %15353 = load i32, i32* %17, align 4
  store i32 %15353, i32* %18, align 4
  %15354 = load i32, i32* %16, align 4
  store i32 %15354, i32* %17, align 4
  %15355 = load i32, i32* %24, align 4
  %15356 = load i32, i32* %25, align 4
  %15357 = add i32 %15355, %15356
  store i32 %15357, i32* %16, align 4
  %15358 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15359 = load i32, i32* %15358, align 8
  %15360 = lshr i32 %15359, 17
  %15361 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15362 = load i32, i32* %15361, align 8
  %15363 = shl i32 %15362, 15
  %15364 = or i32 %15360, %15363
  %15365 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15366 = load i32, i32* %15365, align 8
  %15367 = lshr i32 %15366, 19
  %15368 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15369 = load i32, i32* %15368, align 8
  %15370 = shl i32 %15369, 13
  %15371 = or i32 %15367, %15370
  %15372 = xor i32 %15364, %15371
  %15373 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15374 = load i32, i32* %15373, align 8
  %15375 = lshr i32 %15374, 10
  %15376 = xor i32 %15372, %15375
  %15377 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %15378 = load i32, i32* %15377, align 4
  %15379 = add i32 %15376, %15378
  %15380 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15381 = load i32, i32* %15380, align 4
  %15382 = lshr i32 %15381, 7
  %15383 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15384 = load i32, i32* %15383, align 4
  %15385 = shl i32 %15384, 25
  %15386 = or i32 %15382, %15385
  %15387 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15388 = load i32, i32* %15387, align 4
  %15389 = lshr i32 %15388, 18
  %15390 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15391 = load i32, i32* %15390, align 4
  %15392 = shl i32 %15391, 14
  %15393 = or i32 %15389, %15392
  %15394 = xor i32 %15386, %15393
  %15395 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15396 = load i32, i32* %15395, align 4
  %15397 = lshr i32 %15396, 3
  %15398 = xor i32 %15394, %15397
  %15399 = add i32 %15379, %15398
  %15400 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 32
  %15401 = load i32, i32* %15400, align 16
  %15402 = add i32 %15399, %15401
  %15403 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  store i32 %15402, i32* %15403, align 16
  %15404 = load i32, i32* %23, align 4
  %15405 = load i32, i32* %20, align 4
  %15406 = lshr i32 %15405, 6
  %15407 = load i32, i32* %20, align 4
  %15408 = shl i32 %15407, 26
  %15409 = or i32 %15406, %15408
  %15410 = load i32, i32* %20, align 4
  %15411 = lshr i32 %15410, 11
  %15412 = load i32, i32* %20, align 4
  %15413 = shl i32 %15412, 21
  %15414 = or i32 %15411, %15413
  %15415 = xor i32 %15409, %15414
  %15416 = load i32, i32* %20, align 4
  %15417 = lshr i32 %15416, 25
  %15418 = load i32, i32* %20, align 4
  %15419 = shl i32 %15418, 7
  %15420 = or i32 %15417, %15419
  %15421 = xor i32 %15415, %15420
  %15422 = add i32 %15404, %15421
  %15423 = load i32, i32* %20, align 4
  %15424 = load i32, i32* %21, align 4
  %15425 = and i32 %15423, %15424
  %15426 = load i32, i32* %20, align 4
  %15427 = xor i32 %15426, -1
  %15428 = load i32, i32* %22, align 4
  %15429 = and i32 %15427, %15428
  %15430 = xor i32 %15425, %15429
  %15431 = add i32 %15422, %15430
  %15432 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 48), align 16
  %15433 = add i32 %15431, %15432
  %15434 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15435 = load i32, i32* %15434, align 16
  %15436 = add i32 %15433, %15435
  store i32 %15436, i32* %24, align 4
  %15437 = load i32, i32* %16, align 4
  %15438 = lshr i32 %15437, 2
  %15439 = load i32, i32* %16, align 4
  %15440 = shl i32 %15439, 30
  %15441 = or i32 %15438, %15440
  %15442 = load i32, i32* %16, align 4
  %15443 = lshr i32 %15442, 13
  %15444 = load i32, i32* %16, align 4
  %15445 = shl i32 %15444, 19
  %15446 = or i32 %15443, %15445
  %15447 = xor i32 %15441, %15446
  %15448 = load i32, i32* %16, align 4
  %15449 = lshr i32 %15448, 22
  %15450 = load i32, i32* %16, align 4
  %15451 = shl i32 %15450, 10
  %15452 = or i32 %15449, %15451
  %15453 = xor i32 %15447, %15452
  %15454 = load i32, i32* %16, align 4
  %15455 = load i32, i32* %17, align 4
  %15456 = and i32 %15454, %15455
  %15457 = load i32, i32* %16, align 4
  %15458 = load i32, i32* %18, align 4
  %15459 = and i32 %15457, %15458
  %15460 = xor i32 %15456, %15459
  %15461 = load i32, i32* %17, align 4
  %15462 = load i32, i32* %18, align 4
  %15463 = and i32 %15461, %15462
  %15464 = xor i32 %15460, %15463
  %15465 = add i32 %15453, %15464
  store i32 %15465, i32* %25, align 4
  %15466 = load i32, i32* %22, align 4
  store i32 %15466, i32* %23, align 4
  %15467 = load i32, i32* %21, align 4
  store i32 %15467, i32* %22, align 4
  %15468 = load i32, i32* %20, align 4
  store i32 %15468, i32* %21, align 4
  %15469 = load i32, i32* %19, align 4
  %15470 = load i32, i32* %24, align 4
  %15471 = add i32 %15469, %15470
  store i32 %15471, i32* %20, align 4
  %15472 = load i32, i32* %18, align 4
  store i32 %15472, i32* %19, align 4
  %15473 = load i32, i32* %17, align 4
  store i32 %15473, i32* %18, align 4
  %15474 = load i32, i32* %16, align 4
  store i32 %15474, i32* %17, align 4
  %15475 = load i32, i32* %24, align 4
  %15476 = load i32, i32* %25, align 4
  %15477 = add i32 %15475, %15476
  store i32 %15477, i32* %16, align 4
  %15478 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15479 = load i32, i32* %15478, align 4
  %15480 = lshr i32 %15479, 17
  %15481 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15482 = load i32, i32* %15481, align 4
  %15483 = shl i32 %15482, 15
  %15484 = or i32 %15480, %15483
  %15485 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15486 = load i32, i32* %15485, align 4
  %15487 = lshr i32 %15486, 19
  %15488 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15489 = load i32, i32* %15488, align 4
  %15490 = shl i32 %15489, 13
  %15491 = or i32 %15487, %15490
  %15492 = xor i32 %15484, %15491
  %15493 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %15494 = load i32, i32* %15493, align 4
  %15495 = lshr i32 %15494, 10
  %15496 = xor i32 %15492, %15495
  %15497 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %15498 = load i32, i32* %15497, align 8
  %15499 = add i32 %15496, %15498
  %15500 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15501 = load i32, i32* %15500, align 8
  %15502 = lshr i32 %15501, 7
  %15503 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15504 = load i32, i32* %15503, align 8
  %15505 = shl i32 %15504, 25
  %15506 = or i32 %15502, %15505
  %15507 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15508 = load i32, i32* %15507, align 8
  %15509 = lshr i32 %15508, 18
  %15510 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15511 = load i32, i32* %15510, align 8
  %15512 = shl i32 %15511, 14
  %15513 = or i32 %15509, %15512
  %15514 = xor i32 %15506, %15513
  %15515 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15516 = load i32, i32* %15515, align 8
  %15517 = lshr i32 %15516, 3
  %15518 = xor i32 %15514, %15517
  %15519 = add i32 %15499, %15518
  %15520 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 33
  %15521 = load i32, i32* %15520, align 4
  %15522 = add i32 %15519, %15521
  %15523 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  store i32 %15522, i32* %15523, align 4
  %15524 = load i32, i32* %23, align 4
  %15525 = load i32, i32* %20, align 4
  %15526 = lshr i32 %15525, 6
  %15527 = load i32, i32* %20, align 4
  %15528 = shl i32 %15527, 26
  %15529 = or i32 %15526, %15528
  %15530 = load i32, i32* %20, align 4
  %15531 = lshr i32 %15530, 11
  %15532 = load i32, i32* %20, align 4
  %15533 = shl i32 %15532, 21
  %15534 = or i32 %15531, %15533
  %15535 = xor i32 %15529, %15534
  %15536 = load i32, i32* %20, align 4
  %15537 = lshr i32 %15536, 25
  %15538 = load i32, i32* %20, align 4
  %15539 = shl i32 %15538, 7
  %15540 = or i32 %15537, %15539
  %15541 = xor i32 %15535, %15540
  %15542 = add i32 %15524, %15541
  %15543 = load i32, i32* %20, align 4
  %15544 = load i32, i32* %21, align 4
  %15545 = and i32 %15543, %15544
  %15546 = load i32, i32* %20, align 4
  %15547 = xor i32 %15546, -1
  %15548 = load i32, i32* %22, align 4
  %15549 = and i32 %15547, %15548
  %15550 = xor i32 %15545, %15549
  %15551 = add i32 %15542, %15550
  %15552 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 49), align 4
  %15553 = add i32 %15551, %15552
  %15554 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15555 = load i32, i32* %15554, align 4
  %15556 = add i32 %15553, %15555
  store i32 %15556, i32* %24, align 4
  %15557 = load i32, i32* %16, align 4
  %15558 = lshr i32 %15557, 2
  %15559 = load i32, i32* %16, align 4
  %15560 = shl i32 %15559, 30
  %15561 = or i32 %15558, %15560
  %15562 = load i32, i32* %16, align 4
  %15563 = lshr i32 %15562, 13
  %15564 = load i32, i32* %16, align 4
  %15565 = shl i32 %15564, 19
  %15566 = or i32 %15563, %15565
  %15567 = xor i32 %15561, %15566
  %15568 = load i32, i32* %16, align 4
  %15569 = lshr i32 %15568, 22
  %15570 = load i32, i32* %16, align 4
  %15571 = shl i32 %15570, 10
  %15572 = or i32 %15569, %15571
  %15573 = xor i32 %15567, %15572
  %15574 = load i32, i32* %16, align 4
  %15575 = load i32, i32* %17, align 4
  %15576 = and i32 %15574, %15575
  %15577 = load i32, i32* %16, align 4
  %15578 = load i32, i32* %18, align 4
  %15579 = and i32 %15577, %15578
  %15580 = xor i32 %15576, %15579
  %15581 = load i32, i32* %17, align 4
  %15582 = load i32, i32* %18, align 4
  %15583 = and i32 %15581, %15582
  %15584 = xor i32 %15580, %15583
  %15585 = add i32 %15573, %15584
  store i32 %15585, i32* %25, align 4
  %15586 = load i32, i32* %22, align 4
  store i32 %15586, i32* %23, align 4
  %15587 = load i32, i32* %21, align 4
  store i32 %15587, i32* %22, align 4
  %15588 = load i32, i32* %20, align 4
  store i32 %15588, i32* %21, align 4
  %15589 = load i32, i32* %19, align 4
  %15590 = load i32, i32* %24, align 4
  %15591 = add i32 %15589, %15590
  store i32 %15591, i32* %20, align 4
  %15592 = load i32, i32* %18, align 4
  store i32 %15592, i32* %19, align 4
  %15593 = load i32, i32* %17, align 4
  store i32 %15593, i32* %18, align 4
  %15594 = load i32, i32* %16, align 4
  store i32 %15594, i32* %17, align 4
  %15595 = load i32, i32* %24, align 4
  %15596 = load i32, i32* %25, align 4
  %15597 = add i32 %15595, %15596
  store i32 %15597, i32* %16, align 4
  %15598 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15599 = load i32, i32* %15598, align 16
  %15600 = lshr i32 %15599, 17
  %15601 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15602 = load i32, i32* %15601, align 16
  %15603 = shl i32 %15602, 15
  %15604 = or i32 %15600, %15603
  %15605 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15606 = load i32, i32* %15605, align 16
  %15607 = lshr i32 %15606, 19
  %15608 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15609 = load i32, i32* %15608, align 16
  %15610 = shl i32 %15609, 13
  %15611 = or i32 %15607, %15610
  %15612 = xor i32 %15604, %15611
  %15613 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %15614 = load i32, i32* %15613, align 16
  %15615 = lshr i32 %15614, 10
  %15616 = xor i32 %15612, %15615
  %15617 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %15618 = load i32, i32* %15617, align 4
  %15619 = add i32 %15616, %15618
  %15620 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15621 = load i32, i32* %15620, align 4
  %15622 = lshr i32 %15621, 7
  %15623 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15624 = load i32, i32* %15623, align 4
  %15625 = shl i32 %15624, 25
  %15626 = or i32 %15622, %15625
  %15627 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15628 = load i32, i32* %15627, align 4
  %15629 = lshr i32 %15628, 18
  %15630 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15631 = load i32, i32* %15630, align 4
  %15632 = shl i32 %15631, 14
  %15633 = or i32 %15629, %15632
  %15634 = xor i32 %15626, %15633
  %15635 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15636 = load i32, i32* %15635, align 4
  %15637 = lshr i32 %15636, 3
  %15638 = xor i32 %15634, %15637
  %15639 = add i32 %15619, %15638
  %15640 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 34
  %15641 = load i32, i32* %15640, align 8
  %15642 = add i32 %15639, %15641
  %15643 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  store i32 %15642, i32* %15643, align 8
  %15644 = load i32, i32* %23, align 4
  %15645 = load i32, i32* %20, align 4
  %15646 = lshr i32 %15645, 6
  %15647 = load i32, i32* %20, align 4
  %15648 = shl i32 %15647, 26
  %15649 = or i32 %15646, %15648
  %15650 = load i32, i32* %20, align 4
  %15651 = lshr i32 %15650, 11
  %15652 = load i32, i32* %20, align 4
  %15653 = shl i32 %15652, 21
  %15654 = or i32 %15651, %15653
  %15655 = xor i32 %15649, %15654
  %15656 = load i32, i32* %20, align 4
  %15657 = lshr i32 %15656, 25
  %15658 = load i32, i32* %20, align 4
  %15659 = shl i32 %15658, 7
  %15660 = or i32 %15657, %15659
  %15661 = xor i32 %15655, %15660
  %15662 = add i32 %15644, %15661
  %15663 = load i32, i32* %20, align 4
  %15664 = load i32, i32* %21, align 4
  %15665 = and i32 %15663, %15664
  %15666 = load i32, i32* %20, align 4
  %15667 = xor i32 %15666, -1
  %15668 = load i32, i32* %22, align 4
  %15669 = and i32 %15667, %15668
  %15670 = xor i32 %15665, %15669
  %15671 = add i32 %15662, %15670
  %15672 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 50), align 8
  %15673 = add i32 %15671, %15672
  %15674 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15675 = load i32, i32* %15674, align 8
  %15676 = add i32 %15673, %15675
  store i32 %15676, i32* %24, align 4
  %15677 = load i32, i32* %16, align 4
  %15678 = lshr i32 %15677, 2
  %15679 = load i32, i32* %16, align 4
  %15680 = shl i32 %15679, 30
  %15681 = or i32 %15678, %15680
  %15682 = load i32, i32* %16, align 4
  %15683 = lshr i32 %15682, 13
  %15684 = load i32, i32* %16, align 4
  %15685 = shl i32 %15684, 19
  %15686 = or i32 %15683, %15685
  %15687 = xor i32 %15681, %15686
  %15688 = load i32, i32* %16, align 4
  %15689 = lshr i32 %15688, 22
  %15690 = load i32, i32* %16, align 4
  %15691 = shl i32 %15690, 10
  %15692 = or i32 %15689, %15691
  %15693 = xor i32 %15687, %15692
  %15694 = load i32, i32* %16, align 4
  %15695 = load i32, i32* %17, align 4
  %15696 = and i32 %15694, %15695
  %15697 = load i32, i32* %16, align 4
  %15698 = load i32, i32* %18, align 4
  %15699 = and i32 %15697, %15698
  %15700 = xor i32 %15696, %15699
  %15701 = load i32, i32* %17, align 4
  %15702 = load i32, i32* %18, align 4
  %15703 = and i32 %15701, %15702
  %15704 = xor i32 %15700, %15703
  %15705 = add i32 %15693, %15704
  store i32 %15705, i32* %25, align 4
  %15706 = load i32, i32* %22, align 4
  store i32 %15706, i32* %23, align 4
  %15707 = load i32, i32* %21, align 4
  store i32 %15707, i32* %22, align 4
  %15708 = load i32, i32* %20, align 4
  store i32 %15708, i32* %21, align 4
  %15709 = load i32, i32* %19, align 4
  %15710 = load i32, i32* %24, align 4
  %15711 = add i32 %15709, %15710
  store i32 %15711, i32* %20, align 4
  %15712 = load i32, i32* %18, align 4
  store i32 %15712, i32* %19, align 4
  %15713 = load i32, i32* %17, align 4
  store i32 %15713, i32* %18, align 4
  %15714 = load i32, i32* %16, align 4
  store i32 %15714, i32* %17, align 4
  %15715 = load i32, i32* %24, align 4
  %15716 = load i32, i32* %25, align 4
  %15717 = add i32 %15715, %15716
  store i32 %15717, i32* %16, align 4
  %15718 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15719 = load i32, i32* %15718, align 4
  %15720 = lshr i32 %15719, 17
  %15721 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15722 = load i32, i32* %15721, align 4
  %15723 = shl i32 %15722, 15
  %15724 = or i32 %15720, %15723
  %15725 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15726 = load i32, i32* %15725, align 4
  %15727 = lshr i32 %15726, 19
  %15728 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15729 = load i32, i32* %15728, align 4
  %15730 = shl i32 %15729, 13
  %15731 = or i32 %15727, %15730
  %15732 = xor i32 %15724, %15731
  %15733 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %15734 = load i32, i32* %15733, align 4
  %15735 = lshr i32 %15734, 10
  %15736 = xor i32 %15732, %15735
  %15737 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %15738 = load i32, i32* %15737, align 16
  %15739 = add i32 %15736, %15738
  %15740 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15741 = load i32, i32* %15740, align 16
  %15742 = lshr i32 %15741, 7
  %15743 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15744 = load i32, i32* %15743, align 16
  %15745 = shl i32 %15744, 25
  %15746 = or i32 %15742, %15745
  %15747 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15748 = load i32, i32* %15747, align 16
  %15749 = lshr i32 %15748, 18
  %15750 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15751 = load i32, i32* %15750, align 16
  %15752 = shl i32 %15751, 14
  %15753 = or i32 %15749, %15752
  %15754 = xor i32 %15746, %15753
  %15755 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15756 = load i32, i32* %15755, align 16
  %15757 = lshr i32 %15756, 3
  %15758 = xor i32 %15754, %15757
  %15759 = add i32 %15739, %15758
  %15760 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 35
  %15761 = load i32, i32* %15760, align 4
  %15762 = add i32 %15759, %15761
  %15763 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  store i32 %15762, i32* %15763, align 4
  %15764 = load i32, i32* %23, align 4
  %15765 = load i32, i32* %20, align 4
  %15766 = lshr i32 %15765, 6
  %15767 = load i32, i32* %20, align 4
  %15768 = shl i32 %15767, 26
  %15769 = or i32 %15766, %15768
  %15770 = load i32, i32* %20, align 4
  %15771 = lshr i32 %15770, 11
  %15772 = load i32, i32* %20, align 4
  %15773 = shl i32 %15772, 21
  %15774 = or i32 %15771, %15773
  %15775 = xor i32 %15769, %15774
  %15776 = load i32, i32* %20, align 4
  %15777 = lshr i32 %15776, 25
  %15778 = load i32, i32* %20, align 4
  %15779 = shl i32 %15778, 7
  %15780 = or i32 %15777, %15779
  %15781 = xor i32 %15775, %15780
  %15782 = add i32 %15764, %15781
  %15783 = load i32, i32* %20, align 4
  %15784 = load i32, i32* %21, align 4
  %15785 = and i32 %15783, %15784
  %15786 = load i32, i32* %20, align 4
  %15787 = xor i32 %15786, -1
  %15788 = load i32, i32* %22, align 4
  %15789 = and i32 %15787, %15788
  %15790 = xor i32 %15785, %15789
  %15791 = add i32 %15782, %15790
  %15792 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 51), align 4
  %15793 = add i32 %15791, %15792
  %15794 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15795 = load i32, i32* %15794, align 4
  %15796 = add i32 %15793, %15795
  store i32 %15796, i32* %24, align 4
  %15797 = load i32, i32* %16, align 4
  %15798 = lshr i32 %15797, 2
  %15799 = load i32, i32* %16, align 4
  %15800 = shl i32 %15799, 30
  %15801 = or i32 %15798, %15800
  %15802 = load i32, i32* %16, align 4
  %15803 = lshr i32 %15802, 13
  %15804 = load i32, i32* %16, align 4
  %15805 = shl i32 %15804, 19
  %15806 = or i32 %15803, %15805
  %15807 = xor i32 %15801, %15806
  %15808 = load i32, i32* %16, align 4
  %15809 = lshr i32 %15808, 22
  %15810 = load i32, i32* %16, align 4
  %15811 = shl i32 %15810, 10
  %15812 = or i32 %15809, %15811
  %15813 = xor i32 %15807, %15812
  %15814 = load i32, i32* %16, align 4
  %15815 = load i32, i32* %17, align 4
  %15816 = and i32 %15814, %15815
  %15817 = load i32, i32* %16, align 4
  %15818 = load i32, i32* %18, align 4
  %15819 = and i32 %15817, %15818
  %15820 = xor i32 %15816, %15819
  %15821 = load i32, i32* %17, align 4
  %15822 = load i32, i32* %18, align 4
  %15823 = and i32 %15821, %15822
  %15824 = xor i32 %15820, %15823
  %15825 = add i32 %15813, %15824
  store i32 %15825, i32* %25, align 4
  %15826 = load i32, i32* %22, align 4
  store i32 %15826, i32* %23, align 4
  %15827 = load i32, i32* %21, align 4
  store i32 %15827, i32* %22, align 4
  %15828 = load i32, i32* %20, align 4
  store i32 %15828, i32* %21, align 4
  %15829 = load i32, i32* %19, align 4
  %15830 = load i32, i32* %24, align 4
  %15831 = add i32 %15829, %15830
  store i32 %15831, i32* %20, align 4
  %15832 = load i32, i32* %18, align 4
  store i32 %15832, i32* %19, align 4
  %15833 = load i32, i32* %17, align 4
  store i32 %15833, i32* %18, align 4
  %15834 = load i32, i32* %16, align 4
  store i32 %15834, i32* %17, align 4
  %15835 = load i32, i32* %24, align 4
  %15836 = load i32, i32* %25, align 4
  %15837 = add i32 %15835, %15836
  store i32 %15837, i32* %16, align 4
  %15838 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15839 = load i32, i32* %15838, align 8
  %15840 = lshr i32 %15839, 17
  %15841 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15842 = load i32, i32* %15841, align 8
  %15843 = shl i32 %15842, 15
  %15844 = or i32 %15840, %15843
  %15845 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15846 = load i32, i32* %15845, align 8
  %15847 = lshr i32 %15846, 19
  %15848 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15849 = load i32, i32* %15848, align 8
  %15850 = shl i32 %15849, 13
  %15851 = or i32 %15847, %15850
  %15852 = xor i32 %15844, %15851
  %15853 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %15854 = load i32, i32* %15853, align 8
  %15855 = lshr i32 %15854, 10
  %15856 = xor i32 %15852, %15855
  %15857 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %15858 = load i32, i32* %15857, align 4
  %15859 = add i32 %15856, %15858
  %15860 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %15861 = load i32, i32* %15860, align 4
  %15862 = lshr i32 %15861, 7
  %15863 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %15864 = load i32, i32* %15863, align 4
  %15865 = shl i32 %15864, 25
  %15866 = or i32 %15862, %15865
  %15867 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %15868 = load i32, i32* %15867, align 4
  %15869 = lshr i32 %15868, 18
  %15870 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %15871 = load i32, i32* %15870, align 4
  %15872 = shl i32 %15871, 14
  %15873 = or i32 %15869, %15872
  %15874 = xor i32 %15866, %15873
  %15875 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %15876 = load i32, i32* %15875, align 4
  %15877 = lshr i32 %15876, 3
  %15878 = xor i32 %15874, %15877
  %15879 = add i32 %15859, %15878
  %15880 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 36
  %15881 = load i32, i32* %15880, align 16
  %15882 = add i32 %15879, %15881
  %15883 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  store i32 %15882, i32* %15883, align 16
  %15884 = load i32, i32* %23, align 4
  %15885 = load i32, i32* %20, align 4
  %15886 = lshr i32 %15885, 6
  %15887 = load i32, i32* %20, align 4
  %15888 = shl i32 %15887, 26
  %15889 = or i32 %15886, %15888
  %15890 = load i32, i32* %20, align 4
  %15891 = lshr i32 %15890, 11
  %15892 = load i32, i32* %20, align 4
  %15893 = shl i32 %15892, 21
  %15894 = or i32 %15891, %15893
  %15895 = xor i32 %15889, %15894
  %15896 = load i32, i32* %20, align 4
  %15897 = lshr i32 %15896, 25
  %15898 = load i32, i32* %20, align 4
  %15899 = shl i32 %15898, 7
  %15900 = or i32 %15897, %15899
  %15901 = xor i32 %15895, %15900
  %15902 = add i32 %15884, %15901
  %15903 = load i32, i32* %20, align 4
  %15904 = load i32, i32* %21, align 4
  %15905 = and i32 %15903, %15904
  %15906 = load i32, i32* %20, align 4
  %15907 = xor i32 %15906, -1
  %15908 = load i32, i32* %22, align 4
  %15909 = and i32 %15907, %15908
  %15910 = xor i32 %15905, %15909
  %15911 = add i32 %15902, %15910
  %15912 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 52), align 16
  %15913 = add i32 %15911, %15912
  %15914 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %15915 = load i32, i32* %15914, align 16
  %15916 = add i32 %15913, %15915
  store i32 %15916, i32* %24, align 4
  %15917 = load i32, i32* %16, align 4
  %15918 = lshr i32 %15917, 2
  %15919 = load i32, i32* %16, align 4
  %15920 = shl i32 %15919, 30
  %15921 = or i32 %15918, %15920
  %15922 = load i32, i32* %16, align 4
  %15923 = lshr i32 %15922, 13
  %15924 = load i32, i32* %16, align 4
  %15925 = shl i32 %15924, 19
  %15926 = or i32 %15923, %15925
  %15927 = xor i32 %15921, %15926
  %15928 = load i32, i32* %16, align 4
  %15929 = lshr i32 %15928, 22
  %15930 = load i32, i32* %16, align 4
  %15931 = shl i32 %15930, 10
  %15932 = or i32 %15929, %15931
  %15933 = xor i32 %15927, %15932
  %15934 = load i32, i32* %16, align 4
  %15935 = load i32, i32* %17, align 4
  %15936 = and i32 %15934, %15935
  %15937 = load i32, i32* %16, align 4
  %15938 = load i32, i32* %18, align 4
  %15939 = and i32 %15937, %15938
  %15940 = xor i32 %15936, %15939
  %15941 = load i32, i32* %17, align 4
  %15942 = load i32, i32* %18, align 4
  %15943 = and i32 %15941, %15942
  %15944 = xor i32 %15940, %15943
  %15945 = add i32 %15933, %15944
  store i32 %15945, i32* %25, align 4
  %15946 = load i32, i32* %22, align 4
  store i32 %15946, i32* %23, align 4
  %15947 = load i32, i32* %21, align 4
  store i32 %15947, i32* %22, align 4
  %15948 = load i32, i32* %20, align 4
  store i32 %15948, i32* %21, align 4
  %15949 = load i32, i32* %19, align 4
  %15950 = load i32, i32* %24, align 4
  %15951 = add i32 %15949, %15950
  store i32 %15951, i32* %20, align 4
  %15952 = load i32, i32* %18, align 4
  store i32 %15952, i32* %19, align 4
  %15953 = load i32, i32* %17, align 4
  store i32 %15953, i32* %18, align 4
  %15954 = load i32, i32* %16, align 4
  store i32 %15954, i32* %17, align 4
  %15955 = load i32, i32* %24, align 4
  %15956 = load i32, i32* %25, align 4
  %15957 = add i32 %15955, %15956
  store i32 %15957, i32* %16, align 4
  %15958 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15959 = load i32, i32* %15958, align 4
  %15960 = lshr i32 %15959, 17
  %15961 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15962 = load i32, i32* %15961, align 4
  %15963 = shl i32 %15962, 15
  %15964 = or i32 %15960, %15963
  %15965 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15966 = load i32, i32* %15965, align 4
  %15967 = lshr i32 %15966, 19
  %15968 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15969 = load i32, i32* %15968, align 4
  %15970 = shl i32 %15969, 13
  %15971 = or i32 %15967, %15970
  %15972 = xor i32 %15964, %15971
  %15973 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %15974 = load i32, i32* %15973, align 4
  %15975 = lshr i32 %15974, 10
  %15976 = xor i32 %15972, %15975
  %15977 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %15978 = load i32, i32* %15977, align 8
  %15979 = add i32 %15976, %15978
  %15980 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15981 = load i32, i32* %15980, align 8
  %15982 = lshr i32 %15981, 7
  %15983 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15984 = load i32, i32* %15983, align 8
  %15985 = shl i32 %15984, 25
  %15986 = or i32 %15982, %15985
  %15987 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15988 = load i32, i32* %15987, align 8
  %15989 = lshr i32 %15988, 18
  %15990 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15991 = load i32, i32* %15990, align 8
  %15992 = shl i32 %15991, 14
  %15993 = or i32 %15989, %15992
  %15994 = xor i32 %15986, %15993
  %15995 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %15996 = load i32, i32* %15995, align 8
  %15997 = lshr i32 %15996, 3
  %15998 = xor i32 %15994, %15997
  %15999 = add i32 %15979, %15998
  %16000 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 37
  %16001 = load i32, i32* %16000, align 4
  %16002 = add i32 %15999, %16001
  %16003 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  store i32 %16002, i32* %16003, align 4
  %16004 = load i32, i32* %23, align 4
  %16005 = load i32, i32* %20, align 4
  %16006 = lshr i32 %16005, 6
  %16007 = load i32, i32* %20, align 4
  %16008 = shl i32 %16007, 26
  %16009 = or i32 %16006, %16008
  %16010 = load i32, i32* %20, align 4
  %16011 = lshr i32 %16010, 11
  %16012 = load i32, i32* %20, align 4
  %16013 = shl i32 %16012, 21
  %16014 = or i32 %16011, %16013
  %16015 = xor i32 %16009, %16014
  %16016 = load i32, i32* %20, align 4
  %16017 = lshr i32 %16016, 25
  %16018 = load i32, i32* %20, align 4
  %16019 = shl i32 %16018, 7
  %16020 = or i32 %16017, %16019
  %16021 = xor i32 %16015, %16020
  %16022 = add i32 %16004, %16021
  %16023 = load i32, i32* %20, align 4
  %16024 = load i32, i32* %21, align 4
  %16025 = and i32 %16023, %16024
  %16026 = load i32, i32* %20, align 4
  %16027 = xor i32 %16026, -1
  %16028 = load i32, i32* %22, align 4
  %16029 = and i32 %16027, %16028
  %16030 = xor i32 %16025, %16029
  %16031 = add i32 %16022, %16030
  %16032 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 53), align 4
  %16033 = add i32 %16031, %16032
  %16034 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16035 = load i32, i32* %16034, align 4
  %16036 = add i32 %16033, %16035
  store i32 %16036, i32* %24, align 4
  %16037 = load i32, i32* %16, align 4
  %16038 = lshr i32 %16037, 2
  %16039 = load i32, i32* %16, align 4
  %16040 = shl i32 %16039, 30
  %16041 = or i32 %16038, %16040
  %16042 = load i32, i32* %16, align 4
  %16043 = lshr i32 %16042, 13
  %16044 = load i32, i32* %16, align 4
  %16045 = shl i32 %16044, 19
  %16046 = or i32 %16043, %16045
  %16047 = xor i32 %16041, %16046
  %16048 = load i32, i32* %16, align 4
  %16049 = lshr i32 %16048, 22
  %16050 = load i32, i32* %16, align 4
  %16051 = shl i32 %16050, 10
  %16052 = or i32 %16049, %16051
  %16053 = xor i32 %16047, %16052
  %16054 = load i32, i32* %16, align 4
  %16055 = load i32, i32* %17, align 4
  %16056 = and i32 %16054, %16055
  %16057 = load i32, i32* %16, align 4
  %16058 = load i32, i32* %18, align 4
  %16059 = and i32 %16057, %16058
  %16060 = xor i32 %16056, %16059
  %16061 = load i32, i32* %17, align 4
  %16062 = load i32, i32* %18, align 4
  %16063 = and i32 %16061, %16062
  %16064 = xor i32 %16060, %16063
  %16065 = add i32 %16053, %16064
  store i32 %16065, i32* %25, align 4
  %16066 = load i32, i32* %22, align 4
  store i32 %16066, i32* %23, align 4
  %16067 = load i32, i32* %21, align 4
  store i32 %16067, i32* %22, align 4
  %16068 = load i32, i32* %20, align 4
  store i32 %16068, i32* %21, align 4
  %16069 = load i32, i32* %19, align 4
  %16070 = load i32, i32* %24, align 4
  %16071 = add i32 %16069, %16070
  store i32 %16071, i32* %20, align 4
  %16072 = load i32, i32* %18, align 4
  store i32 %16072, i32* %19, align 4
  %16073 = load i32, i32* %17, align 4
  store i32 %16073, i32* %18, align 4
  %16074 = load i32, i32* %16, align 4
  store i32 %16074, i32* %17, align 4
  %16075 = load i32, i32* %24, align 4
  %16076 = load i32, i32* %25, align 4
  %16077 = add i32 %16075, %16076
  store i32 %16077, i32* %16, align 4
  %16078 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16079 = load i32, i32* %16078, align 16
  %16080 = lshr i32 %16079, 17
  %16081 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16082 = load i32, i32* %16081, align 16
  %16083 = shl i32 %16082, 15
  %16084 = or i32 %16080, %16083
  %16085 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16086 = load i32, i32* %16085, align 16
  %16087 = lshr i32 %16086, 19
  %16088 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16089 = load i32, i32* %16088, align 16
  %16090 = shl i32 %16089, 13
  %16091 = or i32 %16087, %16090
  %16092 = xor i32 %16084, %16091
  %16093 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16094 = load i32, i32* %16093, align 16
  %16095 = lshr i32 %16094, 10
  %16096 = xor i32 %16092, %16095
  %16097 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %16098 = load i32, i32* %16097, align 4
  %16099 = add i32 %16096, %16098
  %16100 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16101 = load i32, i32* %16100, align 4
  %16102 = lshr i32 %16101, 7
  %16103 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16104 = load i32, i32* %16103, align 4
  %16105 = shl i32 %16104, 25
  %16106 = or i32 %16102, %16105
  %16107 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16108 = load i32, i32* %16107, align 4
  %16109 = lshr i32 %16108, 18
  %16110 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16111 = load i32, i32* %16110, align 4
  %16112 = shl i32 %16111, 14
  %16113 = or i32 %16109, %16112
  %16114 = xor i32 %16106, %16113
  %16115 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16116 = load i32, i32* %16115, align 4
  %16117 = lshr i32 %16116, 3
  %16118 = xor i32 %16114, %16117
  %16119 = add i32 %16099, %16118
  %16120 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 38
  %16121 = load i32, i32* %16120, align 8
  %16122 = add i32 %16119, %16121
  %16123 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  store i32 %16122, i32* %16123, align 8
  %16124 = load i32, i32* %23, align 4
  %16125 = load i32, i32* %20, align 4
  %16126 = lshr i32 %16125, 6
  %16127 = load i32, i32* %20, align 4
  %16128 = shl i32 %16127, 26
  %16129 = or i32 %16126, %16128
  %16130 = load i32, i32* %20, align 4
  %16131 = lshr i32 %16130, 11
  %16132 = load i32, i32* %20, align 4
  %16133 = shl i32 %16132, 21
  %16134 = or i32 %16131, %16133
  %16135 = xor i32 %16129, %16134
  %16136 = load i32, i32* %20, align 4
  %16137 = lshr i32 %16136, 25
  %16138 = load i32, i32* %20, align 4
  %16139 = shl i32 %16138, 7
  %16140 = or i32 %16137, %16139
  %16141 = xor i32 %16135, %16140
  %16142 = add i32 %16124, %16141
  %16143 = load i32, i32* %20, align 4
  %16144 = load i32, i32* %21, align 4
  %16145 = and i32 %16143, %16144
  %16146 = load i32, i32* %20, align 4
  %16147 = xor i32 %16146, -1
  %16148 = load i32, i32* %22, align 4
  %16149 = and i32 %16147, %16148
  %16150 = xor i32 %16145, %16149
  %16151 = add i32 %16142, %16150
  %16152 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 54), align 8
  %16153 = add i32 %16151, %16152
  %16154 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16155 = load i32, i32* %16154, align 8
  %16156 = add i32 %16153, %16155
  store i32 %16156, i32* %24, align 4
  %16157 = load i32, i32* %16, align 4
  %16158 = lshr i32 %16157, 2
  %16159 = load i32, i32* %16, align 4
  %16160 = shl i32 %16159, 30
  %16161 = or i32 %16158, %16160
  %16162 = load i32, i32* %16, align 4
  %16163 = lshr i32 %16162, 13
  %16164 = load i32, i32* %16, align 4
  %16165 = shl i32 %16164, 19
  %16166 = or i32 %16163, %16165
  %16167 = xor i32 %16161, %16166
  %16168 = load i32, i32* %16, align 4
  %16169 = lshr i32 %16168, 22
  %16170 = load i32, i32* %16, align 4
  %16171 = shl i32 %16170, 10
  %16172 = or i32 %16169, %16171
  %16173 = xor i32 %16167, %16172
  %16174 = load i32, i32* %16, align 4
  %16175 = load i32, i32* %17, align 4
  %16176 = and i32 %16174, %16175
  %16177 = load i32, i32* %16, align 4
  %16178 = load i32, i32* %18, align 4
  %16179 = and i32 %16177, %16178
  %16180 = xor i32 %16176, %16179
  %16181 = load i32, i32* %17, align 4
  %16182 = load i32, i32* %18, align 4
  %16183 = and i32 %16181, %16182
  %16184 = xor i32 %16180, %16183
  %16185 = add i32 %16173, %16184
  store i32 %16185, i32* %25, align 4
  %16186 = load i32, i32* %22, align 4
  store i32 %16186, i32* %23, align 4
  %16187 = load i32, i32* %21, align 4
  store i32 %16187, i32* %22, align 4
  %16188 = load i32, i32* %20, align 4
  store i32 %16188, i32* %21, align 4
  %16189 = load i32, i32* %19, align 4
  %16190 = load i32, i32* %24, align 4
  %16191 = add i32 %16189, %16190
  store i32 %16191, i32* %20, align 4
  %16192 = load i32, i32* %18, align 4
  store i32 %16192, i32* %19, align 4
  %16193 = load i32, i32* %17, align 4
  store i32 %16193, i32* %18, align 4
  %16194 = load i32, i32* %16, align 4
  store i32 %16194, i32* %17, align 4
  %16195 = load i32, i32* %24, align 4
  %16196 = load i32, i32* %25, align 4
  %16197 = add i32 %16195, %16196
  store i32 %16197, i32* %16, align 4
  %16198 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16199 = load i32, i32* %16198, align 4
  %16200 = lshr i32 %16199, 17
  %16201 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16202 = load i32, i32* %16201, align 4
  %16203 = shl i32 %16202, 15
  %16204 = or i32 %16200, %16203
  %16205 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16206 = load i32, i32* %16205, align 4
  %16207 = lshr i32 %16206, 19
  %16208 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16209 = load i32, i32* %16208, align 4
  %16210 = shl i32 %16209, 13
  %16211 = or i32 %16207, %16210
  %16212 = xor i32 %16204, %16211
  %16213 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16214 = load i32, i32* %16213, align 4
  %16215 = lshr i32 %16214, 10
  %16216 = xor i32 %16212, %16215
  %16217 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %16218 = load i32, i32* %16217, align 16
  %16219 = add i32 %16216, %16218
  %16220 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16221 = load i32, i32* %16220, align 16
  %16222 = lshr i32 %16221, 7
  %16223 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16224 = load i32, i32* %16223, align 16
  %16225 = shl i32 %16224, 25
  %16226 = or i32 %16222, %16225
  %16227 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16228 = load i32, i32* %16227, align 16
  %16229 = lshr i32 %16228, 18
  %16230 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16231 = load i32, i32* %16230, align 16
  %16232 = shl i32 %16231, 14
  %16233 = or i32 %16229, %16232
  %16234 = xor i32 %16226, %16233
  %16235 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16236 = load i32, i32* %16235, align 16
  %16237 = lshr i32 %16236, 3
  %16238 = xor i32 %16234, %16237
  %16239 = add i32 %16219, %16238
  %16240 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 39
  %16241 = load i32, i32* %16240, align 4
  %16242 = add i32 %16239, %16241
  %16243 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  store i32 %16242, i32* %16243, align 4
  %16244 = load i32, i32* %23, align 4
  %16245 = load i32, i32* %20, align 4
  %16246 = lshr i32 %16245, 6
  %16247 = load i32, i32* %20, align 4
  %16248 = shl i32 %16247, 26
  %16249 = or i32 %16246, %16248
  %16250 = load i32, i32* %20, align 4
  %16251 = lshr i32 %16250, 11
  %16252 = load i32, i32* %20, align 4
  %16253 = shl i32 %16252, 21
  %16254 = or i32 %16251, %16253
  %16255 = xor i32 %16249, %16254
  %16256 = load i32, i32* %20, align 4
  %16257 = lshr i32 %16256, 25
  %16258 = load i32, i32* %20, align 4
  %16259 = shl i32 %16258, 7
  %16260 = or i32 %16257, %16259
  %16261 = xor i32 %16255, %16260
  %16262 = add i32 %16244, %16261
  %16263 = load i32, i32* %20, align 4
  %16264 = load i32, i32* %21, align 4
  %16265 = and i32 %16263, %16264
  %16266 = load i32, i32* %20, align 4
  %16267 = xor i32 %16266, -1
  %16268 = load i32, i32* %22, align 4
  %16269 = and i32 %16267, %16268
  %16270 = xor i32 %16265, %16269
  %16271 = add i32 %16262, %16270
  %16272 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 55), align 4
  %16273 = add i32 %16271, %16272
  %16274 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16275 = load i32, i32* %16274, align 4
  %16276 = add i32 %16273, %16275
  store i32 %16276, i32* %24, align 4
  %16277 = load i32, i32* %16, align 4
  %16278 = lshr i32 %16277, 2
  %16279 = load i32, i32* %16, align 4
  %16280 = shl i32 %16279, 30
  %16281 = or i32 %16278, %16280
  %16282 = load i32, i32* %16, align 4
  %16283 = lshr i32 %16282, 13
  %16284 = load i32, i32* %16, align 4
  %16285 = shl i32 %16284, 19
  %16286 = or i32 %16283, %16285
  %16287 = xor i32 %16281, %16286
  %16288 = load i32, i32* %16, align 4
  %16289 = lshr i32 %16288, 22
  %16290 = load i32, i32* %16, align 4
  %16291 = shl i32 %16290, 10
  %16292 = or i32 %16289, %16291
  %16293 = xor i32 %16287, %16292
  %16294 = load i32, i32* %16, align 4
  %16295 = load i32, i32* %17, align 4
  %16296 = and i32 %16294, %16295
  %16297 = load i32, i32* %16, align 4
  %16298 = load i32, i32* %18, align 4
  %16299 = and i32 %16297, %16298
  %16300 = xor i32 %16296, %16299
  %16301 = load i32, i32* %17, align 4
  %16302 = load i32, i32* %18, align 4
  %16303 = and i32 %16301, %16302
  %16304 = xor i32 %16300, %16303
  %16305 = add i32 %16293, %16304
  store i32 %16305, i32* %25, align 4
  %16306 = load i32, i32* %22, align 4
  store i32 %16306, i32* %23, align 4
  %16307 = load i32, i32* %21, align 4
  store i32 %16307, i32* %22, align 4
  %16308 = load i32, i32* %20, align 4
  store i32 %16308, i32* %21, align 4
  %16309 = load i32, i32* %19, align 4
  %16310 = load i32, i32* %24, align 4
  %16311 = add i32 %16309, %16310
  store i32 %16311, i32* %20, align 4
  %16312 = load i32, i32* %18, align 4
  store i32 %16312, i32* %19, align 4
  %16313 = load i32, i32* %17, align 4
  store i32 %16313, i32* %18, align 4
  %16314 = load i32, i32* %16, align 4
  store i32 %16314, i32* %17, align 4
  %16315 = load i32, i32* %24, align 4
  %16316 = load i32, i32* %25, align 4
  %16317 = add i32 %16315, %16316
  store i32 %16317, i32* %16, align 4
  %16318 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16319 = load i32, i32* %16318, align 8
  %16320 = lshr i32 %16319, 17
  %16321 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16322 = load i32, i32* %16321, align 8
  %16323 = shl i32 %16322, 15
  %16324 = or i32 %16320, %16323
  %16325 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16326 = load i32, i32* %16325, align 8
  %16327 = lshr i32 %16326, 19
  %16328 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16329 = load i32, i32* %16328, align 8
  %16330 = shl i32 %16329, 13
  %16331 = or i32 %16327, %16330
  %16332 = xor i32 %16324, %16331
  %16333 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16334 = load i32, i32* %16333, align 8
  %16335 = lshr i32 %16334, 10
  %16336 = xor i32 %16332, %16335
  %16337 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 49
  %16338 = load i32, i32* %16337, align 4
  %16339 = add i32 %16336, %16338
  %16340 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16341 = load i32, i32* %16340, align 4
  %16342 = lshr i32 %16341, 7
  %16343 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16344 = load i32, i32* %16343, align 4
  %16345 = shl i32 %16344, 25
  %16346 = or i32 %16342, %16345
  %16347 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16348 = load i32, i32* %16347, align 4
  %16349 = lshr i32 %16348, 18
  %16350 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16351 = load i32, i32* %16350, align 4
  %16352 = shl i32 %16351, 14
  %16353 = or i32 %16349, %16352
  %16354 = xor i32 %16346, %16353
  %16355 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16356 = load i32, i32* %16355, align 4
  %16357 = lshr i32 %16356, 3
  %16358 = xor i32 %16354, %16357
  %16359 = add i32 %16339, %16358
  %16360 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 40
  %16361 = load i32, i32* %16360, align 16
  %16362 = add i32 %16359, %16361
  %16363 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  store i32 %16362, i32* %16363, align 16
  %16364 = load i32, i32* %23, align 4
  %16365 = load i32, i32* %20, align 4
  %16366 = lshr i32 %16365, 6
  %16367 = load i32, i32* %20, align 4
  %16368 = shl i32 %16367, 26
  %16369 = or i32 %16366, %16368
  %16370 = load i32, i32* %20, align 4
  %16371 = lshr i32 %16370, 11
  %16372 = load i32, i32* %20, align 4
  %16373 = shl i32 %16372, 21
  %16374 = or i32 %16371, %16373
  %16375 = xor i32 %16369, %16374
  %16376 = load i32, i32* %20, align 4
  %16377 = lshr i32 %16376, 25
  %16378 = load i32, i32* %20, align 4
  %16379 = shl i32 %16378, 7
  %16380 = or i32 %16377, %16379
  %16381 = xor i32 %16375, %16380
  %16382 = add i32 %16364, %16381
  %16383 = load i32, i32* %20, align 4
  %16384 = load i32, i32* %21, align 4
  %16385 = and i32 %16383, %16384
  %16386 = load i32, i32* %20, align 4
  %16387 = xor i32 %16386, -1
  %16388 = load i32, i32* %22, align 4
  %16389 = and i32 %16387, %16388
  %16390 = xor i32 %16385, %16389
  %16391 = add i32 %16382, %16390
  %16392 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 56), align 16
  %16393 = add i32 %16391, %16392
  %16394 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16395 = load i32, i32* %16394, align 16
  %16396 = add i32 %16393, %16395
  store i32 %16396, i32* %24, align 4
  %16397 = load i32, i32* %16, align 4
  %16398 = lshr i32 %16397, 2
  %16399 = load i32, i32* %16, align 4
  %16400 = shl i32 %16399, 30
  %16401 = or i32 %16398, %16400
  %16402 = load i32, i32* %16, align 4
  %16403 = lshr i32 %16402, 13
  %16404 = load i32, i32* %16, align 4
  %16405 = shl i32 %16404, 19
  %16406 = or i32 %16403, %16405
  %16407 = xor i32 %16401, %16406
  %16408 = load i32, i32* %16, align 4
  %16409 = lshr i32 %16408, 22
  %16410 = load i32, i32* %16, align 4
  %16411 = shl i32 %16410, 10
  %16412 = or i32 %16409, %16411
  %16413 = xor i32 %16407, %16412
  %16414 = load i32, i32* %16, align 4
  %16415 = load i32, i32* %17, align 4
  %16416 = and i32 %16414, %16415
  %16417 = load i32, i32* %16, align 4
  %16418 = load i32, i32* %18, align 4
  %16419 = and i32 %16417, %16418
  %16420 = xor i32 %16416, %16419
  %16421 = load i32, i32* %17, align 4
  %16422 = load i32, i32* %18, align 4
  %16423 = and i32 %16421, %16422
  %16424 = xor i32 %16420, %16423
  %16425 = add i32 %16413, %16424
  store i32 %16425, i32* %25, align 4
  %16426 = load i32, i32* %22, align 4
  store i32 %16426, i32* %23, align 4
  %16427 = load i32, i32* %21, align 4
  store i32 %16427, i32* %22, align 4
  %16428 = load i32, i32* %20, align 4
  store i32 %16428, i32* %21, align 4
  %16429 = load i32, i32* %19, align 4
  %16430 = load i32, i32* %24, align 4
  %16431 = add i32 %16429, %16430
  store i32 %16431, i32* %20, align 4
  %16432 = load i32, i32* %18, align 4
  store i32 %16432, i32* %19, align 4
  %16433 = load i32, i32* %17, align 4
  store i32 %16433, i32* %18, align 4
  %16434 = load i32, i32* %16, align 4
  store i32 %16434, i32* %17, align 4
  %16435 = load i32, i32* %24, align 4
  %16436 = load i32, i32* %25, align 4
  %16437 = add i32 %16435, %16436
  store i32 %16437, i32* %16, align 4
  %16438 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16439 = load i32, i32* %16438, align 4
  %16440 = lshr i32 %16439, 17
  %16441 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16442 = load i32, i32* %16441, align 4
  %16443 = shl i32 %16442, 15
  %16444 = or i32 %16440, %16443
  %16445 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16446 = load i32, i32* %16445, align 4
  %16447 = lshr i32 %16446, 19
  %16448 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16449 = load i32, i32* %16448, align 4
  %16450 = shl i32 %16449, 13
  %16451 = or i32 %16447, %16450
  %16452 = xor i32 %16444, %16451
  %16453 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %16454 = load i32, i32* %16453, align 4
  %16455 = lshr i32 %16454, 10
  %16456 = xor i32 %16452, %16455
  %16457 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 50
  %16458 = load i32, i32* %16457, align 8
  %16459 = add i32 %16456, %16458
  %16460 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16461 = load i32, i32* %16460, align 8
  %16462 = lshr i32 %16461, 7
  %16463 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16464 = load i32, i32* %16463, align 8
  %16465 = shl i32 %16464, 25
  %16466 = or i32 %16462, %16465
  %16467 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16468 = load i32, i32* %16467, align 8
  %16469 = lshr i32 %16468, 18
  %16470 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16471 = load i32, i32* %16470, align 8
  %16472 = shl i32 %16471, 14
  %16473 = or i32 %16469, %16472
  %16474 = xor i32 %16466, %16473
  %16475 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16476 = load i32, i32* %16475, align 8
  %16477 = lshr i32 %16476, 3
  %16478 = xor i32 %16474, %16477
  %16479 = add i32 %16459, %16478
  %16480 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 41
  %16481 = load i32, i32* %16480, align 4
  %16482 = add i32 %16479, %16481
  %16483 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  store i32 %16482, i32* %16483, align 4
  %16484 = load i32, i32* %23, align 4
  %16485 = load i32, i32* %20, align 4
  %16486 = lshr i32 %16485, 6
  %16487 = load i32, i32* %20, align 4
  %16488 = shl i32 %16487, 26
  %16489 = or i32 %16486, %16488
  %16490 = load i32, i32* %20, align 4
  %16491 = lshr i32 %16490, 11
  %16492 = load i32, i32* %20, align 4
  %16493 = shl i32 %16492, 21
  %16494 = or i32 %16491, %16493
  %16495 = xor i32 %16489, %16494
  %16496 = load i32, i32* %20, align 4
  %16497 = lshr i32 %16496, 25
  %16498 = load i32, i32* %20, align 4
  %16499 = shl i32 %16498, 7
  %16500 = or i32 %16497, %16499
  %16501 = xor i32 %16495, %16500
  %16502 = add i32 %16484, %16501
  %16503 = load i32, i32* %20, align 4
  %16504 = load i32, i32* %21, align 4
  %16505 = and i32 %16503, %16504
  %16506 = load i32, i32* %20, align 4
  %16507 = xor i32 %16506, -1
  %16508 = load i32, i32* %22, align 4
  %16509 = and i32 %16507, %16508
  %16510 = xor i32 %16505, %16509
  %16511 = add i32 %16502, %16510
  %16512 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 57), align 4
  %16513 = add i32 %16511, %16512
  %16514 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16515 = load i32, i32* %16514, align 4
  %16516 = add i32 %16513, %16515
  store i32 %16516, i32* %24, align 4
  %16517 = load i32, i32* %16, align 4
  %16518 = lshr i32 %16517, 2
  %16519 = load i32, i32* %16, align 4
  %16520 = shl i32 %16519, 30
  %16521 = or i32 %16518, %16520
  %16522 = load i32, i32* %16, align 4
  %16523 = lshr i32 %16522, 13
  %16524 = load i32, i32* %16, align 4
  %16525 = shl i32 %16524, 19
  %16526 = or i32 %16523, %16525
  %16527 = xor i32 %16521, %16526
  %16528 = load i32, i32* %16, align 4
  %16529 = lshr i32 %16528, 22
  %16530 = load i32, i32* %16, align 4
  %16531 = shl i32 %16530, 10
  %16532 = or i32 %16529, %16531
  %16533 = xor i32 %16527, %16532
  %16534 = load i32, i32* %16, align 4
  %16535 = load i32, i32* %17, align 4
  %16536 = and i32 %16534, %16535
  %16537 = load i32, i32* %16, align 4
  %16538 = load i32, i32* %18, align 4
  %16539 = and i32 %16537, %16538
  %16540 = xor i32 %16536, %16539
  %16541 = load i32, i32* %17, align 4
  %16542 = load i32, i32* %18, align 4
  %16543 = and i32 %16541, %16542
  %16544 = xor i32 %16540, %16543
  %16545 = add i32 %16533, %16544
  store i32 %16545, i32* %25, align 4
  %16546 = load i32, i32* %22, align 4
  store i32 %16546, i32* %23, align 4
  %16547 = load i32, i32* %21, align 4
  store i32 %16547, i32* %22, align 4
  %16548 = load i32, i32* %20, align 4
  store i32 %16548, i32* %21, align 4
  %16549 = load i32, i32* %19, align 4
  %16550 = load i32, i32* %24, align 4
  %16551 = add i32 %16549, %16550
  store i32 %16551, i32* %20, align 4
  %16552 = load i32, i32* %18, align 4
  store i32 %16552, i32* %19, align 4
  %16553 = load i32, i32* %17, align 4
  store i32 %16553, i32* %18, align 4
  %16554 = load i32, i32* %16, align 4
  store i32 %16554, i32* %17, align 4
  %16555 = load i32, i32* %24, align 4
  %16556 = load i32, i32* %25, align 4
  %16557 = add i32 %16555, %16556
  store i32 %16557, i32* %16, align 4
  %16558 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16559 = load i32, i32* %16558, align 16
  %16560 = lshr i32 %16559, 17
  %16561 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16562 = load i32, i32* %16561, align 16
  %16563 = shl i32 %16562, 15
  %16564 = or i32 %16560, %16563
  %16565 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16566 = load i32, i32* %16565, align 16
  %16567 = lshr i32 %16566, 19
  %16568 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16569 = load i32, i32* %16568, align 16
  %16570 = shl i32 %16569, 13
  %16571 = or i32 %16567, %16570
  %16572 = xor i32 %16564, %16571
  %16573 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %16574 = load i32, i32* %16573, align 16
  %16575 = lshr i32 %16574, 10
  %16576 = xor i32 %16572, %16575
  %16577 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 51
  %16578 = load i32, i32* %16577, align 4
  %16579 = add i32 %16576, %16578
  %16580 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16581 = load i32, i32* %16580, align 4
  %16582 = lshr i32 %16581, 7
  %16583 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16584 = load i32, i32* %16583, align 4
  %16585 = shl i32 %16584, 25
  %16586 = or i32 %16582, %16585
  %16587 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16588 = load i32, i32* %16587, align 4
  %16589 = lshr i32 %16588, 18
  %16590 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16591 = load i32, i32* %16590, align 4
  %16592 = shl i32 %16591, 14
  %16593 = or i32 %16589, %16592
  %16594 = xor i32 %16586, %16593
  %16595 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16596 = load i32, i32* %16595, align 4
  %16597 = lshr i32 %16596, 3
  %16598 = xor i32 %16594, %16597
  %16599 = add i32 %16579, %16598
  %16600 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 42
  %16601 = load i32, i32* %16600, align 8
  %16602 = add i32 %16599, %16601
  %16603 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  store i32 %16602, i32* %16603, align 8
  %16604 = load i32, i32* %23, align 4
  %16605 = load i32, i32* %20, align 4
  %16606 = lshr i32 %16605, 6
  %16607 = load i32, i32* %20, align 4
  %16608 = shl i32 %16607, 26
  %16609 = or i32 %16606, %16608
  %16610 = load i32, i32* %20, align 4
  %16611 = lshr i32 %16610, 11
  %16612 = load i32, i32* %20, align 4
  %16613 = shl i32 %16612, 21
  %16614 = or i32 %16611, %16613
  %16615 = xor i32 %16609, %16614
  %16616 = load i32, i32* %20, align 4
  %16617 = lshr i32 %16616, 25
  %16618 = load i32, i32* %20, align 4
  %16619 = shl i32 %16618, 7
  %16620 = or i32 %16617, %16619
  %16621 = xor i32 %16615, %16620
  %16622 = add i32 %16604, %16621
  %16623 = load i32, i32* %20, align 4
  %16624 = load i32, i32* %21, align 4
  %16625 = and i32 %16623, %16624
  %16626 = load i32, i32* %20, align 4
  %16627 = xor i32 %16626, -1
  %16628 = load i32, i32* %22, align 4
  %16629 = and i32 %16627, %16628
  %16630 = xor i32 %16625, %16629
  %16631 = add i32 %16622, %16630
  %16632 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 58), align 8
  %16633 = add i32 %16631, %16632
  %16634 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16635 = load i32, i32* %16634, align 8
  %16636 = add i32 %16633, %16635
  store i32 %16636, i32* %24, align 4
  %16637 = load i32, i32* %16, align 4
  %16638 = lshr i32 %16637, 2
  %16639 = load i32, i32* %16, align 4
  %16640 = shl i32 %16639, 30
  %16641 = or i32 %16638, %16640
  %16642 = load i32, i32* %16, align 4
  %16643 = lshr i32 %16642, 13
  %16644 = load i32, i32* %16, align 4
  %16645 = shl i32 %16644, 19
  %16646 = or i32 %16643, %16645
  %16647 = xor i32 %16641, %16646
  %16648 = load i32, i32* %16, align 4
  %16649 = lshr i32 %16648, 22
  %16650 = load i32, i32* %16, align 4
  %16651 = shl i32 %16650, 10
  %16652 = or i32 %16649, %16651
  %16653 = xor i32 %16647, %16652
  %16654 = load i32, i32* %16, align 4
  %16655 = load i32, i32* %17, align 4
  %16656 = and i32 %16654, %16655
  %16657 = load i32, i32* %16, align 4
  %16658 = load i32, i32* %18, align 4
  %16659 = and i32 %16657, %16658
  %16660 = xor i32 %16656, %16659
  %16661 = load i32, i32* %17, align 4
  %16662 = load i32, i32* %18, align 4
  %16663 = and i32 %16661, %16662
  %16664 = xor i32 %16660, %16663
  %16665 = add i32 %16653, %16664
  store i32 %16665, i32* %25, align 4
  %16666 = load i32, i32* %22, align 4
  store i32 %16666, i32* %23, align 4
  %16667 = load i32, i32* %21, align 4
  store i32 %16667, i32* %22, align 4
  %16668 = load i32, i32* %20, align 4
  store i32 %16668, i32* %21, align 4
  %16669 = load i32, i32* %19, align 4
  %16670 = load i32, i32* %24, align 4
  %16671 = add i32 %16669, %16670
  store i32 %16671, i32* %20, align 4
  %16672 = load i32, i32* %18, align 4
  store i32 %16672, i32* %19, align 4
  %16673 = load i32, i32* %17, align 4
  store i32 %16673, i32* %18, align 4
  %16674 = load i32, i32* %16, align 4
  store i32 %16674, i32* %17, align 4
  %16675 = load i32, i32* %24, align 4
  %16676 = load i32, i32* %25, align 4
  %16677 = add i32 %16675, %16676
  store i32 %16677, i32* %16, align 4
  %16678 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16679 = load i32, i32* %16678, align 4
  %16680 = lshr i32 %16679, 17
  %16681 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16682 = load i32, i32* %16681, align 4
  %16683 = shl i32 %16682, 15
  %16684 = or i32 %16680, %16683
  %16685 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16686 = load i32, i32* %16685, align 4
  %16687 = lshr i32 %16686, 19
  %16688 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16689 = load i32, i32* %16688, align 4
  %16690 = shl i32 %16689, 13
  %16691 = or i32 %16687, %16690
  %16692 = xor i32 %16684, %16691
  %16693 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 57
  %16694 = load i32, i32* %16693, align 4
  %16695 = lshr i32 %16694, 10
  %16696 = xor i32 %16692, %16695
  %16697 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 52
  %16698 = load i32, i32* %16697, align 16
  %16699 = add i32 %16696, %16698
  %16700 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16701 = load i32, i32* %16700, align 16
  %16702 = lshr i32 %16701, 7
  %16703 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16704 = load i32, i32* %16703, align 16
  %16705 = shl i32 %16704, 25
  %16706 = or i32 %16702, %16705
  %16707 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16708 = load i32, i32* %16707, align 16
  %16709 = lshr i32 %16708, 18
  %16710 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16711 = load i32, i32* %16710, align 16
  %16712 = shl i32 %16711, 14
  %16713 = or i32 %16709, %16712
  %16714 = xor i32 %16706, %16713
  %16715 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16716 = load i32, i32* %16715, align 16
  %16717 = lshr i32 %16716, 3
  %16718 = xor i32 %16714, %16717
  %16719 = add i32 %16699, %16718
  %16720 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 43
  %16721 = load i32, i32* %16720, align 4
  %16722 = add i32 %16719, %16721
  %16723 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  store i32 %16722, i32* %16723, align 4
  %16724 = load i32, i32* %23, align 4
  %16725 = load i32, i32* %20, align 4
  %16726 = lshr i32 %16725, 6
  %16727 = load i32, i32* %20, align 4
  %16728 = shl i32 %16727, 26
  %16729 = or i32 %16726, %16728
  %16730 = load i32, i32* %20, align 4
  %16731 = lshr i32 %16730, 11
  %16732 = load i32, i32* %20, align 4
  %16733 = shl i32 %16732, 21
  %16734 = or i32 %16731, %16733
  %16735 = xor i32 %16729, %16734
  %16736 = load i32, i32* %20, align 4
  %16737 = lshr i32 %16736, 25
  %16738 = load i32, i32* %20, align 4
  %16739 = shl i32 %16738, 7
  %16740 = or i32 %16737, %16739
  %16741 = xor i32 %16735, %16740
  %16742 = add i32 %16724, %16741
  %16743 = load i32, i32* %20, align 4
  %16744 = load i32, i32* %21, align 4
  %16745 = and i32 %16743, %16744
  %16746 = load i32, i32* %20, align 4
  %16747 = xor i32 %16746, -1
  %16748 = load i32, i32* %22, align 4
  %16749 = and i32 %16747, %16748
  %16750 = xor i32 %16745, %16749
  %16751 = add i32 %16742, %16750
  %16752 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 59), align 4
  %16753 = add i32 %16751, %16752
  %16754 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16755 = load i32, i32* %16754, align 4
  %16756 = add i32 %16753, %16755
  store i32 %16756, i32* %24, align 4
  %16757 = load i32, i32* %16, align 4
  %16758 = lshr i32 %16757, 2
  %16759 = load i32, i32* %16, align 4
  %16760 = shl i32 %16759, 30
  %16761 = or i32 %16758, %16760
  %16762 = load i32, i32* %16, align 4
  %16763 = lshr i32 %16762, 13
  %16764 = load i32, i32* %16, align 4
  %16765 = shl i32 %16764, 19
  %16766 = or i32 %16763, %16765
  %16767 = xor i32 %16761, %16766
  %16768 = load i32, i32* %16, align 4
  %16769 = lshr i32 %16768, 22
  %16770 = load i32, i32* %16, align 4
  %16771 = shl i32 %16770, 10
  %16772 = or i32 %16769, %16771
  %16773 = xor i32 %16767, %16772
  %16774 = load i32, i32* %16, align 4
  %16775 = load i32, i32* %17, align 4
  %16776 = and i32 %16774, %16775
  %16777 = load i32, i32* %16, align 4
  %16778 = load i32, i32* %18, align 4
  %16779 = and i32 %16777, %16778
  %16780 = xor i32 %16776, %16779
  %16781 = load i32, i32* %17, align 4
  %16782 = load i32, i32* %18, align 4
  %16783 = and i32 %16781, %16782
  %16784 = xor i32 %16780, %16783
  %16785 = add i32 %16773, %16784
  store i32 %16785, i32* %25, align 4
  %16786 = load i32, i32* %22, align 4
  store i32 %16786, i32* %23, align 4
  %16787 = load i32, i32* %21, align 4
  store i32 %16787, i32* %22, align 4
  %16788 = load i32, i32* %20, align 4
  store i32 %16788, i32* %21, align 4
  %16789 = load i32, i32* %19, align 4
  %16790 = load i32, i32* %24, align 4
  %16791 = add i32 %16789, %16790
  store i32 %16791, i32* %20, align 4
  %16792 = load i32, i32* %18, align 4
  store i32 %16792, i32* %19, align 4
  %16793 = load i32, i32* %17, align 4
  store i32 %16793, i32* %18, align 4
  %16794 = load i32, i32* %16, align 4
  store i32 %16794, i32* %17, align 4
  %16795 = load i32, i32* %24, align 4
  %16796 = load i32, i32* %25, align 4
  %16797 = add i32 %16795, %16796
  store i32 %16797, i32* %16, align 4
  %16798 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16799 = load i32, i32* %16798, align 8
  %16800 = lshr i32 %16799, 17
  %16801 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16802 = load i32, i32* %16801, align 8
  %16803 = shl i32 %16802, 15
  %16804 = or i32 %16800, %16803
  %16805 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16806 = load i32, i32* %16805, align 8
  %16807 = lshr i32 %16806, 19
  %16808 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16809 = load i32, i32* %16808, align 8
  %16810 = shl i32 %16809, 13
  %16811 = or i32 %16807, %16810
  %16812 = xor i32 %16804, %16811
  %16813 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 58
  %16814 = load i32, i32* %16813, align 8
  %16815 = lshr i32 %16814, 10
  %16816 = xor i32 %16812, %16815
  %16817 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 53
  %16818 = load i32, i32* %16817, align 4
  %16819 = add i32 %16816, %16818
  %16820 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16821 = load i32, i32* %16820, align 4
  %16822 = lshr i32 %16821, 7
  %16823 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16824 = load i32, i32* %16823, align 4
  %16825 = shl i32 %16824, 25
  %16826 = or i32 %16822, %16825
  %16827 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16828 = load i32, i32* %16827, align 4
  %16829 = lshr i32 %16828, 18
  %16830 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16831 = load i32, i32* %16830, align 4
  %16832 = shl i32 %16831, 14
  %16833 = or i32 %16829, %16832
  %16834 = xor i32 %16826, %16833
  %16835 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16836 = load i32, i32* %16835, align 4
  %16837 = lshr i32 %16836, 3
  %16838 = xor i32 %16834, %16837
  %16839 = add i32 %16819, %16838
  %16840 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 44
  %16841 = load i32, i32* %16840, align 16
  %16842 = add i32 %16839, %16841
  %16843 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  store i32 %16842, i32* %16843, align 16
  %16844 = load i32, i32* %23, align 4
  %16845 = load i32, i32* %20, align 4
  %16846 = lshr i32 %16845, 6
  %16847 = load i32, i32* %20, align 4
  %16848 = shl i32 %16847, 26
  %16849 = or i32 %16846, %16848
  %16850 = load i32, i32* %20, align 4
  %16851 = lshr i32 %16850, 11
  %16852 = load i32, i32* %20, align 4
  %16853 = shl i32 %16852, 21
  %16854 = or i32 %16851, %16853
  %16855 = xor i32 %16849, %16854
  %16856 = load i32, i32* %20, align 4
  %16857 = lshr i32 %16856, 25
  %16858 = load i32, i32* %20, align 4
  %16859 = shl i32 %16858, 7
  %16860 = or i32 %16857, %16859
  %16861 = xor i32 %16855, %16860
  %16862 = add i32 %16844, %16861
  %16863 = load i32, i32* %20, align 4
  %16864 = load i32, i32* %21, align 4
  %16865 = and i32 %16863, %16864
  %16866 = load i32, i32* %20, align 4
  %16867 = xor i32 %16866, -1
  %16868 = load i32, i32* %22, align 4
  %16869 = and i32 %16867, %16868
  %16870 = xor i32 %16865, %16869
  %16871 = add i32 %16862, %16870
  %16872 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 60), align 16
  %16873 = add i32 %16871, %16872
  %16874 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %16875 = load i32, i32* %16874, align 16
  %16876 = add i32 %16873, %16875
  store i32 %16876, i32* %24, align 4
  %16877 = load i32, i32* %16, align 4
  %16878 = lshr i32 %16877, 2
  %16879 = load i32, i32* %16, align 4
  %16880 = shl i32 %16879, 30
  %16881 = or i32 %16878, %16880
  %16882 = load i32, i32* %16, align 4
  %16883 = lshr i32 %16882, 13
  %16884 = load i32, i32* %16, align 4
  %16885 = shl i32 %16884, 19
  %16886 = or i32 %16883, %16885
  %16887 = xor i32 %16881, %16886
  %16888 = load i32, i32* %16, align 4
  %16889 = lshr i32 %16888, 22
  %16890 = load i32, i32* %16, align 4
  %16891 = shl i32 %16890, 10
  %16892 = or i32 %16889, %16891
  %16893 = xor i32 %16887, %16892
  %16894 = load i32, i32* %16, align 4
  %16895 = load i32, i32* %17, align 4
  %16896 = and i32 %16894, %16895
  %16897 = load i32, i32* %16, align 4
  %16898 = load i32, i32* %18, align 4
  %16899 = and i32 %16897, %16898
  %16900 = xor i32 %16896, %16899
  %16901 = load i32, i32* %17, align 4
  %16902 = load i32, i32* %18, align 4
  %16903 = and i32 %16901, %16902
  %16904 = xor i32 %16900, %16903
  %16905 = add i32 %16893, %16904
  store i32 %16905, i32* %25, align 4
  %16906 = load i32, i32* %22, align 4
  store i32 %16906, i32* %23, align 4
  %16907 = load i32, i32* %21, align 4
  store i32 %16907, i32* %22, align 4
  %16908 = load i32, i32* %20, align 4
  store i32 %16908, i32* %21, align 4
  %16909 = load i32, i32* %19, align 4
  %16910 = load i32, i32* %24, align 4
  %16911 = add i32 %16909, %16910
  store i32 %16911, i32* %20, align 4
  %16912 = load i32, i32* %18, align 4
  store i32 %16912, i32* %19, align 4
  %16913 = load i32, i32* %17, align 4
  store i32 %16913, i32* %18, align 4
  %16914 = load i32, i32* %16, align 4
  store i32 %16914, i32* %17, align 4
  %16915 = load i32, i32* %24, align 4
  %16916 = load i32, i32* %25, align 4
  %16917 = add i32 %16915, %16916
  store i32 %16917, i32* %16, align 4
  %16918 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16919 = load i32, i32* %16918, align 4
  %16920 = lshr i32 %16919, 17
  %16921 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16922 = load i32, i32* %16921, align 4
  %16923 = shl i32 %16922, 15
  %16924 = or i32 %16920, %16923
  %16925 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16926 = load i32, i32* %16925, align 4
  %16927 = lshr i32 %16926, 19
  %16928 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16929 = load i32, i32* %16928, align 4
  %16930 = shl i32 %16929, 13
  %16931 = or i32 %16927, %16930
  %16932 = xor i32 %16924, %16931
  %16933 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 59
  %16934 = load i32, i32* %16933, align 4
  %16935 = lshr i32 %16934, 10
  %16936 = xor i32 %16932, %16935
  %16937 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 54
  %16938 = load i32, i32* %16937, align 8
  %16939 = add i32 %16936, %16938
  %16940 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %16941 = load i32, i32* %16940, align 8
  %16942 = lshr i32 %16941, 7
  %16943 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %16944 = load i32, i32* %16943, align 8
  %16945 = shl i32 %16944, 25
  %16946 = or i32 %16942, %16945
  %16947 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %16948 = load i32, i32* %16947, align 8
  %16949 = lshr i32 %16948, 18
  %16950 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %16951 = load i32, i32* %16950, align 8
  %16952 = shl i32 %16951, 14
  %16953 = or i32 %16949, %16952
  %16954 = xor i32 %16946, %16953
  %16955 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %16956 = load i32, i32* %16955, align 8
  %16957 = lshr i32 %16956, 3
  %16958 = xor i32 %16954, %16957
  %16959 = add i32 %16939, %16958
  %16960 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 45
  %16961 = load i32, i32* %16960, align 4
  %16962 = add i32 %16959, %16961
  %16963 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  store i32 %16962, i32* %16963, align 4
  %16964 = load i32, i32* %23, align 4
  %16965 = load i32, i32* %20, align 4
  %16966 = lshr i32 %16965, 6
  %16967 = load i32, i32* %20, align 4
  %16968 = shl i32 %16967, 26
  %16969 = or i32 %16966, %16968
  %16970 = load i32, i32* %20, align 4
  %16971 = lshr i32 %16970, 11
  %16972 = load i32, i32* %20, align 4
  %16973 = shl i32 %16972, 21
  %16974 = or i32 %16971, %16973
  %16975 = xor i32 %16969, %16974
  %16976 = load i32, i32* %20, align 4
  %16977 = lshr i32 %16976, 25
  %16978 = load i32, i32* %20, align 4
  %16979 = shl i32 %16978, 7
  %16980 = or i32 %16977, %16979
  %16981 = xor i32 %16975, %16980
  %16982 = add i32 %16964, %16981
  %16983 = load i32, i32* %20, align 4
  %16984 = load i32, i32* %21, align 4
  %16985 = and i32 %16983, %16984
  %16986 = load i32, i32* %20, align 4
  %16987 = xor i32 %16986, -1
  %16988 = load i32, i32* %22, align 4
  %16989 = and i32 %16987, %16988
  %16990 = xor i32 %16985, %16989
  %16991 = add i32 %16982, %16990
  %16992 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 61), align 4
  %16993 = add i32 %16991, %16992
  %16994 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %16995 = load i32, i32* %16994, align 4
  %16996 = add i32 %16993, %16995
  store i32 %16996, i32* %24, align 4
  %16997 = load i32, i32* %16, align 4
  %16998 = lshr i32 %16997, 2
  %16999 = load i32, i32* %16, align 4
  %17000 = shl i32 %16999, 30
  %17001 = or i32 %16998, %17000
  %17002 = load i32, i32* %16, align 4
  %17003 = lshr i32 %17002, 13
  %17004 = load i32, i32* %16, align 4
  %17005 = shl i32 %17004, 19
  %17006 = or i32 %17003, %17005
  %17007 = xor i32 %17001, %17006
  %17008 = load i32, i32* %16, align 4
  %17009 = lshr i32 %17008, 22
  %17010 = load i32, i32* %16, align 4
  %17011 = shl i32 %17010, 10
  %17012 = or i32 %17009, %17011
  %17013 = xor i32 %17007, %17012
  %17014 = load i32, i32* %16, align 4
  %17015 = load i32, i32* %17, align 4
  %17016 = and i32 %17014, %17015
  %17017 = load i32, i32* %16, align 4
  %17018 = load i32, i32* %18, align 4
  %17019 = and i32 %17017, %17018
  %17020 = xor i32 %17016, %17019
  %17021 = load i32, i32* %17, align 4
  %17022 = load i32, i32* %18, align 4
  %17023 = and i32 %17021, %17022
  %17024 = xor i32 %17020, %17023
  %17025 = add i32 %17013, %17024
  store i32 %17025, i32* %25, align 4
  %17026 = load i32, i32* %22, align 4
  store i32 %17026, i32* %23, align 4
  %17027 = load i32, i32* %21, align 4
  store i32 %17027, i32* %22, align 4
  %17028 = load i32, i32* %20, align 4
  store i32 %17028, i32* %21, align 4
  %17029 = load i32, i32* %19, align 4
  %17030 = load i32, i32* %24, align 4
  %17031 = add i32 %17029, %17030
  store i32 %17031, i32* %20, align 4
  %17032 = load i32, i32* %18, align 4
  store i32 %17032, i32* %19, align 4
  %17033 = load i32, i32* %17, align 4
  store i32 %17033, i32* %18, align 4
  %17034 = load i32, i32* %16, align 4
  store i32 %17034, i32* %17, align 4
  %17035 = load i32, i32* %24, align 4
  %17036 = load i32, i32* %25, align 4
  %17037 = add i32 %17035, %17036
  store i32 %17037, i32* %16, align 4
  %17038 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %17039 = load i32, i32* %17038, align 16
  %17040 = lshr i32 %17039, 17
  %17041 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %17042 = load i32, i32* %17041, align 16
  %17043 = shl i32 %17042, 15
  %17044 = or i32 %17040, %17043
  %17045 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %17046 = load i32, i32* %17045, align 16
  %17047 = lshr i32 %17046, 19
  %17048 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %17049 = load i32, i32* %17048, align 16
  %17050 = shl i32 %17049, 13
  %17051 = or i32 %17047, %17050
  %17052 = xor i32 %17044, %17051
  %17053 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 60
  %17054 = load i32, i32* %17053, align 16
  %17055 = lshr i32 %17054, 10
  %17056 = xor i32 %17052, %17055
  %17057 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 55
  %17058 = load i32, i32* %17057, align 4
  %17059 = add i32 %17056, %17058
  %17060 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17061 = load i32, i32* %17060, align 4
  %17062 = lshr i32 %17061, 7
  %17063 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17064 = load i32, i32* %17063, align 4
  %17065 = shl i32 %17064, 25
  %17066 = or i32 %17062, %17065
  %17067 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17068 = load i32, i32* %17067, align 4
  %17069 = lshr i32 %17068, 18
  %17070 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17071 = load i32, i32* %17070, align 4
  %17072 = shl i32 %17071, 14
  %17073 = or i32 %17069, %17072
  %17074 = xor i32 %17066, %17073
  %17075 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17076 = load i32, i32* %17075, align 4
  %17077 = lshr i32 %17076, 3
  %17078 = xor i32 %17074, %17077
  %17079 = add i32 %17059, %17078
  %17080 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 46
  %17081 = load i32, i32* %17080, align 8
  %17082 = add i32 %17079, %17081
  %17083 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 62
  store i32 %17082, i32* %17083, align 8
  %17084 = load i32, i32* %23, align 4
  %17085 = load i32, i32* %20, align 4
  %17086 = lshr i32 %17085, 6
  %17087 = load i32, i32* %20, align 4
  %17088 = shl i32 %17087, 26
  %17089 = or i32 %17086, %17088
  %17090 = load i32, i32* %20, align 4
  %17091 = lshr i32 %17090, 11
  %17092 = load i32, i32* %20, align 4
  %17093 = shl i32 %17092, 21
  %17094 = or i32 %17091, %17093
  %17095 = xor i32 %17089, %17094
  %17096 = load i32, i32* %20, align 4
  %17097 = lshr i32 %17096, 25
  %17098 = load i32, i32* %20, align 4
  %17099 = shl i32 %17098, 7
  %17100 = or i32 %17097, %17099
  %17101 = xor i32 %17095, %17100
  %17102 = add i32 %17084, %17101
  %17103 = load i32, i32* %20, align 4
  %17104 = load i32, i32* %21, align 4
  %17105 = and i32 %17103, %17104
  %17106 = load i32, i32* %20, align 4
  %17107 = xor i32 %17106, -1
  %17108 = load i32, i32* %22, align 4
  %17109 = and i32 %17107, %17108
  %17110 = xor i32 %17105, %17109
  %17111 = add i32 %17102, %17110
  %17112 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 62), align 8
  %17113 = add i32 %17111, %17112
  %17114 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 62
  %17115 = load i32, i32* %17114, align 8
  %17116 = add i32 %17113, %17115
  store i32 %17116, i32* %24, align 4
  %17117 = load i32, i32* %16, align 4
  %17118 = lshr i32 %17117, 2
  %17119 = load i32, i32* %16, align 4
  %17120 = shl i32 %17119, 30
  %17121 = or i32 %17118, %17120
  %17122 = load i32, i32* %16, align 4
  %17123 = lshr i32 %17122, 13
  %17124 = load i32, i32* %16, align 4
  %17125 = shl i32 %17124, 19
  %17126 = or i32 %17123, %17125
  %17127 = xor i32 %17121, %17126
  %17128 = load i32, i32* %16, align 4
  %17129 = lshr i32 %17128, 22
  %17130 = load i32, i32* %16, align 4
  %17131 = shl i32 %17130, 10
  %17132 = or i32 %17129, %17131
  %17133 = xor i32 %17127, %17132
  %17134 = load i32, i32* %16, align 4
  %17135 = load i32, i32* %17, align 4
  %17136 = and i32 %17134, %17135
  %17137 = load i32, i32* %16, align 4
  %17138 = load i32, i32* %18, align 4
  %17139 = and i32 %17137, %17138
  %17140 = xor i32 %17136, %17139
  %17141 = load i32, i32* %17, align 4
  %17142 = load i32, i32* %18, align 4
  %17143 = and i32 %17141, %17142
  %17144 = xor i32 %17140, %17143
  %17145 = add i32 %17133, %17144
  store i32 %17145, i32* %25, align 4
  %17146 = load i32, i32* %22, align 4
  store i32 %17146, i32* %23, align 4
  %17147 = load i32, i32* %21, align 4
  store i32 %17147, i32* %22, align 4
  %17148 = load i32, i32* %20, align 4
  store i32 %17148, i32* %21, align 4
  %17149 = load i32, i32* %19, align 4
  %17150 = load i32, i32* %24, align 4
  %17151 = add i32 %17149, %17150
  store i32 %17151, i32* %20, align 4
  %17152 = load i32, i32* %18, align 4
  store i32 %17152, i32* %19, align 4
  %17153 = load i32, i32* %17, align 4
  store i32 %17153, i32* %18, align 4
  %17154 = load i32, i32* %16, align 4
  store i32 %17154, i32* %17, align 4
  %17155 = load i32, i32* %24, align 4
  %17156 = load i32, i32* %25, align 4
  %17157 = add i32 %17155, %17156
  store i32 %17157, i32* %16, align 4
  %17158 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %17159 = load i32, i32* %17158, align 4
  %17160 = lshr i32 %17159, 17
  %17161 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %17162 = load i32, i32* %17161, align 4
  %17163 = shl i32 %17162, 15
  %17164 = or i32 %17160, %17163
  %17165 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %17166 = load i32, i32* %17165, align 4
  %17167 = lshr i32 %17166, 19
  %17168 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %17169 = load i32, i32* %17168, align 4
  %17170 = shl i32 %17169, 13
  %17171 = or i32 %17167, %17170
  %17172 = xor i32 %17164, %17171
  %17173 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 61
  %17174 = load i32, i32* %17173, align 4
  %17175 = lshr i32 %17174, 10
  %17176 = xor i32 %17172, %17175
  %17177 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 56
  %17178 = load i32, i32* %17177, align 16
  %17179 = add i32 %17176, %17178
  %17180 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %17181 = load i32, i32* %17180, align 16
  %17182 = lshr i32 %17181, 7
  %17183 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %17184 = load i32, i32* %17183, align 16
  %17185 = shl i32 %17184, 25
  %17186 = or i32 %17182, %17185
  %17187 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %17188 = load i32, i32* %17187, align 16
  %17189 = lshr i32 %17188, 18
  %17190 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %17191 = load i32, i32* %17190, align 16
  %17192 = shl i32 %17191, 14
  %17193 = or i32 %17189, %17192
  %17194 = xor i32 %17186, %17193
  %17195 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 48
  %17196 = load i32, i32* %17195, align 16
  %17197 = lshr i32 %17196, 3
  %17198 = xor i32 %17194, %17197
  %17199 = add i32 %17179, %17198
  %17200 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 47
  %17201 = load i32, i32* %17200, align 4
  %17202 = add i32 %17199, %17201
  %17203 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 63
  store i32 %17202, i32* %17203, align 4
  %17204 = load i32, i32* %23, align 4
  %17205 = load i32, i32* %20, align 4
  %17206 = lshr i32 %17205, 6
  %17207 = load i32, i32* %20, align 4
  %17208 = shl i32 %17207, 26
  %17209 = or i32 %17206, %17208
  %17210 = load i32, i32* %20, align 4
  %17211 = lshr i32 %17210, 11
  %17212 = load i32, i32* %20, align 4
  %17213 = shl i32 %17212, 21
  %17214 = or i32 %17211, %17213
  %17215 = xor i32 %17209, %17214
  %17216 = load i32, i32* %20, align 4
  %17217 = lshr i32 %17216, 25
  %17218 = load i32, i32* %20, align 4
  %17219 = shl i32 %17218, 7
  %17220 = or i32 %17217, %17219
  %17221 = xor i32 %17215, %17220
  %17222 = add i32 %17204, %17221
  %17223 = load i32, i32* %20, align 4
  %17224 = load i32, i32* %21, align 4
  %17225 = and i32 %17223, %17224
  %17226 = load i32, i32* %20, align 4
  %17227 = xor i32 %17226, -1
  %17228 = load i32, i32* %22, align 4
  %17229 = and i32 %17227, %17228
  %17230 = xor i32 %17225, %17229
  %17231 = add i32 %17222, %17230
  %17232 = load i32, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @sha2_256_words, i64 0, i64 63), align 4
  %17233 = add i32 %17231, %17232
  %17234 = getelementptr inbounds [64 x i32], [64 x i32]* %26, i64 0, i64 63
  %17235 = load i32, i32* %17234, align 4
  %17236 = add i32 %17233, %17235
  store i32 %17236, i32* %24, align 4
  %17237 = load i32, i32* %16, align 4
  %17238 = lshr i32 %17237, 2
  %17239 = load i32, i32* %16, align 4
  %17240 = shl i32 %17239, 30
  %17241 = or i32 %17238, %17240
  %17242 = load i32, i32* %16, align 4
  %17243 = lshr i32 %17242, 13
  %17244 = load i32, i32* %16, align 4
  %17245 = shl i32 %17244, 19
  %17246 = or i32 %17243, %17245
  %17247 = xor i32 %17241, %17246
  %17248 = load i32, i32* %16, align 4
  %17249 = lshr i32 %17248, 22
  %17250 = load i32, i32* %16, align 4
  %17251 = shl i32 %17250, 10
  %17252 = or i32 %17249, %17251
  %17253 = xor i32 %17247, %17252
  %17254 = load i32, i32* %16, align 4
  %17255 = load i32, i32* %17, align 4
  %17256 = and i32 %17254, %17255
  %17257 = load i32, i32* %16, align 4
  %17258 = load i32, i32* %18, align 4
  %17259 = and i32 %17257, %17258
  %17260 = xor i32 %17256, %17259
  %17261 = load i32, i32* %17, align 4
  %17262 = load i32, i32* %18, align 4
  %17263 = and i32 %17261, %17262
  %17264 = xor i32 %17260, %17263
  %17265 = add i32 %17253, %17264
  store i32 %17265, i32* %25, align 4
  %17266 = load i32, i32* %22, align 4
  store i32 %17266, i32* %23, align 4
  %17267 = load i32, i32* %21, align 4
  store i32 %17267, i32* %22, align 4
  %17268 = load i32, i32* %20, align 4
  store i32 %17268, i32* %21, align 4
  %17269 = load i32, i32* %19, align 4
  %17270 = load i32, i32* %24, align 4
  %17271 = add i32 %17269, %17270
  store i32 %17271, i32* %20, align 4
  %17272 = load i32, i32* %18, align 4
  store i32 %17272, i32* %19, align 4
  %17273 = load i32, i32* %17, align 4
  store i32 %17273, i32* %18, align 4
  %17274 = load i32, i32* %16, align 4
  store i32 %17274, i32* %17, align 4
  %17275 = load i32, i32* %24, align 4
  %17276 = load i32, i32* %25, align 4
  %17277 = add i32 %17275, %17276
  store i32 %17277, i32* %16, align 4
  %17278 = load i32, i32* %16, align 4
  %17279 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17280 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17279, i32 0, i32 2
  %17281 = bitcast %union.anon.33* %17280 to [16 x i32]*
  %17282 = getelementptr inbounds [16 x i32], [16 x i32]* %17281, i64 0, i64 0
  %17283 = load i32, i32* %17282, align 16
  %17284 = add i32 %17283, %17278
  store i32 %17284, i32* %17282, align 16
  %17285 = load i32, i32* %17, align 4
  %17286 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17287 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17286, i32 0, i32 2
  %17288 = bitcast %union.anon.33* %17287 to [16 x i32]*
  %17289 = getelementptr inbounds [16 x i32], [16 x i32]* %17288, i64 0, i64 1
  %17290 = load i32, i32* %17289, align 4
  %17291 = add i32 %17290, %17285
  store i32 %17291, i32* %17289, align 4
  %17292 = load i32, i32* %18, align 4
  %17293 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17294 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17293, i32 0, i32 2
  %17295 = bitcast %union.anon.33* %17294 to [16 x i32]*
  %17296 = getelementptr inbounds [16 x i32], [16 x i32]* %17295, i64 0, i64 2
  %17297 = load i32, i32* %17296, align 8
  %17298 = add i32 %17297, %17292
  store i32 %17298, i32* %17296, align 8
  %17299 = load i32, i32* %19, align 4
  %17300 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17301 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17300, i32 0, i32 2
  %17302 = bitcast %union.anon.33* %17301 to [16 x i32]*
  %17303 = getelementptr inbounds [16 x i32], [16 x i32]* %17302, i64 0, i64 3
  %17304 = load i32, i32* %17303, align 4
  %17305 = add i32 %17304, %17299
  store i32 %17305, i32* %17303, align 4
  %17306 = load i32, i32* %20, align 4
  %17307 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17308 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17307, i32 0, i32 2
  %17309 = bitcast %union.anon.33* %17308 to [16 x i32]*
  %17310 = getelementptr inbounds [16 x i32], [16 x i32]* %17309, i64 0, i64 4
  %17311 = load i32, i32* %17310, align 16
  %17312 = add i32 %17311, %17306
  store i32 %17312, i32* %17310, align 16
  %17313 = load i32, i32* %21, align 4
  %17314 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17315 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17314, i32 0, i32 2
  %17316 = bitcast %union.anon.33* %17315 to [16 x i32]*
  %17317 = getelementptr inbounds [16 x i32], [16 x i32]* %17316, i64 0, i64 5
  %17318 = load i32, i32* %17317, align 4
  %17319 = add i32 %17318, %17313
  store i32 %17319, i32* %17317, align 4
  %17320 = load i32, i32* %22, align 4
  %17321 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17322 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17321, i32 0, i32 2
  %17323 = bitcast %union.anon.33* %17322 to [16 x i32]*
  %17324 = getelementptr inbounds [16 x i32], [16 x i32]* %17323, i64 0, i64 6
  %17325 = load i32, i32* %17324, align 8
  %17326 = add i32 %17325, %17320
  store i32 %17326, i32* %17324, align 8
  %17327 = load i32, i32* %23, align 4
  %17328 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %17329 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %17328, i32 0, i32 2
  %17330 = bitcast %union.anon.33* %17329 to [16 x i32]*
  %17331 = getelementptr inbounds [16 x i32], [16 x i32]* %17330, i64 0, i64 7
  %17332 = load i32, i32* %17331, align 4
  %17333 = add i32 %17332, %17327
  store i32 %17333, i32* %17331, align 4
  br label %17334

17334:                                            ; preds = %32, %9865
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @fio_sha2_result(%struct.fio_sha2_s*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_sha2_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64*, align 8
  store %struct.fio_sha2_s* %0, %struct.fio_sha2_s** %3, align 8
  %9 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %10 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %253

14:                                               ; preds = %1
  %15 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %16 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %15, i32 0, i32 0
  %17 = bitcast %union.anon.32* %16 to [2 x i64]*
  %18 = getelementptr inbounds [2 x i64], [2 x i64]* %17, i64 0, i64 0
  %19 = load i64, i64* %18, align 16
  %20 = and i64 %19, 127
  store i64 %20, i64* %4, align 8
  %21 = load i64, i64* %4, align 8
  %22 = icmp ugt i64 %21, 111
  br i1 %22, label %23, label %38

23:                                               ; preds = %14
  %24 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %25 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %24, i32 0, i32 1
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %25, i64 0, i64 0
  %27 = load i64, i64* %4, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i64, i64* %4, align 8
  %30 = sub i64 128, %29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), i64 %30, i1 false)
  %31 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %32 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %33 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %32, i32 0, i32 1
  %34 = getelementptr inbounds [128 x i8], [128 x i8]* %33, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %31, i8* %34)
  %35 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %36 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %35, i32 0, i32 1
  %37 = getelementptr inbounds [128 x i8], [128 x i8]* %36, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %37, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 1), i64 112, i1 false)
  br label %55

38:                                               ; preds = %14
  %39 = load i64, i64* %4, align 8
  %40 = icmp ne i64 %39, 111
  br i1 %40, label %41, label %49

41:                                               ; preds = %38
  %42 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %43 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %42, i32 0, i32 1
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %43, i64 0, i64 0
  %45 = load i64, i64* %4, align 8
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = load i64, i64* %4, align 8
  %48 = sub i64 112, %47
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), i64 %48, i1 false)
  br label %54

49:                                               ; preds = %38
  %50 = load i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), align 16
  %51 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %52 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds [128 x i8], [128 x i8]* %52, i64 0, i64 111
  store i8 %50, i8* %53, align 1
  br label %54

54:                                               ; preds = %49, %41
  br label %55

55:                                               ; preds = %54, %23
  %56 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %57 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %56, i32 0, i32 0
  %58 = bitcast %union.anon.32* %57 to [2 x i64]*
  %59 = getelementptr inbounds [2 x i64], [2 x i64]* %58, i64 0, i64 1
  %60 = load i64, i64* %59, align 8
  %61 = shl i64 %60, 3
  %62 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %63 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %62, i32 0, i32 0
  %64 = bitcast %union.anon.32* %63 to [2 x i64]*
  %65 = getelementptr inbounds [2 x i64], [2 x i64]* %64, i64 0, i64 0
  %66 = load i64, i64* %65, align 16
  %67 = lshr i64 %66, 61
  %68 = or i64 %61, %67
  %69 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %70 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %69, i32 0, i32 0
  %71 = bitcast %union.anon.32* %70 to [2 x i64]*
  %72 = getelementptr inbounds [2 x i64], [2 x i64]* %71, i64 0, i64 1
  store i64 %68, i64* %72, align 8
  %73 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %74 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %73, i32 0, i32 0
  %75 = bitcast %union.anon.32* %74 to [2 x i64]*
  %76 = getelementptr inbounds [2 x i64], [2 x i64]* %75, i64 0, i64 0
  %77 = load i64, i64* %76, align 16
  %78 = shl i64 %77, 3
  %79 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %80 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %79, i32 0, i32 0
  %81 = bitcast %union.anon.32* %80 to [2 x i64]*
  %82 = getelementptr inbounds [2 x i64], [2 x i64]* %81, i64 0, i64 0
  store i64 %78, i64* %82, align 16
  %83 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %84 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %83, i32 0, i32 0
  %85 = bitcast %union.anon.32* %84 to [2 x i64]*
  %86 = getelementptr inbounds [2 x i64], [2 x i64]* %85, i64 0, i64 0
  %87 = load i64, i64* %86, align 16
  %88 = call i64 @llvm.bswap.i64(i64 %87)
  %89 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %90 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %89, i32 0, i32 0
  %91 = bitcast %union.anon.32* %90 to [2 x i64]*
  %92 = getelementptr inbounds [2 x i64], [2 x i64]* %91, i64 0, i64 0
  store i64 %88, i64* %92, align 16
  %93 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %94 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %93, i32 0, i32 0
  %95 = bitcast %union.anon.32* %94 to [2 x i64]*
  %96 = getelementptr inbounds [2 x i64], [2 x i64]* %95, i64 0, i64 1
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @llvm.bswap.i64(i64 %97)
  %99 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %100 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %99, i32 0, i32 0
  %101 = bitcast %union.anon.32* %100 to [2 x i64]*
  %102 = getelementptr inbounds [2 x i64], [2 x i64]* %101, i64 0, i64 1
  store i64 %98, i64* %102, align 8
  %103 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %104 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %103, i32 0, i32 0
  %105 = bitcast %union.anon.32* %104 to [2 x i64]*
  %106 = getelementptr inbounds [2 x i64], [2 x i64]* %105, i64 0, i64 0
  %107 = load i64, i64* %106, align 16
  store i64 %107, i64* %5, align 8
  %108 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %109 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %108, i32 0, i32 0
  %110 = bitcast %union.anon.32* %109 to [2 x i64]*
  %111 = getelementptr inbounds [2 x i64], [2 x i64]* %110, i64 0, i64 1
  %112 = load i64, i64* %111, align 8
  %113 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %114 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %113, i32 0, i32 0
  %115 = bitcast %union.anon.32* %114 to [2 x i64]*
  %116 = getelementptr inbounds [2 x i64], [2 x i64]* %115, i64 0, i64 0
  store i64 %112, i64* %116, align 16
  %117 = load i64, i64* %5, align 8
  %118 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %119 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %118, i32 0, i32 0
  %120 = bitcast %union.anon.32* %119 to [2 x i64]*
  %121 = getelementptr inbounds [2 x i64], [2 x i64]* %120, i64 0, i64 1
  store i64 %117, i64* %121, align 8
  %122 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %123 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %122, i32 0, i32 1
  %124 = getelementptr inbounds [128 x i8], [128 x i8]* %123, i64 0, i64 0
  %125 = getelementptr inbounds i8, i8* %124, i64 112
  %126 = bitcast i8* %125 to i64*
  store i64* %126, i64** %6, align 8
  %127 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %128 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %127, i32 0, i32 0
  %129 = bitcast %union.anon.32* %128 to [2 x i64]*
  %130 = getelementptr inbounds [2 x i64], [2 x i64]* %129, i64 0, i64 0
  %131 = load i64, i64* %130, align 16
  %132 = load i64*, i64** %6, align 8
  %133 = getelementptr inbounds i64, i64* %132, i64 0
  store i64 %131, i64* %133, align 8
  %134 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %135 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %134, i32 0, i32 0
  %136 = bitcast %union.anon.32* %135 to [2 x i64]*
  %137 = getelementptr inbounds [2 x i64], [2 x i64]* %136, i64 0, i64 1
  %138 = load i64, i64* %137, align 8
  %139 = load i64*, i64** %6, align 8
  %140 = getelementptr inbounds i64, i64* %139, i64 1
  store i64 %138, i64* %140, align 8
  %141 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %142 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %143 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %142, i32 0, i32 1
  %144 = getelementptr inbounds [128 x i8], [128 x i8]* %143, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %141, i8* %144)
  %145 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %146 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %145, i32 0, i32 2
  %147 = bitcast %union.anon.33* %146 to [8 x i64]*
  %148 = getelementptr inbounds [8 x i64], [8 x i64]* %147, i64 0, i64 0
  %149 = load i64, i64* %148, align 16
  %150 = call i64 @llvm.bswap.i64(i64 %149)
  %151 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %152 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %151, i32 0, i32 2
  %153 = bitcast %union.anon.33* %152 to [8 x i64]*
  %154 = getelementptr inbounds [8 x i64], [8 x i64]* %153, i64 0, i64 0
  store i64 %150, i64* %154, align 16
  %155 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %156 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %155, i32 0, i32 2
  %157 = bitcast %union.anon.33* %156 to [8 x i64]*
  %158 = getelementptr inbounds [8 x i64], [8 x i64]* %157, i64 0, i64 1
  %159 = load i64, i64* %158, align 8
  %160 = call i64 @llvm.bswap.i64(i64 %159)
  %161 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %162 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %161, i32 0, i32 2
  %163 = bitcast %union.anon.33* %162 to [8 x i64]*
  %164 = getelementptr inbounds [8 x i64], [8 x i64]* %163, i64 0, i64 1
  store i64 %160, i64* %164, align 8
  %165 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %166 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %165, i32 0, i32 2
  %167 = bitcast %union.anon.33* %166 to [8 x i64]*
  %168 = getelementptr inbounds [8 x i64], [8 x i64]* %167, i64 0, i64 2
  %169 = load i64, i64* %168, align 16
  %170 = call i64 @llvm.bswap.i64(i64 %169)
  %171 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %172 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %171, i32 0, i32 2
  %173 = bitcast %union.anon.33* %172 to [8 x i64]*
  %174 = getelementptr inbounds [8 x i64], [8 x i64]* %173, i64 0, i64 2
  store i64 %170, i64* %174, align 16
  %175 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %176 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %175, i32 0, i32 2
  %177 = bitcast %union.anon.33* %176 to [8 x i64]*
  %178 = getelementptr inbounds [8 x i64], [8 x i64]* %177, i64 0, i64 3
  %179 = load i64, i64* %178, align 8
  %180 = call i64 @llvm.bswap.i64(i64 %179)
  %181 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %182 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %181, i32 0, i32 2
  %183 = bitcast %union.anon.33* %182 to [8 x i64]*
  %184 = getelementptr inbounds [8 x i64], [8 x i64]* %183, i64 0, i64 3
  store i64 %180, i64* %184, align 8
  %185 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %186 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %185, i32 0, i32 2
  %187 = bitcast %union.anon.33* %186 to [8 x i64]*
  %188 = getelementptr inbounds [8 x i64], [8 x i64]* %187, i64 0, i64 4
  %189 = load i64, i64* %188, align 16
  %190 = call i64 @llvm.bswap.i64(i64 %189)
  %191 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %192 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %191, i32 0, i32 2
  %193 = bitcast %union.anon.33* %192 to [8 x i64]*
  %194 = getelementptr inbounds [8 x i64], [8 x i64]* %193, i64 0, i64 4
  store i64 %190, i64* %194, align 16
  %195 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %196 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %195, i32 0, i32 2
  %197 = bitcast %union.anon.33* %196 to [8 x i64]*
  %198 = getelementptr inbounds [8 x i64], [8 x i64]* %197, i64 0, i64 5
  %199 = load i64, i64* %198, align 8
  %200 = call i64 @llvm.bswap.i64(i64 %199)
  %201 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %202 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %201, i32 0, i32 2
  %203 = bitcast %union.anon.33* %202 to [8 x i64]*
  %204 = getelementptr inbounds [8 x i64], [8 x i64]* %203, i64 0, i64 5
  store i64 %200, i64* %204, align 8
  %205 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %206 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %205, i32 0, i32 2
  %207 = bitcast %union.anon.33* %206 to [8 x i64]*
  %208 = getelementptr inbounds [8 x i64], [8 x i64]* %207, i64 0, i64 6
  %209 = load i64, i64* %208, align 16
  %210 = call i64 @llvm.bswap.i64(i64 %209)
  %211 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %212 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %211, i32 0, i32 2
  %213 = bitcast %union.anon.33* %212 to [8 x i64]*
  %214 = getelementptr inbounds [8 x i64], [8 x i64]* %213, i64 0, i64 6
  store i64 %210, i64* %214, align 16
  %215 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %216 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %215, i32 0, i32 2
  %217 = bitcast %union.anon.33* %216 to [8 x i64]*
  %218 = getelementptr inbounds [8 x i64], [8 x i64]* %217, i64 0, i64 7
  %219 = load i64, i64* %218, align 8
  %220 = call i64 @llvm.bswap.i64(i64 %219)
  %221 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %222 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %221, i32 0, i32 2
  %223 = bitcast %union.anon.33* %222 to [8 x i64]*
  %224 = getelementptr inbounds [8 x i64], [8 x i64]* %223, i64 0, i64 7
  store i64 %220, i64* %224, align 8
  %225 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %226 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %225, i32 0, i32 3
  %227 = load i32, i32* %226, align 8
  switch i32 %227, label %243 [
    i32 5, label %228
    i32 3, label %233
    i32 7, label %238
  ]

228:                                              ; preds = %55
  %229 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %230 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %229, i32 0, i32 2
  %231 = bitcast %union.anon.33* %230 to [65 x i8]*
  %232 = getelementptr inbounds [65 x i8], [65 x i8]* %231, i64 0, i64 28
  store i8 0, i8* %232, align 4
  br label %248

233:                                              ; preds = %55
  %234 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %235 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %234, i32 0, i32 2
  %236 = bitcast %union.anon.33* %235 to [65 x i8]*
  %237 = getelementptr inbounds [65 x i8], [65 x i8]* %236, i64 0, i64 32
  store i8 0, i8* %237, align 16
  br label %248

238:                                              ; preds = %55
  %239 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %240 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %239, i32 0, i32 2
  %241 = bitcast %union.anon.33* %240 to [65 x i8]*
  %242 = getelementptr inbounds [65 x i8], [65 x i8]* %241, i64 0, i64 48
  store i8 0, i8* %242, align 16
  br label %248

243:                                              ; preds = %55
  %244 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %245 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %244, i32 0, i32 2
  %246 = bitcast %union.anon.33* %245 to [65 x i8]*
  %247 = getelementptr inbounds [65 x i8], [65 x i8]* %246, i64 0, i64 64
  store i8 0, i8* %247, align 16
  br label %248

248:                                              ; preds = %243, %238, %233, %228
  %249 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %250 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %249, i32 0, i32 2
  %251 = bitcast %union.anon.33* %250 to [65 x i8]*
  %252 = getelementptr inbounds [65 x i8], [65 x i8]* %251, i64 0, i64 0
  store i8* %252, i8** %2, align 8
  br label %409

253:                                              ; preds = %1
  %254 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %255 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %254, i32 0, i32 0
  %256 = bitcast %union.anon.32* %255 to [2 x i64]*
  %257 = getelementptr inbounds [2 x i64], [2 x i64]* %256, i64 0, i64 0
  %258 = load i64, i64* %257, align 16
  %259 = and i64 %258, 63
  store i64 %259, i64* %7, align 8
  %260 = load i64, i64* %7, align 8
  %261 = icmp ugt i64 %260, 55
  br i1 %261, label %262, label %277

262:                                              ; preds = %253
  %263 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %264 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %263, i32 0, i32 1
  %265 = getelementptr inbounds [128 x i8], [128 x i8]* %264, i64 0, i64 0
  %266 = load i64, i64* %7, align 8
  %267 = getelementptr inbounds i8, i8* %265, i64 %266
  %268 = load i64, i64* %7, align 8
  %269 = sub i64 64, %268
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %267, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), i64 %269, i1 false)
  %270 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %271 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %272 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %271, i32 0, i32 1
  %273 = getelementptr inbounds [128 x i8], [128 x i8]* %272, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %270, i8* %273)
  %274 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %275 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %274, i32 0, i32 1
  %276 = getelementptr inbounds [128 x i8], [128 x i8]* %275, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %276, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 1), i64 56, i1 false)
  br label %294

277:                                              ; preds = %253
  %278 = load i64, i64* %7, align 8
  %279 = icmp ne i64 %278, 55
  br i1 %279, label %280, label %288

280:                                              ; preds = %277
  %281 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %282 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %281, i32 0, i32 1
  %283 = getelementptr inbounds [128 x i8], [128 x i8]* %282, i64 0, i64 0
  %284 = load i64, i64* %7, align 8
  %285 = getelementptr inbounds i8, i8* %283, i64 %284
  %286 = load i64, i64* %7, align 8
  %287 = sub i64 56, %286
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %285, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), i64 %287, i1 false)
  br label %293

288:                                              ; preds = %277
  %289 = load i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* bitcast (<{ i8, [127 x i8] }>* @sha2_padding to [128 x i8]*), i64 0, i64 0), align 16
  %290 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %291 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %290, i32 0, i32 1
  %292 = getelementptr inbounds [128 x i8], [128 x i8]* %291, i64 0, i64 55
  store i8 %289, i8* %292, align 1
  br label %293

293:                                              ; preds = %288, %280
  br label %294

294:                                              ; preds = %293, %262
  %295 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %296 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %295, i32 0, i32 1
  %297 = getelementptr inbounds [128 x i8], [128 x i8]* %296, i64 0, i64 0
  %298 = getelementptr inbounds i8, i8* %297, i64 56
  %299 = bitcast i8* %298 to i64*
  store i64* %299, i64** %8, align 8
  %300 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %301 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %300, i32 0, i32 0
  %302 = bitcast %union.anon.32* %301 to [2 x i64]*
  %303 = getelementptr inbounds [2 x i64], [2 x i64]* %302, i64 0, i64 0
  %304 = load i64, i64* %303, align 16
  %305 = shl i64 %304, 3
  %306 = load i64*, i64** %8, align 8
  store i64 %305, i64* %306, align 8
  %307 = load i64*, i64** %8, align 8
  %308 = load i64, i64* %307, align 8
  %309 = call i64 @llvm.bswap.i64(i64 %308)
  %310 = load i64*, i64** %8, align 8
  store i64 %309, i64* %310, align 8
  %311 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %312 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %313 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %312, i32 0, i32 1
  %314 = getelementptr inbounds [128 x i8], [128 x i8]* %313, i64 0, i64 0
  call void @fio_sha2_perform_all_rounds(%struct.fio_sha2_s* %311, i8* %314)
  %315 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %316 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %315, i32 0, i32 2
  %317 = bitcast %union.anon.33* %316 to [16 x i32]*
  %318 = getelementptr inbounds [16 x i32], [16 x i32]* %317, i64 0, i64 0
  %319 = load i32, i32* %318, align 16
  %320 = call i32 @llvm.bswap.i32(i32 %319)
  %321 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %322 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %321, i32 0, i32 2
  %323 = bitcast %union.anon.33* %322 to [16 x i32]*
  %324 = getelementptr inbounds [16 x i32], [16 x i32]* %323, i64 0, i64 0
  store i32 %320, i32* %324, align 16
  %325 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %326 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %325, i32 0, i32 2
  %327 = bitcast %union.anon.33* %326 to [16 x i32]*
  %328 = getelementptr inbounds [16 x i32], [16 x i32]* %327, i64 0, i64 1
  %329 = load i32, i32* %328, align 4
  %330 = call i32 @llvm.bswap.i32(i32 %329)
  %331 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %332 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %331, i32 0, i32 2
  %333 = bitcast %union.anon.33* %332 to [16 x i32]*
  %334 = getelementptr inbounds [16 x i32], [16 x i32]* %333, i64 0, i64 1
  store i32 %330, i32* %334, align 4
  %335 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %336 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %335, i32 0, i32 2
  %337 = bitcast %union.anon.33* %336 to [16 x i32]*
  %338 = getelementptr inbounds [16 x i32], [16 x i32]* %337, i64 0, i64 2
  %339 = load i32, i32* %338, align 8
  %340 = call i32 @llvm.bswap.i32(i32 %339)
  %341 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %342 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %341, i32 0, i32 2
  %343 = bitcast %union.anon.33* %342 to [16 x i32]*
  %344 = getelementptr inbounds [16 x i32], [16 x i32]* %343, i64 0, i64 2
  store i32 %340, i32* %344, align 8
  %345 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %346 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %345, i32 0, i32 2
  %347 = bitcast %union.anon.33* %346 to [16 x i32]*
  %348 = getelementptr inbounds [16 x i32], [16 x i32]* %347, i64 0, i64 3
  %349 = load i32, i32* %348, align 4
  %350 = call i32 @llvm.bswap.i32(i32 %349)
  %351 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %352 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %351, i32 0, i32 2
  %353 = bitcast %union.anon.33* %352 to [16 x i32]*
  %354 = getelementptr inbounds [16 x i32], [16 x i32]* %353, i64 0, i64 3
  store i32 %350, i32* %354, align 4
  %355 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %356 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %355, i32 0, i32 2
  %357 = bitcast %union.anon.33* %356 to [16 x i32]*
  %358 = getelementptr inbounds [16 x i32], [16 x i32]* %357, i64 0, i64 4
  %359 = load i32, i32* %358, align 16
  %360 = call i32 @llvm.bswap.i32(i32 %359)
  %361 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %362 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %361, i32 0, i32 2
  %363 = bitcast %union.anon.33* %362 to [16 x i32]*
  %364 = getelementptr inbounds [16 x i32], [16 x i32]* %363, i64 0, i64 4
  store i32 %360, i32* %364, align 16
  %365 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %366 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %365, i32 0, i32 2
  %367 = bitcast %union.anon.33* %366 to [16 x i32]*
  %368 = getelementptr inbounds [16 x i32], [16 x i32]* %367, i64 0, i64 5
  %369 = load i32, i32* %368, align 4
  %370 = call i32 @llvm.bswap.i32(i32 %369)
  %371 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %372 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %371, i32 0, i32 2
  %373 = bitcast %union.anon.33* %372 to [16 x i32]*
  %374 = getelementptr inbounds [16 x i32], [16 x i32]* %373, i64 0, i64 5
  store i32 %370, i32* %374, align 4
  %375 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %376 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %375, i32 0, i32 2
  %377 = bitcast %union.anon.33* %376 to [16 x i32]*
  %378 = getelementptr inbounds [16 x i32], [16 x i32]* %377, i64 0, i64 6
  %379 = load i32, i32* %378, align 8
  %380 = call i32 @llvm.bswap.i32(i32 %379)
  %381 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %382 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %381, i32 0, i32 2
  %383 = bitcast %union.anon.33* %382 to [16 x i32]*
  %384 = getelementptr inbounds [16 x i32], [16 x i32]* %383, i64 0, i64 6
  store i32 %380, i32* %384, align 8
  %385 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %386 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %385, i32 0, i32 2
  %387 = bitcast %union.anon.33* %386 to [16 x i32]*
  %388 = getelementptr inbounds [16 x i32], [16 x i32]* %387, i64 0, i64 7
  %389 = load i32, i32* %388, align 4
  %390 = call i32 @llvm.bswap.i32(i32 %389)
  %391 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %392 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %391, i32 0, i32 2
  %393 = bitcast %union.anon.33* %392 to [16 x i32]*
  %394 = getelementptr inbounds [16 x i32], [16 x i32]* %393, i64 0, i64 7
  store i32 %390, i32* %394, align 4
  %395 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %396 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %395, i32 0, i32 3
  %397 = load i32, i32* %396, align 8
  %398 = icmp eq i32 %397, 4
  br i1 %398, label %399, label %404

399:                                              ; preds = %294
  %400 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %401 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %400, i32 0, i32 2
  %402 = bitcast %union.anon.33* %401 to [65 x i8]*
  %403 = getelementptr inbounds [65 x i8], [65 x i8]* %402, i64 0, i64 28
  store i8 0, i8* %403, align 4
  br label %404

404:                                              ; preds = %399, %294
  %405 = load %struct.fio_sha2_s*, %struct.fio_sha2_s** %3, align 8
  %406 = getelementptr inbounds %struct.fio_sha2_s, %struct.fio_sha2_s* %405, i32 0, i32 2
  %407 = bitcast %union.anon.33* %406 to [65 x i8]*
  %408 = getelementptr inbounds [65 x i8], [65 x i8]* %407, i64 0, i64 0
  store i8* %408, i8** %2, align 8
  br label %409

409:                                              ; preds = %404, %248
  %410 = load i8*, i8** %2, align 8
  ret i8* %410
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_base64_encode(i8*, i8*, i32) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load i8*, i8** %4, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i32, i32* %6, align 4
  %10 = call i32 @fio_base64_encode_internal(i8* %7, i8* %8, i32 %9, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @base64_encodes_original, i64 0, i64 0))
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_base64_encode_internal(i8*, i8*, i32, i8*) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  %20 = load i32, i32* %7, align 4
  %21 = sdiv i32 %20, 3
  store i32 %21, i32* %9, align 4
  %22 = load i32, i32* %7, align 4
  %23 = load i32, i32* %9, align 4
  %24 = mul nsw i32 %23, 3
  %25 = sub nsw i32 %22, %24
  store i32 %25, i32* %10, align 4
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %10, align 4
  %28 = icmp ne i32 %27, 0
  %29 = zext i1 %28 to i32
  %30 = add nsw i32 %26, %29
  %31 = mul nsw i32 %30, 4
  store i32 %31, i32* %11, align 4
  %32 = load i8*, i8** %5, align 8
  %33 = load i32, i32* %11, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = getelementptr inbounds i8, i8* %35, i64 -1
  store i8* %36, i8** %12, align 8
  %37 = load i8*, i8** %6, align 8
  %38 = load i32, i32* %7, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = getelementptr inbounds i8, i8* %40, i64 -1
  store i8* %41, i8** %13, align 8
  %42 = load i8*, i8** %12, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 0, i8* %43, align 1
  %44 = load i32, i32* %10, align 4
  switch i32 %44, label %117 [
    i32 2, label %45
    i32 1, label %89
  ]

45:                                               ; preds = %4
  %46 = load i8*, i8** %13, align 8
  %47 = getelementptr inbounds i8, i8* %46, i32 -1
  store i8* %47, i8** %13, align 8
  %48 = load i8, i8* %46, align 1
  store i8 %48, i8* %14, align 1
  %49 = load i8*, i8** %13, align 8
  %50 = getelementptr inbounds i8, i8* %49, i32 -1
  store i8* %50, i8** %13, align 8
  %51 = load i8, i8* %49, align 1
  store i8 %51, i8* %15, align 1
  %52 = load i8*, i8** %12, align 8
  %53 = getelementptr inbounds i8, i8* %52, i32 -1
  store i8* %53, i8** %12, align 8
  store i8 61, i8* %52, align 1
  %54 = load i8*, i8** %8, align 8
  %55 = load i8, i8* %14, align 1
  %56 = sext i8 %55 to i32
  %57 = and i32 %56, 15
  %58 = shl i32 %57, 2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %54, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = load i8*, i8** %12, align 8
  %63 = getelementptr inbounds i8, i8* %62, i32 -1
  store i8* %63, i8** %12, align 8
  store i8 %61, i8* %62, align 1
  %64 = load i8*, i8** %8, align 8
  %65 = load i8, i8* %15, align 1
  %66 = sext i8 %65 to i32
  %67 = and i32 %66, 3
  %68 = shl i32 %67, 4
  %69 = load i8, i8* %14, align 1
  %70 = sext i8 %69 to i32
  %71 = ashr i32 %70, 4
  %72 = and i32 %71, 15
  %73 = or i32 %68, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %64, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = load i8*, i8** %12, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 -1
  store i8* %78, i8** %12, align 8
  store i8 %76, i8* %77, align 1
  %79 = load i8*, i8** %8, align 8
  %80 = load i8, i8* %15, align 1
  %81 = sext i8 %80 to i32
  %82 = ashr i32 %81, 2
  %83 = and i32 %82, 63
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %79, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = load i8*, i8** %12, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 -1
  store i8* %88, i8** %12, align 8
  store i8 %86, i8* %87, align 1
  br label %117

89:                                               ; preds = %4
  %90 = load i8*, i8** %13, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 -1
  store i8* %91, i8** %13, align 8
  %92 = load i8, i8* %90, align 1
  store i8 %92, i8* %16, align 1
  %93 = load i8*, i8** %12, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 -1
  store i8* %94, i8** %12, align 8
  store i8 61, i8* %93, align 1
  %95 = load i8*, i8** %12, align 8
  %96 = getelementptr inbounds i8, i8* %95, i32 -1
  store i8* %96, i8** %12, align 8
  store i8 61, i8* %95, align 1
  %97 = load i8*, i8** %8, align 8
  %98 = load i8, i8* %16, align 1
  %99 = sext i8 %98 to i32
  %100 = and i32 %99, 3
  %101 = shl i32 %100, 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %97, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = load i8*, i8** %12, align 8
  %106 = getelementptr inbounds i8, i8* %105, i32 -1
  store i8* %106, i8** %12, align 8
  store i8 %104, i8* %105, align 1
  %107 = load i8*, i8** %8, align 8
  %108 = load i8, i8* %16, align 1
  %109 = sext i8 %108 to i32
  %110 = ashr i32 %109, 2
  %111 = and i32 %110, 63
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %12, align 8
  %116 = getelementptr inbounds i8, i8* %115, i32 -1
  store i8* %116, i8** %12, align 8
  store i8 %114, i8* %115, align 1
  br label %117

117:                                              ; preds = %4, %89, %45
  br label %118

118:                                              ; preds = %121, %117
  %119 = load i32, i32* %9, align 4
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %182

121:                                              ; preds = %118
  %122 = load i32, i32* %9, align 4
  %123 = add nsw i32 %122, -1
  store i32 %123, i32* %9, align 4
  %124 = load i8*, i8** %13, align 8
  %125 = getelementptr inbounds i8, i8* %124, i32 -1
  store i8* %125, i8** %13, align 8
  %126 = load i8, i8* %124, align 1
  store i8 %126, i8* %17, align 1
  %127 = load i8*, i8** %13, align 8
  %128 = getelementptr inbounds i8, i8* %127, i32 -1
  store i8* %128, i8** %13, align 8
  %129 = load i8, i8* %127, align 1
  store i8 %129, i8* %18, align 1
  %130 = load i8*, i8** %13, align 8
  %131 = getelementptr inbounds i8, i8* %130, i32 -1
  store i8* %131, i8** %13, align 8
  %132 = load i8, i8* %130, align 1
  store i8 %132, i8* %19, align 1
  %133 = load i8*, i8** %8, align 8
  %134 = load i8, i8* %17, align 1
  %135 = sext i8 %134 to i32
  %136 = and i32 %135, 63
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %133, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %12, align 8
  %141 = getelementptr inbounds i8, i8* %140, i32 -1
  store i8* %141, i8** %12, align 8
  store i8 %139, i8* %140, align 1
  %142 = load i8*, i8** %8, align 8
  %143 = load i8, i8* %18, align 1
  %144 = sext i8 %143 to i32
  %145 = and i32 %144, 15
  %146 = shl i32 %145, 2
  %147 = load i8, i8* %17, align 1
  %148 = sext i8 %147 to i32
  %149 = ashr i32 %148, 6
  %150 = and i32 %149, 3
  %151 = or i32 %146, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %142, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = load i8*, i8** %12, align 8
  %156 = getelementptr inbounds i8, i8* %155, i32 -1
  store i8* %156, i8** %12, align 8
  store i8 %154, i8* %155, align 1
  %157 = load i8*, i8** %8, align 8
  %158 = load i8, i8* %19, align 1
  %159 = sext i8 %158 to i32
  %160 = and i32 %159, 3
  %161 = shl i32 %160, 4
  %162 = load i8, i8* %18, align 1
  %163 = sext i8 %162 to i32
  %164 = ashr i32 %163, 4
  %165 = and i32 %164, 15
  %166 = or i32 %161, %165
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %157, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = load i8*, i8** %12, align 8
  %171 = getelementptr inbounds i8, i8* %170, i32 -1
  store i8* %171, i8** %12, align 8
  store i8 %169, i8* %170, align 1
  %172 = load i8*, i8** %8, align 8
  %173 = load i8, i8* %19, align 1
  %174 = sext i8 %173 to i32
  %175 = ashr i32 %174, 2
  %176 = and i32 %175, 63
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %172, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = load i8*, i8** %12, align 8
  %181 = getelementptr inbounds i8, i8* %180, i32 -1
  store i8* %181, i8** %12, align 8
  store i8 %179, i8* %180, align 1
  br label %118

182:                                              ; preds = %118
  %183 = load i32, i32* %11, align 4
  ret i32 %183
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_base64url_encode(i8*, i8*, i32) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load i8*, i8** %4, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i32, i32* %6, align 4
  %10 = call i32 @fio_base64_encode_internal(i8* %7, i8* %8, i32 %9, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @base64_encodes_url, i64 0, i64 0))
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fio_base64_decode(i8*, i8*, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %13 = load i8*, i8** %5, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %3
  %16 = load i8*, i8** %6, align 8
  store i8* %16, i8** %5, align 8
  br label %17

17:                                               ; preds = %15, %3
  %18 = load i32, i32* %7, align 4
  %19 = icmp sle i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  %21 = load i8*, i8** %5, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 0
  store i8 0, i8* %22, align 1
  store i32 0, i32* %4, align 4
  br label %364

23:                                               ; preds = %17
  store i32 0, i32* %8, align 4
  br label %24

24:                                               ; preds = %41, %23
  %25 = load i32, i32* %7, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %24
  %28 = load i8*, i8** %6, align 8
  %29 = load i32, i32* %7, align 4
  %30 = sub nsw i32 %29, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp ne i32 %36, 0
  %38 = xor i1 %37, true
  br label %39

39:                                               ; preds = %27, %24
  %40 = phi i1 [ false, %24 ], [ %38, %27 ]
  br i1 %40, label %41, label %44

41:                                               ; preds = %39
  %42 = load i32, i32* %7, align 4
  %43 = add nsw i32 %42, -1
  store i32 %43, i32* %7, align 4
  br label %24

44:                                               ; preds = %39
  br label %45

45:                                               ; preds = %62, %44
  %46 = load i32, i32* %7, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %45
  %49 = call i16** @__ctype_b_loc() #9
  %50 = load i16*, i16** %49, align 8
  %51 = load i8*, i8** %6, align 8
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %50, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = and i32 %57, 8192
  %59 = icmp ne i32 %58, 0
  br label %60

60:                                               ; preds = %48, %45
  %61 = phi i1 [ false, %45 ], [ %59, %48 ]
  br i1 %61, label %62, label %67

62:                                               ; preds = %60
  %63 = load i32, i32* %7, align 4
  %64 = add nsw i32 %63, -1
  store i32 %64, i32* %7, align 4
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %66, i8** %6, align 8
  br label %45

67:                                               ; preds = %60
  br label %68

68:                                               ; preds = %188, %67
  %69 = load i32, i32* %7, align 4
  %70 = icmp sge i32 %69, 4
  br i1 %70, label %71, label %189

71:                                               ; preds = %68
  %72 = load i32, i32* %7, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %71
  %75 = load i32, i32* %8, align 4
  store i32 %75, i32* %4, align 4
  br label %364

76:                                               ; preds = %71
  %77 = load i8*, i8** %6, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %78, i8** %6, align 8
  %79 = load i8, i8* %77, align 1
  store i8 %79, i8* %9, align 1
  %80 = load i8*, i8** %6, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %6, align 8
  %82 = load i8, i8* %80, align 1
  store i8 %82, i8* %10, align 1
  %83 = load i8*, i8** %6, align 8
  %84 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %84, i8** %6, align 8
  %85 = load i8, i8* %83, align 1
  store i8 %85, i8* %11, align 1
  %86 = load i8*, i8** %6, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %6, align 8
  %88 = load i8, i8* %86, align 1
  store i8 %88, i8* %12, align 1
  %89 = load i8, i8* %9, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %112

94:                                               ; preds = %76
  %95 = load i8, i8* %10, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %112

100:                                              ; preds = %94
  %101 = load i8, i8* %11, align 1
  %102 = zext i8 %101 to i64
  %103 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %100
  %107 = load i8, i8* %12, align 1
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %114, label %112

112:                                              ; preds = %106, %100, %94, %76
  %113 = call i32* @__errno_location() #9
  store i32 34, i32* %113, align 4
  br label %335

114:                                              ; preds = %106
  %115 = load i8, i8* %9, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = and i32 %118, 63
  %120 = shl i32 %119, 2
  %121 = load i8, i8* %10, align 1
  %122 = zext i8 %121 to i64
  %123 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = and i32 %124, 63
  %126 = lshr i32 %125, 4
  %127 = or i32 %120, %126
  %128 = trunc i32 %127 to i8
  %129 = load i8*, i8** %5, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %5, align 8
  store i8 %128, i8* %129, align 1
  %131 = load i8, i8* %10, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = and i32 %134, 63
  %136 = shl i32 %135, 4
  %137 = load i8, i8* %11, align 1
  %138 = zext i8 %137 to i64
  %139 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = and i32 %140, 63
  %142 = lshr i32 %141, 2
  %143 = or i32 %136, %142
  %144 = trunc i32 %143 to i8
  %145 = load i8*, i8** %5, align 8
  %146 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %146, i8** %5, align 8
  store i8 %144, i8* %145, align 1
  %147 = load i8, i8* %11, align 1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = and i32 %150, 63
  %152 = shl i32 %151, 6
  %153 = load i8, i8* %12, align 1
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = and i32 %156, 63
  %158 = or i32 %152, %157
  %159 = trunc i32 %158 to i8
  %160 = load i8*, i8** %5, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %161, i8** %5, align 8
  store i8 %159, i8* %160, align 1
  %162 = load i32, i32* %7, align 4
  %163 = sub nsw i32 %162, 4
  store i32 %163, i32* %7, align 4
  %164 = load i32, i32* %8, align 4
  %165 = add nsw i32 %164, 3
  store i32 %165, i32* %8, align 4
  br label %166

166:                                              ; preds = %183, %114
  %167 = load i32, i32* %7, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %166
  %170 = call i16** @__ctype_b_loc() #9
  %171 = load i16*, i16** %170, align 8
  %172 = load i8*, i8** %6, align 8
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i16, i16* %171, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = and i32 %178, 8192
  %180 = icmp ne i32 %179, 0
  br label %181

181:                                              ; preds = %169, %166
  %182 = phi i1 [ false, %166 ], [ %180, %169 ]
  br i1 %182, label %183, label %188

183:                                              ; preds = %181
  %184 = load i32, i32* %7, align 4
  %185 = add nsw i32 %184, -1
  store i32 %185, i32* %7, align 4
  %186 = load i8*, i8** %6, align 8
  %187 = getelementptr inbounds i8, i8* %186, i32 1
  store i8* %187, i8** %6, align 8
  br label %166

188:                                              ; preds = %181
  br label %68

189:                                              ; preds = %68
  store i8 0, i8* %9, align 1
  store i8 0, i8* %10, align 1
  store i8 0, i8* %11, align 1
  store i8 0, i8* %12, align 1
  %190 = load i32, i32* %7, align 4
  switch i32 %190, label %334 [
    i32 1, label %191
    i32 2, label %213
    i32 3, label %261
  ]

191:                                              ; preds = %189
  %192 = load i8*, i8** %6, align 8
  %193 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %193, i8** %6, align 8
  %194 = load i8, i8* %192, align 1
  store i8 %194, i8* %9, align 1
  %195 = load i8, i8* %9, align 1
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %202, label %200

200:                                              ; preds = %191
  %201 = call i32* @__errno_location() #9
  store i32 34, i32* %201, align 4
  br label %335

202:                                              ; preds = %191
  %203 = load i8, i8* %9, align 1
  %204 = zext i8 %203 to i64
  %205 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = and i32 %206, 63
  %208 = trunc i32 %207 to i8
  %209 = load i8*, i8** %5, align 8
  %210 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %210, i8** %5, align 8
  store i8 %208, i8* %209, align 1
  %211 = load i32, i32* %8, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %8, align 4
  br label %334

213:                                              ; preds = %189
  %214 = load i8*, i8** %6, align 8
  %215 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %215, i8** %6, align 8
  %216 = load i8, i8* %214, align 1
  store i8 %216, i8* %9, align 1
  %217 = load i8*, i8** %6, align 8
  %218 = getelementptr inbounds i8, i8* %217, i32 1
  store i8* %218, i8** %6, align 8
  %219 = load i8, i8* %217, align 1
  store i8 %219, i8* %10, align 1
  %220 = load i8, i8* %9, align 1
  %221 = zext i8 %220 to i64
  %222 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %225, label %231

225:                                              ; preds = %213
  %226 = load i8, i8* %10, align 1
  %227 = zext i8 %226 to i64
  %228 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = icmp ne i32 %229, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %225, %213
  %232 = call i32* @__errno_location() #9
  store i32 34, i32* %232, align 4
  br label %335

233:                                              ; preds = %225
  %234 = load i8, i8* %9, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = and i32 %237, 63
  %239 = shl i32 %238, 2
  %240 = load i8, i8* %10, align 1
  %241 = zext i8 %240 to i64
  %242 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = and i32 %243, 63
  %245 = lshr i32 %244, 6
  %246 = or i32 %239, %245
  %247 = trunc i32 %246 to i8
  %248 = load i8*, i8** %5, align 8
  %249 = getelementptr inbounds i8, i8* %248, i32 1
  store i8* %249, i8** %5, align 8
  store i8 %247, i8* %248, align 1
  %250 = load i8, i8* %10, align 1
  %251 = zext i8 %250 to i64
  %252 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = and i32 %253, 63
  %255 = shl i32 %254, 4
  %256 = trunc i32 %255 to i8
  %257 = load i8*, i8** %5, align 8
  %258 = getelementptr inbounds i8, i8* %257, i32 1
  store i8* %258, i8** %5, align 8
  store i8 %256, i8* %257, align 1
  %259 = load i32, i32* %8, align 4
  %260 = add nsw i32 %259, 2
  store i32 %260, i32* %8, align 4
  br label %334

261:                                              ; preds = %189
  %262 = load i8*, i8** %6, align 8
  %263 = getelementptr inbounds i8, i8* %262, i32 1
  store i8* %263, i8** %6, align 8
  %264 = load i8, i8* %262, align 1
  store i8 %264, i8* %9, align 1
  %265 = load i8*, i8** %6, align 8
  %266 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %266, i8** %6, align 8
  %267 = load i8, i8* %265, align 1
  store i8 %267, i8* %10, align 1
  %268 = load i8*, i8** %6, align 8
  %269 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %269, i8** %6, align 8
  %270 = load i8, i8* %268, align 1
  store i8 %270, i8* %11, align 1
  %271 = load i8, i8* %9, align 1
  %272 = zext i8 %271 to i64
  %273 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = icmp ne i32 %274, 0
  br i1 %275, label %276, label %288

276:                                              ; preds = %261
  %277 = load i8, i8* %10, align 1
  %278 = zext i8 %277 to i64
  %279 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = icmp ne i32 %280, 0
  br i1 %281, label %282, label %288

282:                                              ; preds = %276
  %283 = load i8, i8* %11, align 1
  %284 = zext i8 %283 to i64
  %285 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %290, label %288

288:                                              ; preds = %282, %276, %261
  %289 = call i32* @__errno_location() #9
  store i32 34, i32* %289, align 4
  br label %335

290:                                              ; preds = %282
  %291 = load i8, i8* %9, align 1
  %292 = zext i8 %291 to i64
  %293 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = and i32 %294, 63
  %296 = shl i32 %295, 2
  %297 = load i8, i8* %10, align 1
  %298 = zext i8 %297 to i64
  %299 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = and i32 %300, 63
  %302 = lshr i32 %301, 6
  %303 = or i32 %296, %302
  %304 = trunc i32 %303 to i8
  %305 = load i8*, i8** %5, align 8
  %306 = getelementptr inbounds i8, i8* %305, i32 1
  store i8* %306, i8** %5, align 8
  store i8 %304, i8* %305, align 1
  %307 = load i8, i8* %10, align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = and i32 %310, 63
  %312 = shl i32 %311, 4
  %313 = load i8, i8* %11, align 1
  %314 = zext i8 %313 to i64
  %315 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = and i32 %316, 63
  %318 = lshr i32 %317, 2
  %319 = or i32 %312, %318
  %320 = trunc i32 %319 to i8
  %321 = load i8*, i8** %5, align 8
  %322 = getelementptr inbounds i8, i8* %321, i32 1
  store i8* %322, i8** %5, align 8
  store i8 %320, i8* %321, align 1
  %323 = load i8, i8* %11, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds [256 x i32], [256 x i32]* bitcast (<{ [123 x i32], [133 x i32] }>* @base64_decodes to [256 x i32]*), i64 0, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = and i32 %326, 63
  %328 = shl i32 %327, 6
  %329 = trunc i32 %328 to i8
  %330 = load i8*, i8** %5, align 8
  %331 = getelementptr inbounds i8, i8* %330, i32 1
  store i8* %331, i8** %5, align 8
  store i8 %329, i8* %330, align 1
  %332 = load i32, i32* %8, align 4
  %333 = add nsw i32 %332, 3
  store i32 %333, i32* %8, align 4
  br label %334

334:                                              ; preds = %189, %290, %233, %202
  br label %335

335:                                              ; preds = %334, %288, %231, %200, %112
  %336 = load i8*, i8** %6, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 -1
  %338 = load i8, i8* %337, align 1
  %339 = sext i8 %338 to i32
  %340 = icmp eq i32 %339, 61
  br i1 %340, label %341, label %361

341:                                              ; preds = %335
  %342 = load i8*, i8** %5, align 8
  %343 = getelementptr inbounds i8, i8* %342, i32 -1
  store i8* %343, i8** %5, align 8
  %344 = load i32, i32* %8, align 4
  %345 = add nsw i32 %344, -1
  store i32 %345, i32* %8, align 4
  %346 = load i8*, i8** %6, align 8
  %347 = getelementptr inbounds i8, i8* %346, i64 -2
  %348 = load i8, i8* %347, align 1
  %349 = sext i8 %348 to i32
  %350 = icmp eq i32 %349, 61
  br i1 %350, label %351, label %356

351:                                              ; preds = %341
  %352 = load i8*, i8** %5, align 8
  %353 = getelementptr inbounds i8, i8* %352, i32 -1
  store i8* %353, i8** %5, align 8
  %354 = load i32, i32* %8, align 4
  %355 = add nsw i32 %354, -1
  store i32 %355, i32* %8, align 4
  br label %356

356:                                              ; preds = %351, %341
  %357 = load i32, i32* %8, align 4
  %358 = icmp slt i32 %357, 0
  br i1 %358, label %359, label %360

359:                                              ; preds = %356
  store i32 0, i32* %8, align 4
  br label %360

360:                                              ; preds = %359, %356
  br label %361

361:                                              ; preds = %360, %335
  %362 = load i8*, i8** %5, align 8
  store i8 0, i8* %362, align 1
  %363 = load i32, i32* %8, align 4
  store i32 %363, i32* %4, align 4
  br label %364

364:                                              ; preds = %361, %74, %20
  %365 = load i32, i32* %4, align 4
  ret i32 %365
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_reschedule_thread() #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 bitcast (%struct.timespec* @__const.fio_reschedule_thread.tm to i8*), i64 16, i1 false)
  %3 = call i32 @nanosleep(%struct.timespec* %1, %struct.timespec* null)
  ret void
}

declare dso_local i32 @nanosleep(%struct.timespec*, %struct.timespec*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_uuid_links_count(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %3 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_uuid_links_free(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  %3 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %4 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %5 = alloca %struct.fio_uuid_links_s, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %6 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %6, i32 0, i32 3
  %8 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %7, align 8
  %9 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %8, i64 %11
  store %struct.fio_uuid_links__ordered_s_* %12, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %13 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %13, i32 0, i32 3
  %15 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %14, align 8
  %16 = icmp ne %struct.fio_uuid_links__ordered_s_* %15, null
  br i1 %16, label %17, label %42

17:                                               ; preds = %1
  %18 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %18, i32 0, i32 3
  %20 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %19, align 8
  %21 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %22 = icmp ne %struct.fio_uuid_links__ordered_s_* %20, %21
  br i1 %22, label %23, label %42

23:                                               ; preds = %17
  %24 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %24, i32 0, i32 3
  %26 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %25, align 8
  store %struct.fio_uuid_links__ordered_s_* %26, %struct.fio_uuid_links__ordered_s_** %4, align 8
  br label %27

27:                                               ; preds = %38, %23
  %28 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %29 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %30 = icmp ult %struct.fio_uuid_links__ordered_s_* %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %33 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 0, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %31
  br label %37

37:                                               ; preds = %36, %31
  br label %38

38:                                               ; preds = %37
  %39 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %40 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %39, i32 1
  store %struct.fio_uuid_links__ordered_s_* %40, %struct.fio_uuid_links__ordered_s_** %4, align 8
  br label %27

41:                                               ; preds = %27
  br label %42

42:                                               ; preds = %41, %17, %1
  %43 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %43, i32 0, i32 4
  %45 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %44, align 8
  %46 = bitcast %struct.fio_uuid_links__map_s_* %45 to i8*
  call void @free(i8* %46) #1
  %47 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %48 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %47, i32 0, i32 3
  %49 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %48, align 8
  %50 = bitcast %struct.fio_uuid_links__ordered_s_* %49 to i8*
  call void @free(i8* %50) #1
  %51 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %52 = bitcast %struct.fio_uuid_links_s* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 48, i1 false)
  %53 = bitcast %struct.fio_uuid_links_s* %51 to i8*
  %54 = bitcast %struct.fio_uuid_links_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_on_close(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fio_protocol_s*
  store %struct.fio_protocol_s* %8, %struct.fio_protocol_s** %5, align 8
  %9 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %10 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %9, i32 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  br label %21

14:                                               ; preds = %2
  %15 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %16 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %15, i32 0, i32 3
  %17 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %16, align 8
  %18 = load i8*, i8** %3, align 8
  %19 = ptrtoint i8* %18 to i64
  %20 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void %17(i64 %19, %struct.fio_protocol_s* %20)
  br label %28

21:                                               ; preds = %13
  br label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_close, void (i8*, i8*)** %23, align 8
  %24 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %25 = load i8*, i8** %3, align 8
  store i8* %25, i8** %24, align 8
  %26 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  %27 = load i8*, i8** %4, align 8
  store i8* %27, i8** %26, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %28

28:                                               ; preds = %14, %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_max_fd_min(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %4 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %3, i32 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = load i32, i32* %2, align 4
  %7 = icmp ugt i32 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  br label %25

9:                                                ; preds = %1
  %10 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %11 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %10, i32 0, i32 9
  call void @fio_lock(i8* %11)
  %12 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %13 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %12, i32 0, i32 10
  %14 = load i32, i32* %13, align 8
  %15 = load i32, i32* %2, align 4
  %16 = icmp ult i32 %14, %15
  br i1 %16, label %17, label %21

17:                                               ; preds = %9
  %18 = load i32, i32* %2, align 4
  %19 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %20 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %19, i32 0, i32 10
  store i32 %18, i32* %20, align 8
  br label %21

21:                                               ; preds = %17, %9
  %22 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %23 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %22, i32 0, i32 9
  %24 = call i32 @fio_unlock(i8* %23)
  br label %25

25:                                               ; preds = %21, %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void (i8*)* @fio_uuid_links__insert_or_overwrite_(%struct.fio_uuid_links_s*, i64, void (i8*)*, i32, void (i8*)**) #0 {
  %6 = alloca void (i8*)*, align 8
  %7 = alloca %struct.fio_uuid_links_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca void (i8*)*, align 8
  %10 = alloca i32, align 4
  %11 = alloca void (i8*)**, align 8
  %12 = alloca %struct.fio_uuid_links__map_s_*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %7, align 8
  store i64 %1, i64* %8, align 8
  store void (i8*)* %2, void (i8*)** %9, align 8
  store i32 %3, i32* %10, align 4
  store void (i8*)** %4, void (i8*)*** %11, align 8
  %13 = load i64, i64* %8, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %5
  store i64 -1, i64* %8, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %18 = call i64 @fio_uuid_links_is_fragmented(%struct.fio_uuid_links_s* %17)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  call void @fio_uuid_links_rehash(%struct.fio_uuid_links_s* %21)
  br label %37

22:                                               ; preds = %16
  %23 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %24 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %23, i32 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %27 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp uge i64 %25, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %22
  %31 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %32 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %31, i32 0, i32 6
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, 1
  store i8 %34, i8* %32, align 1
  %35 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  call void @fio_uuid_links_rehash(%struct.fio_uuid_links_s* %35)
  br label %36

36:                                               ; preds = %30, %22
  br label %37

37:                                               ; preds = %36, %20
  %38 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %39 = load i64, i64* %8, align 8
  %40 = load void (i8*)*, void (i8*)** %9, align 8
  %41 = call %struct.fio_uuid_links__map_s_* @fio_uuid_links__find_map_pos_(%struct.fio_uuid_links_s* %38, i64 %39, void (i8*)* %40)
  store %struct.fio_uuid_links__map_s_* %41, %struct.fio_uuid_links__map_s_** %12, align 8
  %42 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %43 = icmp ne %struct.fio_uuid_links__map_s_* %42, null
  br i1 %43, label %82, label %44

44:                                               ; preds = %37
  %45 = load void (i8*)*, void (i8*)** %9, align 8
  %46 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %47 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %46, i32 0, i32 3
  %48 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %47, align 8
  %49 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %50 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %48, i64 %51
  %53 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %52, i32 0, i32 1
  store void (i8*)* %45, void (i8*)** %53, align 8
  %54 = load i64, i64* %8, align 8
  %55 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %56 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %55, i32 0, i32 3
  %57 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %56, align 8
  %58 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %59 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %58, i32 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %57, i64 %60
  %62 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %61, i32 0, i32 0
  store i64 %54, i64* %62, align 8
  %63 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %64 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %63, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  %67 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %68 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  %71 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  call void @fio_uuid_links_rehash(%struct.fio_uuid_links_s* %71)
  %72 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %73 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %72, i32 0, i32 3
  %74 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %73, align 8
  %75 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %76 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, 1
  %79 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %74, i64 %78
  %80 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %79, i32 0, i32 1
  %81 = load void (i8*)*, void (i8*)** %80, align 8
  store void (i8*)* %81, void (i8*)** %6, align 8
  br label %144

82:                                               ; preds = %37
  %83 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %84 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %83, i32 0, i32 1
  %85 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %84, align 8
  %86 = icmp ne %struct.fio_uuid_links__ordered_s_* %85, null
  br i1 %86, label %87, label %107

87:                                               ; preds = %82
  %88 = load i32, i32* %10, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %87
  %91 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %92 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %91, i32 0, i32 1
  %93 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %92, align 8
  %94 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %93, i32 0, i32 1
  %95 = load void (i8*)*, void (i8*)** %94, align 8
  store void (i8*)* %95, void (i8*)** %6, align 8
  br label %144

96:                                               ; preds = %87
  %97 = load void (i8*)**, void (i8*)*** %11, align 8
  %98 = icmp ne void (i8*)** %97, null
  br i1 %98, label %99, label %106

99:                                               ; preds = %96
  %100 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %101 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %100, i32 0, i32 1
  %102 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %101, align 8
  %103 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %102, i32 0, i32 1
  %104 = load void (i8*)*, void (i8*)** %103, align 8
  %105 = load void (i8*)**, void (i8*)*** %11, align 8
  store void (i8*)* %104, void (i8*)** %105, align 8
  br label %106

106:                                              ; preds = %99, %96
  br label %125

107:                                              ; preds = %82
  %108 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %109 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %108, i32 0, i32 3
  %110 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %109, align 8
  %111 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %112 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %111, i32 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %110, i64 %113
  %115 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %116 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %115, i32 0, i32 1
  store %struct.fio_uuid_links__ordered_s_* %114, %struct.fio_uuid_links__ordered_s_** %116, align 8
  %117 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %118 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %117, i32 0, i32 2
  %119 = load i64, i64* %118, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %118, align 8
  %121 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %7, align 8
  %122 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %121, i32 0, i32 0
  %123 = load i64, i64* %122, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %122, align 8
  br label %125

125:                                              ; preds = %107, %106
  %126 = load i64, i64* %8, align 8
  %127 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %128 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %127, i32 0, i32 0
  store i64 %126, i64* %128, align 8
  %129 = load i64, i64* %8, align 8
  %130 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %131 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %130, i32 0, i32 1
  %132 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %131, align 8
  %133 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %132, i32 0, i32 0
  store i64 %129, i64* %133, align 8
  %134 = load void (i8*)*, void (i8*)** %9, align 8
  %135 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %136 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %135, i32 0, i32 1
  %137 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %136, align 8
  %138 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %137, i32 0, i32 1
  store void (i8*)* %134, void (i8*)** %138, align 8
  %139 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %12, align 8
  %140 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %139, i32 0, i32 1
  %141 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %140, align 8
  %142 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %141, i32 0, i32 1
  %143 = load void (i8*)*, void (i8*)** %142, align 8
  store void (i8*)* %143, void (i8*)** %6, align 8
  br label %144

144:                                              ; preds = %125, %90, %44
  %145 = load void (i8*)*, void (i8*)** %6, align 8
  ret void (i8*)* %145
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_uuid_links_is_fragmented(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %3 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %3, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = icmp ugt i64 %9, %13
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_uuid_links_rehash(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  %3 = alloca i8, align 1
  %4 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %5 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %6 = alloca %struct.fio_uuid_links__map_s_*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %7 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  call void @fio_uuid_links__compact_ordered_array_(%struct.fio_uuid_links_s* %7)
  %8 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %8, i32 0, i32 5
  store i8 0, i8* %9, align 8
  store i8 0, i8* %3, align 1
  br label %10

10:                                               ; preds = %67, %1
  %11 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %12 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %11, i32 0, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %40

16:                                               ; preds = %10
  %17 = load i8, i8* %3, align 1
  %18 = add i8 %17, 1
  store i8 %18, i8* %3, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp sge i32 %19, 3
  br i1 %20, label %21, label %40

21:                                               ; preds = %16
  %22 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %23 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %22, i32 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %21
  br label %28

28:                                               ; preds = %27
  %29 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %30 = icmp sle i32 1, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %28
  %32 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %33 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %32, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %36 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.45, i64 0, i64 0), i64 %34, i64 %37)
  br label %38

38:                                               ; preds = %31, %28
  br label %39

39:                                               ; preds = %38
  call void @exit(i32 -1) #11
  unreachable

40:                                               ; preds = %21, %16, %10
  %41 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  call void @fio_uuid_links__reallocate_set_mem_(%struct.fio_uuid_links_s* %41)
  %42 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %43 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %42, i32 0, i32 3
  %44 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %43, align 8
  %45 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %46 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %45, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %44, i64 %47
  store %struct.fio_uuid_links__ordered_s_* %48, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %49 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %49, i32 0, i32 3
  %51 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %50, align 8
  store %struct.fio_uuid_links__ordered_s_* %51, %struct.fio_uuid_links__ordered_s_** %5, align 8
  br label %52

52:                                               ; preds = %81, %40
  %53 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %54 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %55 = icmp ult %struct.fio_uuid_links__ordered_s_* %53, %54
  br i1 %55, label %56, label %84

56:                                               ; preds = %52
  %57 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %58 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %59 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %62 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %61, i32 0, i32 1
  %63 = load void (i8*)*, void (i8*)** %62, align 8
  %64 = call %struct.fio_uuid_links__map_s_* @fio_uuid_links__find_map_pos_(%struct.fio_uuid_links_s* %57, i64 %60, void (i8*)* %63)
  store %struct.fio_uuid_links__map_s_* %64, %struct.fio_uuid_links__map_s_** %6, align 8
  %65 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %6, align 8
  %66 = icmp ne %struct.fio_uuid_links__map_s_* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %56
  %68 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %69 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %68, i32 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = add i8 %70, 1
  store i8 %71, i8* %69, align 1
  br label %10

72:                                               ; preds = %56
  %73 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %74 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %6, align 8
  %75 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %74, i32 0, i32 1
  store %struct.fio_uuid_links__ordered_s_* %73, %struct.fio_uuid_links__ordered_s_** %75, align 8
  %76 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %77 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %6, align 8
  %80 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %79, i32 0, i32 0
  store i64 %78, i64* %80, align 8
  br label %81

81:                                               ; preds = %72
  %82 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %83 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %82, i32 1
  store %struct.fio_uuid_links__ordered_s_* %83, %struct.fio_uuid_links__ordered_s_** %5, align 8
  br label %52

84:                                               ; preds = %52
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_uuid_links__map_s_* @fio_uuid_links__find_map_pos_(%struct.fio_uuid_links_s*, i64, void (i8*)*) #0 {
  %4 = alloca %struct.fio_uuid_links__map_s_*, align 8
  %5 = alloca %struct.fio_uuid_links_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca void (i8*)*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.fio_uuid_links__map_s_*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store void (i8*)* %2, void (i8*)** %7, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  store i64 -1, i64* %6, align 8
  br label %18

18:                                               ; preds = %17, %3
  %19 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %20 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %19, i32 0, i32 4
  %21 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %20, align 8
  %22 = icmp ne %struct.fio_uuid_links__map_s_* %21, null
  br i1 %22, label %23, label %186

23:                                               ; preds = %18
  %24 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %24, i32 0, i32 5
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %23
  %30 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %34 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp ne i64 %32, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  call void @fio_uuid_links_rehash(%struct.fio_uuid_links_s* %38)
  br label %39

39:                                               ; preds = %37, %29, %23
  store i64 0, i64* %8, align 8
  %40 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %41 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %40, i32 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = zext i32 %43 to i64
  %45 = shl i64 1, %44
  %46 = sub i64 %45, 1
  store i64 %46, i64* %10, align 8
  %47 = load i64, i64* %6, align 8
  %48 = lshr i64 %47, 0
  %49 = load i64, i64* %6, align 8
  %50 = shl i64 %49, 0
  %51 = or i64 %48, %50
  %52 = load i64, i64* %6, align 8
  %53 = call i64 @fio_ct_if2(i64 0, i64 %52, i64 0)
  %54 = xor i64 %51, %53
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %6, align 8
  %56 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %57 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %56, i32 0, i32 6
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = and i64 %59, 63
  %61 = lshr i64 %55, %60
  %62 = load i64, i64* %6, align 8
  %63 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %64 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %63, i32 0, i32 6
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = sub nsw i32 0, %66
  %68 = sext i32 %67 to i64
  %69 = and i64 %68, 63
  %70 = shl i64 %62, %69
  %71 = or i64 %61, %70
  %72 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %73 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %72, i32 0, i32 6
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = load i64, i64* %6, align 8
  %77 = call i64 @fio_ct_if2(i64 %75, i64 %76, i64 0)
  %78 = xor i64 %71, %77
  store i64 %78, i64* %13, align 8
  %79 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %80 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %79, i32 0, i32 4
  %81 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %80, align 8
  %82 = load i64, i64* %13, align 8
  %83 = load i64, i64* %10, align 8
  %84 = and i64 %82, %83
  %85 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %81, i64 %84
  store %struct.fio_uuid_links__map_s_* %85, %struct.fio_uuid_links__map_s_** %9, align 8
  %86 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %87 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %86, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 0, %88
  br i1 %89, label %90, label %92

90:                                               ; preds = %39
  %91 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  store %struct.fio_uuid_links__map_s_* %91, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

92:                                               ; preds = %39
  %93 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %94 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load i64, i64* %12, align 8
  %97 = icmp eq i64 %95, %96
  br i1 %97, label %98, label %111

98:                                               ; preds = %92
  %99 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %100 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %99, i32 0, i32 1
  %101 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %100, align 8
  %102 = icmp ne %struct.fio_uuid_links__ordered_s_* %101, null
  br i1 %102, label %103, label %104

103:                                              ; preds = %98
  br i1 true, label %104, label %106

104:                                              ; preds = %103, %98
  %105 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  store %struct.fio_uuid_links__map_s_* %105, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

106:                                              ; preds = %103
  %107 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %108 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %107, i32 0, i32 5
  store i8 1, i8* %108, align 8
  %109 = load i64, i64* %8, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %8, align 8
  br label %111

111:                                              ; preds = %106, %92
  store i64 0, i64* %11, align 8
  %112 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %113 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %112, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = icmp ugt i64 %114, 384
  br i1 %115, label %116, label %117

116:                                              ; preds = %111
  br label %122

117:                                              ; preds = %111
  %118 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %119 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %118, i32 0, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = lshr i64 %120, 2
  br label %122

122:                                              ; preds = %117, %116
  %123 = phi i64 [ 96, %116 ], [ %121, %117 ]
  %124 = mul i64 11, %123
  store i64 %124, i64* %14, align 8
  br label %125

125:                                              ; preds = %184, %122
  %126 = load i64, i64* %11, align 8
  %127 = load i64, i64* %14, align 8
  %128 = icmp ult i64 %126, %127
  br i1 %128, label %129, label %185

129:                                              ; preds = %125
  %130 = load i64, i64* %11, align 8
  %131 = add i64 %130, 11
  store i64 %131, i64* %11, align 8
  %132 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %133 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %132, i32 0, i32 4
  %134 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %133, align 8
  %135 = load i64, i64* %13, align 8
  %136 = load i64, i64* %11, align 8
  %137 = add i64 %135, %136
  %138 = load i64, i64* %10, align 8
  %139 = and i64 %137, %138
  %140 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %134, i64 %139
  store %struct.fio_uuid_links__map_s_* %140, %struct.fio_uuid_links__map_s_** %9, align 8
  %141 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %142 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %141, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = icmp eq i64 0, %143
  br i1 %144, label %145, label %147

145:                                              ; preds = %129
  %146 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  store %struct.fio_uuid_links__map_s_* %146, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

147:                                              ; preds = %129
  %148 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %149 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %148, i32 0, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = load i64, i64* %12, align 8
  %152 = icmp eq i64 %150, %151
  br i1 %152, label %153, label %184

153:                                              ; preds = %147
  %154 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  %155 = getelementptr inbounds %struct.fio_uuid_links__map_s_, %struct.fio_uuid_links__map_s_* %154, i32 0, i32 1
  %156 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %155, align 8
  %157 = icmp ne %struct.fio_uuid_links__ordered_s_* %156, null
  br i1 %157, label %158, label %159

158:                                              ; preds = %153
  br i1 true, label %159, label %161

159:                                              ; preds = %158, %153
  %160 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  store %struct.fio_uuid_links__map_s_* %160, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

161:                                              ; preds = %158
  %162 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %163 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %162, i32 0, i32 5
  store i8 1, i8* %163, align 8
  %164 = load i64, i64* %8, align 8
  %165 = add i64 %164, 1
  store i64 %165, i64* %8, align 8
  %166 = icmp uge i64 %165, 96
  br i1 %166, label %167, label %176

167:                                              ; preds = %161
  br label %168

168:                                              ; preds = %167
  %169 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %170 = icmp sle i32 3, %169
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.47, i64 0, i64 0))
  br label %172

172:                                              ; preds = %171, %168
  br label %173

173:                                              ; preds = %172
  %174 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %175 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %174, i32 0, i32 7
  store i8 1, i8* %175, align 2
  br label %176

176:                                              ; preds = %173, %161
  %177 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %5, align 8
  %178 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %177, i32 0, i32 7
  %179 = load i8, i8* %178, align 2
  %180 = icmp ne i8 %179, 0
  br i1 %180, label %181, label %183

181:                                              ; preds = %176
  %182 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %9, align 8
  store %struct.fio_uuid_links__map_s_* %182, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

183:                                              ; preds = %176
  br label %184

184:                                              ; preds = %183, %147
  br label %125

185:                                              ; preds = %125
  br label %186

186:                                              ; preds = %185, %18
  store %struct.fio_uuid_links__map_s_* null, %struct.fio_uuid_links__map_s_** %4, align 8
  br label %187

187:                                              ; preds = %186, %181, %159, %145, %104, %90
  %188 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %4, align 8
  ret %struct.fio_uuid_links__map_s_* %188
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_uuid_links__compact_ordered_array_(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  %3 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %4 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  %5 = alloca %struct.fio_uuid_links__ordered_s_*, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %6 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  br label %66

14:                                               ; preds = %1
  %15 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %16 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %15, i32 0, i32 3
  %17 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %16, align 8
  store %struct.fio_uuid_links__ordered_s_* %17, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %18 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %18, i32 0, i32 3
  %20 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %19, align 8
  store %struct.fio_uuid_links__ordered_s_* %20, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %21 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %21, i32 0, i32 3
  %23 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %22, align 8
  %24 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %24, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %23, i64 %26
  store %struct.fio_uuid_links__ordered_s_* %27, %struct.fio_uuid_links__ordered_s_** %5, align 8
  br label %28

28:                                               ; preds = %50, %14
  %29 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %30 = icmp ne %struct.fio_uuid_links__ordered_s_* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %33 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %5, align 8
  %34 = icmp ult %struct.fio_uuid_links__ordered_s_* %32, %33
  br label %35

35:                                               ; preds = %31, %28
  %36 = phi i1 [ false, %28 ], [ %34, %31 ]
  br i1 %36, label %37, label %53

37:                                               ; preds = %35
  %38 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %39 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %50

43:                                               ; preds = %37
  %44 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %45 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %46 = bitcast %struct.fio_uuid_links__ordered_s_* %44 to i8*
  %47 = bitcast %struct.fio_uuid_links__ordered_s_* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  %48 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %49 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %48, i32 1
  store %struct.fio_uuid_links__ordered_s_* %49, %struct.fio_uuid_links__ordered_s_** %4, align 8
  br label %50

50:                                               ; preds = %43, %42
  %51 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %3, align 8
  %52 = getelementptr inbounds %struct.fio_uuid_links__ordered_s_, %struct.fio_uuid_links__ordered_s_* %51, i32 1
  store %struct.fio_uuid_links__ordered_s_* %52, %struct.fio_uuid_links__ordered_s_** %3, align 8
  br label %28

53:                                               ; preds = %35
  %54 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %4, align 8
  %55 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %56 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %55, i32 0, i32 3
  %57 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %56, align 8
  %58 = ptrtoint %struct.fio_uuid_links__ordered_s_* %54 to i64
  %59 = ptrtoint %struct.fio_uuid_links__ordered_s_* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sdiv exact i64 %60, 16
  %62 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %63 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %62, i32 0, i32 0
  store i64 %61, i64* %63, align 8
  %64 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %65 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %64, i32 0, i32 2
  store i64 %61, i64* %65, align 8
  br label %66

66:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_uuid_links__reallocate_set_mem_(%struct.fio_uuid_links_s*) #0 {
  %2 = alloca %struct.fio_uuid_links_s*, align 8
  %3 = alloca i64, align 8
  store %struct.fio_uuid_links_s* %0, %struct.fio_uuid_links_s** %2, align 8
  %4 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %5 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %4, i32 0, i32 6
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  store i64 %9, i64* %3, align 8
  %10 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %10, i32 0, i32 4
  %12 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %11, align 8
  %13 = bitcast %struct.fio_uuid_links__map_s_* %12 to i8*
  call void @free(i8* %13) #1
  %14 = load i64, i64* %3, align 8
  %15 = call noalias i8* @calloc(i64 16, i64 %14) #1
  %16 = bitcast i8* %15 to %struct.fio_uuid_links__map_s_*
  %17 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %18 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %17, i32 0, i32 4
  store %struct.fio_uuid_links__map_s_* %16, %struct.fio_uuid_links__map_s_** %18, align 8
  %19 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %20 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %19, i32 0, i32 3
  %21 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %20, align 8
  %22 = bitcast %struct.fio_uuid_links__ordered_s_* %21 to i8*
  %23 = load i64, i64* %3, align 8
  %24 = mul i64 %23, 16
  %25 = call i8* @realloc(i8* %22, i64 %24) #1
  %26 = bitcast i8* %25 to %struct.fio_uuid_links__ordered_s_*
  %27 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %28 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %27, i32 0, i32 3
  store %struct.fio_uuid_links__ordered_s_* %26, %struct.fio_uuid_links__ordered_s_** %28, align 8
  %29 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %30 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %29, i32 0, i32 4
  %31 = load %struct.fio_uuid_links__map_s_*, %struct.fio_uuid_links__map_s_** %30, align 8
  %32 = icmp ne %struct.fio_uuid_links__map_s_* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %1
  %34 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %35 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %34, i32 0, i32 3
  %36 = load %struct.fio_uuid_links__ordered_s_*, %struct.fio_uuid_links__ordered_s_** %35, align 8
  %37 = icmp ne %struct.fio_uuid_links__ordered_s_* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %33, %1
  call void @perror(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i64 0, i64 0))
  %39 = call i32* @__errno_location() #9
  %40 = load i32, i32* %39, align 4
  call void @exit(i32 %40) #11
  unreachable

41:                                               ; preds = %33
  %42 = load i64, i64* %3, align 8
  %43 = load %struct.fio_uuid_links_s*, %struct.fio_uuid_links_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_uuid_links_s, %struct.fio_uuid_links_s* %43, i32 0, i32 1
  store i64 %42, i64* %44, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_ct_if2(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %4, align 8
  %8 = call i64 @fio_ct_true(i64 %7)
  %9 = trunc i64 %8 to i8
  %10 = load i64, i64* %5, align 8
  %11 = load i64, i64* %6, align 8
  %12 = call i64 @fio_ct_if(i8 zeroext %9, i64 %10, i64 %11)
  ret i64 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_ct_if(i8 zeroext, i64, i64) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8 %0, i8* %4, align 1
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %6, align 8
  %8 = load i8, i8* %4, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 1
  %11 = sub nsw i32 0, %10
  %12 = sext i32 %11 to i64
  %13 = load i64, i64* %5, align 8
  %14 = load i64, i64* %6, align 8
  %15 = xor i64 %13, %14
  %16 = and i64 %12, %15
  %17 = xor i64 %7, %16
  ret i64 %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_ct_true(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = sub i64 0, %4
  %6 = or i64 %3, %5
  %7 = lshr i64 %6, 63
  ret i64 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_pop_task(%struct.fio_defer_task_s* noalias sret, %struct.fio_task_queue_s*) #0 {
  %3 = alloca %struct.fio_task_queue_s*, align 8
  %4 = alloca %struct.fio_defer_queue_block_s*, align 8
  store %struct.fio_task_queue_s* %1, %struct.fio_task_queue_s** %3, align 8
  %5 = bitcast %struct.fio_defer_task_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false)
  store %struct.fio_defer_queue_block_s* null, %struct.fio_defer_queue_block_s** %4, align 8
  %6 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %7 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %6, i32 0, i32 0
  call void @fio_lock(i8* %7)
  %8 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %9 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %8, i32 0, i32 1
  %10 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %9, align 8
  %11 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %14 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %13, i32 0, i32 1
  %15 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %14, align 8
  %16 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %15, i32 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %12, %17
  br i1 %18, label %19, label %27

19:                                               ; preds = %2
  %20 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %21 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %20, i32 0, i32 1
  %22 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %21, align 8
  %23 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %22, i32 0, i32 4
  %24 = load i8, i8* %23, align 8
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %19
  br label %127

27:                                               ; preds = %19, %2
  %28 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %29 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %28, i32 0, i32 1
  %30 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %29, align 8
  %31 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %30, i32 0, i32 0
  %32 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %33 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %32, i32 0, i32 1
  %34 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %33, align 8
  %35 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %34, i32 0, i32 3
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  %38 = getelementptr inbounds [168 x %struct.fio_defer_task_s], [168 x %struct.fio_defer_task_s]* %31, i64 0, i64 %36
  %39 = bitcast %struct.fio_defer_task_s* %0 to i8*
  %40 = bitcast %struct.fio_defer_task_s* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false)
  %41 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %42 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %41, i32 0, i32 1
  %43 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %42, align 8
  %44 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %43, i32 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %45, 168
  br i1 %46, label %47, label %56

47:                                               ; preds = %27
  %48 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %49 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %48, i32 0, i32 1
  %50 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %49, align 8
  %51 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %50, i32 0, i32 3
  store i64 0, i64* %51, align 8
  %52 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %53 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %52, i32 0, i32 1
  %54 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %53, align 8
  %55 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %54, i32 0, i32 4
  store i8 0, i8* %55, align 8
  br label %56

56:                                               ; preds = %47, %27
  %57 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %58 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %57, i32 0, i32 1
  %59 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %58, align 8
  %60 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %59, i32 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %63 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %62, i32 0, i32 1
  %64 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %63, align 8
  %65 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %64, i32 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = icmp eq i64 %61, %66
  br i1 %67, label %68, label %126

68:                                               ; preds = %56
  %69 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %70 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %69, i32 0, i32 1
  %71 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %70, align 8
  %72 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %71, i32 0, i32 1
  %73 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %72, align 8
  %74 = icmp ne %struct.fio_defer_queue_block_s* %73, null
  br i1 %74, label %75, label %86

75:                                               ; preds = %68
  %76 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %77 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %76, i32 0, i32 1
  %78 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %77, align 8
  store %struct.fio_defer_queue_block_s* %78, %struct.fio_defer_queue_block_s** %4, align 8
  %79 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %80 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %79, i32 0, i32 1
  %81 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %80, align 8
  %82 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %81, i32 0, i32 1
  %83 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %82, align 8
  %84 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %85 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %84, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %83, %struct.fio_defer_queue_block_s** %85, align 8
  br label %125

86:                                               ; preds = %68
  %87 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %88 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %87, i32 0, i32 1
  %89 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %88, align 8
  %90 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %91 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %90, i32 0, i32 3
  %92 = icmp ne %struct.fio_defer_queue_block_s* %89, %91
  br i1 %92, label %93, label %112

93:                                               ; preds = %86
  %94 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %95 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %94, i32 0, i32 3
  %96 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %95, i32 0, i32 4
  %97 = load i8, i8* %96, align 8
  %98 = zext i8 %97 to i32
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %100, label %112

100:                                              ; preds = %93
  %101 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %102 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %101, i32 0, i32 1
  %103 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %102, align 8
  store %struct.fio_defer_queue_block_s* %103, %struct.fio_defer_queue_block_s** %4, align 8
  %104 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %105 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %104, i32 0, i32 3
  %106 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %107 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %106, i32 0, i32 2
  store %struct.fio_defer_queue_block_s* %105, %struct.fio_defer_queue_block_s** %107, align 8
  %108 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %109 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %108, i32 0, i32 3
  %110 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %111 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %110, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %109, %struct.fio_defer_queue_block_s** %111, align 8
  br label %112

112:                                              ; preds = %100, %93, %86
  %113 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %114 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %113, i32 0, i32 1
  %115 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %114, align 8
  %116 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %115, i32 0, i32 4
  store i8 0, i8* %116, align 8
  %117 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %118 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %117, i32 0, i32 1
  %119 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %118, align 8
  %120 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %119, i32 0, i32 3
  store i64 0, i64* %120, align 8
  %121 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %122 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %121, i32 0, i32 1
  %123 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %122, align 8
  %124 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %123, i32 0, i32 2
  store i64 0, i64* %124, align 8
  br label %125

125:                                              ; preds = %112, %75
  br label %126

126:                                              ; preds = %125, %56
  br label %127

127:                                              ; preds = %126, %26
  %128 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %4, align 8
  %129 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %130 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %129, i32 0, i32 3
  %131 = icmp eq %struct.fio_defer_queue_block_s* %128, %130
  br i1 %131, label %132, label %139

132:                                              ; preds = %127
  %133 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %134 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %133, i32 0, i32 3
  %135 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %134, i32 0, i32 4
  store i8 2, i8* %135, align 8
  %136 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %137 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %136, i32 0, i32 3
  %138 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %137, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* null, %struct.fio_defer_queue_block_s** %138, align 8
  br label %139

139:                                              ; preds = %132, %127
  %140 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %141 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %140, i32 0, i32 0
  %142 = call i32 @fio_unlock(i8* %141)
  %143 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %4, align 8
  %144 = icmp ne %struct.fio_defer_queue_block_s* %143, null
  br i1 %144, label %145, label %153

145:                                              ; preds = %139
  %146 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %4, align 8
  %147 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %3, align 8
  %148 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %147, i32 0, i32 3
  %149 = icmp ne %struct.fio_defer_queue_block_s* %146, %148
  br i1 %149, label %150, label %153

150:                                              ; preds = %145
  %151 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %4, align 8
  %152 = bitcast %struct.fio_defer_queue_block_s* %151 to i8*
  call void @fio_free(i8* %152)
  br label %153

153:                                              ; preds = %150, %145, %139
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_clear_tasks_for_queue(%struct.fio_task_queue_s*) #0 {
  %2 = alloca %struct.fio_task_queue_s*, align 8
  %3 = alloca %struct.fio_defer_queue_block_s*, align 8
  %4 = alloca %struct.fio_defer_queue_block_s, align 8
  store %struct.fio_task_queue_s* %0, %struct.fio_task_queue_s** %2, align 8
  %5 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %6 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %5, i32 0, i32 0
  call void @fio_lock(i8* %6)
  br label %7

7:                                                ; preds = %30, %1
  %8 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %8, i32 0, i32 1
  %10 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %9, align 8
  %11 = icmp ne %struct.fio_defer_queue_block_s* %10, null
  br i1 %11, label %12, label %31

12:                                               ; preds = %7
  %13 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %13, i32 0, i32 1
  %15 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %14, align 8
  store %struct.fio_defer_queue_block_s* %15, %struct.fio_defer_queue_block_s** %3, align 8
  %16 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %17 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %16, i32 0, i32 1
  %18 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %17, align 8
  %19 = getelementptr inbounds %struct.fio_defer_queue_block_s, %struct.fio_defer_queue_block_s* %18, i32 0, i32 1
  %20 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %19, align 8
  %21 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %21, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %20, %struct.fio_defer_queue_block_s** %22, align 8
  %23 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %3, align 8
  %24 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %24, i32 0, i32 3
  %26 = icmp ne %struct.fio_defer_queue_block_s* %23, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %12
  %28 = load %struct.fio_defer_queue_block_s*, %struct.fio_defer_queue_block_s** %3, align 8
  %29 = bitcast %struct.fio_defer_queue_block_s* %28 to i8*
  call void @free(i8* %29) #1
  br label %30

30:                                               ; preds = %27, %12
  br label %7

31:                                               ; preds = %7
  %32 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %33 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %32, i32 0, i32 3
  %34 = bitcast %struct.fio_defer_queue_block_s* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 4064, i1 false)
  %35 = bitcast %struct.fio_defer_queue_block_s* %33 to i8*
  %36 = bitcast %struct.fio_defer_queue_block_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 4064, i1 false)
  %37 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %38 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %37, i32 0, i32 3
  %39 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %40 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %39, i32 0, i32 2
  store %struct.fio_defer_queue_block_s* %38, %struct.fio_defer_queue_block_s** %40, align 8
  %41 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %42 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %41, i32 0, i32 1
  store %struct.fio_defer_queue_block_s* %38, %struct.fio_defer_queue_block_s** %42, align 8
  %43 = load %struct.fio_task_queue_s*, %struct.fio_task_queue_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_task_queue_s, %struct.fio_task_queue_s* %43, i32 0, i32 0
  %45 = call i32 @fio_unlock(i8* %44)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @clock_gettime(i32, %struct.timespec*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_timer_compare(i64, i64, i64, i64) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.timespec, align 8
  %7 = alloca %struct.timespec, align 8
  %8 = bitcast %struct.timespec* %6 to { i64, i64 }*
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0
  store i64 %0, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1
  store i64 %1, i64* %10, align 8
  %11 = bitcast %struct.timespec* %7 to { i64, i64 }*
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %19, label %34

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  store i32 1, i32* %5, align 4
  br label %42

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp sgt i64 %28, %30
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  store i32 -1, i32* %5, align 4
  br label %42

33:                                               ; preds = %26
  store i32 0, i32* %5, align 4
  br label %42

34:                                               ; preds = %4
  %35 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %34
  store i32 1, i32* %5, align 4
  br label %42

41:                                               ; preds = %34
  store i32 -1, i32* %5, align 4
  br label %42

42:                                               ; preds = %41, %40, %33, %32, %25
  %43 = load i32, i32* %5, align 4
  ret i32 %43
}

declare dso_local i32 @waitpid(i32, i32*, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_add_read(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 1), align 4
  %6 = call i32 @fio_poll_add2(i32 %4, i32 1073750033, i32 %5)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_poll_add2(i32, i32, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.epoll_event, align 1
  %8 = alloca i32, align 4
  %9 = alloca %struct.epoll_event, align 1
  %10 = alloca %struct.epoll_event, align 1
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  br label %11

11:                                               ; preds = %42, %3
  %12 = call i32* @__errno_location() #9
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %9, i32 0, i32 0
  %14 = load i32, i32* %5, align 4
  store i32 %14, i32* %13, align 1
  %15 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %9, i32 0, i32 1
  %16 = bitcast %union.epoll_data* %15 to i32*
  %17 = load i32, i32* %4, align 4
  store i32 %17, i32* %16, align 1
  %18 = bitcast %struct.epoll_event* %7 to i8*
  %19 = bitcast %struct.epoll_event* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 12, i1 false)
  %20 = load i32, i32* %6, align 4
  %21 = load i32, i32* %4, align 4
  %22 = call i32 @epoll_ctl(i32 %20, i32 3, i32 %21, %struct.epoll_event* %7) #1
  store i32 %22, i32* %8, align 4
  %23 = load i32, i32* %8, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %41

25:                                               ; preds = %11
  %26 = call i32* @__errno_location() #9
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = call i32* @__errno_location() #9
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %10, i32 0, i32 0
  %32 = load i32, i32* %5, align 4
  store i32 %32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %10, i32 0, i32 1
  %34 = bitcast %union.epoll_data* %33 to i32*
  %35 = load i32, i32* %4, align 4
  store i32 %35, i32* %34, align 1
  %36 = bitcast %struct.epoll_event* %7 to i8*
  %37 = bitcast %struct.epoll_event* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %37, i64 12, i1 false)
  %38 = load i32, i32* %6, align 4
  %39 = load i32, i32* %4, align 4
  %40 = call i32 @epoll_ctl(i32 %38, i32 1, i32 %39, %struct.epoll_event* %7) #1
  store i32 %40, i32* %8, align 4
  br label %41

41:                                               ; preds = %29, %25, %11
  br label %42

42:                                               ; preds = %41
  %43 = call i32* @__errno_location() #9
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 4
  br i1 %45, label %11, label %46

46:                                               ; preds = %42
  %47 = load i32, i32* %8, align 4
  ret i32 %47
}

; Function Attrs: nounwind
declare dso_local i32 @epoll_ctl(i32, i32, i32, %struct.epoll_event*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_on_ready_usr(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = call i32* @__errno_location() #9
  store i32 0, i32* %7, align 4
  %8 = load i8*, i8** %3, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = lshr i64 %9, 8
  %11 = trunc i64 %10 to i32
  %12 = sext i32 %11 to i64
  %13 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %12, i32 1)
  store %struct.fio_protocol_s* %13, %struct.fio_protocol_s** %5, align 8
  %14 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %15 = icmp ne %struct.fio_protocol_s* %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %2
  %17 = call i32* @__errno_location() #9
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 9
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  br label %38

21:                                               ; preds = %16
  br label %30

22:                                               ; preds = %2
  %23 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %24 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %23, i32 0, i32 1
  %25 = load void (i64, %struct.fio_protocol_s*)*, void (i64, %struct.fio_protocol_s*)** %24, align 8
  %26 = load i8*, i8** %3, align 8
  %27 = ptrtoint i8* %26 to i64
  %28 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void %25(i64 %27, %struct.fio_protocol_s* %28)
  %29 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %29, i32 1)
  br label %38

30:                                               ; preds = %21
  br label %31

31:                                               ; preds = %30
  %32 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_ready, void (i8*, i8*)** %32, align 8
  %33 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %34 = load i8*, i8** %3, align 8
  store i8* %34, i8** %33, align 8
  %35 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* null, i8** %35, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %36

36:                                               ; preds = %31
  %37 = load i8*, i8** %4, align 8
  br label %38

38:                                               ; preds = %36, %22, %20
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @inet_ntop(i32, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @socket(i32, i32, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @listen(i32, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @fchmod(i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #4

; Function Attrs: nounwind
declare dso_local i64 @sendfile64(i32, i32, i64*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sock_packet_rotate_unsafe(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.fio_packet_s*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  store i64 %0, i64* %2, align 8
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 12
  %8 = load i64, i64* %2, align 8
  %9 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %7, i64 0, i64 %8
  %10 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %9, i32 0, i32 0
  %11 = load %struct.fio_packet_s*, %struct.fio_packet_s** %10, align 8
  store %struct.fio_packet_s* %11, %struct.fio_packet_s** %3, align 8
  %12 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  %13 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %12, i32 0, i32 0
  %14 = load %struct.fio_packet_s*, %struct.fio_packet_s** %13, align 8
  %15 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %16 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %15, i32 0, i32 12
  %17 = load i64, i64* %2, align 8
  %18 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %16, i64 0, i64 %17
  %19 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %18, i32 0, i32 0
  store %struct.fio_packet_s* %14, %struct.fio_packet_s** %19, align 8
  %20 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %21 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %20, i32 0, i32 12
  %22 = load i64, i64* %2, align 8
  %23 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %21, i64 0, i64 %22
  %24 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %23, i32 0, i32 5
  store i16 1, i16* %4, align 2
  %25 = load i16, i16* %4, align 2
  %26 = atomicrmw sub i16* %24, i16 %25 seq_cst
  %27 = sub i16 %26, %25
  store i16 %27, i16* %5, align 2
  %28 = load i16, i16* %5, align 2
  %29 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  %30 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %29, i32 0, i32 0
  %31 = load %struct.fio_packet_s*, %struct.fio_packet_s** %30, align 8
  %32 = icmp ne %struct.fio_packet_s* %31, null
  br i1 %32, label %49, label %33

33:                                               ; preds = %1
  %34 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %35 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %34, i32 0, i32 12
  %36 = load i64, i64* %2, align 8
  %37 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %35, i64 0, i64 %36
  %38 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %37, i32 0, i32 0
  %39 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %40 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %39, i32 0, i32 12
  %41 = load i64, i64* %2, align 8
  %42 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %40, i64 0, i64 %41
  %43 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %42, i32 0, i32 1
  store %struct.fio_packet_s** %38, %struct.fio_packet_s*** %43, align 8
  %44 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %45 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %44, i32 0, i32 12
  %46 = load i64, i64* %2, align 8
  %47 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %45, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %47, i32 0, i32 5
  store i16 0, i16* %48, align 8
  br label %71

49:                                               ; preds = %1
  %50 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  %51 = getelementptr inbounds %struct.fio_packet_s, %struct.fio_packet_s* %50, i32 0, i32 0
  %52 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %53 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %52, i32 0, i32 12
  %54 = load i64, i64* %2, align 8
  %55 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %53, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %55, i32 0, i32 1
  %57 = load %struct.fio_packet_s**, %struct.fio_packet_s*** %56, align 8
  %58 = icmp eq %struct.fio_packet_s** %51, %57
  br i1 %58, label %59, label %70

59:                                               ; preds = %49
  %60 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %61 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %60, i32 0, i32 12
  %62 = load i64, i64* %2, align 8
  %63 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %61, i64 0, i64 %62
  %64 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %63, i32 0, i32 0
  %65 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %66 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %65, i32 0, i32 12
  %67 = load i64, i64* %2, align 8
  %68 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %66, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %68, i32 0, i32 1
  store %struct.fio_packet_s** %64, %struct.fio_packet_s*** %69, align 8
  br label %70

70:                                               ; preds = %59, %49
  br label %71

71:                                               ; preds = %70, %33
  %72 = load %struct.fio_packet_s*, %struct.fio_packet_s** %3, align 8
  call void @fio_packet_free(%struct.fio_packet_s* %72)
  ret void
}

declare dso_local i64 @pread(i32, i8*, i64, i64) #4

declare dso_local i64 @read(i32, i8*, i64) #4

declare dso_local i64 @write(i32, i8*, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mock_on_ev(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mock_on_data(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load i64, i64* %3, align 8
  call void @fio_suspend(i64 %5)
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mock_ping(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %6 = load i64, i64* %3, align 8
  call void @fio_force_close(i64 %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @mock_on_shutdown(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  ret i8 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_remove_fd(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.epoll_event, align 1
  store i64 %0, i64* %2, align 8
  %4 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %3, i32 0, i32 0
  store i32 5, i32* %4, align 1
  %5 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %3, i32 0, i32 1
  %6 = bitcast %union.epoll_data* %5 to i32*
  %7 = load i64, i64* %2, align 8
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* %6, align 1
  %9 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 1), align 4
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = call i32 @epoll_ctl(i32 %9, i32 2, i32 %11, %struct.epoll_event* %3) #1
  %13 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 2), align 4
  %14 = load i64, i64* %2, align 8
  %15 = trunc i64 %14 to i32
  %16 = call i32 @epoll_ctl(i32 %13, i32 2, i32 %15, %struct.epoll_event* %3) #1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_poll_add(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 1), align 4
  %6 = call i32 @fio_poll_add2(i32 %4, i32 1073750033, i32 %5)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  br label %14

9:                                                ; preds = %1
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 2), align 4
  %13 = call i32 @fio_poll_add2(i32 %11, i32 1073750036, i32 %12)
  br label %14

14:                                               ; preds = %9, %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_on_fork() #0 {
  store volatile i8 0, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_normal, i32 0, i32 0), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.fio_task_queue_s, %struct.fio_task_queue_s* @task_queue_urgent, i32 0, i32 0), align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_pubsub_on_fork() #0 {
  %1 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  %3 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_ls_embd_s*, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_ls_embd_s*, align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 1), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 1), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 1), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2), align 8
  store i64 0, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %7 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %7, %struct.fio_ch_set__ordered_s_** %1, align 8
  br label %8

8:                                                ; preds = %54, %0
  %9 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %10 = icmp ne %struct.fio_ch_set__ordered_s_* %9, null
  br i1 %10, label %11, label %17

11:                                               ; preds = %8
  %12 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %13 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0, i32 3), align 8
  %14 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0, i32 2), align 8
  %15 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %13, i64 %14
  %16 = icmp ult %struct.fio_ch_set__ordered_s_* %12, %15
  br label %17

17:                                               ; preds = %11, %8
  %18 = phi i1 [ false, %8 ], [ %16, %11 ]
  br i1 %18, label %19, label %57

19:                                               ; preds = %17
  %20 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %21 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %19
  br label %54

25:                                               ; preds = %19
  %26 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %27 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %26, i32 0, i32 1
  %28 = load %struct.channel_s*, %struct.channel_s** %27, align 8
  %29 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %28, i32 0, i32 6
  store volatile i8 0, i8* %29, align 8
  %30 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %31 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %30, i32 0, i32 1
  %32 = load %struct.channel_s*, %struct.channel_s** %31, align 8
  %33 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %32, i32 0, i32 3
  %34 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %33, i32 0, i32 1
  %35 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %34, align 8
  store %struct.fio_ls_embd_s* %35, %struct.fio_ls_embd_s** %2, align 8
  br label %36

36:                                               ; preds = %49, %25
  %37 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %38 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %39 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %38, i32 0, i32 1
  %40 = load %struct.channel_s*, %struct.channel_s** %39, align 8
  %41 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %40, i32 0, i32 3
  %42 = icmp ne %struct.fio_ls_embd_s* %37, %41
  br i1 %42, label %43, label %53

43:                                               ; preds = %36
  %44 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %45 = ptrtoint %struct.fio_ls_embd_s* %44 to i64
  %46 = sub i64 %45, 0
  %47 = inttoptr i64 %46 to %struct.subscription_s*
  %48 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %47, i32 0, i32 7
  store volatile i8 0, i8* %48, align 8
  br label %49

49:                                               ; preds = %43
  %50 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %51 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %50, i32 0, i32 1
  %52 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %51, align 8
  store %struct.fio_ls_embd_s* %52, %struct.fio_ls_embd_s** %2, align 8
  br label %36

53:                                               ; preds = %36
  br label %54

54:                                               ; preds = %53, %24
  %55 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %1, align 8
  %56 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %55, i32 1
  store %struct.fio_ch_set__ordered_s_* %56, %struct.fio_ch_set__ordered_s_** %1, align 8
  br label %8

57:                                               ; preds = %17
  %58 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %58, %struct.fio_ch_set__ordered_s_** %3, align 8
  br label %59

59:                                               ; preds = %105, %57
  %60 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %61 = icmp ne %struct.fio_ch_set__ordered_s_* %60, null
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %64 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  %65 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 2), align 8
  %66 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %64, i64 %65
  %67 = icmp ult %struct.fio_ch_set__ordered_s_* %63, %66
  br label %68

68:                                               ; preds = %62, %59
  %69 = phi i1 [ false, %59 ], [ %67, %62 ]
  br i1 %69, label %70, label %108

70:                                               ; preds = %68
  %71 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %72 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %71, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %76, label %75

75:                                               ; preds = %70
  br label %105

76:                                               ; preds = %70
  %77 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %78 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %77, i32 0, i32 1
  %79 = load %struct.channel_s*, %struct.channel_s** %78, align 8
  %80 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %79, i32 0, i32 6
  store volatile i8 0, i8* %80, align 8
  %81 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %82 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %81, i32 0, i32 1
  %83 = load %struct.channel_s*, %struct.channel_s** %82, align 8
  %84 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %83, i32 0, i32 3
  %85 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %84, i32 0, i32 1
  %86 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %85, align 8
  store %struct.fio_ls_embd_s* %86, %struct.fio_ls_embd_s** %4, align 8
  br label %87

87:                                               ; preds = %100, %76
  %88 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %89 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %90 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %89, i32 0, i32 1
  %91 = load %struct.channel_s*, %struct.channel_s** %90, align 8
  %92 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %91, i32 0, i32 3
  %93 = icmp ne %struct.fio_ls_embd_s* %88, %92
  br i1 %93, label %94, label %104

94:                                               ; preds = %87
  %95 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %96 = ptrtoint %struct.fio_ls_embd_s* %95 to i64
  %97 = sub i64 %96, 0
  %98 = inttoptr i64 %97 to %struct.subscription_s*
  %99 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %98, i32 0, i32 7
  store volatile i8 0, i8* %99, align 8
  br label %100

100:                                              ; preds = %94
  %101 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %4, align 8
  %102 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %101, i32 0, i32 1
  %103 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %102, align 8
  store %struct.fio_ls_embd_s* %103, %struct.fio_ls_embd_s** %4, align 8
  br label %87

104:                                              ; preds = %87
  br label %105

105:                                              ; preds = %104, %75
  %106 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %107 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %106, i32 1
  store %struct.fio_ch_set__ordered_s_* %107, %struct.fio_ch_set__ordered_s_** %3, align 8
  br label %59

108:                                              ; preds = %68
  %109 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %109, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %110

110:                                              ; preds = %156, %108
  %111 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %112 = icmp ne %struct.fio_ch_set__ordered_s_* %111, null
  br i1 %112, label %113, label %119

113:                                              ; preds = %110
  %114 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %115 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  %116 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 2), align 8
  %117 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %115, i64 %116
  %118 = icmp ult %struct.fio_ch_set__ordered_s_* %114, %117
  br label %119

119:                                              ; preds = %113, %110
  %120 = phi i1 [ false, %110 ], [ %118, %113 ]
  br i1 %120, label %121, label %159

121:                                              ; preds = %119
  %122 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %123 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %122, i32 0, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = icmp ne i64 %124, 0
  br i1 %125, label %127, label %126

126:                                              ; preds = %121
  br label %156

127:                                              ; preds = %121
  %128 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %129 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %128, i32 0, i32 1
  %130 = load %struct.channel_s*, %struct.channel_s** %129, align 8
  %131 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %130, i32 0, i32 6
  store volatile i8 0, i8* %131, align 8
  %132 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %133 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %132, i32 0, i32 1
  %134 = load %struct.channel_s*, %struct.channel_s** %133, align 8
  %135 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %134, i32 0, i32 3
  %136 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %135, i32 0, i32 1
  %137 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %136, align 8
  store %struct.fio_ls_embd_s* %137, %struct.fio_ls_embd_s** %6, align 8
  br label %138

138:                                              ; preds = %151, %127
  %139 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %140 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %141 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %140, i32 0, i32 1
  %142 = load %struct.channel_s*, %struct.channel_s** %141, align 8
  %143 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %142, i32 0, i32 3
  %144 = icmp ne %struct.fio_ls_embd_s* %139, %143
  br i1 %144, label %145, label %155

145:                                              ; preds = %138
  %146 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %147 = ptrtoint %struct.fio_ls_embd_s* %146 to i64
  %148 = sub i64 %147, 0
  %149 = inttoptr i64 %148 to %struct.subscription_s*
  %150 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %149, i32 0, i32 7
  store volatile i8 0, i8* %150, align 8
  br label %151

151:                                              ; preds = %145
  %152 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %6, align 8
  %153 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %152, i32 0, i32 1
  %154 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %153, align 8
  store %struct.fio_ls_embd_s* %154, %struct.fio_ls_embd_s** %6, align 8
  br label %138

155:                                              ; preds = %138
  br label %156

156:                                              ; preds = %155, %126
  %157 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %158 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %157, i32 1
  store %struct.fio_ch_set__ordered_s_* %158, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %110

159:                                              ; preds = %119
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_max_fd_shrink() #0 {
  %1 = alloca i32, align 4
  %2 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %3 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %2, i32 0, i32 9
  call void @fio_lock(i8* %3)
  %4 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %5 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %4, i32 0, i32 10
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %1, align 4
  br label %7

7:                                                ; preds = %21, %0
  %8 = load i32, i32* %1, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %7
  %11 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %12 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %11, i32 0, i32 12
  %13 = load i32, i32* %1, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %12, i64 0, i64 %14
  %16 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %15, i32 0, i32 3
  %17 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %16, align 8
  %18 = icmp eq %struct.fio_protocol_s* %17, null
  br label %19

19:                                               ; preds = %10, %7
  %20 = phi i1 [ false, %7 ], [ %18, %10 ]
  br i1 %20, label %21, label %24

21:                                               ; preds = %19
  %22 = load i32, i32* %1, align 4
  %23 = add i32 %22, -1
  store i32 %23, i32* %1, align 4
  br label %7

24:                                               ; preds = %19
  %25 = load i32, i32* %1, align 4
  %26 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %27 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %26, i32 0, i32 10
  store i32 %25, i32* %27, align 8
  %28 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %29 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %28, i32 0, i32 9
  %30 = call i32 @fio_unlock(i8* %29)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @epoll_create1(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sig_int_handler(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.sigaction*, align 8
  store i32 %0, i32* %2, align 4
  store %struct.sigaction* null, %struct.sigaction** %3, align 8
  %4 = load i32, i32* %2, align 4
  switch i32 %4, label %21 [
    i32 10, label %5
    i32 2, label %6
    i32 15, label %11
    i32 13, label %16
  ]

5:                                                ; preds = %1
  store volatile i8 1, i8* @fio_signal_children_flag, align 1
  store %struct.sigaction* @fio_old_sig_usr1, %struct.sigaction** %3, align 8
  br label %22

6:                                                ; preds = %1
  %7 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %8 = icmp ne %struct.sigaction* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  store %struct.sigaction* @fio_old_sig_int, %struct.sigaction** %3, align 8
  br label %10

10:                                               ; preds = %9, %6
  br label %11

11:                                               ; preds = %1, %10
  %12 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %13 = icmp ne %struct.sigaction* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  store %struct.sigaction* @fio_old_sig_term, %struct.sigaction** %3, align 8
  br label %15

15:                                               ; preds = %14, %11
  call void @fio_stop()
  br label %22

16:                                               ; preds = %1
  %17 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %18 = icmp ne %struct.sigaction* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %16
  store %struct.sigaction* @fio_old_sig_pipe, %struct.sigaction** %3, align 8
  br label %20

20:                                               ; preds = %19, %16
  br label %21

21:                                               ; preds = %1, %20
  br label %22

22:                                               ; preds = %21, %15, %5
  %23 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %24 = icmp ne %struct.sigaction* %23, null
  br i1 %24, label %25, label %43

25:                                               ; preds = %22
  %26 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %27 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %26, i32 0, i32 0
  %28 = bitcast %union.anon.0* %27 to void (i32)**
  %29 = load void (i32)*, void (i32)** %28, align 8
  %30 = icmp ne void (i32)* %29, inttoptr (i64 1 to void (i32)*)
  br i1 %30, label %31, label %43

31:                                               ; preds = %25
  %32 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %33 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %32, i32 0, i32 0
  %34 = bitcast %union.anon.0* %33 to void (i32)**
  %35 = load void (i32)*, void (i32)** %34, align 8
  %36 = icmp ne void (i32)* %35, null
  br i1 %36, label %37, label %43

37:                                               ; preds = %31
  %38 = load %struct.sigaction*, %struct.sigaction** %3, align 8
  %39 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %38, i32 0, i32 0
  %40 = bitcast %union.anon.0* %39 to void (i32)**
  %41 = load void (i32)*, void (i32)** %40, align 8
  %42 = load i32, i32* %2, align 4
  call void %41(i32 %42)
  br label %43

43:                                               ; preds = %37, %31, %25, %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @fio_sentinel_worker_thread(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  %7 = call i32* @__errno_location() #9
  store i32 0, i32* %7, align 4
  %8 = call i32 @fio_fork()
  store i32 %8, i32* %4, align 4
  %9 = call i32 @fio_unlock(i8* @fio_fork_lock)
  %10 = load i32, i32* %4, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %21

12:                                               ; preds = %1
  br label %13

13:                                               ; preds = %12
  %14 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %15 = icmp sle i32 1, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.54, i64 0, i64 0))
  br label %17

17:                                               ; preds = %16, %13
  br label %18

18:                                               ; preds = %17
  call void @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i64 0, i64 0))
  %19 = call i32 @fio_parent_pid()
  %20 = call i32 @kill(i32 %19, i32 2) #1
  call void @fio_stop()
  store i8* null, i8** %2, align 8
  br label %67

21:                                               ; preds = %1
  %22 = load i32, i32* %4, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %64

24:                                               ; preds = %21
  %25 = load i32, i32* %4, align 4
  %26 = call i32 @waitpid(i32 %25, i32* %5, i32 0)
  %27 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %28 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %27, i32 0, i32 7
  %29 = load volatile i8, i8* %28, align 1
  %30 = icmp ne i8 %29, 0
  br i1 %30, label %31, label %63

31:                                               ; preds = %24
  call void @fio_lock(i8* @fio_fork_lock)
  %32 = load i32, i32* %5, align 4
  %33 = and i32 %32, 127
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = load i32, i32* %5, align 4
  %37 = and i32 %36, 65280
  %38 = ashr i32 %37, 8
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %35, %31
  br label %41

41:                                               ; preds = %40
  %42 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %43 = icmp sle i32 2, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %41
  %45 = load i32, i32* %4, align 4
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.56, i64 0, i64 0), i32 %45)
  br label %46

46:                                               ; preds = %44, %41
  br label %47

47:                                               ; preds = %46
  call void @fio_state_callback_force(i32 11)
  br label %56

48:                                               ; preds = %35
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %51 = icmp sle i32 3, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = load i32, i32* %4, align 4
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), i32 %53)
  br label %54

54:                                               ; preds = %52, %49
  br label %55

55:                                               ; preds = %54
  br label %56

56:                                               ; preds = %55, %47
  br label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @fio_sentinel_task, void (i8*, i8*)** %58, align 8
  %59 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  store i8* null, i8** %59, align 8
  %60 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  store i8* null, i8** %60, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %61

61:                                               ; preds = %57
  %62 = call i32 @fio_unlock(i8* @fio_fork_lock)
  br label %63

63:                                               ; preds = %61, %24
  br label %65

64:                                               ; preds = %21
  call void @fio_on_fork()
  call void @fio_state_callback_force(i32 3)
  call void @fio_state_callback_force(i32 4)
  call void @fio_worker_startup()
  call void @fio_worker_cleanup()
  call void @exit(i32 0) #11
  unreachable

65:                                               ; preds = %63
  br label %66

66:                                               ; preds = %65
  store i8* null, i8** %2, align 8
  br label %67

67:                                               ; preds = %66, %18
  %68 = load i8*, i8** %2, align 8
  ret i8* %68
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cycle(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  call void @fio_cycle_schedule_events()
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 7
  %8 = load volatile i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  br label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 0
  store void (i8*, i8*)* @fio_cycle, void (i8*, i8*)** %12, align 8
  %13 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 1
  %14 = load i8*, i8** %3, align 8
  store i8* %14, i8** %13, align 8
  %15 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 2
  %16 = load i8*, i8** %4, align 8
  store i8* %16, i8** %15, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %5, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %17

17:                                               ; preds = %11
  br label %19

18:                                               ; preds = %2
  br label %19

19:                                               ; preds = %18, %17
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_thread_pool_join(%struct.fio_defer_thread_pool_s*) #0 {
  %2 = alloca %struct.fio_defer_thread_pool_s*, align 8
  %3 = alloca i64, align 8
  store %struct.fio_defer_thread_pool_s* %0, %struct.fio_defer_thread_pool_s** %2, align 8
  store i64 0, i64* %3, align 8
  br label %4

4:                                                ; preds = %17, %1
  %5 = load i64, i64* %3, align 8
  %6 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %5, %8
  br i1 %9, label %10, label %20

10:                                               ; preds = %4
  %11 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %2, align 8
  %12 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %11, i32 0, i32 1
  %13 = load i64, i64* %3, align 8
  %14 = getelementptr inbounds [0 x i8*], [0 x i8*]* %12, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @fio_thread_join(i8* %15)
  br label %17

17:                                               ; preds = %10
  %18 = load i64, i64* %3, align 8
  %19 = add i64 %18, 1
  store i64 %19, i64* %3, align 8
  br label %4

20:                                               ; preds = %4
  %21 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %2, align 8
  %22 = bitcast %struct.fio_defer_thread_pool_s* %21 to i8*
  call void @free(i8* %22) #1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_defer_thread_pool_s* @fio_defer_thread_pool_new(i64) #0 {
  %2 = alloca %struct.fio_defer_thread_pool_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_defer_thread_pool_s*, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  store i64 1, i64* %3, align 8
  br label %9

9:                                                ; preds = %8, %1
  %10 = load i64, i64* %3, align 8
  %11 = mul i64 %10, 8
  %12 = add i64 8, %11
  %13 = call noalias i8* @malloc(i64 %12) #1
  %14 = bitcast i8* %13 to %struct.fio_defer_thread_pool_s*
  store %struct.fio_defer_thread_pool_s* %14, %struct.fio_defer_thread_pool_s** %4, align 8
  %15 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  %16 = icmp ne %struct.fio_defer_thread_pool_s* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %9
  br label %18

18:                                               ; preds = %17
  %19 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %20 = icmp sle i32 1, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.59, i64 0, i64 0))
  br label %22

22:                                               ; preds = %21, %18
  br label %23

23:                                               ; preds = %22
  %24 = call i32 @kill(i32 0, i32 2) #1
  %25 = call i32* @__errno_location() #9
  %26 = load i32, i32* %25, align 4
  call void @exit(i32 %26) #11
  unreachable

27:                                               ; preds = %9
  %28 = load i64, i64* %3, align 8
  %29 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  %30 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %29, i32 0, i32 0
  store i64 %28, i64* %30, align 8
  store i64 0, i64* %5, align 8
  br label %31

31:                                               ; preds = %52, %27
  %32 = load i64, i64* %5, align 8
  %33 = load i64, i64* %3, align 8
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %35, label %55

35:                                               ; preds = %31
  %36 = call i8* @fio_thread_new(i8* (i8*)* @fio_defer_cycle, i8* null)
  %37 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  %38 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %37, i32 0, i32 1
  %39 = load i64, i64* %5, align 8
  %40 = getelementptr inbounds [0 x i8*], [0 x i8*]* %38, i64 0, i64 %39
  store i8* %36, i8** %40, align 8
  %41 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  %42 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %41, i32 0, i32 1
  %43 = load i64, i64* %5, align 8
  %44 = getelementptr inbounds [0 x i8*], [0 x i8*]* %42, i64 0, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %35
  %48 = load i64, i64* %5, align 8
  %49 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  %50 = getelementptr inbounds %struct.fio_defer_thread_pool_s, %struct.fio_defer_thread_pool_s* %49, i32 0, i32 0
  store i64 %48, i64* %50, align 8
  br label %57

51:                                               ; preds = %35
  br label %52

52:                                               ; preds = %51
  %53 = load i64, i64* %5, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %5, align 8
  br label %31

55:                                               ; preds = %31
  %56 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  store %struct.fio_defer_thread_pool_s* %56, %struct.fio_defer_thread_pool_s** %2, align 8
  br label %65

57:                                               ; preds = %47
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %60 = icmp sle i32 1, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.60, i64 0, i64 0))
  br label %62

62:                                               ; preds = %61, %58
  br label %63

63:                                               ; preds = %62
  call void @fio_stop()
  %64 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %4, align 8
  call void @fio_defer_thread_pool_join(%struct.fio_defer_thread_pool_s* %64)
  store %struct.fio_defer_thread_pool_s* null, %struct.fio_defer_thread_pool_s** %2, align 8
  br label %65

65:                                               ; preds = %63, %55
  %66 = load %struct.fio_defer_thread_pool_s*, %struct.fio_defer_thread_pool_s** %2, align 8
  ret %struct.fio_defer_thread_pool_s* %66
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cycle_schedule_events() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.fio_defer_task_s, align 8
  call void @fio_mark_time()
  call void @fio_timer_schedule()
  call void @fio_max_fd_shrink()
  %3 = load volatile i8, i8* @fio_signal_children_flag, align 1
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %0
  store volatile i8 0, i8* @fio_signal_children_flag, align 1
  call void @fio_cluster_signal_children()
  br label %6

6:                                                ; preds = %5, %0
  %7 = call i64 @fio_poll()
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* %1, align 4
  %9 = load i32, i32* %1, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  br label %46

12:                                               ; preds = %6
  %13 = load i32, i32* %1, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  store i32 1, i32* @fio_cycle_schedule_events.idle, align 4
  br label %21

16:                                               ; preds = %12
  %17 = load i32, i32* @fio_cycle_schedule_events.idle, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  call void @fio_state_callback_force(i32 7)
  store i32 0, i32* @fio_cycle_schedule_events.idle, align 4
  br label %20

20:                                               ; preds = %19, %16
  br label %21

21:                                               ; preds = %20, %15
  %22 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %23 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %22, i32 0, i32 6
  %24 = load i8, i8* %23, align 4
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %46

27:                                               ; preds = %21
  %28 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %29 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %28, i32 0, i32 0
  %30 = getelementptr inbounds %struct.timespec, %struct.timespec* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = load i64, i64* @fio_cycle_schedule_events.last_to_review, align 8
  %33 = icmp ne i64 %31, %32
  br i1 %33, label %34, label %46

34:                                               ; preds = %27
  %35 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %36 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %35, i32 0, i32 0
  %37 = getelementptr inbounds %struct.timespec, %struct.timespec* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* @fio_cycle_schedule_events.last_to_review, align 8
  %39 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %40 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %39, i32 0, i32 6
  store i8 0, i8* %40, align 4
  br label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 0
  store void (i8*, i8*)* @fio_review_timeout, void (i8*, i8*)** %42, align 8
  %43 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 1
  store i8* null, i8** %43, align 8
  %44 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %2, i32 0, i32 2
  store i8* null, i8** %44, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %2, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %45

45:                                               ; preds = %41
  br label %46

46:                                               ; preds = %11, %45, %27, %21
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_timer_schedule() #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = alloca %struct.fio_ls_embd_s*, align 8
  %3 = call { i64, i64 } @fio_last_tick()
  %4 = bitcast %struct.timespec* %1 to { i64, i64 }*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i64, i64 } %3, 0
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i64, i64 } %3, 1
  store i64 %8, i64* %7, align 8
  call void @fio_lock(i8* @fio_timer_lock)
  br label %9

9:                                                ; preds = %32, %0
  %10 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* @fio_timers)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %9
  %13 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** getelementptr inbounds (%struct.fio_ls_embd_s, %struct.fio_ls_embd_s* @fio_timers, i32 0, i32 1), align 8
  %14 = ptrtoint %struct.fio_ls_embd_s* %13 to i64
  %15 = sub i64 %14, 0
  %16 = inttoptr i64 %15 to %struct.fio_timer_s*
  %17 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %16, i32 0, i32 1
  %18 = bitcast %struct.timespec* %17 to { i64, i64 }*
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %struct.timespec* %1 to { i64, i64 }*
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = call i32 @fio_timer_compare(i64 %20, i64 %22, i64 %25, i64 %27)
  %29 = icmp sge i32 %28, 0
  br label %30

30:                                               ; preds = %12, %9
  %31 = phi i1 [ false, %9 ], [ %29, %12 ]
  br i1 %31, label %32, label %41

32:                                               ; preds = %30
  %33 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** getelementptr inbounds (%struct.fio_ls_embd_s, %struct.fio_ls_embd_s* @fio_timers, i32 0, i32 1), align 8
  %34 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %33)
  store %struct.fio_ls_embd_s* %34, %struct.fio_ls_embd_s** %2, align 8
  %35 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %2, align 8
  %36 = ptrtoint %struct.fio_ls_embd_s* %35 to i64
  %37 = sub i64 %36, 0
  %38 = inttoptr i64 %37 to %struct.fio_timer_s*
  %39 = bitcast %struct.fio_timer_s* %38 to i8*
  %40 = call i32 @fio_defer(void (i8*, i8*)* @fio_timer_perform_single, i8* %39, i8* null)
  br label %9

41:                                               ; preds = %30
  %42 = call i32 @fio_unlock(i8* @fio_timer_lock)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_signal_children() #0 {
  %1 = alloca %struct.fio_str_info_s, align 8
  %2 = alloca %struct.fio_str_info_s, align 8
  %3 = call i32 @fio_parent_pid()
  %4 = call i32 @getpid() #1
  %5 = icmp ne i32 %3, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %0
  call void @fio_stop()
  br label %16

7:                                                ; preds = %0
  %8 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 1
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %1, i32 0, i32 2
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 0
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 1
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %2, i32 0, i32 2
  store i8* null, i8** %13, align 8
  %14 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 0, i32 8, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %1, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %2, i8 signext 0, i8 signext 1)
  %15 = bitcast %struct.fio_msg_internal_s* %14 to i8*
  call void @fio_cluster_server_sender(i8* %15, i64 -1)
  br label %16

16:                                               ; preds = %7, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_poll() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  %3 = alloca [2 x %struct.epoll_event], align 16
  %4 = alloca [64 x %struct.epoll_event], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.fio_defer_task_s, align 8
  %11 = alloca %struct.fio_defer_task_s, align 8
  %12 = call i64 @fio_timer_calc_first_interval()
  %13 = trunc i64 %12 to i32
  store i32 %13, i32* %2, align 4
  store i32 0, i32* %5, align 4
  %14 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @evio_fd, i64 0, i64 0), align 4
  %15 = getelementptr inbounds [2 x %struct.epoll_event], [2 x %struct.epoll_event]* %3, i64 0, i64 0
  %16 = load i32, i32* %2, align 4
  %17 = call i32 @epoll_wait(i32 %14, %struct.epoll_event* %15, i32 2, i32 %16)
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %0
  %21 = load i32, i32* %6, align 4
  %22 = sext i32 %21 to i64
  store i64 %22, i64* %1, align 8
  br label %163

23:                                               ; preds = %0
  store i32 0, i32* %7, align 4
  br label %24

24:                                               ; preds = %157, %23
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %6, align 4
  %27 = icmp slt i32 %25, %26
  br i1 %27, label %28, label %160

28:                                               ; preds = %24
  %29 = load i32, i32* %7, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [2 x %struct.epoll_event], [2 x %struct.epoll_event]* %3, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %31, i32 0, i32 1
  %33 = bitcast %union.epoll_data* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 0
  %36 = call i32 @epoll_wait(i32 %34, %struct.epoll_event* %35, i32 64, i32 0)
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %8, align 4
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %156

39:                                               ; preds = %28
  store i32 0, i32* %9, align 4
  br label %40

40:                                               ; preds = %149, %39
  %41 = load i32, i32* %9, align 4
  %42 = load i32, i32* %8, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %44, label %152

44:                                               ; preds = %40
  %45 = load i32, i32* %9, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, -6
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %75

52:                                               ; preds = %44
  %53 = load i32, i32* %9, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %55, i32 0, i32 1
  %57 = bitcast %union.epoll_data* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = shl i64 %59, 8
  %61 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %62 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %61, i32 0, i32 12
  %63 = load i32, i32* %9, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %64
  %66 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %65, i32 0, i32 1
  %67 = bitcast %union.epoll_data* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %62, i64 0, i64 %69
  %71 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %70, i32 0, i32 9
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = or i64 %60, %73
  call void @fio_force_close_in_poll(i64 %74)
  br label %148

75:                                               ; preds = %44
  %76 = load i32, i32* %9, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %78, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %110

83:                                               ; preds = %75
  %84 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_ready, void (i8*, i8*)** %84, align 8
  %85 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 1
  %86 = load i32, i32* %9, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %87
  %89 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %88, i32 0, i32 1
  %90 = bitcast %union.epoll_data* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = shl i64 %92, 8
  %94 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %95 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %94, i32 0, i32 12
  %96 = load i32, i32* %9, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %97
  %99 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %98, i32 0, i32 1
  %100 = bitcast %union.epoll_data* %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %95, i64 0, i64 %102
  %104 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %103, i32 0, i32 9
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = or i64 %93, %106
  %108 = inttoptr i64 %107 to i8*
  store i8* %108, i8** %85, align 8
  %109 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 2
  store i8* null, i8** %109, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %10, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %110

110:                                              ; preds = %83, %75
  %111 = load i32, i32* %9, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %112
  %114 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %113, i32 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = and i32 %115, 1
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %147

118:                                              ; preds = %110
  br label %119

119:                                              ; preds = %118
  %120 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_data, void (i8*, i8*)** %120, align 8
  %121 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 1
  %122 = load i32, i32* %9, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %123
  %125 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %124, i32 0, i32 1
  %126 = bitcast %union.epoll_data* %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %127 to i64
  %129 = shl i64 %128, 8
  %130 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %131 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %130, i32 0, i32 12
  %132 = load i32, i32* %9, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [64 x %struct.epoll_event], [64 x %struct.epoll_event]* %4, i64 0, i64 %133
  %135 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %134, i32 0, i32 1
  %136 = bitcast %union.epoll_data* %135 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %131, i64 0, i64 %138
  %140 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %139, i32 0, i32 9
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = or i64 %129, %142
  %144 = inttoptr i64 %143 to i8*
  store i8* %144, i8** %121, align 8
  %145 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 2
  store i8* null, i8** %145, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %11, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %146

146:                                              ; preds = %119
  br label %147

147:                                              ; preds = %146, %110
  br label %148

148:                                              ; preds = %147, %52
  br label %149

149:                                              ; preds = %148
  %150 = load i32, i32* %9, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %9, align 4
  br label %40

152:                                              ; preds = %40
  %153 = load i32, i32* %8, align 4
  %154 = load i32, i32* %5, align 4
  %155 = add nsw i32 %154, %153
  store i32 %155, i32* %5, align 4
  br label %156

156:                                              ; preds = %152, %28
  br label %157

157:                                              ; preds = %156
  %158 = load i32, i32* %7, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %7, align 4
  br label %24

160:                                              ; preds = %24
  %161 = load i32, i32* %5, align 4
  %162 = sext i32 %161 to i64
  store i64 %162, i64* %1, align 8
  br label %163

163:                                              ; preds = %160, %20
  %164 = load i64, i64* %1, align 8
  ret i64 %164
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_review_timeout(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i16, align 2
  %9 = alloca %struct.fio_defer_task_s, align 8
  %10 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %13 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %12, i32 0, i32 0
  %14 = getelementptr inbounds %struct.timespec, %struct.timespec* %13, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %6, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = ptrtoint i8* %16 to i64
  store i64 %17, i64* %7, align 8
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 12
  %20 = load i64, i64* %7, align 8
  %21 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %19, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %21, i32 0, i32 6
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i16
  store i16 %24, i16* %8, align 2
  %25 = load i16, i16* %8, align 2
  %26 = icmp ne i16 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %2
  store i16 300, i16* %8, align 2
  br label %28

28:                                               ; preds = %27, %2
  %29 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %30 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %29, i32 0, i32 12
  %31 = load i64, i64* %7, align 8
  %32 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %30, i64 0, i64 %31
  %33 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %32, i32 0, i32 3
  %34 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %33, align 8
  %35 = icmp ne %struct.fio_protocol_s* %34, null
  br i1 %35, label %36, label %48

36:                                               ; preds = %28
  %37 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %38 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %37, i32 0, i32 12
  %39 = load i64, i64* %7, align 8
  %40 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %38, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %40, i32 0, i32 4
  %42 = load i64, i64* %41, align 8
  %43 = load i16, i16* %8, align 2
  %44 = zext i16 %43 to i64
  %45 = add nsw i64 %42, %44
  %46 = load i64, i64* %6, align 8
  %47 = icmp sge i64 %45, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %36, %28
  br label %93

49:                                               ; preds = %36
  %50 = load i64, i64* %7, align 8
  %51 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %50, i32 2)
  store %struct.fio_protocol_s* %51, %struct.fio_protocol_s** %5, align 8
  %52 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %53 = icmp ne %struct.fio_protocol_s* %52, null
  br i1 %53, label %60, label %54

54:                                               ; preds = %49
  %55 = call i32* @__errno_location() #9
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 9
  br i1 %57, label %58, label %59

58:                                               ; preds = %54
  br label %93

59:                                               ; preds = %54
  br label %125

60:                                               ; preds = %49
  %61 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %62 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %61, i32 0, i32 5
  %63 = bitcast i64* %62 to %union.protocol_metadata_union_u*
  %64 = bitcast %union.protocol_metadata_union_u* %63 to %struct.protocol_metadata_s*
  %65 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %64, i32 0, i32 0
  %66 = getelementptr inbounds [3 x i8], [3 x i8]* %65, i64 0, i64 0
  %67 = load volatile i8, i8* %66, align 8
  %68 = zext i8 %67 to i32
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %80, label %70

70:                                               ; preds = %60
  %71 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %72 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %71, i32 0, i32 5
  %73 = bitcast i64* %72 to %union.protocol_metadata_union_u*
  %74 = bitcast %union.protocol_metadata_union_u* %73 to %struct.protocol_metadata_s*
  %75 = getelementptr inbounds %struct.protocol_metadata_s, %struct.protocol_metadata_s* %74, i32 0, i32 0
  %76 = getelementptr inbounds [3 x i8], [3 x i8]* %75, i64 0, i64 1
  %77 = load volatile i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %70, %60
  br label %91

81:                                               ; preds = %70
  br label %82

82:                                               ; preds = %81
  %83 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 0
  store void (i8*, i8*)* @deferred_ping, void (i8*, i8*)** %83, align 8
  %84 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 1
  %85 = load i64, i64* %7, align 8
  %86 = trunc i64 %85 to i32
  %87 = call i64 @fio_fd2uuid(i32 %86)
  %88 = inttoptr i64 %87 to i8*
  store i8* %88, i8** %84, align 8
  %89 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 2
  store i8* null, i8** %89, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %9, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %90

90:                                               ; preds = %82
  br label %91

91:                                               ; preds = %90, %80
  %92 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %92, i32 2)
  br label %93

93:                                               ; preds = %91, %58, %48
  br label %94

94:                                               ; preds = %112, %93
  %95 = load i64, i64* %7, align 8
  %96 = add nsw i64 %95, 1
  store i64 %96, i64* %7, align 8
  br label %97

97:                                               ; preds = %94
  %98 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %99 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %98, i32 0, i32 12
  %100 = load i64, i64* %7, align 8
  %101 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %99, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %101, i32 0, i32 3
  %103 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %102, align 8
  %104 = icmp ne %struct.fio_protocol_s* %103, null
  br i1 %104, label %112, label %105

105:                                              ; preds = %97
  %106 = load i64, i64* %7, align 8
  %107 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %108 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %107, i32 0, i32 10
  %109 = load i32, i32* %108, align 8
  %110 = zext i32 %109 to i64
  %111 = icmp sle i64 %106, %110
  br label %112

112:                                              ; preds = %105, %97
  %113 = phi i1 [ false, %97 ], [ %111, %105 ]
  br i1 %113, label %94, label %114

114:                                              ; preds = %112
  %115 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %116 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %115, i32 0, i32 10
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  %119 = load i64, i64* %7, align 8
  %120 = icmp slt i64 %118, %119
  br i1 %120, label %121, label %124

121:                                              ; preds = %114
  %122 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %123 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %122, i32 0, i32 6
  store i8 1, i8* %123, align 4
  br label %132

124:                                              ; preds = %114
  br label %125

125:                                              ; preds = %124, %59
  br label %126

126:                                              ; preds = %125
  %127 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 0
  store void (i8*, i8*)* @fio_review_timeout, void (i8*, i8*)** %127, align 8
  %128 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 1
  %129 = load i64, i64* %7, align 8
  %130 = inttoptr i64 %129 to i8*
  store i8* %130, i8** %128, align 8
  %131 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %10, i32 0, i32 2
  store i8* null, i8** %131, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %10, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %132

132:                                              ; preds = %121, %126
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_timer_perform_single(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_timer_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %8 = load i8*, i8** %3, align 8
  %9 = bitcast i8* %8 to %struct.fio_timer_s*
  store %struct.fio_timer_s* %9, %struct.fio_timer_s** %5, align 8
  %10 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %11 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %10, i32 0, i32 4
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %14 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %13, i32 0, i32 5
  %15 = load i8*, i8** %14, align 8
  call void %12(i8* %15)
  %16 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %17 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %16, i32 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %2
  %21 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %22 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %21, i32 0, i32 3
  store i64 1, i64* %6, align 8
  %23 = load i64, i64* %6, align 8
  %24 = atomicrmw sub i64* %22, i64 %23 seq_cst
  %25 = sub i64 %24, %23
  store i64 %25, i64* %7, align 8
  %26 = load i64, i64* %7, align 8
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %20, %2
  br label %44

29:                                               ; preds = %20
  %30 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %30, i32 0, i32 6
  %32 = load void (i8*)*, void (i8*)** %31, align 8
  %33 = icmp ne void (i8*)* %32, null
  br i1 %33, label %34, label %41

34:                                               ; preds = %29
  %35 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %36 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %35, i32 0, i32 6
  %37 = load void (i8*)*, void (i8*)** %36, align 8
  %38 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %39 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %38, i32 0, i32 5
  %40 = load i8*, i8** %39, align 8
  call void %37(i8* %40)
  br label %41

41:                                               ; preds = %34, %29
  %42 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  %43 = bitcast %struct.fio_timer_s* %42 to i8*
  call void @free(i8* %43) #1
  br label %46

44:                                               ; preds = %28
  %45 = load %struct.fio_timer_s*, %struct.fio_timer_s** %5, align 8
  call void @fio_timer_add_order(%struct.fio_timer_s* %45)
  br label %46

46:                                               ; preds = %44, %41
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_server_sender(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_msg_internal_s*, align 8
  %6 = alloca %struct.fio_ls_s*, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fio_msg_internal_s*
  store %struct.fio_msg_internal_s* %8, %struct.fio_msg_internal_s** %5, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %9 = load %struct.fio_ls_s*, %struct.fio_ls_s** getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1, i32 1), align 8
  store %struct.fio_ls_s* %9, %struct.fio_ls_s** %6, align 8
  br label %10

10:                                               ; preds = %35, %2
  %11 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %12 = icmp ne %struct.fio_ls_s* %11, getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1)
  br i1 %12, label %13, label %39

13:                                               ; preds = %10
  %14 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %15 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %14, i32 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = icmp ne i64 %17, -1
  br i1 %18, label %19, label %34

19:                                               ; preds = %13
  %20 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %21 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %20, i32 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = load i64, i64* %4, align 8
  %25 = icmp ne i64 %23, %24
  br i1 %25, label %26, label %33

26:                                               ; preds = %19
  %27 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %28 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %27, i32 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = ptrtoint i8* %29 to i64
  %31 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  %32 = call i64 @fio_msg_internal_send_dup(i64 %30, %struct.fio_msg_internal_s* %31)
  br label %33

33:                                               ; preds = %26, %19
  br label %34

34:                                               ; preds = %33, %13
  br label %35

35:                                               ; preds = %34
  %36 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %37 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %36, i32 0, i32 1
  %38 = load %struct.fio_ls_s*, %struct.fio_ls_s** %37, align 8
  store %struct.fio_ls_s* %38, %struct.fio_ls_s** %6, align 8
  br label %10

39:                                               ; preds = %10
  %40 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %41 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %41)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_msg_internal_send_dup(i64, %struct.fio_msg_internal_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_msg_internal_s*, align 8
  %5 = alloca %struct.fio_write_args_s, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_msg_internal_s* %1, %struct.fio_msg_internal_s** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 0
  %8 = bitcast %union.anon.11* %7 to i8**
  %9 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %10 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %9)
  %11 = bitcast %struct.fio_msg_internal_s* %10 to i8*
  store i8* %11, i8** %8, align 8
  %12 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 1
  %13 = bitcast %union.anon.12* %12 to void (i8*)**
  store void (i8*)* @fio_msg_internal_free2, void (i8*)** %13, align 8
  %14 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 2
  %15 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %16 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %16, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add i64 16, %18
  %20 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %21 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %20, i32 0, i32 0
  %22 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %21, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %19, %23
  %25 = add i64 %24, 2
  store i64 %25, i64* %14, align 8
  %26 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 3
  %27 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %28 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %27, i32 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, 24
  %31 = add i64 72, %30
  store i64 %31, i64* %26, align 8
  %32 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 4
  %33 = load i8, i8* %32, align 8
  %34 = and i8 %33, -2
  store i8 %34, i8* %32, align 8
  %35 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 4
  %36 = load i8, i8* %35, align 8
  %37 = and i8 %36, -3
  store i8 %37, i8* %35, align 8
  %38 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 4
  %39 = load i8, i8* %38, align 8
  %40 = and i8 %39, -5
  store i8 %40, i8* %38, align 8
  %41 = getelementptr inbounds %struct.fio_write_args_s, %struct.fio_write_args_s* %5, i32 0, i32 4
  %42 = load i8, i8* %41, align 8
  %43 = and i8 %42, -9
  store i8 %43, i8* %41, align 8
  %44 = call i64 @fio_write2_fn(i64 %6, %struct.fio_write_args_s* byval(%struct.fio_write_args_s) align 8 %5)
  ret i64 %44
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %5 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %6 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %5, i32 0, i32 2
  store i64 1, i64* %3, align 8
  %7 = load i64, i64* %3, align 8
  %8 = atomicrmw add i64* %6, i64 %7 seq_cst
  %9 = add i64 %8, %7
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  ret %struct.fio_msg_internal_s* %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_msg_internal_free2(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.fio_msg_internal_s*
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %4)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_timer_calc_first_interval() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.timespec, align 8
  %4 = alloca i64, align 8
  %5 = call i32 @fio_defer_has_queue()
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  br label %80

8:                                                ; preds = %0
  %9 = call i32 @fio_ls_embd_is_empty(%struct.fio_ls_embd_s* @fio_timers)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  store i64 1000, i64* %1, align 8
  br label %80

12:                                               ; preds = %8
  %13 = call { i64, i64 } @fio_last_tick()
  %14 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i64, i64 } %13, 0
  store i64 %16, i64* %15, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i64, i64 } %13, 1
  store i64 %18, i64* %17, align 8
  %19 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** getelementptr inbounds (%struct.fio_ls_embd_s, %struct.fio_ls_embd_s* @fio_timers, i32 0, i32 1), align 8
  %20 = ptrtoint %struct.fio_ls_embd_s* %19 to i64
  %21 = sub i64 %20, 0
  %22 = inttoptr i64 %21 to %struct.fio_timer_s*
  %23 = getelementptr inbounds %struct.fio_timer_s, %struct.fio_timer_s* %22, i32 0, i32 1
  %24 = bitcast %struct.timespec* %3 to i8*
  %25 = bitcast %struct.timespec* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false)
  %26 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %43, label %31

31:                                               ; preds = %12
  %32 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %33, %35
  br i1 %36, label %37, label %44

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp sle i64 %39, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %37, %12
  store i64 0, i64* %1, align 8
  br label %80

44:                                               ; preds = %37, %31
  %45 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = sub nsw i64 %46, %48
  %50 = mul nsw i64 1000, %49
  store i64 %50, i64* %4, align 8
  %51 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp sge i64 %52, %54
  br i1 %55, label %56, label %65

56:                                               ; preds = %44
  %57 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = sub nsw i64 %58, %60
  %62 = sdiv i64 %61, 1000000
  %63 = load i64, i64* %4, align 8
  %64 = add i64 %63, %62
  store i64 %64, i64* %4, align 8
  br label %74

65:                                               ; preds = %44
  %66 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = sub nsw i64 %67, %69
  %71 = sdiv i64 %70, 1000000
  %72 = load i64, i64* %4, align 8
  %73 = sub i64 %72, %71
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %65, %56
  %75 = load i64, i64* %4, align 8
  %76 = icmp ugt i64 %75, 1000
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i64 1000, i64* %4, align 8
  br label %78

78:                                               ; preds = %77, %74
  %79 = load i64, i64* %4, align 8
  store i64 %79, i64* %1, align 8
  br label %80

80:                                               ; preds = %78, %43, %11, %7
  %81 = load i64, i64* %1, align 8
  ret i64 %81
}

declare dso_local i32 @epoll_wait(i32, %struct.epoll_event*, i32, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_force_close_in_poll(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %4 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %3, i32 0, i32 12
  %5 = load i64, i64* %2, align 8
  %6 = lshr i64 %5, 8
  %7 = trunc i64 %6 to i32
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %4, i64 0, i64 %8
  %10 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %9, i32 0, i32 12
  store i8 2, i8* %10, align 8
  %11 = load i64, i64* %2, align 8
  call void @fio_force_close(i64 %11)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @fio_defer_cycle(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @fio_defer_on_thread_start()
  br label %3

3:                                                ; preds = %7, %1
  call void @fio_defer_perform()
  %4 = call signext i16 @fio_is_running()
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  br label %8

7:                                                ; preds = %3
  call void @fio_defer_thread_wait()
  br label %3

8:                                                ; preds = %6
  call void @fio_defer_on_thread_end()
  %9 = load i8*, i8** %2, align 8
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_on_thread_start() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_thread_wait() #0 {
  %1 = load i64, i64* @fio_defer_thread_wait.static_throttle, align 8
  call void @fio_throttle_thread(i64 %1)
  %2 = call i32 @fio_defer_has_queue()
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  store i64 1, i64* @fio_defer_thread_wait.static_throttle, align 8
  br label %12

5:                                                ; preds = %0
  %6 = load i64, i64* @fio_defer_thread_wait.static_throttle, align 8
  %7 = icmp ult i64 %6, 134217472
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = load i64, i64* @fio_defer_thread_wait.static_throttle, align 8
  %10 = shl i64 %9, 1
  store i64 %10, i64* @fio_defer_thread_wait.static_throttle, align 8
  br label %11

11:                                               ; preds = %8, %5
  br label %12

12:                                               ; preds = %11, %4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_defer_on_thread_end() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_throttle_thread(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.timespec, align 8
  store i64 %0, i64* %2, align 8
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %5 = load i64, i64* %2, align 8
  %6 = udiv i64 %5, 1000000000
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %8 = load i64, i64* %2, align 8
  %9 = urem i64 %8, 1000000000
  store i64 %9, i64* %7, align 8
  %10 = call i32 @nanosleep(%struct.timespec* %3, %struct.timespec* null)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @deferred_on_shutdown(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_protocol_s*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %12 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %13 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %12, i32 0, i32 12
  %14 = load i8*, i8** %3, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = lshr i64 %15, 8
  %17 = trunc i64 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %13, i64 0, i64 %18
  %20 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %19, i32 0, i32 3
  %21 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %20, align 8
  %22 = icmp ne %struct.fio_protocol_s* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %2
  br label %137

24:                                               ; preds = %2
  %25 = load i8*, i8** %3, align 8
  %26 = ptrtoint i8* %25 to i64
  %27 = lshr i64 %26, 8
  %28 = trunc i64 %27 to i32
  %29 = sext i32 %28 to i64
  %30 = call %struct.fio_protocol_s* @protocol_try_lock(i64 %29, i32 0)
  store %struct.fio_protocol_s* %30, %struct.fio_protocol_s** %5, align 8
  %31 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %32 = icmp ne %struct.fio_protocol_s* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %24
  %34 = call i32* @__errno_location() #9
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 9
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  br label %137

38:                                               ; preds = %33
  br label %129

39:                                               ; preds = %24
  %40 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %41 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %40, i32 0, i32 0
  %42 = getelementptr inbounds %struct.timespec, %struct.timespec* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %45 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %44, i32 0, i32 12
  %46 = load i8*, i8** %3, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = lshr i64 %47, 8
  %49 = trunc i64 %48 to i32
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %45, i64 0, i64 %50
  %52 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %51, i32 0, i32 4
  store i64 %43, i64* %52, align 8
  %53 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %54 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %53, i32 0, i32 2
  %55 = load i8 (i64, %struct.fio_protocol_s*)*, i8 (i64, %struct.fio_protocol_s*)** %54, align 8
  %56 = icmp ne i8 (i64, %struct.fio_protocol_s*)* %55, null
  br i1 %56, label %57, label %66

57:                                               ; preds = %39
  %58 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %59 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %58, i32 0, i32 2
  %60 = load i8 (i64, %struct.fio_protocol_s*)*, i8 (i64, %struct.fio_protocol_s*)** %59, align 8
  %61 = load i8*, i8** %3, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %64 = call zeroext i8 %60(i64 %62, %struct.fio_protocol_s* %63)
  %65 = zext i8 %64 to i32
  br label %67

66:                                               ; preds = %39
  br label %67

67:                                               ; preds = %66, %57
  %68 = phi i32 [ %65, %57 ], [ 0, %66 ]
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %6, align 1
  %70 = load i8, i8* %6, align 1
  %71 = icmp ne i8 %70, 0
  br i1 %71, label %72, label %107

72:                                               ; preds = %67
  %73 = load i8, i8* %6, align 1
  %74 = zext i8 %73 to i32
  %75 = icmp eq i32 %74, 255
  br i1 %75, label %76, label %86

76:                                               ; preds = %72
  %77 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %78 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %77, i32 0, i32 12
  %79 = load i8*, i8** %3, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = lshr i64 %80, 8
  %82 = trunc i64 %81 to i32
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %78, i64 0, i64 %83
  %85 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %84, i32 0, i32 6
  store i8 0, i8* %85, align 2
  br label %103

86:                                               ; preds = %72
  %87 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %88 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %87, i32 0, i32 2
  store i32 1, i32* %7, align 4
  %89 = load i32, i32* %7, align 4
  %90 = atomicrmw add i32* %88, i32 %89 seq_cst
  %91 = add i32 %90, %89
  store i32 %91, i32* %8, align 4
  %92 = load i32, i32* %8, align 4
  %93 = load i8, i8* %6, align 1
  %94 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %95 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %94, i32 0, i32 12
  %96 = load i8*, i8** %3, align 8
  %97 = ptrtoint i8* %96 to i64
  %98 = lshr i64 %97, 8
  %99 = trunc i64 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %95, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %101, i32 0, i32 6
  store i8 %93, i8* %102, align 2
  br label %103

103:                                              ; preds = %86, %76
  %104 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %105 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %104, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping2, void (i64, %struct.fio_protocol_s*)** %105, align 8
  %106 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %106, i32 0)
  br label %128

107:                                              ; preds = %67
  %108 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %109 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %108, i32 0, i32 2
  store i32 1, i32* %9, align 4
  %110 = load i32, i32* %9, align 4
  %111 = atomicrmw add i32* %109, i32 %110 seq_cst
  %112 = add i32 %111, %110
  store i32 %112, i32* %10, align 4
  %113 = load i32, i32* %10, align 4
  %114 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %115 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %114, i32 0, i32 12
  %116 = load i8*, i8** %3, align 8
  %117 = ptrtoint i8* %116 to i64
  %118 = lshr i64 %117, 8
  %119 = trunc i64 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %115, i64 0, i64 %120
  %122 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %121, i32 0, i32 6
  store i8 8, i8* %122, align 2
  %123 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  %124 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %123, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping, void (i64, %struct.fio_protocol_s*)** %124, align 8
  %125 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %5, align 8
  call void @protocol_unlock(%struct.fio_protocol_s* %125, i32 0)
  %126 = load i8*, i8** %3, align 8
  %127 = ptrtoint i8* %126 to i64
  call void @fio_close(i64 %127)
  br label %128

128:                                              ; preds = %107, %103
  br label %137

129:                                              ; preds = %38
  br label %130

130:                                              ; preds = %129
  %131 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 0
  store void (i8*, i8*)* @deferred_on_shutdown, void (i8*, i8*)** %131, align 8
  %132 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 1
  %133 = load i8*, i8** %3, align 8
  store i8* %133, i8** %132, align 8
  %134 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 2
  store i8* null, i8** %134, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %11, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %135

135:                                              ; preds = %130
  %136 = load i8*, i8** %4, align 8
  br label %137

137:                                              ; preds = %135, %128, %37, %23
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cycle_unwind(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  call void @fio_cycle_schedule_events()
  br label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 0
  store void (i8*, i8*)* @fio_cycle_unwind, void (i8*, i8*)** %12, align 8
  %13 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 1
  %14 = load i8*, i8** %3, align 8
  store i8* %14, i8** %13, align 8
  %15 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %5, i32 0, i32 2
  %16 = load i8*, i8** %4, align 8
  store i8* %16, i8** %15, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %5, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %17

17:                                               ; preds = %11
  br label %19

18:                                               ; preds = %2
  call void @fio_stop()
  br label %19

19:                                               ; preds = %18, %17
  ret void
}

declare dso_local i32 @wait(i32*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mock_ping2(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %7 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %11 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %10, i32 0, i32 12
  %12 = load i64, i64* %3, align 8
  %13 = lshr i64 %12, 8
  %14 = trunc i64 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %11, i64 0, i64 %15
  %17 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %16, i32 0, i32 4
  store i64 %9, i64* %17, align 8
  %18 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %19 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %18, i32 0, i32 12
  %20 = load i64, i64* %3, align 8
  %21 = lshr i64 %20, 8
  %22 = trunc i64 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %19, i64 0, i64 %23
  %25 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %24, i32 0, i32 6
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 255
  br i1 %28, label %29, label %30

29:                                               ; preds = %2
  br label %42

30:                                               ; preds = %2
  %31 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %32 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %31, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping, void (i64, %struct.fio_protocol_s*)** %32, align 8
  %33 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %34 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %33, i32 0, i32 12
  %35 = load i64, i64* %3, align 8
  %36 = lshr i64 %35, 8
  %37 = trunc i64 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [0 x %struct.fio_fd_data_s], [0 x %struct.fio_fd_data_s]* %34, i64 0, i64 %38
  %40 = getelementptr inbounds %struct.fio_fd_data_s, %struct.fio_fd_data_s* %39, i32 0, i32 6
  store i8 8, i8* %40, align 2
  %41 = load i64, i64* %3, align 8
  call void @fio_close(i64 %41)
  br label %42

42:                                               ; preds = %30, %29
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_filter_dup_lock_internal(%struct.channel_s*, i64, %struct.fio_collection_s*) #0 {
  %4 = alloca %struct.channel_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fio_collection_s*, align 8
  store %struct.channel_s* %0, %struct.channel_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store %struct.fio_collection_s* %2, %struct.fio_collection_s** %6, align 8
  %7 = load %struct.fio_collection_s*, %struct.fio_collection_s** %6, align 8
  %8 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %7, i32 0, i32 1
  call void @fio_lock(i8* %8)
  %9 = load %struct.fio_collection_s*, %struct.fio_collection_s** %6, align 8
  %10 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %9, i32 0, i32 0
  %11 = load i64, i64* %5, align 8
  %12 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %13 = call %struct.channel_s* @fio_ch_set_insert(%struct.fio_ch_set_s* %10, i64 %11, %struct.channel_s* %12)
  store %struct.channel_s* %13, %struct.channel_s** %4, align 8
  %14 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  call void @fio_channel_dup(%struct.channel_s* %14)
  %15 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %16 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %15, i32 0, i32 6
  call void @fio_lock(i8* %16)
  %17 = load %struct.fio_collection_s*, %struct.fio_collection_s** %6, align 8
  %18 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %17, i32 0, i32 1
  %19 = call i32 @fio_unlock(i8* %18)
  %20 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_ch_set_insert(%struct.fio_ch_set_s*, i64, %struct.channel_s*) #0 {
  %4 = alloca %struct.fio_ch_set_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.channel_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store %struct.channel_s* %2, %struct.channel_s** %6, align 8
  %7 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %struct.channel_s*, %struct.channel_s** %6, align 8
  %10 = call %struct.channel_s* @fio_ch_set__insert_or_overwrite_(%struct.fio_ch_set_s* %7, i64 %8, %struct.channel_s* %9, i32 0, %struct.channel_s** null)
  ret %struct.channel_s* %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_channel_dup(%struct.channel_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store %struct.channel_s* %0, %struct.channel_s** %2, align 8
  %5 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %6 = icmp ne %struct.channel_s* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  br label %15

8:                                                ; preds = %1
  %9 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %10 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %9, i32 0, i32 2
  store i64 1, i64* %3, align 8
  %11 = load i64, i64* %3, align 8
  %12 = atomicrmw volatile add i64* %10, i64 %11 seq_cst
  %13 = add i64 %12, %11
  store i64 %13, i64* %4, align 8
  %14 = load i64, i64* %4, align 8
  br label %15

15:                                               ; preds = %8, %7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_ch_set__insert_or_overwrite_(%struct.fio_ch_set_s*, i64, %struct.channel_s*, i32, %struct.channel_s**) #0 {
  %6 = alloca %struct.channel_s*, align 8
  %7 = alloca %struct.fio_ch_set_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.channel_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.channel_s**, align 8
  %12 = alloca %struct.fio_ch_set__map_s_*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %7, align 8
  store i64 %1, i64* %8, align 8
  store %struct.channel_s* %2, %struct.channel_s** %9, align 8
  store i32 %3, i32* %10, align 4
  store %struct.channel_s** %4, %struct.channel_s*** %11, align 8
  %13 = load i64, i64* %8, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %5
  store i64 -1, i64* %8, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %18 = call i64 @fio_ch_set_is_fragmented(%struct.fio_ch_set_s* %17)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  call void @fio_ch_set_rehash(%struct.fio_ch_set_s* %21)
  br label %37

22:                                               ; preds = %16
  %23 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %24 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %23, i32 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %27 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp uge i64 %25, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %22
  %31 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %32 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %31, i32 0, i32 6
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, 1
  store i8 %34, i8* %32, align 1
  %35 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  call void @fio_ch_set_rehash(%struct.fio_ch_set_s* %35)
  br label %36

36:                                               ; preds = %30, %22
  br label %37

37:                                               ; preds = %36, %20
  %38 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %39 = load i64, i64* %8, align 8
  %40 = load %struct.channel_s*, %struct.channel_s** %9, align 8
  %41 = call %struct.fio_ch_set__map_s_* @fio_ch_set__find_map_pos_(%struct.fio_ch_set_s* %38, i64 %39, %struct.channel_s* %40)
  store %struct.fio_ch_set__map_s_* %41, %struct.fio_ch_set__map_s_** %12, align 8
  %42 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %43 = icmp ne %struct.fio_ch_set__map_s_* %42, null
  br i1 %43, label %83, label %44

44:                                               ; preds = %37
  %45 = load %struct.channel_s*, %struct.channel_s** %9, align 8
  %46 = call %struct.channel_s* @fio_channel_copy(%struct.channel_s* %45)
  %47 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %48 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %47, i32 0, i32 3
  %49 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %48, align 8
  %50 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %51 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %50, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %49, i64 %52
  %54 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %53, i32 0, i32 1
  store %struct.channel_s* %46, %struct.channel_s** %54, align 8
  %55 = load i64, i64* %8, align 8
  %56 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %57 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %56, i32 0, i32 3
  %58 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %57, align 8
  %59 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %60 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %59, i32 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %58, i64 %61
  %63 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %62, i32 0, i32 0
  store i64 %55, i64* %63, align 8
  %64 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %65 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %64, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  %68 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %69 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %69, align 8
  %72 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  call void @fio_ch_set_rehash(%struct.fio_ch_set_s* %72)
  %73 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %74 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %73, i32 0, i32 3
  %75 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %74, align 8
  %76 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %77 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %76, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %78, 1
  %80 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %75, i64 %79
  %81 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %80, i32 0, i32 1
  %82 = load %struct.channel_s*, %struct.channel_s** %81, align 8
  store %struct.channel_s* %82, %struct.channel_s** %6, align 8
  br label %153

83:                                               ; preds = %37
  %84 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %85 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %84, i32 0, i32 1
  %86 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %85, align 8
  %87 = icmp ne %struct.fio_ch_set__ordered_s_* %86, null
  br i1 %87, label %88, label %115

88:                                               ; preds = %83
  %89 = load i32, i32* %10, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %88
  %92 = load %struct.channel_s*, %struct.channel_s** %9, align 8
  call void @fio_channel_free(%struct.channel_s* %92)
  %93 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %94 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %93, i32 0, i32 1
  %95 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %94, align 8
  %96 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %95, i32 0, i32 1
  %97 = load %struct.channel_s*, %struct.channel_s** %96, align 8
  store %struct.channel_s* %97, %struct.channel_s** %6, align 8
  br label %153

98:                                               ; preds = %88
  %99 = load %struct.channel_s**, %struct.channel_s*** %11, align 8
  %100 = icmp ne %struct.channel_s** %99, null
  br i1 %100, label %101, label %109

101:                                              ; preds = %98
  %102 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %103 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %102, i32 0, i32 1
  %104 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %103, align 8
  %105 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %104, i32 0, i32 1
  %106 = load %struct.channel_s*, %struct.channel_s** %105, align 8
  %107 = call %struct.channel_s* @fio_channel_copy(%struct.channel_s* %106)
  %108 = load %struct.channel_s**, %struct.channel_s*** %11, align 8
  store %struct.channel_s* %107, %struct.channel_s** %108, align 8
  br label %109

109:                                              ; preds = %101, %98
  %110 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %111 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %110, i32 0, i32 1
  %112 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %111, align 8
  %113 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %112, i32 0, i32 1
  %114 = load %struct.channel_s*, %struct.channel_s** %113, align 8
  call void @fio_channel_free(%struct.channel_s* %114)
  br label %133

115:                                              ; preds = %83
  %116 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %117 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %116, i32 0, i32 3
  %118 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %117, align 8
  %119 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %120 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %119, i32 0, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %118, i64 %121
  %123 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %124 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %123, i32 0, i32 1
  store %struct.fio_ch_set__ordered_s_* %122, %struct.fio_ch_set__ordered_s_** %124, align 8
  %125 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %126 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %125, i32 0, i32 2
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %126, align 8
  %129 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %7, align 8
  %130 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %130, align 8
  br label %133

133:                                              ; preds = %115, %109
  %134 = load i64, i64* %8, align 8
  %135 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %136 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %135, i32 0, i32 0
  store i64 %134, i64* %136, align 8
  %137 = load i64, i64* %8, align 8
  %138 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %139 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %138, i32 0, i32 1
  %140 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %139, align 8
  %141 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %140, i32 0, i32 0
  store i64 %137, i64* %141, align 8
  %142 = load %struct.channel_s*, %struct.channel_s** %9, align 8
  %143 = call %struct.channel_s* @fio_channel_copy(%struct.channel_s* %142)
  %144 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %145 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %144, i32 0, i32 1
  %146 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %145, align 8
  %147 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %146, i32 0, i32 1
  store %struct.channel_s* %143, %struct.channel_s** %147, align 8
  %148 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %12, align 8
  %149 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %148, i32 0, i32 1
  %150 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %149, align 8
  %151 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %150, i32 0, i32 1
  %152 = load %struct.channel_s*, %struct.channel_s** %151, align 8
  store %struct.channel_s* %152, %struct.channel_s** %6, align 8
  br label %153

153:                                              ; preds = %133, %91, %44
  %154 = load %struct.channel_s*, %struct.channel_s** %6, align 8
  ret %struct.channel_s* %154
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_ch_set_is_fragmented(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %3 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %3, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = icmp ugt i64 %9, %13
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ch_set_rehash(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  %3 = alloca i8, align 1
  %4 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_ch_set__map_s_*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %7 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  call void @fio_ch_set__compact_ordered_array_(%struct.fio_ch_set_s* %7)
  %8 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %8, i32 0, i32 5
  store i8 0, i8* %9, align 8
  store i8 0, i8* %3, align 1
  br label %10

10:                                               ; preds = %67, %1
  %11 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %12 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %11, i32 0, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %40

16:                                               ; preds = %10
  %17 = load i8, i8* %3, align 1
  %18 = add i8 %17, 1
  store i8 %18, i8* %3, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp sge i32 %19, 3
  br i1 %20, label %21, label %40

21:                                               ; preds = %16
  %22 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %23 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %22, i32 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %21
  br label %28

28:                                               ; preds = %27
  %29 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %30 = icmp sle i32 1, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %28
  %32 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %33 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %32, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %36 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.45, i64 0, i64 0), i64 %34, i64 %37)
  br label %38

38:                                               ; preds = %31, %28
  br label %39

39:                                               ; preds = %38
  call void @exit(i32 -1) #11
  unreachable

40:                                               ; preds = %21, %16, %10
  %41 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  call void @fio_ch_set__reallocate_set_mem_(%struct.fio_ch_set_s* %41)
  %42 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %43 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %42, i32 0, i32 3
  %44 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %43, align 8
  %45 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %46 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %45, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %44, i64 %47
  store %struct.fio_ch_set__ordered_s_* %48, %struct.fio_ch_set__ordered_s_** %4, align 8
  %49 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %49, i32 0, i32 3
  %51 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %50, align 8
  store %struct.fio_ch_set__ordered_s_* %51, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %52

52:                                               ; preds = %81, %40
  %53 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %54 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %55 = icmp ult %struct.fio_ch_set__ordered_s_* %53, %54
  br i1 %55, label %56, label %84

56:                                               ; preds = %52
  %57 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %58 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %59 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %62 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %61, i32 0, i32 1
  %63 = load %struct.channel_s*, %struct.channel_s** %62, align 8
  %64 = call %struct.fio_ch_set__map_s_* @fio_ch_set__find_map_pos_(%struct.fio_ch_set_s* %57, i64 %60, %struct.channel_s* %63)
  store %struct.fio_ch_set__map_s_* %64, %struct.fio_ch_set__map_s_** %6, align 8
  %65 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %6, align 8
  %66 = icmp ne %struct.fio_ch_set__map_s_* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %56
  %68 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %69 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %68, i32 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = add i8 %70, 1
  store i8 %71, i8* %69, align 1
  br label %10

72:                                               ; preds = %56
  %73 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %74 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %6, align 8
  %75 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %74, i32 0, i32 1
  store %struct.fio_ch_set__ordered_s_* %73, %struct.fio_ch_set__ordered_s_** %75, align 8
  %76 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %77 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %6, align 8
  %80 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %79, i32 0, i32 0
  store i64 %78, i64* %80, align 8
  br label %81

81:                                               ; preds = %72
  %82 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %83 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %82, i32 1
  store %struct.fio_ch_set__ordered_s_* %83, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %52

84:                                               ; preds = %52
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_ch_set__map_s_* @fio_ch_set__find_map_pos_(%struct.fio_ch_set_s*, i64, %struct.channel_s*) #0 {
  %4 = alloca %struct.fio_ch_set__map_s_*, align 8
  %5 = alloca %struct.fio_ch_set_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.channel_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.fio_ch_set__map_s_*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store %struct.channel_s* %2, %struct.channel_s** %7, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  store i64 -1, i64* %6, align 8
  br label %18

18:                                               ; preds = %17, %3
  %19 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %20 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %19, i32 0, i32 4
  %21 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %20, align 8
  %22 = icmp ne %struct.fio_ch_set__map_s_* %21, null
  br i1 %22, label %23, label %202

23:                                               ; preds = %18
  %24 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %24, i32 0, i32 5
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %23
  %30 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %34 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp ne i64 %32, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  call void @fio_ch_set_rehash(%struct.fio_ch_set_s* %38)
  br label %39

39:                                               ; preds = %37, %29, %23
  store i64 0, i64* %8, align 8
  %40 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %41 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %40, i32 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = zext i32 %43 to i64
  %45 = shl i64 1, %44
  %46 = sub i64 %45, 1
  store i64 %46, i64* %10, align 8
  %47 = load i64, i64* %6, align 8
  %48 = lshr i64 %47, 0
  %49 = load i64, i64* %6, align 8
  %50 = shl i64 %49, 0
  %51 = or i64 %48, %50
  %52 = load i64, i64* %6, align 8
  %53 = call i64 @fio_ct_if2(i64 0, i64 %52, i64 0)
  %54 = xor i64 %51, %53
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %6, align 8
  %56 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %57 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %56, i32 0, i32 6
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = and i64 %59, 63
  %61 = lshr i64 %55, %60
  %62 = load i64, i64* %6, align 8
  %63 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %64 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %63, i32 0, i32 6
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = sub nsw i32 0, %66
  %68 = sext i32 %67 to i64
  %69 = and i64 %68, 63
  %70 = shl i64 %62, %69
  %71 = or i64 %61, %70
  %72 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %73 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %72, i32 0, i32 6
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = load i64, i64* %6, align 8
  %77 = call i64 @fio_ct_if2(i64 %75, i64 %76, i64 0)
  %78 = xor i64 %71, %77
  store i64 %78, i64* %13, align 8
  %79 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %80 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %79, i32 0, i32 4
  %81 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %80, align 8
  %82 = load i64, i64* %13, align 8
  %83 = load i64, i64* %10, align 8
  %84 = and i64 %82, %83
  %85 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %81, i64 %84
  store %struct.fio_ch_set__map_s_* %85, %struct.fio_ch_set__map_s_** %9, align 8
  %86 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %87 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %86, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 0, %88
  br i1 %89, label %90, label %92

90:                                               ; preds = %39
  %91 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  store %struct.fio_ch_set__map_s_* %91, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

92:                                               ; preds = %39
  %93 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %94 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load i64, i64* %12, align 8
  %97 = icmp eq i64 %95, %96
  br i1 %97, label %98, label %119

98:                                               ; preds = %92
  %99 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %100 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %99, i32 0, i32 1
  %101 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %100, align 8
  %102 = icmp ne %struct.fio_ch_set__ordered_s_* %101, null
  br i1 %102, label %103, label %112

103:                                              ; preds = %98
  %104 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %105 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %104, i32 0, i32 1
  %106 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %105, align 8
  %107 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %106, i32 0, i32 1
  %108 = load %struct.channel_s*, %struct.channel_s** %107, align 8
  %109 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %110 = call i32 @fio_channel_cmp(%struct.channel_s* %108, %struct.channel_s* %109)
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %103, %98
  %113 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  store %struct.fio_ch_set__map_s_* %113, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

114:                                              ; preds = %103
  %115 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %116 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %115, i32 0, i32 5
  store i8 1, i8* %116, align 8
  %117 = load i64, i64* %8, align 8
  %118 = add i64 %117, 1
  store i64 %118, i64* %8, align 8
  br label %119

119:                                              ; preds = %114, %92
  store i64 0, i64* %11, align 8
  %120 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %121 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %120, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = icmp ugt i64 %122, 384
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  br label %130

125:                                              ; preds = %119
  %126 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %127 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %126, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = lshr i64 %128, 2
  br label %130

130:                                              ; preds = %125, %124
  %131 = phi i64 [ 96, %124 ], [ %129, %125 ]
  %132 = mul i64 11, %131
  store i64 %132, i64* %14, align 8
  br label %133

133:                                              ; preds = %200, %130
  %134 = load i64, i64* %11, align 8
  %135 = load i64, i64* %14, align 8
  %136 = icmp ult i64 %134, %135
  br i1 %136, label %137, label %201

137:                                              ; preds = %133
  %138 = load i64, i64* %11, align 8
  %139 = add i64 %138, 11
  store i64 %139, i64* %11, align 8
  %140 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %141 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %140, i32 0, i32 4
  %142 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %141, align 8
  %143 = load i64, i64* %13, align 8
  %144 = load i64, i64* %11, align 8
  %145 = add i64 %143, %144
  %146 = load i64, i64* %10, align 8
  %147 = and i64 %145, %146
  %148 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %142, i64 %147
  store %struct.fio_ch_set__map_s_* %148, %struct.fio_ch_set__map_s_** %9, align 8
  %149 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %150 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %149, i32 0, i32 0
  %151 = load i64, i64* %150, align 8
  %152 = icmp eq i64 0, %151
  br i1 %152, label %153, label %155

153:                                              ; preds = %137
  %154 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  store %struct.fio_ch_set__map_s_* %154, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

155:                                              ; preds = %137
  %156 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %157 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %156, i32 0, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = load i64, i64* %12, align 8
  %160 = icmp eq i64 %158, %159
  br i1 %160, label %161, label %200

161:                                              ; preds = %155
  %162 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %163 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %162, i32 0, i32 1
  %164 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %163, align 8
  %165 = icmp ne %struct.fio_ch_set__ordered_s_* %164, null
  br i1 %165, label %166, label %175

166:                                              ; preds = %161
  %167 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  %168 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %167, i32 0, i32 1
  %169 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %168, align 8
  %170 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %169, i32 0, i32 1
  %171 = load %struct.channel_s*, %struct.channel_s** %170, align 8
  %172 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %173 = call i32 @fio_channel_cmp(%struct.channel_s* %171, %struct.channel_s* %172)
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %166, %161
  %176 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  store %struct.fio_ch_set__map_s_* %176, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

177:                                              ; preds = %166
  %178 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %179 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %178, i32 0, i32 5
  store i8 1, i8* %179, align 8
  %180 = load i64, i64* %8, align 8
  %181 = add i64 %180, 1
  store i64 %181, i64* %8, align 8
  %182 = icmp uge i64 %181, 96
  br i1 %182, label %183, label %192

183:                                              ; preds = %177
  br label %184

184:                                              ; preds = %183
  %185 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %186 = icmp sle i32 3, %185
  br i1 %186, label %187, label %188

187:                                              ; preds = %184
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.47, i64 0, i64 0))
  br label %188

188:                                              ; preds = %187, %184
  br label %189

189:                                              ; preds = %188
  %190 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %191 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %190, i32 0, i32 7
  store i8 1, i8* %191, align 2
  br label %192

192:                                              ; preds = %189, %177
  %193 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %194 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %193, i32 0, i32 7
  %195 = load i8, i8* %194, align 2
  %196 = icmp ne i8 %195, 0
  br i1 %196, label %197, label %199

197:                                              ; preds = %192
  %198 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %9, align 8
  store %struct.fio_ch_set__map_s_* %198, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

199:                                              ; preds = %192
  br label %200

200:                                              ; preds = %199, %155
  br label %133

201:                                              ; preds = %133
  br label %202

202:                                              ; preds = %201, %18
  store %struct.fio_ch_set__map_s_* null, %struct.fio_ch_set__map_s_** %4, align 8
  br label %203

203:                                              ; preds = %202, %197, %175, %153, %112, %90
  %204 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %4, align 8
  ret %struct.fio_ch_set__map_s_* %204
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_channel_copy(%struct.channel_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.fio_ls_embd_s, align 8
  store %struct.channel_s* %0, %struct.channel_s** %2, align 8
  %5 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %6 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 64, %7
  %9 = add i64 %8, 1
  %10 = call noalias i8* @malloc(i64 %9) #1
  %11 = bitcast i8* %10 to %struct.channel_s*
  store %struct.channel_s* %11, %struct.channel_s** %3, align 8
  %12 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %13 = icmp ne %struct.channel_s* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %1
  br label %15

15:                                               ; preds = %14
  %16 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %17 = icmp sle i32 1, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.67, i64 0, i64 0))
  br label %19

19:                                               ; preds = %18, %15
  br label %20

20:                                               ; preds = %19
  %21 = call i32 @kill(i32 0, i32 2) #1
  %22 = call i32* @__errno_location() #9
  %23 = load i32, i32* %22, align 4
  call void @exit(i32 %23) #11
  unreachable

24:                                               ; preds = %1
  %25 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %26 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %29 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %28, i32 0, i32 0
  store i64 %27, i64* %29, align 8
  %30 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %31 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %30, i32 0, i32 5
  %32 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %31, align 8
  %33 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %34 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %33, i32 0, i32 5
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %32, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %34, align 8
  %35 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %36 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %35, i32 0, i32 4
  %37 = load %struct.fio_collection_s*, %struct.fio_collection_s** %36, align 8
  %38 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %39 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %38, i32 0, i32 4
  store %struct.fio_collection_s* %37, %struct.fio_collection_s** %39, align 8
  %40 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %41 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %40, i64 1
  %42 = bitcast %struct.channel_s* %41 to i8*
  %43 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %44 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %43, i32 0, i32 1
  store i8* %42, i8** %44, align 8
  %45 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %46 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %59

49:                                               ; preds = %24
  %50 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %51 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %50, i32 0, i32 1
  %52 = load i8*, i8** %51, align 8
  %53 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %54 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %53, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %57 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %56, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %55, i64 %58, i1 false)
  br label %59

59:                                               ; preds = %49, %24
  %60 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %61 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %60, i32 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %64 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %63, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  store i8 0, i8* %66, align 1
  %67 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %68 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %67, i32 0, i32 3
  %69 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %4, i32 0, i32 0
  %70 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %71 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %70, i32 0, i32 3
  store %struct.fio_ls_embd_s* %71, %struct.fio_ls_embd_s** %69, align 8
  %72 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %4, i32 0, i32 1
  %73 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %74 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %73, i32 0, i32 3
  store %struct.fio_ls_embd_s* %74, %struct.fio_ls_embd_s** %72, align 8
  %75 = bitcast %struct.fio_ls_embd_s* %68 to i8*
  %76 = bitcast %struct.fio_ls_embd_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false)
  %77 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %78 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %77, i32 0, i32 2
  store volatile i64 1, i64* %78, align 8
  %79 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %80 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %79, i32 0, i32 6
  store volatile i8 0, i8* %80, align 8
  %81 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  ret %struct.channel_s* %81
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_channel_free(%struct.channel_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store %struct.channel_s* %0, %struct.channel_s** %2, align 8
  %5 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %6 = icmp ne %struct.channel_s* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  br label %20

8:                                                ; preds = %1
  %9 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %10 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %9, i32 0, i32 2
  store i64 1, i64* %3, align 8
  %11 = load i64, i64* %3, align 8
  %12 = atomicrmw volatile sub i64* %10, i64 %11 seq_cst
  %13 = sub i64 %12, %11
  store i64 %13, i64* %4, align 8
  %14 = load i64, i64* %4, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  br label %20

17:                                               ; preds = %8
  %18 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %19 = bitcast %struct.channel_s* %18 to i8*
  call void @free(i8* %19) #1
  br label %20

20:                                               ; preds = %17, %16, %7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ch_set__compact_ordered_array_(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  %3 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %6 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  br label %66

14:                                               ; preds = %1
  %15 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %16 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %15, i32 0, i32 3
  %17 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %16, align 8
  store %struct.fio_ch_set__ordered_s_* %17, %struct.fio_ch_set__ordered_s_** %3, align 8
  %18 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %19, align 8
  store %struct.fio_ch_set__ordered_s_* %20, %struct.fio_ch_set__ordered_s_** %4, align 8
  %21 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %21, i32 0, i32 3
  %23 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %22, align 8
  %24 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %24, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %23, i64 %26
  store %struct.fio_ch_set__ordered_s_* %27, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %28

28:                                               ; preds = %50, %14
  %29 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %30 = icmp ne %struct.fio_ch_set__ordered_s_* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %33 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %34 = icmp ult %struct.fio_ch_set__ordered_s_* %32, %33
  br label %35

35:                                               ; preds = %31, %28
  %36 = phi i1 [ false, %28 ], [ %34, %31 ]
  br i1 %36, label %37, label %53

37:                                               ; preds = %35
  %38 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %39 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %50

43:                                               ; preds = %37
  %44 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %45 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %46 = bitcast %struct.fio_ch_set__ordered_s_* %44 to i8*
  %47 = bitcast %struct.fio_ch_set__ordered_s_* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  %48 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %49 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %48, i32 1
  store %struct.fio_ch_set__ordered_s_* %49, %struct.fio_ch_set__ordered_s_** %4, align 8
  br label %50

50:                                               ; preds = %43, %42
  %51 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %52 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %51, i32 1
  store %struct.fio_ch_set__ordered_s_* %52, %struct.fio_ch_set__ordered_s_** %3, align 8
  br label %28

53:                                               ; preds = %35
  %54 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %55 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %56 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %55, i32 0, i32 3
  %57 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %56, align 8
  %58 = ptrtoint %struct.fio_ch_set__ordered_s_* %54 to i64
  %59 = ptrtoint %struct.fio_ch_set__ordered_s_* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sdiv exact i64 %60, 16
  %62 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %63 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %62, i32 0, i32 0
  store i64 %61, i64* %63, align 8
  %64 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %65 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %64, i32 0, i32 2
  store i64 %61, i64* %65, align 8
  br label %66

66:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ch_set__reallocate_set_mem_(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  %3 = alloca i64, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %4 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %5 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %4, i32 0, i32 6
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  store i64 %9, i64* %3, align 8
  %10 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %10, i32 0, i32 4
  %12 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %11, align 8
  %13 = bitcast %struct.fio_ch_set__map_s_* %12 to i8*
  call void @free(i8* %13) #1
  %14 = load i64, i64* %3, align 8
  %15 = call noalias i8* @calloc(i64 16, i64 %14) #1
  %16 = bitcast i8* %15 to %struct.fio_ch_set__map_s_*
  %17 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %18 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %17, i32 0, i32 4
  store %struct.fio_ch_set__map_s_* %16, %struct.fio_ch_set__map_s_** %18, align 8
  %19 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %20 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %19, i32 0, i32 3
  %21 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %20, align 8
  %22 = bitcast %struct.fio_ch_set__ordered_s_* %21 to i8*
  %23 = load i64, i64* %3, align 8
  %24 = mul i64 %23, 16
  %25 = call i8* @realloc(i8* %22, i64 %24) #1
  %26 = bitcast i8* %25 to %struct.fio_ch_set__ordered_s_*
  %27 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %28 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %27, i32 0, i32 3
  store %struct.fio_ch_set__ordered_s_* %26, %struct.fio_ch_set__ordered_s_** %28, align 8
  %29 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %30 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %29, i32 0, i32 4
  %31 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %30, align 8
  %32 = icmp ne %struct.fio_ch_set__map_s_* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %1
  %34 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %35 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %34, i32 0, i32 3
  %36 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %35, align 8
  %37 = icmp ne %struct.fio_ch_set__ordered_s_* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %33, %1
  call void @perror(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i64 0, i64 0))
  %39 = call i32* @__errno_location() #9
  %40 = load i32, i32* %39, align 4
  call void @exit(i32 %40) #11
  unreachable

41:                                               ; preds = %33
  %42 = load i64, i64* %3, align 8
  %43 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %43, i32 0, i32 1
  store i64 %42, i64* %44, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_channel_cmp(%struct.channel_s*, %struct.channel_s*) #0 {
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.channel_s*, align 8
  store %struct.channel_s* %0, %struct.channel_s** %3, align 8
  store %struct.channel_s* %1, %struct.channel_s** %4, align 8
  %5 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %6 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %9 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %7, %10
  br i1 %11, label %12, label %33

12:                                               ; preds = %2
  %13 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %14 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %13, i32 0, i32 5
  %15 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %14, align 8
  %16 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %17 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %16, i32 0, i32 5
  %18 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %17, align 8
  %19 = icmp eq i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %15, %18
  br i1 %19, label %20, label %33

20:                                               ; preds = %12
  %21 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %22 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %21, i32 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  %25 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %24, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %28 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = call i32 @memcmp(i8* %23, i8* %26, i64 %29) #10
  %31 = icmp ne i32 %30, 0
  %32 = xor i1 %31, true
  br label %33

33:                                               ; preds = %20, %12, %2
  %34 = phi i1 [ false, %12 ], [ false, %2 ], [ %32, %20 ]
  %35 = zext i1 %34 to i32
  ret i32 %35
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_pubsub_on_channel_create(%struct.channel_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_str_info_s, align 8
  store %struct.channel_s* %0, %struct.channel_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %5 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 3), align 8
  store %struct.fio_engine_set__ordered_s_* %5, %struct.fio_engine_set__ordered_s_** %3, align 8
  br label %6

6:                                                ; preds = %44, %1
  %7 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %8 = icmp ne %struct.fio_engine_set__ordered_s_* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %6
  %10 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %11 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 3), align 8
  %12 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0, i32 2), align 8
  %13 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %11, i64 %12
  %14 = icmp ult %struct.fio_engine_set__ordered_s_* %10, %13
  br label %15

15:                                               ; preds = %9, %6
  %16 = phi i1 [ false, %6 ], [ %14, %9 ]
  br i1 %16, label %17, label %47

17:                                               ; preds = %15
  %18 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %19 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  br label %44

23:                                               ; preds = %17
  %24 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %25 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %24, i32 0, i32 1
  %26 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %25, align 8
  %27 = getelementptr inbounds %struct.fio_pubsub_engine_s, %struct.fio_pubsub_engine_s* %26, i32 0, i32 0
  %28 = load void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)*, void (%struct.fio_pubsub_engine_s*, %struct.fio_str_info_s*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*)** %27, align 8
  %29 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %30 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %29, i32 0, i32 1
  %31 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %30, align 8
  %32 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 0
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 1
  %34 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %35 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %33, align 8
  %37 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 2
  %38 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %39 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %38, i32 0, i32 1
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %37, align 8
  %41 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  %42 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %41, i32 0, i32 5
  %43 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %42, align 8
  call void %28(%struct.fio_pubsub_engine_s* %31, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %4, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %43)
  br label %44

44:                                               ; preds = %23, %22
  %45 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %46 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %45, i32 1
  store %struct.fio_engine_set__ordered_s_* %46, %struct.fio_engine_set__ordered_s_** %3, align 8
  br label %6

47:                                               ; preds = %15
  %48 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 1))
  %49 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  call void @fio_cluster_inform_root_about_channel(%struct.channel_s* %49, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_inform_root_about_channel(%struct.channel_s*, i32) #0 {
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_str_info_s, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca [8 x i8], align 1
  store %struct.channel_s* %0, %struct.channel_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %9 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %8, i32 0, i32 8
  %10 = load i8, i8* %9, align 2
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %2
  %13 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %14 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %13, i32 0, i32 4
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %24, label %18

18:                                               ; preds = %12
  %19 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %23 = icmp ne %struct.channel_s* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %21, %18, %12, %2
  br label %137

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %5, i32 0, i32 0
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %5, i32 0, i32 1
  %28 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %29 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  %31 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %5, i32 0, i32 2
  %32 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %33 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %32, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  store i8* %34, i8** %31, align 8
  %35 = bitcast %struct.fio_str_info_s* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false)
  %36 = bitcast [8 x i8]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 8, i1 false)
  %37 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %38 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %37, i32 0, i32 5
  %39 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %38, align 8
  %40 = icmp ne i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %39, null
  br i1 %40, label %41, label %118

41:                                               ; preds = %25
  br label %42

42:                                               ; preds = %41
  %43 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %44 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %43, i32 0, i32 5
  %45 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %44, align 8
  %46 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %45 to i64
  %47 = lshr i64 %46, 56
  %48 = and i64 %47, 255
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %51 = getelementptr inbounds i8, i8* %50, i64 0
  store i8 %49, i8* %51, align 1
  %52 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %53 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %52, i32 0, i32 5
  %54 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %53, align 8
  %55 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %54 to i64
  %56 = lshr i64 %55, 48
  %57 = and i64 %56, 255
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %58, i8* %60, align 1
  %61 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %62 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %61, i32 0, i32 5
  %63 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %62, align 8
  %64 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %63 to i64
  %65 = lshr i64 %64, 40
  %66 = and i64 %65, 255
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %69 = getelementptr inbounds i8, i8* %68, i64 2
  store i8 %67, i8* %69, align 1
  %70 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %71 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %70, i32 0, i32 5
  %72 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %71, align 8
  %73 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %72 to i64
  %74 = lshr i64 %73, 32
  %75 = and i64 %74, 255
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %78 = getelementptr inbounds i8, i8* %77, i64 3
  store i8 %76, i8* %78, align 1
  %79 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %80 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %79, i32 0, i32 5
  %81 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %80, align 8
  %82 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %81 to i64
  %83 = lshr i64 %82, 24
  %84 = and i64 %83, 255
  %85 = trunc i64 %84 to i8
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %87 = getelementptr inbounds i8, i8* %86, i64 4
  store i8 %85, i8* %87, align 1
  %88 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %89 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %88, i32 0, i32 5
  %90 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %89, align 8
  %91 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %90 to i64
  %92 = lshr i64 %91, 16
  %93 = and i64 %92, 255
  %94 = trunc i64 %93 to i8
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %96 = getelementptr inbounds i8, i8* %95, i64 5
  store i8 %94, i8* %96, align 1
  %97 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %98 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %97, i32 0, i32 5
  %99 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %98, align 8
  %100 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %99 to i64
  %101 = lshr i64 %100, 8
  %102 = and i64 %101, 255
  %103 = trunc i64 %102 to i8
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %105 = getelementptr inbounds i8, i8* %104, i64 6
  store i8 %103, i8* %105, align 1
  %106 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %107 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %106, i32 0, i32 5
  %108 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %107, align 8
  %109 = ptrtoint i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %108 to i64
  %110 = and i64 %109, 255
  %111 = trunc i64 %110 to i8
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %113 = getelementptr inbounds i8, i8* %112, i64 7
  store i8 %111, i8* %113, align 1
  br label %114

114:                                              ; preds = %42
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  %116 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  store i8* %115, i8** %116, align 8
  %117 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  store i64 8, i64* %117, align 8
  br label %118

118:                                              ; preds = %114, %25
  %119 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %120 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %119, i32 0, i32 5
  %121 = load i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %120, align 8
  %122 = icmp ne i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %121, null
  br i1 %122, label %123, label %128

123:                                              ; preds = %118
  %124 = load i32, i32* %4, align 4
  %125 = icmp ne i32 %124, 0
  %126 = zext i1 %125 to i64
  %127 = select i1 %125, i32 6, i32 7
  br label %133

128:                                              ; preds = %118
  %129 = load i32, i32* %4, align 4
  %130 = icmp ne i32 %129, 0
  %131 = zext i1 %130 to i64
  %132 = select i1 %130, i32 4, i32 5
  br label %133

133:                                              ; preds = %128, %123
  %134 = phi i32 [ %127, %123 ], [ %132, %128 ]
  %135 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 0, i32 %134, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %5, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %6, i8 signext 0, i8 signext 1)
  %136 = bitcast %struct.fio_msg_internal_s* %135 to i8*
  call void @fio_cluster_client_sender(i8* %136, i64 -1)
  br label %137

137:                                              ; preds = %133, %24
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_pubsub_engine_s* @fio_engine_set__insert_or_overwrite_(%struct.fio_engine_set_s*, i64, %struct.fio_pubsub_engine_s*, i32, %struct.fio_pubsub_engine_s**) #0 {
  %6 = alloca %struct.fio_pubsub_engine_s*, align 8
  %7 = alloca %struct.fio_engine_set_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.fio_pubsub_engine_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.fio_pubsub_engine_s**, align 8
  %12 = alloca %struct.fio_engine_set__map_s_*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %7, align 8
  store i64 %1, i64* %8, align 8
  store %struct.fio_pubsub_engine_s* %2, %struct.fio_pubsub_engine_s** %9, align 8
  store i32 %3, i32* %10, align 4
  store %struct.fio_pubsub_engine_s** %4, %struct.fio_pubsub_engine_s*** %11, align 8
  %13 = load i64, i64* %8, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %5
  store i64 -1, i64* %8, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %18 = call i64 @fio_engine_set_is_fragmented(%struct.fio_engine_set_s* %17)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  call void @fio_engine_set_rehash(%struct.fio_engine_set_s* %21)
  br label %37

22:                                               ; preds = %16
  %23 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %24 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %23, i32 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %27 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp uge i64 %25, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %22
  %31 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %32 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %31, i32 0, i32 6
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, 1
  store i8 %34, i8* %32, align 1
  %35 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  call void @fio_engine_set_rehash(%struct.fio_engine_set_s* %35)
  br label %36

36:                                               ; preds = %30, %22
  br label %37

37:                                               ; preds = %36, %20
  %38 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %39 = load i64, i64* %8, align 8
  %40 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %9, align 8
  %41 = call %struct.fio_engine_set__map_s_* @fio_engine_set__find_map_pos_(%struct.fio_engine_set_s* %38, i64 %39, %struct.fio_pubsub_engine_s* %40)
  store %struct.fio_engine_set__map_s_* %41, %struct.fio_engine_set__map_s_** %12, align 8
  %42 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %43 = icmp ne %struct.fio_engine_set__map_s_* %42, null
  br i1 %43, label %82, label %44

44:                                               ; preds = %37
  %45 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %9, align 8
  %46 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %47 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %46, i32 0, i32 3
  %48 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %47, align 8
  %49 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %50 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %48, i64 %51
  %53 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %52, i32 0, i32 1
  store %struct.fio_pubsub_engine_s* %45, %struct.fio_pubsub_engine_s** %53, align 8
  %54 = load i64, i64* %8, align 8
  %55 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %56 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %55, i32 0, i32 3
  %57 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %56, align 8
  %58 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %59 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %58, i32 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %57, i64 %60
  %62 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %61, i32 0, i32 0
  store i64 %54, i64* %62, align 8
  %63 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %64 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %63, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  %67 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %68 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  %71 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  call void @fio_engine_set_rehash(%struct.fio_engine_set_s* %71)
  %72 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %73 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %72, i32 0, i32 3
  %74 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %73, align 8
  %75 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %76 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, 1
  %79 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %74, i64 %78
  %80 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %79, i32 0, i32 1
  %81 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %80, align 8
  store %struct.fio_pubsub_engine_s* %81, %struct.fio_pubsub_engine_s** %6, align 8
  br label %144

82:                                               ; preds = %37
  %83 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %84 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %83, i32 0, i32 1
  %85 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %84, align 8
  %86 = icmp ne %struct.fio_engine_set__ordered_s_* %85, null
  br i1 %86, label %87, label %107

87:                                               ; preds = %82
  %88 = load i32, i32* %10, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %87
  %91 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %92 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %91, i32 0, i32 1
  %93 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %92, align 8
  %94 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %93, i32 0, i32 1
  %95 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %94, align 8
  store %struct.fio_pubsub_engine_s* %95, %struct.fio_pubsub_engine_s** %6, align 8
  br label %144

96:                                               ; preds = %87
  %97 = load %struct.fio_pubsub_engine_s**, %struct.fio_pubsub_engine_s*** %11, align 8
  %98 = icmp ne %struct.fio_pubsub_engine_s** %97, null
  br i1 %98, label %99, label %106

99:                                               ; preds = %96
  %100 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %101 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %100, i32 0, i32 1
  %102 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %101, align 8
  %103 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %102, i32 0, i32 1
  %104 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %103, align 8
  %105 = load %struct.fio_pubsub_engine_s**, %struct.fio_pubsub_engine_s*** %11, align 8
  store %struct.fio_pubsub_engine_s* %104, %struct.fio_pubsub_engine_s** %105, align 8
  br label %106

106:                                              ; preds = %99, %96
  br label %125

107:                                              ; preds = %82
  %108 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %109 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %108, i32 0, i32 3
  %110 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %109, align 8
  %111 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %112 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %111, i32 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %110, i64 %113
  %115 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %116 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %115, i32 0, i32 1
  store %struct.fio_engine_set__ordered_s_* %114, %struct.fio_engine_set__ordered_s_** %116, align 8
  %117 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %118 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %117, i32 0, i32 2
  %119 = load i64, i64* %118, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %118, align 8
  %121 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %7, align 8
  %122 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %121, i32 0, i32 0
  %123 = load i64, i64* %122, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %122, align 8
  br label %125

125:                                              ; preds = %107, %106
  %126 = load i64, i64* %8, align 8
  %127 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %128 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %127, i32 0, i32 0
  store i64 %126, i64* %128, align 8
  %129 = load i64, i64* %8, align 8
  %130 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %131 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %130, i32 0, i32 1
  %132 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %131, align 8
  %133 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %132, i32 0, i32 0
  store i64 %129, i64* %133, align 8
  %134 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %9, align 8
  %135 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %136 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %135, i32 0, i32 1
  %137 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %136, align 8
  %138 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %137, i32 0, i32 1
  store %struct.fio_pubsub_engine_s* %134, %struct.fio_pubsub_engine_s** %138, align 8
  %139 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %12, align 8
  %140 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %139, i32 0, i32 1
  %141 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %140, align 8
  %142 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %141, i32 0, i32 1
  %143 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %142, align 8
  store %struct.fio_pubsub_engine_s* %143, %struct.fio_pubsub_engine_s** %6, align 8
  br label %144

144:                                              ; preds = %125, %90, %44
  %145 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %6, align 8
  ret %struct.fio_pubsub_engine_s* %145
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_engine_set_is_fragmented(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %3 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %3, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = icmp ugt i64 %9, %13
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_engine_set_rehash(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  %3 = alloca i8, align 1
  %4 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_engine_set__map_s_*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %7 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  call void @fio_engine_set__compact_ordered_array_(%struct.fio_engine_set_s* %7)
  %8 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %8, i32 0, i32 5
  store i8 0, i8* %9, align 8
  store i8 0, i8* %3, align 1
  br label %10

10:                                               ; preds = %67, %1
  %11 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %12 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %11, i32 0, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %40

16:                                               ; preds = %10
  %17 = load i8, i8* %3, align 1
  %18 = add i8 %17, 1
  store i8 %18, i8* %3, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp sge i32 %19, 3
  br i1 %20, label %21, label %40

21:                                               ; preds = %16
  %22 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %23 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %22, i32 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %21
  br label %28

28:                                               ; preds = %27
  %29 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %30 = icmp sle i32 1, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %28
  %32 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %33 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %32, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %36 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.45, i64 0, i64 0), i64 %34, i64 %37)
  br label %38

38:                                               ; preds = %31, %28
  br label %39

39:                                               ; preds = %38
  call void @exit(i32 -1) #11
  unreachable

40:                                               ; preds = %21, %16, %10
  %41 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  call void @fio_engine_set__reallocate_set_mem_(%struct.fio_engine_set_s* %41)
  %42 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %43 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %42, i32 0, i32 3
  %44 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %43, align 8
  %45 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %46 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %45, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %44, i64 %47
  store %struct.fio_engine_set__ordered_s_* %48, %struct.fio_engine_set__ordered_s_** %4, align 8
  %49 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %49, i32 0, i32 3
  %51 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %50, align 8
  store %struct.fio_engine_set__ordered_s_* %51, %struct.fio_engine_set__ordered_s_** %5, align 8
  br label %52

52:                                               ; preds = %81, %40
  %53 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %54 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %55 = icmp ult %struct.fio_engine_set__ordered_s_* %53, %54
  br i1 %55, label %56, label %84

56:                                               ; preds = %52
  %57 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %58 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %59 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %62 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %61, i32 0, i32 1
  %63 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %62, align 8
  %64 = call %struct.fio_engine_set__map_s_* @fio_engine_set__find_map_pos_(%struct.fio_engine_set_s* %57, i64 %60, %struct.fio_pubsub_engine_s* %63)
  store %struct.fio_engine_set__map_s_* %64, %struct.fio_engine_set__map_s_** %6, align 8
  %65 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %6, align 8
  %66 = icmp ne %struct.fio_engine_set__map_s_* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %56
  %68 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %69 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %68, i32 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = add i8 %70, 1
  store i8 %71, i8* %69, align 1
  br label %10

72:                                               ; preds = %56
  %73 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %74 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %6, align 8
  %75 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %74, i32 0, i32 1
  store %struct.fio_engine_set__ordered_s_* %73, %struct.fio_engine_set__ordered_s_** %75, align 8
  %76 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %77 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %6, align 8
  %80 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %79, i32 0, i32 0
  store i64 %78, i64* %80, align 8
  br label %81

81:                                               ; preds = %72
  %82 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %83 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %82, i32 1
  store %struct.fio_engine_set__ordered_s_* %83, %struct.fio_engine_set__ordered_s_** %5, align 8
  br label %52

84:                                               ; preds = %52
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_engine_set__map_s_* @fio_engine_set__find_map_pos_(%struct.fio_engine_set_s*, i64, %struct.fio_pubsub_engine_s*) #0 {
  %4 = alloca %struct.fio_engine_set__map_s_*, align 8
  %5 = alloca %struct.fio_engine_set_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_pubsub_engine_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.fio_engine_set__map_s_*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store %struct.fio_pubsub_engine_s* %2, %struct.fio_pubsub_engine_s** %7, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  store i64 -1, i64* %6, align 8
  br label %18

18:                                               ; preds = %17, %3
  %19 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %20 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %19, i32 0, i32 4
  %21 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %20, align 8
  %22 = icmp ne %struct.fio_engine_set__map_s_* %21, null
  br i1 %22, label %23, label %200

23:                                               ; preds = %18
  %24 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %25 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %24, i32 0, i32 5
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %23
  %30 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %34 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp ne i64 %32, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  call void @fio_engine_set_rehash(%struct.fio_engine_set_s* %38)
  br label %39

39:                                               ; preds = %37, %29, %23
  store i64 0, i64* %8, align 8
  %40 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %41 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %40, i32 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = zext i32 %43 to i64
  %45 = shl i64 1, %44
  %46 = sub i64 %45, 1
  store i64 %46, i64* %10, align 8
  %47 = load i64, i64* %6, align 8
  %48 = lshr i64 %47, 0
  %49 = load i64, i64* %6, align 8
  %50 = shl i64 %49, 0
  %51 = or i64 %48, %50
  %52 = load i64, i64* %6, align 8
  %53 = call i64 @fio_ct_if2(i64 0, i64 %52, i64 0)
  %54 = xor i64 %51, %53
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %6, align 8
  %56 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %57 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %56, i32 0, i32 6
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = and i64 %59, 63
  %61 = lshr i64 %55, %60
  %62 = load i64, i64* %6, align 8
  %63 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %64 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %63, i32 0, i32 6
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = sub nsw i32 0, %66
  %68 = sext i32 %67 to i64
  %69 = and i64 %68, 63
  %70 = shl i64 %62, %69
  %71 = or i64 %61, %70
  %72 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %73 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %72, i32 0, i32 6
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = load i64, i64* %6, align 8
  %77 = call i64 @fio_ct_if2(i64 %75, i64 %76, i64 0)
  %78 = xor i64 %71, %77
  store i64 %78, i64* %13, align 8
  %79 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %80 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %79, i32 0, i32 4
  %81 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %80, align 8
  %82 = load i64, i64* %13, align 8
  %83 = load i64, i64* %10, align 8
  %84 = and i64 %82, %83
  %85 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %81, i64 %84
  store %struct.fio_engine_set__map_s_* %85, %struct.fio_engine_set__map_s_** %9, align 8
  %86 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %87 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %86, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 0, %88
  br i1 %89, label %90, label %92

90:                                               ; preds = %39
  %91 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  store %struct.fio_engine_set__map_s_* %91, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

92:                                               ; preds = %39
  %93 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %94 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load i64, i64* %12, align 8
  %97 = icmp eq i64 %95, %96
  br i1 %97, label %98, label %118

98:                                               ; preds = %92
  %99 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %100 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %99, i32 0, i32 1
  %101 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %100, align 8
  %102 = icmp ne %struct.fio_engine_set__ordered_s_* %101, null
  br i1 %102, label %103, label %111

103:                                              ; preds = %98
  %104 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %105 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %104, i32 0, i32 1
  %106 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %105, align 8
  %107 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %106, i32 0, i32 1
  %108 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %107, align 8
  %109 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %7, align 8
  %110 = icmp eq %struct.fio_pubsub_engine_s* %108, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %103, %98
  %112 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  store %struct.fio_engine_set__map_s_* %112, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

113:                                              ; preds = %103
  %114 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %115 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %114, i32 0, i32 5
  store i8 1, i8* %115, align 8
  %116 = load i64, i64* %8, align 8
  %117 = add i64 %116, 1
  store i64 %117, i64* %8, align 8
  br label %118

118:                                              ; preds = %113, %92
  store i64 0, i64* %11, align 8
  %119 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %120 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %119, i32 0, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = icmp ugt i64 %121, 384
  br i1 %122, label %123, label %124

123:                                              ; preds = %118
  br label %129

124:                                              ; preds = %118
  %125 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %126 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %125, i32 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = lshr i64 %127, 2
  br label %129

129:                                              ; preds = %124, %123
  %130 = phi i64 [ 96, %123 ], [ %128, %124 ]
  %131 = mul i64 11, %130
  store i64 %131, i64* %14, align 8
  br label %132

132:                                              ; preds = %198, %129
  %133 = load i64, i64* %11, align 8
  %134 = load i64, i64* %14, align 8
  %135 = icmp ult i64 %133, %134
  br i1 %135, label %136, label %199

136:                                              ; preds = %132
  %137 = load i64, i64* %11, align 8
  %138 = add i64 %137, 11
  store i64 %138, i64* %11, align 8
  %139 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %140 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %139, i32 0, i32 4
  %141 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %140, align 8
  %142 = load i64, i64* %13, align 8
  %143 = load i64, i64* %11, align 8
  %144 = add i64 %142, %143
  %145 = load i64, i64* %10, align 8
  %146 = and i64 %144, %145
  %147 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %141, i64 %146
  store %struct.fio_engine_set__map_s_* %147, %struct.fio_engine_set__map_s_** %9, align 8
  %148 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %149 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %148, i32 0, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp eq i64 0, %150
  br i1 %151, label %152, label %154

152:                                              ; preds = %136
  %153 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  store %struct.fio_engine_set__map_s_* %153, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

154:                                              ; preds = %136
  %155 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %156 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %155, i32 0, i32 0
  %157 = load i64, i64* %156, align 8
  %158 = load i64, i64* %12, align 8
  %159 = icmp eq i64 %157, %158
  br i1 %159, label %160, label %198

160:                                              ; preds = %154
  %161 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %162 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %161, i32 0, i32 1
  %163 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %162, align 8
  %164 = icmp ne %struct.fio_engine_set__ordered_s_* %163, null
  br i1 %164, label %165, label %173

165:                                              ; preds = %160
  %166 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  %167 = getelementptr inbounds %struct.fio_engine_set__map_s_, %struct.fio_engine_set__map_s_* %166, i32 0, i32 1
  %168 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %167, align 8
  %169 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %168, i32 0, i32 1
  %170 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %169, align 8
  %171 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %7, align 8
  %172 = icmp eq %struct.fio_pubsub_engine_s* %170, %171
  br i1 %172, label %173, label %175

173:                                              ; preds = %165, %160
  %174 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  store %struct.fio_engine_set__map_s_* %174, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

175:                                              ; preds = %165
  %176 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %177 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %176, i32 0, i32 5
  store i8 1, i8* %177, align 8
  %178 = load i64, i64* %8, align 8
  %179 = add i64 %178, 1
  store i64 %179, i64* %8, align 8
  %180 = icmp uge i64 %179, 96
  br i1 %180, label %181, label %190

181:                                              ; preds = %175
  br label %182

182:                                              ; preds = %181
  %183 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %184 = icmp sle i32 3, %183
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.47, i64 0, i64 0))
  br label %186

186:                                              ; preds = %185, %182
  br label %187

187:                                              ; preds = %186
  %188 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %189 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %188, i32 0, i32 7
  store i8 1, i8* %189, align 2
  br label %190

190:                                              ; preds = %187, %175
  %191 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %5, align 8
  %192 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %191, i32 0, i32 7
  %193 = load i8, i8* %192, align 2
  %194 = icmp ne i8 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %190
  %196 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %9, align 8
  store %struct.fio_engine_set__map_s_* %196, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

197:                                              ; preds = %190
  br label %198

198:                                              ; preds = %197, %154
  br label %132

199:                                              ; preds = %132
  br label %200

200:                                              ; preds = %199, %18
  store %struct.fio_engine_set__map_s_* null, %struct.fio_engine_set__map_s_** %4, align 8
  br label %201

201:                                              ; preds = %200, %195, %173, %152, %111, %90
  %202 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %4, align 8
  ret %struct.fio_engine_set__map_s_* %202
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_engine_set__compact_ordered_array_(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  %3 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %6 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  br label %66

14:                                               ; preds = %1
  %15 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %16 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %15, i32 0, i32 3
  %17 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %16, align 8
  store %struct.fio_engine_set__ordered_s_* %17, %struct.fio_engine_set__ordered_s_** %3, align 8
  %18 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %19, align 8
  store %struct.fio_engine_set__ordered_s_* %20, %struct.fio_engine_set__ordered_s_** %4, align 8
  %21 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %21, i32 0, i32 3
  %23 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %22, align 8
  %24 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %24, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %23, i64 %26
  store %struct.fio_engine_set__ordered_s_* %27, %struct.fio_engine_set__ordered_s_** %5, align 8
  br label %28

28:                                               ; preds = %50, %14
  %29 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %30 = icmp ne %struct.fio_engine_set__ordered_s_* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %33 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %5, align 8
  %34 = icmp ult %struct.fio_engine_set__ordered_s_* %32, %33
  br label %35

35:                                               ; preds = %31, %28
  %36 = phi i1 [ false, %28 ], [ %34, %31 ]
  br i1 %36, label %37, label %53

37:                                               ; preds = %35
  %38 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %39 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %50

43:                                               ; preds = %37
  %44 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %45 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %46 = bitcast %struct.fio_engine_set__ordered_s_* %44 to i8*
  %47 = bitcast %struct.fio_engine_set__ordered_s_* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  %48 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %49 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %48, i32 1
  store %struct.fio_engine_set__ordered_s_* %49, %struct.fio_engine_set__ordered_s_** %4, align 8
  br label %50

50:                                               ; preds = %43, %42
  %51 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %52 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %51, i32 1
  store %struct.fio_engine_set__ordered_s_* %52, %struct.fio_engine_set__ordered_s_** %3, align 8
  br label %28

53:                                               ; preds = %35
  %54 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %55 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %56 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %55, i32 0, i32 3
  %57 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %56, align 8
  %58 = ptrtoint %struct.fio_engine_set__ordered_s_* %54 to i64
  %59 = ptrtoint %struct.fio_engine_set__ordered_s_* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sdiv exact i64 %60, 16
  %62 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %63 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %62, i32 0, i32 0
  store i64 %61, i64* %63, align 8
  %64 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %65 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %64, i32 0, i32 2
  store i64 %61, i64* %65, align 8
  br label %66

66:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_engine_set__reallocate_set_mem_(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  %3 = alloca i64, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %4 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %5 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %4, i32 0, i32 6
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  store i64 %9, i64* %3, align 8
  %10 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %10, i32 0, i32 4
  %12 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %11, align 8
  %13 = bitcast %struct.fio_engine_set__map_s_* %12 to i8*
  call void @free(i8* %13) #1
  %14 = load i64, i64* %3, align 8
  %15 = call noalias i8* @calloc(i64 16, i64 %14) #1
  %16 = bitcast i8* %15 to %struct.fio_engine_set__map_s_*
  %17 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %18 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %17, i32 0, i32 4
  store %struct.fio_engine_set__map_s_* %16, %struct.fio_engine_set__map_s_** %18, align 8
  %19 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %20 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %19, i32 0, i32 3
  %21 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %20, align 8
  %22 = bitcast %struct.fio_engine_set__ordered_s_* %21 to i8*
  %23 = load i64, i64* %3, align 8
  %24 = mul i64 %23, 16
  %25 = call i8* @realloc(i8* %22, i64 %24) #1
  %26 = bitcast i8* %25 to %struct.fio_engine_set__ordered_s_*
  %27 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %28 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %27, i32 0, i32 3
  store %struct.fio_engine_set__ordered_s_* %26, %struct.fio_engine_set__ordered_s_** %28, align 8
  %29 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %30 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %29, i32 0, i32 4
  %31 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %30, align 8
  %32 = icmp ne %struct.fio_engine_set__map_s_* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %1
  %34 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %35 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %34, i32 0, i32 3
  %36 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %35, align 8
  %37 = icmp ne %struct.fio_engine_set__ordered_s_* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %33, %1
  call void @perror(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i64 0, i64 0))
  %39 = call i32* @__errno_location() #9
  %40 = load i32, i32* %39, align 4
  call void @exit(i32 %40) #11
  unreachable

41:                                               ; preds = %33
  %42 = load i64, i64* %3, align 8
  %43 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %43, i32 0, i32 1
  store i64 %42, i64* %44, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_meta_ary_find(%struct.fio_meta_ary_s*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_meta_ary_s*, align 8
  %5 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %4, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %1, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %5, align 8
  %9 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %10 = call i64 @fio_meta_ary_count(%struct.fio_meta_ary_s* %9)
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %6, align 8
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %2
  store i64 -1, i64* %3, align 8
  br label %51

14:                                               ; preds = %2
  %15 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %16 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %7, align 8
  %18 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %19 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %8, align 8
  br label %21

21:                                               ; preds = %37, %14
  %22 = load i64, i64* %7, align 8
  %23 = load i64, i64* %8, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %35

25:                                               ; preds = %21
  %26 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %5, align 8
  %27 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %28 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %27, i32 0, i32 3
  %29 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %28, align 8
  %30 = load i64, i64* %7, align 8
  %31 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %29, i64 %30
  %32 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %31, align 8
  %33 = icmp eq void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %26, %32
  %34 = xor i1 %33, true
  br label %35

35:                                               ; preds = %25, %21
  %36 = phi i1 [ false, %21 ], [ %34, %25 ]
  br i1 %36, label %37, label %40

37:                                               ; preds = %35
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %7, align 8
  br label %21

40:                                               ; preds = %35
  %41 = load i64, i64* %7, align 8
  %42 = load i64, i64* %8, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  store i64 -1, i64* %3, align 8
  br label %51

45:                                               ; preds = %40
  %46 = load i64, i64* %7, align 8
  %47 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %48 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %46, %49
  store i64 %50, i64* %3, align 8
  br label %51

51:                                               ; preds = %45, %44, %13
  %52 = load i64, i64* %3, align 8
  ret i64 %52
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_meta_ary_remove(%struct.fio_meta_ary_s*, i64, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.fio_meta_ary_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, align 8
  %8 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %2, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %7, align 8
  %9 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = call i64 @fio_meta_ary___rel2absolute(%struct.fio_meta_ary_s* %9, i64 %10)
  store i64 %11, i64* %6, align 8
  %12 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %13 = call i64 @fio_meta_ary_count(%struct.fio_meta_ary_s* %12)
  store i64 %13, i64* %8, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %3
  %17 = load i64, i64* %6, align 8
  %18 = load i64, i64* %8, align 8
  %19 = icmp uge i64 %17, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %16, %3
  store i32 -1, i32* %4, align 4
  br label %79

21:                                               ; preds = %16
  %22 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %23 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = load i64, i64* %6, align 8
  %26 = add i64 %25, %24
  store i64 %26, i64* %6, align 8
  %27 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %7, align 8
  %28 = icmp ne void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %27, null
  br i1 %28, label %29, label %37

29:                                               ; preds = %21
  %30 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %31 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %30, i32 0, i32 3
  %32 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %31, align 8
  %33 = load i64, i64* %6, align 8
  %34 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %32, i64 %33
  %35 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %34, align 8
  %36 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %7, align 8
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)* %35, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %36, align 8
  br label %37

37:                                               ; preds = %29, %21
  %38 = load i64, i64* %6, align 8
  %39 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %40 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %38, %41
  br i1 %42, label %43, label %48

43:                                               ; preds = %37
  %44 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %45 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %45, align 8
  store i32 0, i32* %4, align 4
  br label %79

48:                                               ; preds = %37
  %49 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %50 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, -1
  store i64 %52, i64* %50, align 8
  %53 = load i64, i64* %6, align 8
  %54 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %55 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %54, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = icmp ult i64 %53, %56
  br i1 %57, label %58, label %78

58:                                               ; preds = %48
  %59 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %60 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %59, i32 0, i32 3
  %61 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %60, align 8
  %62 = load i64, i64* %6, align 8
  %63 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %61, i64 %62
  %64 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %63 to i8*
  %65 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %66 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %65, i32 0, i32 3
  %67 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %66, align 8
  %68 = load i64, i64* %6, align 8
  %69 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %67, i64 %68
  %70 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %69, i64 1
  %71 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %70 to i8*
  %72 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %5, align 8
  %73 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load i64, i64* %6, align 8
  %76 = sub i64 %74, %75
  %77 = mul i64 %76, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %71, i64 %77, i1 false)
  br label %78

78:                                               ; preds = %58, %48
  store i32 0, i32* %4, align 4
  br label %79

79:                                               ; preds = %78, %43, %20
  %80 = load i32, i32* %4, align 4
  ret i32 %80
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_meta_ary_count(%struct.fio_meta_ary_s*) #0 {
  %2 = alloca %struct.fio_meta_ary_s*, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %2, align 8
  %3 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %4 = icmp ne %struct.fio_meta_ary_s* %3, null
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %6, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  br label %14

13:                                               ; preds = %1
  br label %14

14:                                               ; preds = %13, %5
  %15 = phi i64 [ %12, %5 ], [ 0, %13 ]
  ret i64 %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_meta_ary___rel2absolute(%struct.fio_meta_ary_s*, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_meta_ary_s*, align 8
  %5 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  %7 = icmp sge i64 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = load i64, i64* %5, align 8
  store i64 %9, i64* %3, align 8
  br label %25

10:                                               ; preds = %2
  %11 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %12 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %11, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %15 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %18, %17
  store i64 %19, i64* %5, align 8
  %20 = load i64, i64* %5, align 8
  %21 = icmp sge i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = load i64, i64* %5, align 8
  store i64 %23, i64* %3, align 8
  br label %25

24:                                               ; preds = %10
  store i64 0, i64* %3, align 8
  br label %25

25:                                               ; preds = %24, %22, %8
  %26 = load i64, i64* %3, align 8
  ret i64 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_meta_ary___require_on_top(%struct.fio_meta_ary_s*, i64) #0 {
  %3 = alloca %struct.fio_meta_ary_s*, align 8
  %4 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %6 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %4, align 8
  %9 = add i64 %7, %8
  %10 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %11 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp ult i64 %9, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  br label %51

15:                                               ; preds = %2
  %16 = load i64, i64* %4, align 8
  %17 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %18 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %17, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %16, %19
  %21 = and i64 %20, -2
  %22 = add i64 %21, 2
  store i64 %22, i64* %4, align 8
  %23 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %24 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %23, i32 0, i32 3
  %25 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %24, align 8
  %26 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %25 to i8*
  %27 = load i64, i64* %4, align 8
  %28 = mul i64 %27, 8
  %29 = call i8* @realloc(i8* %26, i64 %28) #1
  %30 = bitcast i8* %29 to void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**
  %31 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %32 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %31, i32 0, i32 3
  store void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %30, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %32, align 8
  %33 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %34 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %33, i32 0, i32 3
  %35 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %34, align 8
  %36 = icmp ne void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %35, null
  br i1 %36, label %47, label %37

37:                                               ; preds = %15
  br label %38

38:                                               ; preds = %37
  %39 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %40 = icmp sle i32 1, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.68, i64 0, i64 0))
  br label %42

42:                                               ; preds = %41, %38
  br label %43

43:                                               ; preds = %42
  %44 = call i32 @kill(i32 0, i32 2) #1
  %45 = call i32* @__errno_location() #9
  %46 = load i32, i32* %45, align 4
  call void @exit(i32 %46) #11
  unreachable

47:                                               ; preds = %15
  %48 = load i64, i64* %4, align 8
  %49 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %50 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %49, i32 0, i32 2
  store i64 %48, i64* %50, align 8
  br label %51

51:                                               ; preds = %47, %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_init() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  call void @fio_cluster_data_cleanup(i32 0)
  %3 = call i8* @getenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i64 0, i64 0)) #1
  store i8* %3, i8** %1, align 8
  store i32 0, i32* %2, align 4
  %4 = load i8*, i8** %1, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %11

6:                                                ; preds = %0
  %7 = load i8*, i8** %1, align 8
  %8 = call i64 @strlen(i8* %7) #10
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %2, align 4
  %10 = icmp ugt i32 %9, 227
  br i1 %10, label %11, label %19

11:                                               ; preds = %6, %0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70, i64 0, i64 0), i8** %1, align 8
  %12 = load i8*, i8** %1, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = load i8*, i8** %1, align 8
  %16 = call i64 @strlen(i8* %15) #10
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %14, %11
  br label %19

19:                                               ; preds = %18, %6
  %20 = load i32, i32* %2, align 4
  %21 = icmp uge i32 %20, 227
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %22, %19
  %24 = load i32, i32* %2, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %43

26:                                               ; preds = %23
  %27 = load i8*, i8** %1, align 8
  %28 = load i32, i32* %2, align 4
  %29 = zext i32 %28 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), i8* align 1 %27, i64 %29, i1 false)
  %30 = load i32, i32* %2, align 4
  %31 = sub i32 %30, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3), i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp ne i32 %35, 47
  br i1 %36, label %37, label %42

37:                                               ; preds = %26
  %38 = load i32, i32* %2, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %2, align 4
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3), i64 0, i64 %40
  store i8 47, i8* %41, align 1
  br label %42

42:                                               ; preds = %37, %26
  br label %43

43:                                               ; preds = %42, %23
  %44 = load i32, i32* %2, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), i64 %45
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i64 0, i64 0), i64 14, i1 false)
  %47 = load i32, i32* %2, align 4
  %48 = add i32 %47, 14
  store i32 %48, i32* %2, align 4
  %49 = load i32, i32* %2, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), i64 %50
  %52 = load i32, i32* %2, align 4
  %53 = sub i32 255, %52
  %54 = zext i32 %53 to i64
  %55 = call i32 @getpid() #1
  %56 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %51, i64 %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.72, i64 0, i64 0), i32 %55) #1
  %57 = load i32, i32* %2, align 4
  %58 = add i32 %57, %56
  store i32 %58, i32* %2, align 4
  %59 = load i32, i32* %2, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3), i64 0, i64 %60
  store i8 0, i8* %61, align 1
  %62 = call i32 @unlink(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0)) #1
  call void @fio_state_callback_add(i32 12, void (i8*)* @fio_cluster_cleanup, i8* null)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_listen2cluster(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_protocol_s*, align 8
  %4 = alloca %struct.fio_protocol_s, align 8
  store i8* %0, i8** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %5 = call i64 @fio_socket(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), i8* null, i8 zeroext 1)
  store i64 %5, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %6 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %7 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %8 = icmp slt i64 %7, 0
  br i1 %8, label %9, label %18

9:                                                ; preds = %1
  br label %10

10:                                               ; preds = %9
  %11 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %12 = icmp sle i32 1, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.73, i64 0, i64 0))
  br label %14

14:                                               ; preds = %13, %10
  br label %15

15:                                               ; preds = %14
  call void @perror(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.74, i64 0, i64 0))
  %16 = call i32* @__errno_location() #9
  %17 = load i32, i32* %16, align 4
  call void @exit(i32 %17) #11
  unreachable

18:                                               ; preds = %1
  %19 = call noalias i8* @malloc(i64 48) #1
  %20 = bitcast i8* %19 to %struct.fio_protocol_s*
  store %struct.fio_protocol_s* %20, %struct.fio_protocol_s** %3, align 8
  %21 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  %22 = icmp ne %struct.fio_protocol_s* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %18
  br label %24

24:                                               ; preds = %23
  %25 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %26 = icmp sle i32 1, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.75, i64 0, i64 0))
  br label %28

28:                                               ; preds = %27, %24
  br label %29

29:                                               ; preds = %28
  %30 = call i32 @kill(i32 0, i32 2) #1
  %31 = call i32* @__errno_location() #9
  %32 = load i32, i32* %31, align 4
  call void @exit(i32 %32) #11
  unreachable

33:                                               ; preds = %18
  %34 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  %35 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 0
  store void (i64, %struct.fio_protocol_s*)* @fio_cluster_listen_accept, void (i64, %struct.fio_protocol_s*)** %35, align 8
  %36 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* null, void (i64, %struct.fio_protocol_s*)** %36, align 8
  %37 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 2
  store i8 (i64, %struct.fio_protocol_s*)* @mock_on_shutdown_eternal, i8 (i64, %struct.fio_protocol_s*)** %37, align 8
  %38 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 3
  store void (i64, %struct.fio_protocol_s*)* @fio_cluster_listen_on_close, void (i64, %struct.fio_protocol_s*)** %38, align 8
  %39 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @mock_ping_eternal, void (i64, %struct.fio_protocol_s*)** %39, align 8
  %40 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %4, i32 0, i32 5
  store i64 0, i64* %40, align 8
  %41 = bitcast %struct.fio_protocol_s* %34 to i8*
  %42 = bitcast %struct.fio_protocol_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 48, i1 false)
  br label %43

43:                                               ; preds = %33
  %44 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %45 = icmp sle i32 5, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.76, i64 0, i64 0), i32 %47, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0))
  br label %48

48:                                               ; preds = %46, %43
  br label %49

49:                                               ; preds = %48
  %50 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %51 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %3, align 8
  call void @fio_attach(i64 %50, %struct.fio_protocol_s* %51)
  %52 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_accept_after_fork(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  call void @fio_cluster_listen_accept(i64 %3, %struct.fio_protocol_s* null)
  %4 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_connect2cluster(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_connect_args, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = load i64, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  call void @fio_force_close(i64 %7)
  br label %8

8:                                                ; preds = %6, %1
  store i64 0, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %9 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 0
  store i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 1
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 2
  store void (i64, i8*)* @fio_cluster_on_connect, void (i64, i8*)** %11, align 8
  %12 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 3
  store void (i64, i8*)* @fio_cluster_on_fail, void (i64, i8*)** %12, align 8
  %13 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 4
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 5
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds %struct.fio_connect_args, %struct.fio_connect_args* %3, i32 0, i32 6
  store i8 0, i8* %15, align 8
  %16 = call i64 @fio_connect(%struct.fio_connect_args* byval(%struct.fio_connect_args) align 8 %3)
  %17 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_cleanup(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 @fio_parent_pid()
  %4 = call i32 @getpid() #1
  %5 = icmp eq i32 %3, %4
  %6 = zext i1 %5 to i32
  call void @fio_cluster_data_cleanup(i32 %6)
  %7 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_at_exit(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.subscription_s*, align 8
  %5 = alloca %struct.channel_s*, align 8
  %6 = alloca %struct.subscription_s*, align 8
  %7 = alloca %struct.channel_s*, align 8
  %8 = alloca %struct.subscription_s*, align 8
  store i8* %0, i8** %2, align 8
  call void @fio_pubsub_on_fork()
  br label %9

9:                                                ; preds = %28, %1
  %10 = call i64 @fio_ch_set_count(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0))
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %29

12:                                               ; preds = %9
  %13 = call %struct.channel_s* @fio_ch_set_last(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0))
  store %struct.channel_s* %13, %struct.channel_s** %3, align 8
  br label %14

14:                                               ; preds = %19, %12
  %15 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %16 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %15, i32 0, i32 3
  %17 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* %16)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %14
  %20 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %21 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %20, i32 0, i32 3
  %22 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %21, i32 0, i32 1
  %23 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %22, align 8
  %24 = ptrtoint %struct.fio_ls_embd_s* %23 to i64
  %25 = sub i64 %24, 0
  %26 = inttoptr i64 %25 to %struct.subscription_s*
  store %struct.subscription_s* %26, %struct.subscription_s** %4, align 8
  %27 = load %struct.subscription_s*, %struct.subscription_s** %4, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %27)
  br label %14

28:                                               ; preds = %14
  call void @fio_ch_set_pop(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0))
  br label %9

29:                                               ; preds = %9
  br label %30

30:                                               ; preds = %49, %29
  %31 = call i64 @fio_ch_set_count(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0))
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %50

33:                                               ; preds = %30
  %34 = call %struct.channel_s* @fio_ch_set_last(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0))
  store %struct.channel_s* %34, %struct.channel_s** %5, align 8
  br label %35

35:                                               ; preds = %40, %33
  %36 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %37 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %36, i32 0, i32 3
  %38 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* %37)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %49

40:                                               ; preds = %35
  %41 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %42 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %41, i32 0, i32 3
  %43 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %42, i32 0, i32 1
  %44 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %43, align 8
  %45 = ptrtoint %struct.fio_ls_embd_s* %44 to i64
  %46 = sub i64 %45, 0
  %47 = inttoptr i64 %46 to %struct.subscription_s*
  store %struct.subscription_s* %47, %struct.subscription_s** %6, align 8
  %48 = load %struct.subscription_s*, %struct.subscription_s** %6, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %48)
  br label %35

49:                                               ; preds = %35
  call void @fio_ch_set_pop(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0))
  br label %30

50:                                               ; preds = %30
  br label %51

51:                                               ; preds = %70, %50
  %52 = call i64 @fio_ch_set_count(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0))
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %71

54:                                               ; preds = %51
  %55 = call %struct.channel_s* @fio_ch_set_last(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0))
  store %struct.channel_s* %55, %struct.channel_s** %7, align 8
  br label %56

56:                                               ; preds = %61, %54
  %57 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %58 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %57, i32 0, i32 3
  %59 = call i32 @fio_ls_embd_any(%struct.fio_ls_embd_s* %58)
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %70

61:                                               ; preds = %56
  %62 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %63 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %62, i32 0, i32 3
  %64 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %63, i32 0, i32 1
  %65 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %64, align 8
  %66 = ptrtoint %struct.fio_ls_embd_s* %65 to i64
  %67 = sub i64 %66, 0
  %68 = inttoptr i64 %67 to %struct.subscription_s*
  store %struct.subscription_s* %68, %struct.subscription_s** %8, align 8
  %69 = load %struct.subscription_s*, %struct.subscription_s** %8, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %69)
  br label %56

70:                                               ; preds = %56
  call void @fio_ch_set_pop(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0))
  br label %51

71:                                               ; preds = %51
  call void @fio_ch_set_free(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0, i32 0))
  call void @fio_ch_set_free(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0))
  call void @fio_ch_set_free(%struct.fio_ch_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0))
  store %struct.fio_pubsub_engine_s* inttoptr (i64 1 to %struct.fio_pubsub_engine_s*), %struct.fio_pubsub_engine_s** @FIO_PUBSUB_DEFAULT, align 8
  br label %72

72:                                               ; preds = %75, %71
  %73 = call i64 @fio_engine_set_count(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0))
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %72
  %76 = call %struct.fio_pubsub_engine_s* @fio_engine_set_last(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0))
  call void @fio_pubsub_detach(%struct.fio_pubsub_engine_s* %76)
  %77 = call %struct.fio_pubsub_engine_s* @fio_engine_set_last(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0))
  br label %72

78:                                               ; preds = %72
  call void @fio_engine_set_free(%struct.fio_engine_set_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 3, i32 0))
  call void @fio_meta_ary_free(%struct.fio_meta_ary_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 0))
  call void @fio_defer_perform()
  %79 = load i8*, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_data_cleanup(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_ls_s, align 8
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = load i8, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0), align 1
  %9 = sext i8 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = call i32 @unlink(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 3, i64 0)) #1
  br label %13

13:                                               ; preds = %11, %7, %1
  br label %14

14:                                               ; preds = %24, %13
  %15 = call i32 @fio_ls_any(%struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1))
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %14
  %18 = call i8* @fio_ls_pop(%struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1))
  %19 = ptrtoint i8* %18 to i64
  store i64 %19, i64* %3, align 8
  %20 = load i64, i64* %3, align 8
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = load i64, i64* %3, align 8
  call void @fio_close(i64 %23)
  br label %24

24:                                               ; preds = %22, %17
  br label %14

25:                                               ; preds = %14
  store i64 0, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  store volatile i8 0, i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2), align 8
  %26 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %4, i32 0, i32 0
  store %struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1), %struct.fio_ls_s** %26, align 8
  %27 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %4, i32 0, i32 1
  store %struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1), %struct.fio_ls_s** %27, align 8
  %28 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %4, i32 0, i32 2
  store i8* null, i8** %28, align 8
  %29 = bitcast %struct.fio_ls_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1) to i8*), i8* align 8 %29, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_ls_any(%struct.fio_ls_s*) #0 {
  %2 = alloca %struct.fio_ls_s*, align 8
  store %struct.fio_ls_s* %0, %struct.fio_ls_s** %2, align 8
  %3 = load %struct.fio_ls_s*, %struct.fio_ls_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %3, i32 0, i32 1
  %5 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %6 = load %struct.fio_ls_s*, %struct.fio_ls_s** %2, align 8
  %7 = icmp ne %struct.fio_ls_s* %5, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @fio_ls_pop(%struct.fio_ls_s*) #0 {
  %2 = alloca %struct.fio_ls_s*, align 8
  store %struct.fio_ls_s* %0, %struct.fio_ls_s** %2, align 8
  %3 = load %struct.fio_ls_s*, %struct.fio_ls_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %3, i32 0, i32 0
  %5 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %6 = call i8* @fio_ls_remove(%struct.fio_ls_s* %5)
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @fio_ls_remove(%struct.fio_ls_s*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fio_ls_s*, align 8
  %4 = alloca i8*, align 8
  store %struct.fio_ls_s* %0, %struct.fio_ls_s** %3, align 8
  %5 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %6 = icmp ne %struct.fio_ls_s* %5, null
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %9 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %8, i32 0, i32 1
  %10 = load %struct.fio_ls_s*, %struct.fio_ls_s** %9, align 8
  %11 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %12 = icmp eq %struct.fio_ls_s* %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %7, %1
  store i8* null, i8** %2, align 8
  br label %35

14:                                               ; preds = %7
  %15 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %16 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %15, i32 0, i32 2
  %17 = load i8*, i8** %16, align 8
  store i8* %17, i8** %4, align 8
  %18 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %19 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %18, i32 0, i32 0
  %20 = load %struct.fio_ls_s*, %struct.fio_ls_s** %19, align 8
  %21 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %22 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %21, i32 0, i32 1
  %23 = load %struct.fio_ls_s*, %struct.fio_ls_s** %22, align 8
  %24 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %23, i32 0, i32 0
  store %struct.fio_ls_s* %20, %struct.fio_ls_s** %24, align 8
  %25 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %26 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %25, i32 0, i32 1
  %27 = load %struct.fio_ls_s*, %struct.fio_ls_s** %26, align 8
  %28 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %29 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %28, i32 0, i32 0
  %30 = load %struct.fio_ls_s*, %struct.fio_ls_s** %29, align 8
  %31 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %30, i32 0, i32 1
  store %struct.fio_ls_s* %27, %struct.fio_ls_s** %31, align 8
  %32 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  %33 = bitcast %struct.fio_ls_s* %32 to i8*
  call void @free(i8* %33) #1
  %34 = load i8*, i8** %4, align 8
  store i8* %34, i8** %2, align 8
  br label %35

35:                                               ; preds = %14, %13
  %36 = load i8*, i8** %2, align 8
  ret i8* %36
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_listen_accept(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %6 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  br label %7

7:                                                ; preds = %11, %2
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @fio_accept(i64 %8)
  store i64 %9, i64* %5, align 8
  %10 = icmp ne i64 %9, -1
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i64, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  %14 = call %struct.fio_protocol_s* @fio_cluster_protocol_alloc(i64 %13, void (%struct.cluster_pr_s*)* @fio_cluster_server_handler, void (i8*, i64)* @fio_cluster_server_sender)
  call void @fio_attach(i64 %12, %struct.fio_protocol_s* %14)
  call void @fio_lock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %15 = load i64, i64* %5, align 8
  %16 = inttoptr i64 %15 to i8*
  %17 = call %struct.fio_ls_s* @fio_ls_push(%struct.fio_ls_s* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1), i8* %16)
  %18 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  br label %7

19:                                               ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @mock_on_shutdown_eternal(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  ret i8 -1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_listen_on_close(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %5 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %6 = bitcast %struct.fio_protocol_s* %5 to i8*
  call void @free(i8* %6) #1
  store i64 -1, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  %7 = call i32 @fio_parent_pid()
  %8 = call i32 @getpid() #1
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %12 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %11, i32 0, i32 7
  %13 = load volatile i8, i8* %12, align 1
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  call void @fio_stop()
  br label %16

16:                                               ; preds = %15, %10
  br label %17

17:                                               ; preds = %16, %2
  %18 = load i64, i64* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_protocol_s* @fio_cluster_protocol_alloc(i64, void (%struct.cluster_pr_s*)*, void (i8*, i64)*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca void (%struct.cluster_pr_s*)*, align 8
  %6 = alloca void (i8*, i64)*, align 8
  %7 = alloca %struct.cluster_pr_s*, align 8
  %8 = alloca %struct.fio_protocol_s, align 8
  %9 = alloca %struct.fio_sub_hash_s, align 8
  %10 = alloca %struct.fio_sub_hash_s, align 8
  store i64 %0, i64* %4, align 8
  store void (%struct.cluster_pr_s*)* %1, void (%struct.cluster_pr_s*)** %5, align 8
  store void (i8*, i64)* %2, void (i8*, i64)** %6, align 8
  %11 = call noalias i8* @fio_mmap(i64 16584)
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 15
  %14 = icmp eq i64 %13, 0
  call void @llvm.assume(i1 %14)
  %15 = bitcast i8* %11 to %struct.cluster_pr_s*
  store %struct.cluster_pr_s* %15, %struct.cluster_pr_s** %7, align 8
  %16 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %17 = icmp ne %struct.cluster_pr_s* %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %3
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %21 = icmp sle i32 1, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.77, i64 0, i64 0))
  br label %23

23:                                               ; preds = %22, %19
  br label %24

24:                                               ; preds = %23
  %25 = call i32* @__errno_location() #9
  %26 = load i32, i32* %25, align 4
  call void @exit(i32 %26) #11
  unreachable

27:                                               ; preds = %3
  %28 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %29 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %28, i32 0, i32 0
  %30 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 0
  store void (i64, %struct.fio_protocol_s*)* @fio_cluster_on_data, void (i64, %struct.fio_protocol_s*)** %30, align 8
  %31 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 1
  store void (i64, %struct.fio_protocol_s*)* null, void (i64, %struct.fio_protocol_s*)** %31, align 8
  %32 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 2
  store i8 (i64, %struct.fio_protocol_s*)* @fio_cluster_on_shutdown, i8 (i64, %struct.fio_protocol_s*)** %32, align 8
  %33 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 3
  store void (i64, %struct.fio_protocol_s*)* @fio_cluster_on_close, void (i64, %struct.fio_protocol_s*)** %33, align 8
  %34 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 4
  store void (i64, %struct.fio_protocol_s*)* @fio_cluster_ping, void (i64, %struct.fio_protocol_s*)** %34, align 8
  %35 = getelementptr inbounds %struct.fio_protocol_s, %struct.fio_protocol_s* %8, i32 0, i32 5
  store i64 0, i64* %35, align 8
  %36 = bitcast %struct.fio_protocol_s* %29 to i8*
  %37 = bitcast %struct.fio_protocol_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 48, i1 false)
  %38 = load i64, i64* %4, align 8
  %39 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %40 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %39, i32 0, i32 6
  store i64 %38, i64* %40, align 8
  %41 = load void (%struct.cluster_pr_s*)*, void (%struct.cluster_pr_s*)** %5, align 8
  %42 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %43 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %42, i32 0, i32 2
  %44 = bitcast {}** %43 to void (%struct.cluster_pr_s*)**
  store void (%struct.cluster_pr_s*)* %41, void (%struct.cluster_pr_s*)** %44, align 8
  %45 = load void (i8*, i64)*, void (i8*, i64)** %6, align 8
  %46 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %47 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %46, i32 0, i32 3
  store void (i8*, i64)* %45, void (i8*, i64)** %47, align 8
  %48 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %49 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %48, i32 0, i32 4
  %50 = bitcast %struct.fio_sub_hash_s* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 48, i1 false)
  %51 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %9, i32 0, i32 1
  store i64 0, i64* %51, align 8
  %52 = bitcast %struct.fio_sub_hash_s* %49 to i8*
  %53 = bitcast %struct.fio_sub_hash_s* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 48, i1 false)
  %54 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %55 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %54, i32 0, i32 5
  %56 = bitcast %struct.fio_sub_hash_s* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 48, i1 false)
  %57 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %10, i32 0, i32 1
  store i64 0, i64* %57, align 8
  %58 = bitcast %struct.fio_sub_hash_s* %55 to i8*
  %59 = bitcast %struct.fio_sub_hash_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 48, i1 false)
  %60 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %61 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %60, i32 0, i32 12
  store volatile i8 0, i8* %61, align 4
  %62 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %7, align 8
  %63 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %62, i32 0, i32 0
  ret %struct.fio_protocol_s* %63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_server_handler(%struct.cluster_pr_s*) #0 {
  %2 = alloca %struct.cluster_pr_s*, align 8
  %3 = alloca %struct.subscription_s*, align 8
  %4 = alloca %struct.subscribe_args_s, align 8
  %5 = alloca %struct.fio_str_s, align 8
  %6 = alloca %struct.fio_str_s, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.subscription_s*, align 8
  %9 = alloca %struct.subscribe_args_s, align 8
  %10 = alloca %struct.fio_str_s, align 8
  %11 = alloca %struct.fio_str_s, align 8
  store %struct.cluster_pr_s* %0, %struct.cluster_pr_s** %2, align 8
  %12 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %13 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %12, i32 0, i32 9
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %325 [
    i32 0, label %15
    i32 1, label %15
    i32 4, label %28
    i32 5, label %85
    i32 6, label %128
    i32 7, label %273
    i32 3, label %316
    i32 2, label %319
    i32 8, label %324
    i32 9, label %324
    i32 10, label %324
  ]

15:                                               ; preds = %1, %1
  %16 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %17 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %16, i32 0, i32 1
  %18 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %17, align 8
  %19 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %18)
  %20 = bitcast %struct.fio_msg_internal_s* %19 to i8*
  %21 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %22 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %21, i32 0, i32 6
  %23 = load i64, i64* %22, align 8
  call void @fio_cluster_server_sender(i8* %20, i64 %23)
  %24 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %25 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %24, i32 0, i32 1
  %26 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %25, align 8
  %27 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %26)
  call void @fio_publish2process(%struct.fio_msg_internal_s* %27)
  br label %326

28:                                               ; preds = %1
  %29 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 0
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 1
  %31 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %32 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %31, i32 0, i32 1
  %33 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %32, align 8
  %34 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %33, i32 0, i32 0
  %35 = bitcast %struct.fio_str_info_s* %30 to i8*
  %36 = bitcast %struct.fio_str_info_s* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false)
  %37 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 2
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* null, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %37, align 8
  %38 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 3
  store void (%struct.fio_msg_s*)* @fio_mock_on_message, void (%struct.fio_msg_s*)** %38, align 8
  %39 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 4
  store void (i8*, i8*)* null, void (i8*, i8*)** %39, align 8
  %40 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 5
  store i8* null, i8** %40, align 8
  %41 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %4, i32 0, i32 6
  store i8* null, i8** %41, align 8
  %42 = call %struct.subscription_s* @fio_subscribe(%struct.subscribe_args_s* byval(%struct.subscribe_args_s) align 8 %4)
  store %struct.subscription_s* %42, %struct.subscription_s** %3, align 8
  %43 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 0
  store volatile i32 0, i32* %43, align 8
  %44 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 1
  store i8 0, i8* %44, align 4
  %45 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 2
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 3
  %47 = bitcast [10 x i8]* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %47, i8 0, i64 10, i1 false)
  %48 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 4
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 5
  %50 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %51 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %50, i32 0, i32 1
  %52 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %51, align 8
  %53 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %53, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %49, align 8
  %56 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %56, align 8
  %57 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %5, i32 0, i32 7
  %58 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %59 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %58, i32 0, i32 1
  %60 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %59, align 8
  %61 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %61, i32 0, i32 2
  %63 = load i8*, i8** %62, align 8
  store i8* %63, i8** %57, align 8
  %64 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %65 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %64, i32 0, i32 12
  call void @fio_lock(i8* %65)
  %66 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %67 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %66, i32 0, i32 4
  %68 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %69 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %68, i32 0, i32 1
  %70 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %69, align 8
  %71 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %70, i32 0, i32 0
  %72 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %71, i32 0, i32 2
  %73 = load i8*, i8** %72, align 8
  %74 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %75 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %74, i32 0, i32 1
  %76 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %75, align 8
  %77 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %76, i32 0, i32 0
  %78 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %77, i32 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = call i64 @fio_siphash13(i8* %73, i64 %79, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  %81 = load %struct.subscription_s*, %struct.subscription_s** %3, align 8
  call void @fio_sub_hash_insert(%struct.fio_sub_hash_s* %67, i64 %80, %struct.fio_str_s* byval(%struct.fio_str_s) align 8 %5, %struct.subscription_s* %81, %struct.subscription_s** null)
  %82 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %83 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %82, i32 0, i32 12
  %84 = call i32 @fio_unlock(i8* %83)
  br label %326

85:                                               ; preds = %1
  %86 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 0
  store volatile i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 1
  store i8 0, i8* %87, align 4
  %88 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 2
  store i8 0, i8* %88, align 1
  %89 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 3
  %90 = bitcast [10 x i8]* %89 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %90, i8 0, i64 10, i1 false)
  %91 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 4
  store i64 0, i64* %91, align 8
  %92 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 5
  %93 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %94 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %93, i32 0, i32 1
  %95 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %94, align 8
  %96 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %95, i32 0, i32 0
  %97 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %96, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %92, align 8
  %99 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %99, align 8
  %100 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 7
  %101 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %102 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %101, i32 0, i32 1
  %103 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %102, align 8
  %104 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %103, i32 0, i32 0
  %105 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %104, i32 0, i32 2
  %106 = load i8*, i8** %105, align 8
  store i8* %106, i8** %100, align 8
  %107 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %108 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %107, i32 0, i32 12
  call void @fio_lock(i8* %108)
  %109 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %110 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %109, i32 0, i32 4
  %111 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %112 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %111, i32 0, i32 1
  %113 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %112, align 8
  %114 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %114, i32 0, i32 2
  %116 = load i8*, i8** %115, align 8
  %117 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %118 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %117, i32 0, i32 1
  %119 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %118, align 8
  %120 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %119, i32 0, i32 0
  %121 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %120, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = call i64 @fio_siphash13(i8* %116, i64 %122, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  %124 = call i32 @fio_sub_hash_remove(%struct.fio_sub_hash_s* %110, i64 %123, %struct.fio_str_s* byval(%struct.fio_str_s) align 8 %6, %struct.subscription_s** null)
  %125 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %126 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %125, i32 0, i32 12
  %127 = call i32 @fio_unlock(i8* %126)
  br label %326

128:                                              ; preds = %1
  %129 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %130 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %129, i32 0, i32 1
  %131 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %130, align 8
  %132 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %131, i32 0, i32 1
  %133 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %132, i32 0, i32 2
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds i8, i8* %134, i64 0
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = shl i64 %137, 56
  %139 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %140 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %139, i32 0, i32 1
  %141 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %140, align 8
  %142 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %141, i32 0, i32 1
  %143 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %142, i32 0, i32 2
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 1
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = shl i64 %147, 48
  %149 = or i64 %138, %148
  %150 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %151 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %150, i32 0, i32 1
  %152 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %151, align 8
  %153 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %152, i32 0, i32 1
  %154 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %153, i32 0, i32 2
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 2
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = shl i64 %158, 40
  %160 = or i64 %149, %159
  %161 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %162 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %161, i32 0, i32 1
  %163 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %162, align 8
  %164 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %163, i32 0, i32 1
  %165 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %164, i32 0, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 3
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i64
  %170 = shl i64 %169, 32
  %171 = or i64 %160, %170
  %172 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %173 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %172, i32 0, i32 1
  %174 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %173, align 8
  %175 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %174, i32 0, i32 1
  %176 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %175, i32 0, i32 2
  %177 = load i8*, i8** %176, align 8
  %178 = getelementptr inbounds i8, i8* %177, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = shl i64 %180, 24
  %182 = or i64 %171, %181
  %183 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %184 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %183, i32 0, i32 1
  %185 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %184, align 8
  %186 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %185, i32 0, i32 1
  %187 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %186, i32 0, i32 2
  %188 = load i8*, i8** %187, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 5
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = shl i64 %191, 16
  %193 = or i64 %182, %192
  %194 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %195 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %194, i32 0, i32 1
  %196 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %195, align 8
  %197 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %196, i32 0, i32 1
  %198 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %197, i32 0, i32 2
  %199 = load i8*, i8** %198, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 6
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i64
  %203 = shl i64 %202, 8
  %204 = or i64 %193, %203
  %205 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %206 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %205, i32 0, i32 1
  %207 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %206, align 8
  %208 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %207, i32 0, i32 1
  %209 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %208, i32 0, i32 2
  %210 = load i8*, i8** %209, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 7
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i64
  %214 = or i64 %204, %213
  store i64 %214, i64* %7, align 8
  %215 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 0
  store i32 0, i32* %215, align 8
  %216 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 1
  %217 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %218 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %217, i32 0, i32 1
  %219 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %218, align 8
  %220 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %219, i32 0, i32 0
  %221 = bitcast %struct.fio_str_info_s* %216 to i8*
  %222 = bitcast %struct.fio_str_info_s* %220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %221, i8* align 8 %222, i64 24, i1 false)
  %223 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 2
  %224 = load i64, i64* %7, align 8
  %225 = inttoptr i64 %224 to i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)*
  store i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)* %225, i32 (%struct.fio_str_info_s*, %struct.fio_str_info_s*)** %223, align 8
  %226 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 3
  store void (%struct.fio_msg_s*)* @fio_mock_on_message, void (%struct.fio_msg_s*)** %226, align 8
  %227 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 4
  store void (i8*, i8*)* null, void (i8*, i8*)** %227, align 8
  %228 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 5
  store i8* null, i8** %228, align 8
  %229 = getelementptr inbounds %struct.subscribe_args_s, %struct.subscribe_args_s* %9, i32 0, i32 6
  store i8* null, i8** %229, align 8
  %230 = call %struct.subscription_s* @fio_subscribe(%struct.subscribe_args_s* byval(%struct.subscribe_args_s) align 8 %9)
  store %struct.subscription_s* %230, %struct.subscription_s** %8, align 8
  %231 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 0
  store volatile i32 0, i32* %231, align 8
  %232 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 1
  store i8 0, i8* %232, align 4
  %233 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 2
  store i8 0, i8* %233, align 1
  %234 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 3
  %235 = bitcast [10 x i8]* %234 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %235, i8 0, i64 10, i1 false)
  %236 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 4
  store i64 0, i64* %236, align 8
  %237 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 5
  %238 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %239 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %238, i32 0, i32 1
  %240 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %239, align 8
  %241 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %240, i32 0, i32 0
  %242 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %241, i32 0, i32 1
  %243 = load i64, i64* %242, align 8
  store i64 %243, i64* %237, align 8
  %244 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %244, align 8
  %245 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 7
  %246 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %247 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %246, i32 0, i32 1
  %248 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %247, align 8
  %249 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %248, i32 0, i32 0
  %250 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %249, i32 0, i32 2
  %251 = load i8*, i8** %250, align 8
  store i8* %251, i8** %245, align 8
  %252 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %253 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %252, i32 0, i32 12
  call void @fio_lock(i8* %253)
  %254 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %255 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %254, i32 0, i32 5
  %256 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %257 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %256, i32 0, i32 1
  %258 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %257, align 8
  %259 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %258, i32 0, i32 0
  %260 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %259, i32 0, i32 2
  %261 = load i8*, i8** %260, align 8
  %262 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %263 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %262, i32 0, i32 1
  %264 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %263, align 8
  %265 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %264, i32 0, i32 0
  %266 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %265, i32 0, i32 1
  %267 = load i64, i64* %266, align 8
  %268 = call i64 @fio_siphash13(i8* %261, i64 %267, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  %269 = load %struct.subscription_s*, %struct.subscription_s** %8, align 8
  call void @fio_sub_hash_insert(%struct.fio_sub_hash_s* %255, i64 %268, %struct.fio_str_s* byval(%struct.fio_str_s) align 8 %10, %struct.subscription_s* %269, %struct.subscription_s** null)
  %270 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %271 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %270, i32 0, i32 12
  %272 = call i32 @fio_unlock(i8* %271)
  br label %326

273:                                              ; preds = %1
  %274 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 0
  store volatile i32 0, i32* %274, align 8
  %275 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 1
  store i8 0, i8* %275, align 4
  %276 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 2
  store i8 0, i8* %276, align 1
  %277 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 3
  %278 = bitcast [10 x i8]* %277 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %278, i8 0, i64 10, i1 false)
  %279 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 4
  store i64 0, i64* %279, align 8
  %280 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 5
  %281 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %282 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %281, i32 0, i32 1
  %283 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %282, align 8
  %284 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %283, i32 0, i32 0
  %285 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %284, i32 0, i32 1
  %286 = load i64, i64* %285, align 8
  store i64 %286, i64* %280, align 8
  %287 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %287, align 8
  %288 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 7
  %289 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %290 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %289, i32 0, i32 1
  %291 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %290, align 8
  %292 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %291, i32 0, i32 0
  %293 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %292, i32 0, i32 2
  %294 = load i8*, i8** %293, align 8
  store i8* %294, i8** %288, align 8
  %295 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %296 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %295, i32 0, i32 12
  call void @fio_lock(i8* %296)
  %297 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %298 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %297, i32 0, i32 5
  %299 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %300 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %299, i32 0, i32 1
  %301 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %300, align 8
  %302 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %301, i32 0, i32 0
  %303 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %302, i32 0, i32 2
  %304 = load i8*, i8** %303, align 8
  %305 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %306 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %305, i32 0, i32 1
  %307 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %306, align 8
  %308 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %307, i32 0, i32 0
  %309 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %308, i32 0, i32 1
  %310 = load i64, i64* %309, align 8
  %311 = call i64 @fio_siphash13(i8* %304, i64 %310, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  %312 = call i32 @fio_sub_hash_remove(%struct.fio_sub_hash_s* %298, i64 %311, %struct.fio_str_s* byval(%struct.fio_str_s) align 8 %11, %struct.subscription_s** null)
  %313 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %314 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %313, i32 0, i32 12
  %315 = call i32 @fio_unlock(i8* %314)
  br label %326

316:                                              ; preds = %1
  %317 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %318 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %317, i32 0, i32 9
  store i32 1, i32* %318, align 8
  br label %319

319:                                              ; preds = %1, %316
  %320 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %321 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %320, i32 0, i32 1
  %322 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %321, align 8
  %323 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %322)
  call void @fio_publish2process(%struct.fio_msg_internal_s* %323)
  br label %326

324:                                              ; preds = %1, %1, %1
  br label %325

325:                                              ; preds = %1, %324
  br label %326

326:                                              ; preds = %325, %319, %273, %128, %85, %28, %15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_ls_s* @fio_ls_push(%struct.fio_ls_s*, i8*) #0 {
  %3 = alloca %struct.fio_ls_s*, align 8
  %4 = alloca %struct.fio_ls_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.fio_ls_s*, align 8
  %7 = alloca %struct.fio_ls_s, align 8
  store %struct.fio_ls_s* %0, %struct.fio_ls_s** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %9 = icmp ne %struct.fio_ls_s* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  store %struct.fio_ls_s* null, %struct.fio_ls_s** %3, align 8
  br label %47

11:                                               ; preds = %2
  %12 = call noalias i8* @calloc(i64 24, i64 1) #1
  %13 = bitcast i8* %12 to %struct.fio_ls_s*
  store %struct.fio_ls_s* %13, %struct.fio_ls_s** %6, align 8
  %14 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %15 = icmp ne %struct.fio_ls_s* %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %11
  br label %17

17:                                               ; preds = %16
  %18 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %19 = icmp sle i32 1, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.84, i64 0, i64 0))
  br label %21

21:                                               ; preds = %20, %17
  br label %22

22:                                               ; preds = %21
  %23 = call i32 @kill(i32 0, i32 2) #1
  %24 = call i32* @__errno_location() #9
  %25 = load i32, i32* %24, align 4
  call void @exit(i32 %25) #11
  unreachable

26:                                               ; preds = %11
  %27 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %28 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %7, i32 0, i32 0
  %29 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %30 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %29, i32 0, i32 0
  %31 = load %struct.fio_ls_s*, %struct.fio_ls_s** %30, align 8
  store %struct.fio_ls_s* %31, %struct.fio_ls_s** %28, align 8
  %32 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %7, i32 0, i32 1
  %33 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  store %struct.fio_ls_s* %33, %struct.fio_ls_s** %32, align 8
  %34 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %7, i32 0, i32 2
  %35 = load i8*, i8** %5, align 8
  store i8* %35, i8** %34, align 8
  %36 = bitcast %struct.fio_ls_s* %27 to i8*
  %37 = bitcast %struct.fio_ls_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false)
  %38 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %39 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %40 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %39, i32 0, i32 0
  %41 = load %struct.fio_ls_s*, %struct.fio_ls_s** %40, align 8
  %42 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %41, i32 0, i32 1
  store %struct.fio_ls_s* %38, %struct.fio_ls_s** %42, align 8
  %43 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %44 = load %struct.fio_ls_s*, %struct.fio_ls_s** %4, align 8
  %45 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %44, i32 0, i32 0
  store %struct.fio_ls_s* %43, %struct.fio_ls_s** %45, align 8
  %46 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  store %struct.fio_ls_s* %46, %struct.fio_ls_s** %3, align 8
  br label %47

47:                                               ; preds = %26, %10
  %48 = load %struct.fio_ls_s*, %struct.fio_ls_s** %3, align 8
  ret %struct.fio_ls_s* %48
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_on_data(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.cluster_pr_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  %8 = alloca %struct.fio_str_info_s, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %9 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %10 = bitcast %struct.fio_protocol_s* %9 to %struct.cluster_pr_s*
  store %struct.cluster_pr_s* %10, %struct.cluster_pr_s** %5, align 8
  %11 = load i64, i64* %3, align 8
  %12 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %13 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %12, i32 0, i32 13
  %14 = getelementptr inbounds [16384 x i8], [16384 x i8]* %13, i64 0, i64 0
  %15 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %16 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %15, i32 0, i32 11
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %21 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %20, i32 0, i32 11
  %22 = load i32, i32* %21, align 8
  %23 = sub i32 16384, %22
  %24 = zext i32 %23 to i64
  %25 = call i64 @fio_read(i64 %11, i8* %19, i64 %24)
  store i64 %25, i64* %6, align 8
  %26 = load i64, i64* %6, align 8
  %27 = icmp sle i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %2
  br label %586

29:                                               ; preds = %2
  %30 = load i64, i64* %6, align 8
  %31 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %32 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %31, i32 0, i32 11
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = add nsw i64 %34, %30
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %32, align 8
  store i64 0, i64* %6, align 8
  br label %37

37:                                               ; preds = %549, %29
  %38 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %39 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %38, i32 0, i32 7
  %40 = load i32, i32* %39, align 8
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %331, label %42

42:                                               ; preds = %37
  %43 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %44 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %43, i32 0, i32 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %331, label %47

47:                                               ; preds = %42
  %48 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %49 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %48, i32 0, i32 11
  %50 = load i32, i32* %49, align 8
  %51 = zext i32 %50 to i64
  %52 = load i64, i64* %6, align 8
  %53 = sub nsw i64 %51, %52
  %54 = icmp slt i64 %53, 16
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  br label %556

56:                                               ; preds = %47
  %57 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %58 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %57, i32 0, i32 13
  %59 = getelementptr inbounds [16384 x i8], [16384 x i8]* %58, i64 0, i64 0
  %60 = load i64, i64* %6, align 8
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = getelementptr inbounds i8, i8* %61, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %64, 24
  %66 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %67 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %66, i32 0, i32 13
  %68 = getelementptr inbounds [16384 x i8], [16384 x i8]* %67, i64 0, i64 0
  %69 = load i64, i64* %6, align 8
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = getelementptr inbounds i8, i8* %70, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %73, 16
  %75 = or i32 %65, %74
  %76 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %77 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %76, i32 0, i32 13
  %78 = getelementptr inbounds [16384 x i8], [16384 x i8]* %77, i64 0, i64 0
  %79 = load i64, i64* %6, align 8
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = getelementptr inbounds i8, i8* %80, i64 2
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl i32 %83, 8
  %85 = or i32 %75, %84
  %86 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %87 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %86, i32 0, i32 13
  %88 = getelementptr inbounds [16384 x i8], [16384 x i8]* %87, i64 0, i64 0
  %89 = load i64, i64* %6, align 8
  %90 = getelementptr inbounds i8, i8* %88, i64 %89
  %91 = getelementptr inbounds i8, i8* %90, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = or i32 %85, %93
  %95 = add i32 %94, 1
  %96 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %97 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %96, i32 0, i32 7
  store i32 %95, i32* %97, align 8
  %98 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %99 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %98, i32 0, i32 13
  %100 = getelementptr inbounds [16384 x i8], [16384 x i8]* %99, i64 0, i64 0
  %101 = load i64, i64* %6, align 8
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  %103 = getelementptr inbounds i8, i8* %102, i64 4
  %104 = getelementptr inbounds i8, i8* %103, i64 0
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl i32 %106, 24
  %108 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %109 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %108, i32 0, i32 13
  %110 = getelementptr inbounds [16384 x i8], [16384 x i8]* %109, i64 0, i64 0
  %111 = load i64, i64* %6, align 8
  %112 = getelementptr inbounds i8, i8* %110, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i64 4
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = shl i32 %116, 16
  %118 = or i32 %107, %117
  %119 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %120 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %119, i32 0, i32 13
  %121 = getelementptr inbounds [16384 x i8], [16384 x i8]* %120, i64 0, i64 0
  %122 = load i64, i64* %6, align 8
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = getelementptr inbounds i8, i8* %123, i64 4
  %125 = getelementptr inbounds i8, i8* %124, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl i32 %127, 8
  %129 = or i32 %118, %128
  %130 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %131 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %130, i32 0, i32 13
  %132 = getelementptr inbounds [16384 x i8], [16384 x i8]* %131, i64 0, i64 0
  %133 = load i64, i64* %6, align 8
  %134 = getelementptr inbounds i8, i8* %132, i64 %133
  %135 = getelementptr inbounds i8, i8* %134, i64 4
  %136 = getelementptr inbounds i8, i8* %135, i64 3
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = or i32 %129, %138
  %140 = add i32 %139, 1
  %141 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %142 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %141, i32 0, i32 8
  store i32 %140, i32* %142, align 4
  %143 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %144 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %143, i32 0, i32 13
  %145 = getelementptr inbounds [16384 x i8], [16384 x i8]* %144, i64 0, i64 0
  %146 = load i64, i64* %6, align 8
  %147 = getelementptr inbounds i8, i8* %145, i64 %146
  %148 = getelementptr inbounds i8, i8* %147, i64 8
  %149 = getelementptr inbounds i8, i8* %148, i64 0
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl i32 %151, 24
  %153 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %154 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %153, i32 0, i32 13
  %155 = getelementptr inbounds [16384 x i8], [16384 x i8]* %154, i64 0, i64 0
  %156 = load i64, i64* %6, align 8
  %157 = getelementptr inbounds i8, i8* %155, i64 %156
  %158 = getelementptr inbounds i8, i8* %157, i64 8
  %159 = getelementptr inbounds i8, i8* %158, i64 1
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = shl i32 %161, 16
  %163 = or i32 %152, %162
  %164 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %165 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %164, i32 0, i32 13
  %166 = getelementptr inbounds [16384 x i8], [16384 x i8]* %165, i64 0, i64 0
  %167 = load i64, i64* %6, align 8
  %168 = getelementptr inbounds i8, i8* %166, i64 %167
  %169 = getelementptr inbounds i8, i8* %168, i64 8
  %170 = getelementptr inbounds i8, i8* %169, i64 2
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = shl i32 %172, 8
  %174 = or i32 %163, %173
  %175 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %176 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %175, i32 0, i32 13
  %177 = getelementptr inbounds [16384 x i8], [16384 x i8]* %176, i64 0, i64 0
  %178 = load i64, i64* %6, align 8
  %179 = getelementptr inbounds i8, i8* %177, i64 %178
  %180 = getelementptr inbounds i8, i8* %179, i64 8
  %181 = getelementptr inbounds i8, i8* %180, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = or i32 %174, %183
  %185 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %186 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %185, i32 0, i32 9
  store i32 %184, i32* %186, align 8
  %187 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %188 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %187, i32 0, i32 13
  %189 = getelementptr inbounds [16384 x i8], [16384 x i8]* %188, i64 0, i64 0
  %190 = load i64, i64* %6, align 8
  %191 = getelementptr inbounds i8, i8* %189, i64 %190
  %192 = getelementptr inbounds i8, i8* %191, i64 12
  %193 = getelementptr inbounds i8, i8* %192, i64 0
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = shl i32 %195, 24
  %197 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %198 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %197, i32 0, i32 13
  %199 = getelementptr inbounds [16384 x i8], [16384 x i8]* %198, i64 0, i64 0
  %200 = load i64, i64* %6, align 8
  %201 = getelementptr inbounds i8, i8* %199, i64 %200
  %202 = getelementptr inbounds i8, i8* %201, i64 12
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = shl i32 %205, 16
  %207 = or i32 %196, %206
  %208 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %209 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %208, i32 0, i32 13
  %210 = getelementptr inbounds [16384 x i8], [16384 x i8]* %209, i64 0, i64 0
  %211 = load i64, i64* %6, align 8
  %212 = getelementptr inbounds i8, i8* %210, i64 %211
  %213 = getelementptr inbounds i8, i8* %212, i64 12
  %214 = getelementptr inbounds i8, i8* %213, i64 2
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = shl i32 %216, 8
  %218 = or i32 %207, %217
  %219 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %220 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %219, i32 0, i32 13
  %221 = getelementptr inbounds [16384 x i8], [16384 x i8]* %220, i64 0, i64 0
  %222 = load i64, i64* %6, align 8
  %223 = getelementptr inbounds i8, i8* %221, i64 %222
  %224 = getelementptr inbounds i8, i8* %223, i64 12
  %225 = getelementptr inbounds i8, i8* %224, i64 3
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = or i32 %218, %227
  %229 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %230 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %229, i32 0, i32 10
  store i32 %228, i32* %230, align 4
  %231 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %232 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %231, i32 0, i32 7
  %233 = load i32, i32* %232, align 8
  %234 = icmp ne i32 %233, 0
  br i1 %234, label %235, label %252

235:                                              ; preds = %56
  %236 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %237 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %236, i32 0, i32 7
  %238 = load i32, i32* %237, align 8
  %239 = icmp uge i32 %238, 16777217
  br i1 %239, label %240, label %251

240:                                              ; preds = %235
  br label %241

241:                                              ; preds = %240
  %242 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %243 = icmp sle i32 1, %242
  br i1 %243, label %244, label %249

244:                                              ; preds = %241
  %245 = call i32 @getpid() #1
  %246 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %247 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %246, i32 0, i32 7
  %248 = load i32, i32* %247, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.78, i64 0, i64 0), i32 %245, i32 %248)
  br label %249

249:                                              ; preds = %244, %241
  br label %250

250:                                              ; preds = %249
  call void @exit(i32 1) #11
  unreachable

251:                                              ; preds = %235
  br label %252

252:                                              ; preds = %251, %56
  %253 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %254 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %253, i32 0, i32 8
  %255 = load i32, i32* %254, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %274

257:                                              ; preds = %252
  %258 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %259 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %258, i32 0, i32 8
  %260 = load i32, i32* %259, align 4
  %261 = icmp uge i32 %260, 67108865
  br i1 %261, label %262, label %273

262:                                              ; preds = %257
  br label %263

263:                                              ; preds = %262
  %264 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %265 = icmp sle i32 1, %264
  br i1 %265, label %266, label %271

266:                                              ; preds = %263
  %267 = call i32 @getpid() #1
  %268 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %269 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %268, i32 0, i32 8
  %270 = load i32, i32* %269, align 4
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.79, i64 0, i64 0), i32 %267, i32 %270)
  br label %271

271:                                              ; preds = %266, %263
  br label %272

272:                                              ; preds = %271
  call void @exit(i32 1) #11
  unreachable

273:                                              ; preds = %257
  br label %274

274:                                              ; preds = %273, %252
  %275 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %276 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %275, i32 0, i32 10
  %277 = load i32, i32* %276, align 4
  %278 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %279 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %278, i32 0, i32 9
  %280 = load i32, i32* %279, align 8
  %281 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 0
  store i64 0, i64* %281, align 8
  %282 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 1
  %283 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %284 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %283, i32 0, i32 7
  %285 = load i32, i32* %284, align 8
  %286 = sub i32 %285, 1
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %282, align 8
  %288 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 2
  %289 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %290 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %289, i32 0, i32 1
  %291 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %290, align 8
  %292 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %291, i64 1
  %293 = bitcast %struct.fio_msg_internal_s* %292 to i8*
  store i8* %293, i8** %288, align 8
  %294 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 0
  store i64 0, i64* %294, align 8
  %295 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 1
  %296 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %297 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %296, i32 0, i32 8
  %298 = load i32, i32* %297, align 4
  %299 = sub i32 %298, 1
  %300 = zext i32 %299 to i64
  store i64 %300, i64* %295, align 8
  %301 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %8, i32 0, i32 2
  %302 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %303 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %302, i32 0, i32 1
  %304 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %303, align 8
  %305 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %304, i64 1
  %306 = bitcast %struct.fio_msg_internal_s* %305 to i8*
  %307 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %308 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %307, i32 0, i32 7
  %309 = load i32, i32* %308, align 8
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %306, i64 %310
  %312 = getelementptr inbounds i8, i8* %311, i64 1
  store i8* %312, i8** %301, align 8
  %313 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %314 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %313, i32 0, i32 9
  %315 = load i32, i32* %314, align 8
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %322, label %317

317:                                              ; preds = %274
  %318 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %319 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %318, i32 0, i32 9
  %320 = load i32, i32* %319, align 8
  %321 = icmp eq i32 %320, 3
  br label %322

322:                                              ; preds = %317, %274
  %323 = phi i1 [ true, %274 ], [ %321, %317 ]
  %324 = zext i1 %323 to i32
  %325 = trunc i32 %324 to i8
  %326 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 %277, i32 %280, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %7, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %8, i8 signext %325, i8 signext 0)
  %327 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %328 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %327, i32 0, i32 1
  store %struct.fio_msg_internal_s* %326, %struct.fio_msg_internal_s** %328, align 8
  %329 = load i64, i64* %6, align 8
  %330 = add nsw i64 %329, 16
  store i64 %330, i64* %6, align 8
  br label %331

331:                                              ; preds = %322, %42, %37
  %332 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %333 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %332, i32 0, i32 7
  %334 = load i32, i32* %333, align 8
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %433

336:                                              ; preds = %331
  %337 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %338 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %337, i32 0, i32 7
  %339 = load i32, i32* %338, align 8
  %340 = zext i32 %339 to i64
  %341 = load i64, i64* %6, align 8
  %342 = add nsw i64 %340, %341
  %343 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %344 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %343, i32 0, i32 11
  %345 = load i32, i32* %344, align 8
  %346 = zext i32 %345 to i64
  %347 = icmp sgt i64 %342, %346
  br i1 %347, label %348, label %395

348:                                              ; preds = %336
  %349 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %350 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %349, i32 0, i32 1
  %351 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %350, align 8
  %352 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %351, i32 0, i32 0
  %353 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %352, i32 0, i32 2
  %354 = load i8*, i8** %353, align 8
  %355 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %356 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %355, i32 0, i32 1
  %357 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %356, align 8
  %358 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %357, i32 0, i32 0
  %359 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %358, i32 0, i32 1
  %360 = load i64, i64* %359, align 8
  %361 = add i64 %360, 1
  %362 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %363 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %362, i32 0, i32 7
  %364 = load i32, i32* %363, align 8
  %365 = zext i32 %364 to i64
  %366 = sub i64 %361, %365
  %367 = getelementptr inbounds i8, i8* %354, i64 %366
  %368 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %369 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %368, i32 0, i32 13
  %370 = getelementptr inbounds [16384 x i8], [16384 x i8]* %369, i64 0, i64 0
  %371 = load i64, i64* %6, align 8
  %372 = getelementptr inbounds i8, i8* %370, i64 %371
  %373 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %374 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %373, i32 0, i32 11
  %375 = load i32, i32* %374, align 8
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %6, align 8
  %378 = sub nsw i64 %376, %377
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %367, i8* align 1 %372, i64 %378, i1 false)
  %379 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %380 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %379, i32 0, i32 11
  %381 = load i32, i32* %380, align 8
  %382 = zext i32 %381 to i64
  %383 = load i64, i64* %6, align 8
  %384 = sub nsw i64 %382, %383
  %385 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %386 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %385, i32 0, i32 7
  %387 = load i32, i32* %386, align 8
  %388 = zext i32 %387 to i64
  %389 = sub nsw i64 %388, %384
  %390 = trunc i64 %389 to i32
  store i32 %390, i32* %386, align 8
  %391 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %392 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %391, i32 0, i32 11
  %393 = load i32, i32* %392, align 8
  %394 = zext i32 %393 to i64
  store i64 %394, i64* %6, align 8
  br label %556

395:                                              ; preds = %336
  %396 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %397 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %396, i32 0, i32 1
  %398 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %397, align 8
  %399 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %398, i32 0, i32 0
  %400 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %399, i32 0, i32 2
  %401 = load i8*, i8** %400, align 8
  %402 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %403 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %402, i32 0, i32 1
  %404 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %403, align 8
  %405 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %404, i32 0, i32 0
  %406 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %405, i32 0, i32 1
  %407 = load i64, i64* %406, align 8
  %408 = add i64 %407, 1
  %409 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %410 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %409, i32 0, i32 7
  %411 = load i32, i32* %410, align 8
  %412 = zext i32 %411 to i64
  %413 = sub i64 %408, %412
  %414 = getelementptr inbounds i8, i8* %401, i64 %413
  %415 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %416 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %415, i32 0, i32 13
  %417 = getelementptr inbounds [16384 x i8], [16384 x i8]* %416, i64 0, i64 0
  %418 = load i64, i64* %6, align 8
  %419 = getelementptr inbounds i8, i8* %417, i64 %418
  %420 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %421 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %420, i32 0, i32 7
  %422 = load i32, i32* %421, align 8
  %423 = zext i32 %422 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %414, i8* align 1 %419, i64 %423, i1 false)
  %424 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %425 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %424, i32 0, i32 7
  %426 = load i32, i32* %425, align 8
  %427 = zext i32 %426 to i64
  %428 = load i64, i64* %6, align 8
  %429 = add nsw i64 %428, %427
  store i64 %429, i64* %6, align 8
  %430 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %431 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %430, i32 0, i32 7
  store i32 0, i32* %431, align 8
  br label %432

432:                                              ; preds = %395
  br label %433

433:                                              ; preds = %432, %331
  %434 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %435 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %434, i32 0, i32 8
  %436 = load i32, i32* %435, align 4
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %535

438:                                              ; preds = %433
  %439 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %440 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %439, i32 0, i32 8
  %441 = load i32, i32* %440, align 4
  %442 = zext i32 %441 to i64
  %443 = load i64, i64* %6, align 8
  %444 = add nsw i64 %442, %443
  %445 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %446 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %445, i32 0, i32 11
  %447 = load i32, i32* %446, align 8
  %448 = zext i32 %447 to i64
  %449 = icmp sgt i64 %444, %448
  br i1 %449, label %450, label %497

450:                                              ; preds = %438
  %451 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %452 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %451, i32 0, i32 1
  %453 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %452, align 8
  %454 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %453, i32 0, i32 1
  %455 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %454, i32 0, i32 2
  %456 = load i8*, i8** %455, align 8
  %457 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %458 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %457, i32 0, i32 1
  %459 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %458, align 8
  %460 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %459, i32 0, i32 1
  %461 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %460, i32 0, i32 1
  %462 = load i64, i64* %461, align 8
  %463 = add i64 %462, 1
  %464 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %465 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %464, i32 0, i32 8
  %466 = load i32, i32* %465, align 4
  %467 = zext i32 %466 to i64
  %468 = sub i64 %463, %467
  %469 = getelementptr inbounds i8, i8* %456, i64 %468
  %470 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %471 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %470, i32 0, i32 13
  %472 = getelementptr inbounds [16384 x i8], [16384 x i8]* %471, i64 0, i64 0
  %473 = load i64, i64* %6, align 8
  %474 = getelementptr inbounds i8, i8* %472, i64 %473
  %475 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %476 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %475, i32 0, i32 11
  %477 = load i32, i32* %476, align 8
  %478 = zext i32 %477 to i64
  %479 = load i64, i64* %6, align 8
  %480 = sub nsw i64 %478, %479
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %469, i8* align 1 %474, i64 %480, i1 false)
  %481 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %482 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %481, i32 0, i32 11
  %483 = load i32, i32* %482, align 8
  %484 = zext i32 %483 to i64
  %485 = load i64, i64* %6, align 8
  %486 = sub nsw i64 %484, %485
  %487 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %488 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %487, i32 0, i32 8
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i64
  %491 = sub nsw i64 %490, %486
  %492 = trunc i64 %491 to i32
  store i32 %492, i32* %488, align 4
  %493 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %494 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %493, i32 0, i32 11
  %495 = load i32, i32* %494, align 8
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %6, align 8
  br label %556

497:                                              ; preds = %438
  %498 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %499 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %498, i32 0, i32 1
  %500 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %499, align 8
  %501 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %500, i32 0, i32 1
  %502 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %501, i32 0, i32 2
  %503 = load i8*, i8** %502, align 8
  %504 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %505 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %504, i32 0, i32 1
  %506 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %505, align 8
  %507 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %506, i32 0, i32 1
  %508 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %507, i32 0, i32 1
  %509 = load i64, i64* %508, align 8
  %510 = add i64 %509, 1
  %511 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %512 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %511, i32 0, i32 8
  %513 = load i32, i32* %512, align 4
  %514 = zext i32 %513 to i64
  %515 = sub i64 %510, %514
  %516 = getelementptr inbounds i8, i8* %503, i64 %515
  %517 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %518 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %517, i32 0, i32 13
  %519 = getelementptr inbounds [16384 x i8], [16384 x i8]* %518, i64 0, i64 0
  %520 = load i64, i64* %6, align 8
  %521 = getelementptr inbounds i8, i8* %519, i64 %520
  %522 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %523 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %522, i32 0, i32 8
  %524 = load i32, i32* %523, align 4
  %525 = zext i32 %524 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %516, i8* align 1 %521, i64 %525, i1 false)
  %526 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %527 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %526, i32 0, i32 8
  %528 = load i32, i32* %527, align 4
  %529 = zext i32 %528 to i64
  %530 = load i64, i64* %6, align 8
  %531 = add nsw i64 %530, %529
  store i64 %531, i64* %6, align 8
  %532 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %533 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %532, i32 0, i32 8
  store i32 0, i32* %533, align 4
  br label %534

534:                                              ; preds = %497
  br label %535

535:                                              ; preds = %534, %433
  %536 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %537 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %536, i32 0, i32 1
  %538 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %537, align 8
  call void @fio_postoffice_meta_update(%struct.fio_msg_internal_s* %538)
  %539 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %540 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %539, i32 0, i32 2
  %541 = bitcast {}** %540 to void (%struct.cluster_pr_s*)**
  %542 = load void (%struct.cluster_pr_s*)*, void (%struct.cluster_pr_s*)** %541, align 8
  %543 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  call void %542(%struct.cluster_pr_s* %543)
  %544 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %545 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %544, i32 0, i32 1
  %546 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %545, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %546)
  %547 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %548 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %547, i32 0, i32 1
  store %struct.fio_msg_internal_s* null, %struct.fio_msg_internal_s** %548, align 8
  br label %549

549:                                              ; preds = %535
  %550 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %551 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %550, i32 0, i32 11
  %552 = load i32, i32* %551, align 8
  %553 = zext i32 %552 to i64
  %554 = load i64, i64* %6, align 8
  %555 = icmp sgt i64 %553, %554
  br i1 %555, label %37, label %556

556:                                              ; preds = %549, %450, %348, %55
  %557 = load i64, i64* %6, align 8
  %558 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %559 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %558, i32 0, i32 11
  %560 = load i32, i32* %559, align 8
  %561 = zext i32 %560 to i64
  %562 = sub nsw i64 %561, %557
  %563 = trunc i64 %562 to i32
  store i32 %563, i32* %559, align 8
  %564 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %565 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %564, i32 0, i32 11
  %566 = load i32, i32* %565, align 8
  %567 = icmp ne i32 %566, 0
  br i1 %567, label %568, label %584

568:                                              ; preds = %556
  %569 = load i64, i64* %6, align 8
  %570 = icmp ne i64 %569, 0
  br i1 %570, label %571, label %584

571:                                              ; preds = %568
  %572 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %573 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %572, i32 0, i32 13
  %574 = getelementptr inbounds [16384 x i8], [16384 x i8]* %573, i64 0, i64 0
  %575 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %576 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %575, i32 0, i32 13
  %577 = getelementptr inbounds [16384 x i8], [16384 x i8]* %576, i64 0, i64 0
  %578 = load i64, i64* %6, align 8
  %579 = getelementptr inbounds i8, i8* %577, i64 %578
  %580 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %581 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %580, i32 0, i32 11
  %582 = load i32, i32* %581, align 8
  %583 = zext i32 %582 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %574, i8* align 1 %579, i64 %583, i1 false)
  br label %584

584:                                              ; preds = %571, %568, %556
  %585 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  br label %586

586:                                              ; preds = %584, %28
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @fio_cluster_on_shutdown(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.cluster_pr_s*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %8 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %9 = bitcast %struct.fio_protocol_s* %8 to %struct.cluster_pr_s*
  store %struct.cluster_pr_s* %9, %struct.cluster_pr_s** %5, align 8
  %10 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %11 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %10, i32 0, i32 3
  %12 = load void (i8*, i64)*, void (i8*, i64)** %11, align 8
  %13 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 0
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 1
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 2
  store i8* null, i8** %18, align 8
  %19 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 0, i32 8, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %6, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %7, i8 signext 0, i8 signext 1)
  %20 = bitcast %struct.fio_msg_internal_s* %19 to i8*
  call void %12(i8* %20, i64 -1)
  ret i8 -1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_on_close(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.cluster_pr_s*, align 8
  %6 = alloca %struct.fio_ls_s*, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %7 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  %8 = bitcast %struct.fio_protocol_s* %7 to %struct.cluster_pr_s*
  store %struct.cluster_pr_s* %8, %struct.cluster_pr_s** %5, align 8
  %9 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %10 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %9, i32 0, i32 8
  %11 = load i8, i8* %10, align 2
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %35, label %13

13:                                               ; preds = %2
  call void @fio_lock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  %14 = load %struct.fio_ls_s*, %struct.fio_ls_s** getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1, i32 1), align 8
  store %struct.fio_ls_s* %14, %struct.fio_ls_s** %6, align 8
  br label %15

15:                                               ; preds = %29, %13
  %16 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %17 = icmp ne %struct.fio_ls_s* %16, getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 1)
  br i1 %17, label %18, label %33

18:                                               ; preds = %15
  %19 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %20 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %19, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = load i64, i64* %3, align 8
  %23 = inttoptr i64 %22 to i8*
  %24 = icmp eq i8* %21, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %18
  %26 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %27 = call i8* @fio_ls_remove(%struct.fio_ls_s* %26)
  br label %33

28:                                               ; preds = %18
  br label %29

29:                                               ; preds = %28
  %30 = load %struct.fio_ls_s*, %struct.fio_ls_s** %6, align 8
  %31 = getelementptr inbounds %struct.fio_ls_s, %struct.fio_ls_s* %30, i32 0, i32 1
  %32 = load %struct.fio_ls_s*, %struct.fio_ls_s** %31, align 8
  store %struct.fio_ls_s* %32, %struct.fio_ls_s** %6, align 8
  br label %15

33:                                               ; preds = %25, %15
  %34 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 2))
  br label %61

35:                                               ; preds = %2
  %36 = load %struct.fio_data_s*, %struct.fio_data_s** @fio_data, align 8
  %37 = getelementptr inbounds %struct.fio_data_s, %struct.fio_data_s* %36, i32 0, i32 7
  %38 = load volatile i8, i8* %37, align 1
  %39 = icmp ne i8 %38, 0
  br i1 %39, label %40, label %60

40:                                               ; preds = %35
  %41 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %42 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %41, i32 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = icmp ne i32 %43, 8
  br i1 %44, label %45, label %59

45:                                               ; preds = %40
  %46 = call signext i16 @fio_is_running()
  %47 = sext i16 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %59

49:                                               ; preds = %45
  br label %50

50:                                               ; preds = %49
  %51 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %52 = icmp sle i32 1, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %50
  %54 = call i32 @getpid() #1
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.80, i64 0, i64 0), i32 %54)
  br label %55

55:                                               ; preds = %53, %50
  br label %56

56:                                               ; preds = %55
  call void @fio_state_callback_force(i32 10)
  call void @fio_state_callback_clear(i32 10)
  call void @fio_cluster_data_cleanup(i32 1)
  %57 = call i32 @getpid() #1
  %58 = call i32 @kill(i32 %57, i32 2) #1
  br label %59

59:                                               ; preds = %56, %45, %40
  br label %60

60:                                               ; preds = %59, %35
  br label %61

61:                                               ; preds = %60, %33
  %62 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %63 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %62, i32 0, i32 1
  %64 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %63, align 8
  %65 = icmp ne %struct.fio_msg_internal_s* %64, null
  br i1 %65, label %66, label %70

66:                                               ; preds = %61
  %67 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %68 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %67, i32 0, i32 1
  %69 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %68, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %69)
  br label %70

70:                                               ; preds = %66, %61
  %71 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %72 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %71, i32 0, i32 1
  store %struct.fio_msg_internal_s* null, %struct.fio_msg_internal_s** %72, align 8
  %73 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %74 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %73, i32 0, i32 4
  call void @fio_sub_hash_free(%struct.fio_sub_hash_s* %74)
  %75 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %5, align 8
  %76 = bitcast %struct.cluster_pr_s* %75 to i8*
  call void @fio_cluster_protocol_free(i8* %76)
  %77 = load i64, i64* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_ping(i64, %struct.fio_protocol_s*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.fio_protocol_s*, align 8
  %5 = alloca %struct.fio_msg_internal_s*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  store i64 %0, i64* %3, align 8
  store %struct.fio_protocol_s* %1, %struct.fio_protocol_s** %4, align 8
  %8 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 0
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 1
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 2
  store i8* null, i8** %13, align 8
  %14 = call %struct.fio_msg_internal_s* @fio_msg_internal_create(i32 0, i32 10, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %6, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %7, i8 signext 0, i8 signext 1)
  store %struct.fio_msg_internal_s* %14, %struct.fio_msg_internal_s** %5, align 8
  %15 = load i64, i64* %3, align 8
  %16 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  %17 = call i64 @fio_msg_internal_send_dup(i64 %15, %struct.fio_msg_internal_s* %16)
  %18 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %5, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %18)
  %19 = load %struct.fio_protocol_s*, %struct.fio_protocol_s** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_postoffice_meta_update(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  %3 = alloca %struct.fio_meta_ary_s, align 8
  %4 = alloca %struct.fio_msg_metadata_s, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %5 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %6 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %5, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %10, i32 0, i32 5
  %12 = load i64, i64* %11, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %9, %1
  br label %61

15:                                               ; preds = %9
  call void @fio_postoffice_meta_copy_new(%struct.fio_meta_ary_s* sret %3)
  %16 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %18, i32 0, i32 5
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %17, %20
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %24 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %23, i32 0, i32 5
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  store i64 %25, i64* %26, align 8
  br label %27

27:                                               ; preds = %22, %15
  %28 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %31 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %30, i32 0, i32 5
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %36, %27
  %33 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %60

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, -1
  store i64 %39, i64* %37, align 8
  %40 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %41 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %40, i32 0, i32 6
  %42 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %41, i64 0, i64 %43
  %45 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 3
  %46 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %45, align 8
  %47 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %3, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %46, i64 %48
  %50 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %49, align 8
  %51 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %52 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %51, i32 0, i32 0
  %53 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %54 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %53, i32 0, i32 1
  %55 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %56 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %55, i32 0, i32 4
  %57 = load i8, i8* %56, align 4
  call void %50(%struct.fio_msg_metadata_s* sret %4, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %52, %struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8 %54, i8 zeroext %57)
  %58 = bitcast %struct.fio_msg_metadata_s* %44 to i8*
  %59 = bitcast %struct.fio_msg_metadata_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false)
  br label %32

60:                                               ; preds = %32
  call void @fio_postoffice_meta_copy_free(%struct.fio_meta_ary_s* %3)
  br label %61

61:                                               ; preds = %60, %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_postoffice_meta_copy_new(%struct.fio_meta_ary_s* noalias sret) #0 {
  %2 = bitcast %struct.fio_meta_ary_s* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  %3 = call i64 @fio_meta_ary_count(%struct.fio_meta_ary_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 0))
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  br label %8

6:                                                ; preds = %1
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 1))
  call void @fio_meta_ary_concat(%struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 0))
  %7 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 4, i32 1))
  br label %8

8:                                                ; preds = %6, %5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_postoffice_meta_copy_free(%struct.fio_meta_ary_s*) #0 {
  %2 = alloca %struct.fio_meta_ary_s*, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %2, align 8
  %3 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  call void @fio_meta_ary_free(%struct.fio_meta_ary_s* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_meta_ary_concat(%struct.fio_meta_ary_s*, %struct.fio_meta_ary_s*) #0 {
  %3 = alloca %struct.fio_meta_ary_s*, align 8
  %4 = alloca %struct.fio_meta_ary_s*, align 8
  %5 = alloca i64, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %3, align 8
  store %struct.fio_meta_ary_s* %1, %struct.fio_meta_ary_s** %4, align 8
  %6 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %7 = icmp ne %struct.fio_meta_ary_s* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %2
  br label %44

9:                                                ; preds = %2
  %10 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %11 = call i64 @fio_meta_ary_count(%struct.fio_meta_ary_s* %10)
  store i64 %11, i64* %5, align 8
  %12 = load i64, i64* %5, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %16 = icmp ne %struct.fio_meta_ary_s* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %14, %9
  br label %44

18:                                               ; preds = %14
  %19 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %20 = load i64, i64* %5, align 8
  call void @fio_meta_ary___require_on_top(%struct.fio_meta_ary_s* %19, i64 %20)
  %21 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %22 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %21, i32 0, i32 3
  %23 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %22, align 8
  %24 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %25 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %24, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %23, i64 %26
  %28 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %27 to i8*
  %29 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %30 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %29, i32 0, i32 3
  %31 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %30, align 8
  %32 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %4, align 8
  %33 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %31, i64 %34
  %36 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %35 to i8*
  %37 = load i64, i64* %5, align 8
  %38 = mul i64 %37, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %36, i64 %38, i1 false)
  %39 = load i64, i64* %5, align 8
  %40 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %3, align 8
  %41 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %40, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, %39
  store i64 %43, i64* %41, align 8
  br label %44

44:                                               ; preds = %18, %17, %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_meta_ary_free(%struct.fio_meta_ary_s*) #0 {
  %2 = alloca %struct.fio_meta_ary_s*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fio_meta_ary_s, align 8
  store %struct.fio_meta_ary_s* %0, %struct.fio_meta_ary_s** %2, align 8
  %6 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %7 = icmp ne %struct.fio_meta_ary_s* %6, null
  br i1 %7, label %8, label %33

8:                                                ; preds = %1
  %9 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %9, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %3, align 8
  %12 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %13 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %4, align 8
  br label %15

15:                                               ; preds = %20, %8
  %16 = load i64, i64* %4, align 8
  %17 = load i64, i64* %3, align 8
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  br label %20

20:                                               ; preds = %19
  %21 = load i64, i64* %4, align 8
  %22 = add i64 %21, 1
  store i64 %22, i64* %4, align 8
  br label %15

23:                                               ; preds = %15
  %24 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %24, i32 0, i32 3
  %26 = load void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)**, void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)*** %25, align 8
  %27 = bitcast void (%struct.fio_msg_metadata_s*, %struct.fio_str_info_s*, %struct.fio_str_info_s*, i8)** %26 to i8*
  call void @free(i8* %27) #1
  %28 = load %struct.fio_meta_ary_s*, %struct.fio_meta_ary_s** %2, align 8
  %29 = bitcast %struct.fio_meta_ary_s* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 32, i1 false)
  %30 = getelementptr inbounds %struct.fio_meta_ary_s, %struct.fio_meta_ary_s* %5, i32 0, i32 2
  store i64 0, i64* %30, align 8
  %31 = bitcast %struct.fio_meta_ary_s* %28 to i8*
  %32 = bitcast %struct.fio_meta_ary_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 32, i1 false)
  br label %33

33:                                               ; preds = %23, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash_free(%struct.fio_sub_hash_s*) #0 {
  %2 = alloca %struct.fio_sub_hash_s*, align 8
  %3 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %4 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %5 = alloca %struct.fio_sub_hash_s, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %2, align 8
  %6 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %6, i32 0, i32 3
  %8 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %7, align 8
  %9 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %8, i64 %11
  store %struct.fio_sub_hash__ordered_s_* %12, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %13 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %13, i32 0, i32 3
  %15 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %14, align 8
  %16 = icmp ne %struct.fio_sub_hash__ordered_s_* %15, null
  br i1 %16, label %17, label %52

17:                                               ; preds = %1
  %18 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %18, i32 0, i32 3
  %20 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %19, align 8
  %21 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %22 = icmp ne %struct.fio_sub_hash__ordered_s_* %20, %21
  br i1 %22, label %23, label %52

23:                                               ; preds = %17
  %24 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %24, i32 0, i32 3
  %26 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %25, align 8
  store %struct.fio_sub_hash__ordered_s_* %26, %struct.fio_sub_hash__ordered_s_** %4, align 8
  br label %27

27:                                               ; preds = %48, %23
  %28 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %29 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %30 = icmp ult %struct.fio_sub_hash__ordered_s_* %28, %29
  br i1 %30, label %31, label %51

31:                                               ; preds = %27
  %32 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %33 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 0, %34
  br i1 %35, label %47, label %36

36:                                               ; preds = %31
  br label %37

37:                                               ; preds = %36
  %38 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %39 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %38, i32 0, i32 1
  %40 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %39, i32 0, i32 0
  %41 = call i32 @fio_str_free(%struct.fio_str_s* %40)
  %42 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %43 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %42, i32 0, i32 1
  %44 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %43, i32 0, i32 1
  %45 = load %struct.subscription_s*, %struct.subscription_s** %44, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %45)
  br label %46

46:                                               ; preds = %37
  br label %47

47:                                               ; preds = %46, %31
  br label %48

48:                                               ; preds = %47
  %49 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %50 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %49, i32 1
  store %struct.fio_sub_hash__ordered_s_* %50, %struct.fio_sub_hash__ordered_s_** %4, align 8
  br label %27

51:                                               ; preds = %27
  br label %52

52:                                               ; preds = %51, %17, %1
  %53 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %54 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %53, i32 0, i32 4
  %55 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %54, align 8
  %56 = bitcast %struct.fio_sub_hash__map_s_* %55 to i8*
  call void @fio_free(i8* %56)
  %57 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %58 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %57, i32 0, i32 3
  %59 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %58, align 8
  %60 = bitcast %struct.fio_sub_hash__ordered_s_* %59 to i8*
  call void @fio_free(i8* %60)
  %61 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %62 = bitcast %struct.fio_sub_hash_s* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 48, i1 false)
  %63 = bitcast %struct.fio_sub_hash_s* %61 to i8*
  %64 = bitcast %struct.fio_sub_hash_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_protocol_free(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  call void @fio_free(i8* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_str_free(%struct.fio_str_s*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.fio_str_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_str_s, align 8
  store %struct.fio_str_s* %0, %struct.fio_str_s** %3, align 8
  %7 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %8 = icmp ne %struct.fio_str_s* %7, null
  br i1 %8, label %9, label %17

9:                                                ; preds = %1
  %10 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %11 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %10, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %12 = load i32, i32* %4, align 4
  %13 = atomicrmw volatile sub i32* %11, i32 %12 seq_cst
  %14 = sub i32 %13, %12
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = icmp ne i32 %15, -1
  br i1 %16, label %17, label %18

17:                                               ; preds = %9, %1
  store i32 -1, i32* %2, align 4
  br label %41

18:                                               ; preds = %9
  %19 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %20 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %19, i32 0, i32 1
  %21 = load i8, i8* %20, align 4
  %22 = icmp ne i8 %21, 0
  br i1 %22, label %35, label %23

23:                                               ; preds = %18
  %24 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %25 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %24, i32 0, i32 6
  %26 = load void (i8*)*, void (i8*)** %25, align 8
  %27 = icmp ne void (i8*)* %26, null
  br i1 %27, label %28, label %35

28:                                               ; preds = %23
  %29 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %30 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %29, i32 0, i32 6
  %31 = load void (i8*)*, void (i8*)** %30, align 8
  %32 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %33 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %32, i32 0, i32 7
  %34 = load i8*, i8** %33, align 8
  call void %31(i8* %34)
  br label %35

35:                                               ; preds = %28, %23, %18
  %36 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %37 = bitcast %struct.fio_str_s* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 48, i1 false)
  %38 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %6, i32 0, i32 1
  store i8 1, i8* %38, align 4
  %39 = bitcast %struct.fio_str_s* %36 to i8*
  %40 = bitcast %struct.fio_str_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 48, i1 true)
  store i32 0, i32* %2, align 4
  br label %41

41:                                               ; preds = %35, %17
  %42 = load i32, i32* %2, align 4
  ret i32 %42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_mock_on_message(%struct.fio_msg_s*) #0 {
  %2 = alloca %struct.fio_msg_s*, align 8
  store %struct.fio_msg_s* %0, %struct.fio_msg_s** %2, align 8
  %3 = load %struct.fio_msg_s*, %struct.fio_msg_s** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash_insert(%struct.fio_sub_hash_s*, i64, %struct.fio_str_s* byval(%struct.fio_str_s) align 8, %struct.subscription_s*, %struct.subscription_s**) #0 {
  %6 = alloca %struct.fio_sub_hash_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.subscription_s*, align 8
  %9 = alloca %struct.subscription_s**, align 8
  %10 = alloca %struct.fio_sub_hash_couplet_s, align 8
  %11 = alloca %struct.fio_sub_hash_couplet_s, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store %struct.subscription_s* %3, %struct.subscription_s** %8, align 8
  store %struct.subscription_s** %4, %struct.subscription_s*** %9, align 8
  %12 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %13 = load i64, i64* %7, align 8
  %14 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %10, i32 0, i32 0
  %15 = bitcast %struct.fio_str_s* %14 to i8*
  %16 = bitcast %struct.fio_str_s* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 48, i1 false)
  %17 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %10, i32 0, i32 1
  %18 = load %struct.subscription_s*, %struct.subscription_s** %8, align 8
  store %struct.subscription_s* %18, %struct.subscription_s** %17, align 8
  %19 = load %struct.subscription_s**, %struct.subscription_s*** %9, align 8
  call void @fio_sub_hash__insert_or_overwrite_(%struct.fio_sub_hash_couplet_s* sret %11, %struct.fio_sub_hash_s* %12, i64 %13, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8 %10, i32 1, %struct.subscription_s** %19)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_sub_hash_remove(%struct.fio_sub_hash_s*, i64, %struct.fio_str_s* byval(%struct.fio_str_s) align 8, %struct.subscription_s**) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.fio_sub_hash_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.subscription_s**, align 8
  %9 = alloca %struct.fio_sub_hash__map_s_*, align 8
  %10 = alloca %struct.fio_sub_hash_couplet_s, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store %struct.subscription_s** %3, %struct.subscription_s*** %8, align 8
  %11 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %12 = load i64, i64* %7, align 8
  %13 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %10, i32 0, i32 0
  %14 = bitcast %struct.fio_str_s* %13 to i8*
  %15 = bitcast %struct.fio_str_s* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 48, i1 false)
  %16 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %10, i32 0, i32 1
  store %struct.subscription_s* null, %struct.subscription_s** %16, align 8
  %17 = call %struct.fio_sub_hash__map_s_* @fio_sub_hash__find_map_pos_(%struct.fio_sub_hash_s* %11, i64 %12, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8 %10)
  store %struct.fio_sub_hash__map_s_* %17, %struct.fio_sub_hash__map_s_** %9, align 8
  %18 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %19 = icmp ne %struct.fio_sub_hash__map_s_* %18, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %4
  %21 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %22 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %21, i32 0, i32 1
  %23 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %22, align 8
  %24 = icmp ne %struct.fio_sub_hash__ordered_s_* %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %20, %4
  store i32 -1, i32* %5, align 4
  br label %103

26:                                               ; preds = %20
  %27 = load %struct.subscription_s**, %struct.subscription_s*** %8, align 8
  %28 = icmp ne %struct.subscription_s** %27, null
  br i1 %28, label %29, label %37

29:                                               ; preds = %26
  %30 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %31 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %30, i32 0, i32 1
  %32 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %31, align 8
  %33 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %33, i32 0, i32 1
  %35 = load %struct.subscription_s*, %struct.subscription_s** %34, align 8
  %36 = load %struct.subscription_s**, %struct.subscription_s*** %8, align 8
  store %struct.subscription_s* %35, %struct.subscription_s** %36, align 8
  br label %37

37:                                               ; preds = %29, %26
  br label %38

38:                                               ; preds = %37
  %39 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %40 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %39, i32 0, i32 1
  %41 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %40, align 8
  %42 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %41, i32 0, i32 1
  %43 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %42, i32 0, i32 0
  %44 = call i32 @fio_str_free(%struct.fio_str_s* %43)
  %45 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %46 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %45, i32 0, i32 1
  %47 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %46, align 8
  %48 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %48, i32 0, i32 1
  %50 = load %struct.subscription_s*, %struct.subscription_s** %49, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %50)
  br label %51

51:                                               ; preds = %38
  %52 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %53 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %52, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, -1
  store i64 %55, i64* %53, align 8
  %56 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %57 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %56, i32 0, i32 1
  %58 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %57, align 8
  %59 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %58, i32 0, i32 0
  store i64 0, i64* %59, align 8
  %60 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %61 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %60, i32 0, i32 1
  %62 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %61, align 8
  %63 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %64 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %63, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %67 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %66, i32 0, i32 3
  %68 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %67, align 8
  %69 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %68, i64 %65
  %70 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %69, i64 -1
  %71 = icmp eq %struct.fio_sub_hash__ordered_s_* %62, %70
  br i1 %71, label %72, label %100

72:                                               ; preds = %51
  %73 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %74 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %73, i32 0, i32 0
  store i64 0, i64* %74, align 8
  br label %75

75:                                               ; preds = %97, %72
  %76 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %77 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %76, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, -1
  store i64 %79, i64* %77, align 8
  br label %80

80:                                               ; preds = %75
  %81 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %82 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %81, i32 0, i32 2
  %83 = load i64, i64* %82, align 8
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %87 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %86, i32 0, i32 3
  %88 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %87, align 8
  %89 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %6, align 8
  %90 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %89, i32 0, i32 2
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %91, 1
  %93 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %88, i64 %92
  %94 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = icmp eq i64 %95, 0
  br label %97

97:                                               ; preds = %85, %80
  %98 = phi i1 [ false, %80 ], [ %96, %85 ]
  br i1 %98, label %75, label %99

99:                                               ; preds = %97
  br label %100

100:                                              ; preds = %99, %51
  %101 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %9, align 8
  %102 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %101, i32 0, i32 1
  store %struct.fio_sub_hash__ordered_s_* null, %struct.fio_sub_hash__ordered_s_** %102, align 8
  store i32 0, i32* %5, align 4
  br label %103

103:                                              ; preds = %100, %25
  %104 = load i32, i32* %5, align 4
  ret i32 %104
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash__insert_or_overwrite_(%struct.fio_sub_hash_couplet_s* noalias sret, %struct.fio_sub_hash_s*, i64, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8, i32, %struct.subscription_s**) #0 {
  %7 = alloca %struct.fio_sub_hash_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.subscription_s**, align 8
  %11 = alloca %struct.fio_sub_hash__map_s_*, align 8
  %12 = alloca %struct.fio_str_s, align 8
  %13 = alloca %struct.fio_str_info_s, align 8
  %14 = alloca %struct.fio_str_s, align 8
  %15 = alloca %struct.fio_str_info_s, align 8
  store %struct.fio_sub_hash_s* %1, %struct.fio_sub_hash_s** %7, align 8
  store i64 %2, i64* %8, align 8
  store i32 %4, i32* %9, align 4
  store %struct.subscription_s** %5, %struct.subscription_s*** %10, align 8
  %16 = load i64, i64* %8, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  store i64 -1, i64* %8, align 8
  br label %19

19:                                               ; preds = %18, %6
  %20 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %21 = call i64 @fio_sub_hash_is_fragmented(%struct.fio_sub_hash_s* %20)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  call void @fio_sub_hash_rehash(%struct.fio_sub_hash_s* %24)
  br label %40

25:                                               ; preds = %19
  %26 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %27 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %26, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %30 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %29, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = icmp uge i64 %28, %31
  br i1 %32, label %33, label %39

33:                                               ; preds = %25
  %34 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %35 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %34, i32 0, i32 6
  %36 = load i8, i8* %35, align 1
  %37 = add i8 %36, 1
  store i8 %37, i8* %35, align 1
  %38 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  call void @fio_sub_hash_rehash(%struct.fio_sub_hash_s* %38)
  br label %39

39:                                               ; preds = %33, %25
  br label %40

40:                                               ; preds = %39, %23
  %41 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %42 = load i64, i64* %8, align 8
  %43 = call %struct.fio_sub_hash__map_s_* @fio_sub_hash__find_map_pos_(%struct.fio_sub_hash_s* %41, i64 %42, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8 %3)
  store %struct.fio_sub_hash__map_s_* %43, %struct.fio_sub_hash__map_s_** %11, align 8
  %44 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %45 = icmp ne %struct.fio_sub_hash__map_s_* %44, null
  br i1 %45, label %112, label %46

46:                                               ; preds = %40
  br label %47

47:                                               ; preds = %46
  %48 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 1
  %49 = load %struct.subscription_s*, %struct.subscription_s** %48, align 8
  %50 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %51 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %50, i32 0, i32 3
  %52 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %51, align 8
  %53 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %54 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %53, i32 0, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %52, i64 %55
  %57 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %57, i32 0, i32 1
  store %struct.subscription_s* %49, %struct.subscription_s** %58, align 8
  %59 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %60 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %59, i32 0, i32 3
  %61 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %60, align 8
  %62 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %63 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %62, i32 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %61, i64 %64
  %66 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %65, i32 0, i32 1
  %67 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %66, i32 0, i32 0
  %68 = bitcast %struct.fio_str_s* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 48, i1 false)
  %69 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %12, i32 0, i32 1
  store i8 1, i8* %69, align 4
  %70 = bitcast %struct.fio_str_s* %67 to i8*
  %71 = bitcast %struct.fio_str_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 48, i1 true)
  %72 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %73 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %72, i32 0, i32 3
  %74 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %73, align 8
  %75 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %76 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %74, i64 %77
  %79 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %78, i32 0, i32 1
  %80 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %79, i32 0, i32 0
  %81 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 0
  call void @fio_str_concat(%struct.fio_str_info_s* sret %13, %struct.fio_str_s* %80, %struct.fio_str_s* %81)
  br label %82

82:                                               ; preds = %47
  %83 = load i64, i64* %8, align 8
  %84 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %85 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %84, i32 0, i32 3
  %86 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %85, align 8
  %87 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %88 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %87, i32 0, i32 2
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %86, i64 %89
  %91 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %90, i32 0, i32 0
  store i64 %83, i64* %91, align 8
  %92 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %93 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %92, i32 0, i32 2
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %93, align 8
  %96 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %97 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %96, i32 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  call void @fio_sub_hash_rehash(%struct.fio_sub_hash_s* %100)
  %101 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %102 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %101, i32 0, i32 3
  %103 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %102, align 8
  %104 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %105 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %104, i32 0, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = sub i64 %106, 1
  %108 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %103, i64 %107
  %109 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %108, i32 0, i32 1
  %110 = bitcast %struct.fio_sub_hash_couplet_s* %0 to i8*
  %111 = bitcast %struct.fio_sub_hash_couplet_s* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 56, i1 false)
  br label %221

112:                                              ; preds = %40
  %113 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %114 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %113, i32 0, i32 1
  %115 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %114, align 8
  %116 = icmp ne %struct.fio_sub_hash__ordered_s_* %115, null
  br i1 %116, label %117, label %164

117:                                              ; preds = %112
  %118 = load i32, i32* %9, align 4
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %133, label %120

120:                                              ; preds = %117
  br label %121

121:                                              ; preds = %120
  %122 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 0
  %123 = call i32 @fio_str_free(%struct.fio_str_s* %122)
  %124 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 1
  %125 = load %struct.subscription_s*, %struct.subscription_s** %124, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %125)
  br label %126

126:                                              ; preds = %121
  %127 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %128 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %127, i32 0, i32 1
  %129 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %128, align 8
  %130 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %129, i32 0, i32 1
  %131 = bitcast %struct.fio_sub_hash_couplet_s* %0 to i8*
  %132 = bitcast %struct.fio_sub_hash_couplet_s* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 56, i1 false)
  br label %221

133:                                              ; preds = %117
  %134 = load %struct.subscription_s**, %struct.subscription_s*** %10, align 8
  %135 = icmp ne %struct.subscription_s** %134, null
  br i1 %135, label %136, label %144

136:                                              ; preds = %133
  %137 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %138 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %137, i32 0, i32 1
  %139 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %138, align 8
  %140 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %139, i32 0, i32 1
  %141 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %140, i32 0, i32 1
  %142 = load %struct.subscription_s*, %struct.subscription_s** %141, align 8
  %143 = load %struct.subscription_s**, %struct.subscription_s*** %10, align 8
  store %struct.subscription_s* %142, %struct.subscription_s** %143, align 8
  br label %144

144:                                              ; preds = %136, %133
  %145 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %146 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %145, i32 0, i32 1
  %147 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %146, align 8
  %148 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %147, i32 0, i32 1
  %149 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %148, i32 0, i32 1
  %150 = load %struct.subscription_s*, %struct.subscription_s** %149, align 8
  call void @fio_unsubscribe(%struct.subscription_s* %150)
  %151 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 1
  %152 = load %struct.subscription_s*, %struct.subscription_s** %151, align 8
  %153 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %154 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %153, i32 0, i32 1
  %155 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %154, align 8
  %156 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %155, i32 0, i32 1
  %157 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %156, i32 0, i32 1
  store %struct.subscription_s* %152, %struct.subscription_s** %157, align 8
  %158 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %159 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %158, i32 0, i32 1
  %160 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %159, align 8
  %161 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %160, i32 0, i32 1
  %162 = bitcast %struct.fio_sub_hash_couplet_s* %0 to i8*
  %163 = bitcast %struct.fio_sub_hash_couplet_s* %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 8 %163, i64 56, i1 false)
  br label %221

164:                                              ; preds = %112
  %165 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %166 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %165, i32 0, i32 3
  %167 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %166, align 8
  %168 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %169 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %168, i32 0, i32 2
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %167, i64 %170
  %172 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %173 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %172, i32 0, i32 1
  store %struct.fio_sub_hash__ordered_s_* %171, %struct.fio_sub_hash__ordered_s_** %173, align 8
  %174 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %175 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %174, i32 0, i32 2
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 1
  store i64 %177, i64* %175, align 8
  %178 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %7, align 8
  %179 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %178, i32 0, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = add i64 %180, 1
  store i64 %181, i64* %179, align 8
  br label %182

182:                                              ; preds = %164
  %183 = load i64, i64* %8, align 8
  %184 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %185 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %184, i32 0, i32 0
  store i64 %183, i64* %185, align 8
  %186 = load i64, i64* %8, align 8
  %187 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %188 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %187, i32 0, i32 1
  %189 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %188, align 8
  %190 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %189, i32 0, i32 0
  store i64 %186, i64* %190, align 8
  br label %191

191:                                              ; preds = %182
  %192 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 1
  %193 = load %struct.subscription_s*, %struct.subscription_s** %192, align 8
  %194 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %195 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %194, i32 0, i32 1
  %196 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %195, align 8
  %197 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %196, i32 0, i32 1
  %198 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %197, i32 0, i32 1
  store %struct.subscription_s* %193, %struct.subscription_s** %198, align 8
  %199 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %200 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %199, i32 0, i32 1
  %201 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %200, align 8
  %202 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %201, i32 0, i32 1
  %203 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %202, i32 0, i32 0
  %204 = bitcast %struct.fio_str_s* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %204, i8 0, i64 48, i1 false)
  %205 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %14, i32 0, i32 1
  store i8 1, i8* %205, align 4
  %206 = bitcast %struct.fio_str_s* %203 to i8*
  %207 = bitcast %struct.fio_str_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 %207, i64 48, i1 true)
  %208 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %209 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %208, i32 0, i32 1
  %210 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %209, align 8
  %211 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %210, i32 0, i32 1
  %212 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %211, i32 0, i32 0
  %213 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %3, i32 0, i32 0
  call void @fio_str_concat(%struct.fio_str_info_s* sret %15, %struct.fio_str_s* %212, %struct.fio_str_s* %213)
  br label %214

214:                                              ; preds = %191
  %215 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %216 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %215, i32 0, i32 1
  %217 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %216, align 8
  %218 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %217, i32 0, i32 1
  %219 = bitcast %struct.fio_sub_hash_couplet_s* %0 to i8*
  %220 = bitcast %struct.fio_sub_hash_couplet_s* %218 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %219, i8* align 8 %220, i64 56, i1 false)
  br label %221

221:                                              ; preds = %214, %144, %126, %82
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_sub_hash_is_fragmented(%struct.fio_sub_hash_s*) #0 {
  %2 = alloca %struct.fio_sub_hash_s*, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %2, align 8
  %3 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %3, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = icmp ugt i64 %9, %13
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash_rehash(%struct.fio_sub_hash_s*) #0 {
  %2 = alloca %struct.fio_sub_hash_s*, align 8
  %3 = alloca i8, align 1
  %4 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %5 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %6 = alloca %struct.fio_sub_hash__map_s_*, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %2, align 8
  %7 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  call void @fio_sub_hash__compact_ordered_array_(%struct.fio_sub_hash_s* %7)
  %8 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %8, i32 0, i32 5
  store i8 0, i8* %9, align 8
  store i8 0, i8* %3, align 1
  br label %10

10:                                               ; preds = %66, %1
  %11 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %12 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %11, i32 0, i32 6
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %40

16:                                               ; preds = %10
  %17 = load i8, i8* %3, align 1
  %18 = add i8 %17, 1
  store i8 %18, i8* %3, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp sge i32 %19, 3
  br i1 %20, label %21, label %40

21:                                               ; preds = %16
  %22 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %23 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %22, i32 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %21
  br label %28

28:                                               ; preds = %27
  %29 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %30 = icmp sle i32 1, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %28
  %32 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %33 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %32, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %36 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.45, i64 0, i64 0), i64 %34, i64 %37)
  br label %38

38:                                               ; preds = %31, %28
  br label %39

39:                                               ; preds = %38
  call void @exit(i32 -1) #11
  unreachable

40:                                               ; preds = %21, %16, %10
  %41 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  call void @fio_sub_hash__reallocate_set_mem_(%struct.fio_sub_hash_s* %41)
  %42 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %43 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %42, i32 0, i32 3
  %44 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %43, align 8
  %45 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %46 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %45, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %44, i64 %47
  store %struct.fio_sub_hash__ordered_s_* %48, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %49 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %50 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %49, i32 0, i32 3
  %51 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %50, align 8
  store %struct.fio_sub_hash__ordered_s_* %51, %struct.fio_sub_hash__ordered_s_** %5, align 8
  br label %52

52:                                               ; preds = %80, %40
  %53 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %54 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %55 = icmp ult %struct.fio_sub_hash__ordered_s_* %53, %54
  br i1 %55, label %56, label %83

56:                                               ; preds = %52
  %57 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %58 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %59 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %62 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %61, i32 0, i32 1
  %63 = call %struct.fio_sub_hash__map_s_* @fio_sub_hash__find_map_pos_(%struct.fio_sub_hash_s* %57, i64 %60, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8 %62)
  store %struct.fio_sub_hash__map_s_* %63, %struct.fio_sub_hash__map_s_** %6, align 8
  %64 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %6, align 8
  %65 = icmp ne %struct.fio_sub_hash__map_s_* %64, null
  br i1 %65, label %71, label %66

66:                                               ; preds = %56
  %67 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %68 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %67, i32 0, i32 6
  %69 = load i8, i8* %68, align 1
  %70 = add i8 %69, 1
  store i8 %70, i8* %68, align 1
  br label %10

71:                                               ; preds = %56
  %72 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %73 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %6, align 8
  %74 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %73, i32 0, i32 1
  store %struct.fio_sub_hash__ordered_s_* %72, %struct.fio_sub_hash__ordered_s_** %74, align 8
  %75 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %76 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %75, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %6, align 8
  %79 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %78, i32 0, i32 0
  store i64 %77, i64* %79, align 8
  br label %80

80:                                               ; preds = %71
  %81 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %82 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %81, i32 1
  store %struct.fio_sub_hash__ordered_s_* %82, %struct.fio_sub_hash__ordered_s_** %5, align 8
  br label %52

83:                                               ; preds = %52
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_sub_hash__map_s_* @fio_sub_hash__find_map_pos_(%struct.fio_sub_hash_s*, i64, %struct.fio_sub_hash_couplet_s* byval(%struct.fio_sub_hash_couplet_s) align 8) #0 {
  %4 = alloca %struct.fio_sub_hash__map_s_*, align 8
  %5 = alloca %struct.fio_sub_hash_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.fio_sub_hash__map_s_*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %5, align 8
  store i64 %1, i64* %6, align 8
  %14 = load i64, i64* %6, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %3
  store i64 -1, i64* %6, align 8
  br label %17

17:                                               ; preds = %16, %3
  %18 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %19 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %18, i32 0, i32 4
  %20 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %19, align 8
  %21 = icmp ne %struct.fio_sub_hash__map_s_* %20, null
  br i1 %21, label %22, label %201

22:                                               ; preds = %17
  %23 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %24 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %23, i32 0, i32 5
  %25 = load i8, i8* %24, align 8
  %26 = zext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %38

28:                                               ; preds = %22
  %29 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %30 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %29, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %33 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp ne i64 %31, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %28
  %37 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  call void @fio_sub_hash_rehash(%struct.fio_sub_hash_s* %37)
  br label %38

38:                                               ; preds = %36, %28, %22
  store i64 0, i64* %7, align 8
  %39 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %40 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %39, i32 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = zext i32 %42 to i64
  %44 = shl i64 1, %43
  %45 = sub i64 %44, 1
  store i64 %45, i64* %9, align 8
  %46 = load i64, i64* %6, align 8
  %47 = lshr i64 %46, 0
  %48 = load i64, i64* %6, align 8
  %49 = shl i64 %48, 0
  %50 = or i64 %47, %49
  %51 = load i64, i64* %6, align 8
  %52 = call i64 @fio_ct_if2(i64 0, i64 %51, i64 0)
  %53 = xor i64 %50, %52
  store i64 %53, i64* %11, align 8
  %54 = load i64, i64* %6, align 8
  %55 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %56 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %55, i32 0, i32 6
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = and i64 %58, 63
  %60 = lshr i64 %54, %59
  %61 = load i64, i64* %6, align 8
  %62 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %63 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %62, i32 0, i32 6
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = sub nsw i32 0, %65
  %67 = sext i32 %66 to i64
  %68 = and i64 %67, 63
  %69 = shl i64 %61, %68
  %70 = or i64 %60, %69
  %71 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %72 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %71, i32 0, i32 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = load i64, i64* %6, align 8
  %76 = call i64 @fio_ct_if2(i64 %74, i64 %75, i64 0)
  %77 = xor i64 %70, %76
  store i64 %77, i64* %12, align 8
  %78 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %79 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %78, i32 0, i32 4
  %80 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %79, align 8
  %81 = load i64, i64* %12, align 8
  %82 = load i64, i64* %9, align 8
  %83 = and i64 %81, %82
  %84 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %80, i64 %83
  store %struct.fio_sub_hash__map_s_* %84, %struct.fio_sub_hash__map_s_** %8, align 8
  %85 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %86 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %85, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 0, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %38
  %90 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  store %struct.fio_sub_hash__map_s_* %90, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

91:                                               ; preds = %38
  %92 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %93 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %92, i32 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = load i64, i64* %11, align 8
  %96 = icmp eq i64 %94, %95
  br i1 %96, label %97, label %118

97:                                               ; preds = %91
  %98 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %99 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %98, i32 0, i32 1
  %100 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %99, align 8
  %101 = icmp ne %struct.fio_sub_hash__ordered_s_* %100, null
  br i1 %101, label %102, label %111

102:                                              ; preds = %97
  %103 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %104 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %103, i32 0, i32 1
  %105 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %104, align 8
  %106 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %105, i32 0, i32 1
  %107 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %106, i32 0, i32 0
  %108 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %2, i32 0, i32 0
  %109 = call i32 @fio_str_iseq(%struct.fio_str_s* %107, %struct.fio_str_s* %108)
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %102, %97
  %112 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  store %struct.fio_sub_hash__map_s_* %112, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

113:                                              ; preds = %102
  %114 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %115 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %114, i32 0, i32 5
  store i8 1, i8* %115, align 8
  %116 = load i64, i64* %7, align 8
  %117 = add i64 %116, 1
  store i64 %117, i64* %7, align 8
  br label %118

118:                                              ; preds = %113, %91
  store i64 0, i64* %10, align 8
  %119 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %120 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %119, i32 0, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = icmp ugt i64 %121, 384
  br i1 %122, label %123, label %124

123:                                              ; preds = %118
  br label %129

124:                                              ; preds = %118
  %125 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %126 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %125, i32 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = lshr i64 %127, 2
  br label %129

129:                                              ; preds = %124, %123
  %130 = phi i64 [ 96, %123 ], [ %128, %124 ]
  %131 = mul i64 11, %130
  store i64 %131, i64* %13, align 8
  br label %132

132:                                              ; preds = %199, %129
  %133 = load i64, i64* %10, align 8
  %134 = load i64, i64* %13, align 8
  %135 = icmp ult i64 %133, %134
  br i1 %135, label %136, label %200

136:                                              ; preds = %132
  %137 = load i64, i64* %10, align 8
  %138 = add i64 %137, 11
  store i64 %138, i64* %10, align 8
  %139 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %140 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %139, i32 0, i32 4
  %141 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %140, align 8
  %142 = load i64, i64* %12, align 8
  %143 = load i64, i64* %10, align 8
  %144 = add i64 %142, %143
  %145 = load i64, i64* %9, align 8
  %146 = and i64 %144, %145
  %147 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %141, i64 %146
  store %struct.fio_sub_hash__map_s_* %147, %struct.fio_sub_hash__map_s_** %8, align 8
  %148 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %149 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %148, i32 0, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp eq i64 0, %150
  br i1 %151, label %152, label %154

152:                                              ; preds = %136
  %153 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  store %struct.fio_sub_hash__map_s_* %153, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

154:                                              ; preds = %136
  %155 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %156 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %155, i32 0, i32 0
  %157 = load i64, i64* %156, align 8
  %158 = load i64, i64* %11, align 8
  %159 = icmp eq i64 %157, %158
  br i1 %159, label %160, label %199

160:                                              ; preds = %154
  %161 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %162 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %161, i32 0, i32 1
  %163 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %162, align 8
  %164 = icmp ne %struct.fio_sub_hash__ordered_s_* %163, null
  br i1 %164, label %165, label %174

165:                                              ; preds = %160
  %166 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  %167 = getelementptr inbounds %struct.fio_sub_hash__map_s_, %struct.fio_sub_hash__map_s_* %166, i32 0, i32 1
  %168 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %167, align 8
  %169 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %168, i32 0, i32 1
  %170 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %169, i32 0, i32 0
  %171 = getelementptr inbounds %struct.fio_sub_hash_couplet_s, %struct.fio_sub_hash_couplet_s* %2, i32 0, i32 0
  %172 = call i32 @fio_str_iseq(%struct.fio_str_s* %170, %struct.fio_str_s* %171)
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %165, %160
  %175 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  store %struct.fio_sub_hash__map_s_* %175, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

176:                                              ; preds = %165
  %177 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %178 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %177, i32 0, i32 5
  store i8 1, i8* %178, align 8
  %179 = load i64, i64* %7, align 8
  %180 = add i64 %179, 1
  store i64 %180, i64* %7, align 8
  %181 = icmp uge i64 %180, 96
  br i1 %181, label %182, label %191

182:                                              ; preds = %176
  br label %183

183:                                              ; preds = %182
  %184 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %185 = icmp sle i32 3, %184
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.47, i64 0, i64 0))
  br label %187

187:                                              ; preds = %186, %183
  br label %188

188:                                              ; preds = %187
  %189 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %190 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %189, i32 0, i32 7
  store i8 1, i8* %190, align 2
  br label %191

191:                                              ; preds = %188, %176
  %192 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %5, align 8
  %193 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %192, i32 0, i32 7
  %194 = load i8, i8* %193, align 2
  %195 = icmp ne i8 %194, 0
  br i1 %195, label %196, label %198

196:                                              ; preds = %191
  %197 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %8, align 8
  store %struct.fio_sub_hash__map_s_* %197, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

198:                                              ; preds = %191
  br label %199

199:                                              ; preds = %198, %154
  br label %132

200:                                              ; preds = %132
  br label %201

201:                                              ; preds = %200, %17
  store %struct.fio_sub_hash__map_s_* null, %struct.fio_sub_hash__map_s_** %4, align 8
  br label %202

202:                                              ; preds = %201, %196, %174, %152, %111, %89
  %203 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %4, align 8
  ret %struct.fio_sub_hash__map_s_* %203
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_str_concat(%struct.fio_str_info_s* noalias sret, %struct.fio_str_s*, %struct.fio_str_s*) #0 {
  %4 = alloca %struct.fio_str_s*, align 8
  %5 = alloca %struct.fio_str_s*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  store %struct.fio_str_s* %1, %struct.fio_str_s** %4, align 8
  store %struct.fio_str_s* %2, %struct.fio_str_s** %5, align 8
  %8 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %9 = icmp ne %struct.fio_str_s* %8, null
  br i1 %9, label %10, label %19

10:                                               ; preds = %3
  %11 = load %struct.fio_str_s*, %struct.fio_str_s** %5, align 8
  %12 = icmp ne %struct.fio_str_s* %11, null
  br i1 %12, label %13, label %19

13:                                               ; preds = %10
  %14 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %15 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %14, i32 0, i32 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %13, %10, %3
  %20 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %0, %struct.fio_str_s* %20)
  br label %50

21:                                               ; preds = %13
  %22 = load %struct.fio_str_s*, %struct.fio_str_s** %5, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %6, %struct.fio_str_s* %22)
  %23 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %0, %struct.fio_str_s* %27)
  br label %50

28:                                               ; preds = %21
  %29 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %30 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %33 = call i64 @fio_str_len(%struct.fio_str_s* %32)
  %34 = add i64 %31, %33
  call void @fio_str_resize(%struct.fio_str_info_s* sret %7, %struct.fio_str_s* %29, i64 %34)
  %35 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 2
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %36, i64 %38
  %40 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 0, %41
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %45, i64 %47, i1 false)
  %48 = bitcast %struct.fio_str_info_s* %0 to i8*
  %49 = bitcast %struct.fio_str_info_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false)
  br label %50

50:                                               ; preds = %28, %26, %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash__compact_ordered_array_(%struct.fio_sub_hash_s*) #0 {
  %2 = alloca %struct.fio_sub_hash_s*, align 8
  %3 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %4 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  %5 = alloca %struct.fio_sub_hash__ordered_s_*, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %2, align 8
  %6 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  br label %66

14:                                               ; preds = %1
  %15 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %16 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %15, i32 0, i32 3
  %17 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %16, align 8
  store %struct.fio_sub_hash__ordered_s_* %17, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %18 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %18, i32 0, i32 3
  %20 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %19, align 8
  store %struct.fio_sub_hash__ordered_s_* %20, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %21 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %21, i32 0, i32 3
  %23 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %22, align 8
  %24 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %24, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %23, i64 %26
  store %struct.fio_sub_hash__ordered_s_* %27, %struct.fio_sub_hash__ordered_s_** %5, align 8
  br label %28

28:                                               ; preds = %50, %14
  %29 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %30 = icmp ne %struct.fio_sub_hash__ordered_s_* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %33 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %5, align 8
  %34 = icmp ult %struct.fio_sub_hash__ordered_s_* %32, %33
  br label %35

35:                                               ; preds = %31, %28
  %36 = phi i1 [ false, %28 ], [ %34, %31 ]
  br i1 %36, label %37, label %53

37:                                               ; preds = %35
  %38 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %39 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %50

43:                                               ; preds = %37
  %44 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %45 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %46 = bitcast %struct.fio_sub_hash__ordered_s_* %44 to i8*
  %47 = bitcast %struct.fio_sub_hash__ordered_s_* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 64, i1 true)
  %48 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %49 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %48, i32 1
  store %struct.fio_sub_hash__ordered_s_* %49, %struct.fio_sub_hash__ordered_s_** %4, align 8
  br label %50

50:                                               ; preds = %43, %42
  %51 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %3, align 8
  %52 = getelementptr inbounds %struct.fio_sub_hash__ordered_s_, %struct.fio_sub_hash__ordered_s_* %51, i32 1
  store %struct.fio_sub_hash__ordered_s_* %52, %struct.fio_sub_hash__ordered_s_** %3, align 8
  br label %28

53:                                               ; preds = %35
  %54 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %4, align 8
  %55 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %56 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %55, i32 0, i32 3
  %57 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %56, align 8
  %58 = ptrtoint %struct.fio_sub_hash__ordered_s_* %54 to i64
  %59 = ptrtoint %struct.fio_sub_hash__ordered_s_* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sdiv exact i64 %60, 64
  %62 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %63 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %62, i32 0, i32 0
  store i64 %61, i64* %63, align 8
  %64 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %65 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %64, i32 0, i32 2
  store i64 %61, i64* %65, align 8
  br label %66

66:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_sub_hash__reallocate_set_mem_(%struct.fio_sub_hash_s*) #0 {
  %2 = alloca %struct.fio_sub_hash_s*, align 8
  %3 = alloca i64, align 8
  store %struct.fio_sub_hash_s* %0, %struct.fio_sub_hash_s** %2, align 8
  %4 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %5 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %4, i32 0, i32 6
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = zext i32 %7 to i64
  %9 = shl i64 1, %8
  store i64 %9, i64* %3, align 8
  %10 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %11 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %10, i32 0, i32 4
  %12 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %11, align 8
  %13 = bitcast %struct.fio_sub_hash__map_s_* %12 to i8*
  call void @fio_free(i8* %13)
  %14 = load i64, i64* %3, align 8
  %15 = call noalias i8* @fio_calloc(i64 16, i64 %14)
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 15
  %18 = icmp eq i64 %17, 0
  call void @llvm.assume(i1 %18)
  %19 = bitcast i8* %15 to %struct.fio_sub_hash__map_s_*
  %20 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %21 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %20, i32 0, i32 4
  store %struct.fio_sub_hash__map_s_* %19, %struct.fio_sub_hash__map_s_** %21, align 8
  %22 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %23 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %22, i32 0, i32 3
  %24 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %23, align 8
  %25 = bitcast %struct.fio_sub_hash__ordered_s_* %24 to i8*
  %26 = load i64, i64* %3, align 8
  %27 = mul i64 %26, 64
  %28 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %29 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %28, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = mul i64 %30, 64
  %32 = call i8* @fio_realloc2(i8* %25, i64 %27, i64 %31)
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 15
  %35 = icmp eq i64 %34, 0
  call void @llvm.assume(i1 %35)
  %36 = bitcast i8* %32 to %struct.fio_sub_hash__ordered_s_*
  %37 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %38 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %37, i32 0, i32 3
  store %struct.fio_sub_hash__ordered_s_* %36, %struct.fio_sub_hash__ordered_s_** %38, align 8
  %39 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %40 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %39, i32 0, i32 4
  %41 = load %struct.fio_sub_hash__map_s_*, %struct.fio_sub_hash__map_s_** %40, align 8
  %42 = icmp ne %struct.fio_sub_hash__map_s_* %41, null
  br i1 %42, label %43, label %48

43:                                               ; preds = %1
  %44 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %45 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %44, i32 0, i32 3
  %46 = load %struct.fio_sub_hash__ordered_s_*, %struct.fio_sub_hash__ordered_s_** %45, align 8
  %47 = icmp ne %struct.fio_sub_hash__ordered_s_* %46, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %43, %1
  call void @perror(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i64 0, i64 0))
  %49 = call i32* @__errno_location() #9
  %50 = load i32, i32* %49, align 4
  call void @exit(i32 %50) #11
  unreachable

51:                                               ; preds = %43
  %52 = load i64, i64* %3, align 8
  %53 = load %struct.fio_sub_hash_s*, %struct.fio_sub_hash_s** %2, align 8
  %54 = getelementptr inbounds %struct.fio_sub_hash_s, %struct.fio_sub_hash_s* %53, i32 0, i32 1
  store i64 %52, i64* %54, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fio_str_iseq(%struct.fio_str_s*, %struct.fio_str_s*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.fio_str_s*, align 8
  %5 = alloca %struct.fio_str_s*, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  store %struct.fio_str_s* %0, %struct.fio_str_s** %4, align 8
  store %struct.fio_str_s* %1, %struct.fio_str_s** %5, align 8
  %8 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %9 = load %struct.fio_str_s*, %struct.fio_str_s** %5, align 8
  %10 = icmp eq %struct.fio_str_s* %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i32 1, i32* %3, align 4
  br label %40

12:                                               ; preds = %2
  %13 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %14 = icmp ne %struct.fio_str_s* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load %struct.fio_str_s*, %struct.fio_str_s** %5, align 8
  %17 = icmp ne %struct.fio_str_s* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %15, %12
  store i32 0, i32* %3, align 4
  br label %40

19:                                               ; preds = %15
  %20 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %6, %struct.fio_str_s* %20)
  %21 = load %struct.fio_str_s*, %struct.fio_str_s** %5, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %7, %struct.fio_str_s* %21)
  %22 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %7, i32 0, i32 2
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %6, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = call i32 @memcmp(i8* %29, i8* %31, i64 %33) #10
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  br label %37

37:                                               ; preds = %27, %19
  %38 = phi i1 [ false, %19 ], [ %36, %27 ]
  %39 = zext i1 %38 to i32
  store i32 %39, i32* %3, align 4
  br label %40

40:                                               ; preds = %37, %18, %11
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_str_info(%struct.fio_str_info_s* noalias sret, %struct.fio_str_s*) #0 {
  %3 = alloca %struct.fio_str_s*, align 8
  store %struct.fio_str_s* %1, %struct.fio_str_s** %3, align 8
  %4 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %5 = icmp ne %struct.fio_str_s* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  store i8* null, i8** %9, align 8
  br label %64

10:                                               ; preds = %2
  %11 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %12 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 1
  %13 = load i8, i8* %12, align 4
  %14 = zext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %18 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %17, i32 0, i32 7
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %41, label %21

21:                                               ; preds = %16, %10
  %22 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %23 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %24 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %23, i32 0, i32 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i64 0, i64 sub (i64 sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64)), i64 1)
  store i64 %29, i64* %22, align 8
  %30 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %31 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %32 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %31, i32 0, i32 1
  %33 = load i8, i8* %32, align 4
  %34 = zext i8 %33 to i32
  %35 = ashr i32 %34, 1
  %36 = sext i32 %35 to i64
  store i64 %36, i64* %30, align 8
  %37 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %38 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %39 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %38, i32 0, i32 2
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8* %40, i8** %37, align 8
  br label %63

41:                                               ; preds = %16
  %42 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %43 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %44 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %43, i32 0, i32 2
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  br label %53

49:                                               ; preds = %41
  %50 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %51 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %50, i32 0, i32 4
  %52 = load i64, i64* %51, align 8
  br label %53

53:                                               ; preds = %49, %48
  %54 = phi i64 [ 0, %48 ], [ %52, %49 ]
  store i64 %54, i64* %42, align 8
  %55 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %56 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %57 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %56, i32 0, i32 5
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %55, align 8
  %59 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %60 = load %struct.fio_str_s*, %struct.fio_str_s** %3, align 8
  %61 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %60, i32 0, i32 7
  %62 = load i8*, i8** %61, align 8
  store i8* %62, i8** %59, align 8
  br label %63

63:                                               ; preds = %53, %21
  br label %64

64:                                               ; preds = %63, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_str_resize(%struct.fio_str_info_s* noalias sret, %struct.fio_str_s*, i64) #0 {
  %4 = alloca %struct.fio_str_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fio_str_info_s, align 8
  %7 = alloca %struct.fio_str_info_s, align 8
  store %struct.fio_str_s* %1, %struct.fio_str_s** %4, align 8
  store i64 %2, i64* %5, align 8
  %8 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %9 = icmp ne %struct.fio_str_s* %8, null
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %12 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %11, i32 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %10, %3
  %17 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %0, %struct.fio_str_s* %17)
  br label %99

18:                                               ; preds = %10
  %19 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %20 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %19, i32 0, i32 1
  %21 = load i8, i8* %20, align 4
  %22 = zext i8 %21 to i32
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %18
  %25 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %26 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %25, i32 0, i32 7
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %57, label %29

29:                                               ; preds = %24, %18
  %30 = load i64, i64* %5, align 8
  %31 = icmp ult i64 %30, sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64))
  br i1 %31, label %32, label %52

32:                                               ; preds = %29
  %33 = load i64, i64* %5, align 8
  %34 = shl i64 %33, 1
  %35 = or i64 %34, 1
  %36 = and i64 %35, 255
  %37 = trunc i64 %36 to i8
  %38 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %39 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %38, i32 0, i32 1
  store i8 %37, i8* %39, align 4
  %40 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %41 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %40, i32 0, i32 2
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  %43 = load i64, i64* %5, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 sub (i64 sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64)), i64 1), i64* %45, align 8
  %46 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %47 = load i64, i64* %5, align 8
  store i64 %47, i64* %46, align 8
  %48 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %49 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %50 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %49, i32 0, i32 2
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %51, i8** %48, align 8
  br label %99

52:                                               ; preds = %29
  %53 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %54 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %53, i32 0, i32 1
  store i8 trunc (i64 and (i64 or (i64 shl (i64 sub (i64 sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64)), i64 1), i64 1), i64 1), i64 255) to i8), i8* %54, align 4
  %55 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %56 = load i64, i64* %5, align 8
  call void @fio_str_capa_assert(%struct.fio_str_info_s* sret %6, %struct.fio_str_s* %55, i64 %56)
  br label %80

57:                                               ; preds = %24
  %58 = load i64, i64* %5, align 8
  %59 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %60 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %59, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = icmp uge i64 %58, %61
  br i1 %62, label %63, label %79

63:                                               ; preds = %57
  %64 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %65 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %64, i32 0, i32 6
  %66 = load void (i8*)*, void (i8*)** %65, align 8
  %67 = ptrtoint void (i8*)* %66 to i64
  %68 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %69 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %68, i32 0, i32 4
  %70 = load i64, i64* %69, align 8
  %71 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %72 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %71, i32 0, i32 5
  %73 = load i64, i64* %72, align 8
  %74 = call i64 @fio_ct_if2(i64 %67, i64 %70, i64 %73)
  %75 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %76 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %75, i32 0, i32 5
  store i64 %74, i64* %76, align 8
  %77 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %78 = load i64, i64* %5, align 8
  call void @fio_str_capa_assert(%struct.fio_str_info_s* sret %7, %struct.fio_str_s* %77, i64 %78)
  br label %79

79:                                               ; preds = %63, %57
  br label %80

80:                                               ; preds = %79, %52
  %81 = load i64, i64* %5, align 8
  %82 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %83 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %82, i32 0, i32 5
  store i64 %81, i64* %83, align 8
  %84 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %85 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %84, i32 0, i32 7
  %86 = load i8*, i8** %85, align 8
  %87 = load i64, i64* %5, align 8
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8 0, i8* %88, align 1
  %89 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %90 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %91 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %90, i32 0, i32 4
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %89, align 8
  %93 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %94 = load i64, i64* %5, align 8
  store i64 %94, i64* %93, align 8
  %95 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %96 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %97 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %96, i32 0, i32 7
  %98 = load i8*, i8** %97, align 8
  store i8* %98, i8** %95, align 8
  br label %99

99:                                               ; preds = %80, %32, %16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_str_len(%struct.fio_str_s*) #0 {
  %2 = alloca %struct.fio_str_s*, align 8
  store %struct.fio_str_s* %0, %struct.fio_str_s** %2, align 8
  %3 = load %struct.fio_str_s*, %struct.fio_str_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %3, i32 0, i32 1
  %5 = load i8, i8* %4, align 4
  %6 = zext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = load %struct.fio_str_s*, %struct.fio_str_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %9, i32 0, i32 7
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %20, label %13

13:                                               ; preds = %8, %1
  %14 = load %struct.fio_str_s*, %struct.fio_str_s** %2, align 8
  %15 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %14, i32 0, i32 1
  %16 = load i8, i8* %15, align 4
  %17 = zext i8 %16 to i32
  %18 = ashr i32 %17, 1
  %19 = sext i32 %18 to i64
  br label %24

20:                                               ; preds = %8
  %21 = load %struct.fio_str_s*, %struct.fio_str_s** %2, align 8
  %22 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %21, i32 0, i32 5
  %23 = load i64, i64* %22, align 8
  br label %24

24:                                               ; preds = %20, %13
  %25 = phi i64 [ %19, %13 ], [ %23, %20 ]
  ret i64 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_str_capa_assert(%struct.fio_str_info_s* noalias sret, %struct.fio_str_s*, i64) #0 {
  %4 = alloca %struct.fio_str_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.fio_str_s, align 8
  store %struct.fio_str_s* %1, %struct.fio_str_s** %4, align 8
  store i64 %2, i64* %5, align 8
  %9 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %10 = icmp ne %struct.fio_str_s* %9, null
  br i1 %10, label %11, label %17

11:                                               ; preds = %3
  %12 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %13 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %12, i32 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %11, %3
  %18 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  call void @fio_str_info(%struct.fio_str_info_s* sret %0, %struct.fio_str_s* %18)
  br label %236

19:                                               ; preds = %11
  %20 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %21 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %20, i32 0, i32 1
  %22 = load i8, i8* %21, align 4
  %23 = zext i8 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %19
  %26 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %27 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %26, i32 0, i32 7
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %25, %19
  %31 = load i64, i64* %5, align 8
  %32 = icmp ult i64 %31, sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64))
  br i1 %32, label %33, label %46

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  store i64 sub (i64 sub (i64 48, i64 ptrtoint (i8* getelementptr inbounds (i8, i8* getelementptr inbounds (%struct.fio_str_s, %struct.fio_str_s* null, i32 0, i32 2), i64 1) to i64)), i64 1), i64* %34, align 8
  %35 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %36 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %37 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %36, i32 0, i32 1
  %38 = load i8, i8* %37, align 4
  %39 = zext i8 %38 to i32
  %40 = ashr i32 %39, 1
  %41 = sext i32 %40 to i64
  store i64 %41, i64* %35, align 8
  %42 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %43 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %44 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %43, i32 0, i32 2
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %45, i8** %42, align 8
  br label %236

46:                                               ; preds = %30
  br label %167

47:                                               ; preds = %25
  %48 = load i64, i64* %5, align 8
  %49 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %50 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %49, i32 0, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %48, %51
  br i1 %52, label %53, label %66

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %55 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %56 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %55, i32 0, i32 4
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %54, align 8
  %58 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %59 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %60 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %59, i32 0, i32 5
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %58, align 8
  %62 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %63 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %64 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %63, i32 0, i32 7
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %62, align 8
  br label %236

66:                                               ; preds = %47
  %67 = load i64, i64* %5, align 8
  %68 = add i64 %67, 1
  %69 = or i64 %68, 15
  store i64 %69, i64* %5, align 8
  %70 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %71 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %70, i32 0, i32 6
  %72 = load void (i8*)*, void (i8*)** %71, align 8
  %73 = icmp eq void (i8*)* %72, @fio_free
  br i1 %73, label %74, label %101

74:                                               ; preds = %66
  %75 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %76 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %75, i32 0, i32 7
  %77 = load i8*, i8** %76, align 8
  %78 = load i64, i64* %5, align 8
  %79 = add i64 %78, 1
  %80 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %81 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %80, i32 0, i32 5
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, 1
  %84 = call i8* @fio_realloc2(i8* %77, i64 %79, i64 %83)
  %85 = ptrtoint i8* %84 to i64
  %86 = and i64 %85, 15
  %87 = icmp eq i64 %86, 0
  call void @llvm.assume(i1 %87)
  store i8* %84, i8** %6, align 8
  %88 = load i8*, i8** %6, align 8
  %89 = icmp ne i8* %88, null
  br i1 %89, label %100, label %90

90:                                               ; preds = %74
  br label %91

91:                                               ; preds = %90
  %92 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %93 = icmp sle i32 1, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.81, i64 0, i64 0))
  br label %95

95:                                               ; preds = %94, %91
  br label %96

96:                                               ; preds = %95
  %97 = call i32 @kill(i32 0, i32 2) #1
  %98 = call i32* @__errno_location() #9
  %99 = load i32, i32* %98, align 4
  call void @exit(i32 %99) #11
  unreachable

100:                                              ; preds = %74
  br label %143

101:                                              ; preds = %66
  %102 = load i64, i64* %5, align 8
  %103 = add i64 %102, 1
  %104 = call noalias i8* @fio_malloc(i64 %103)
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 15
  %107 = icmp eq i64 %106, 0
  call void @llvm.assume(i1 %107)
  store i8* %104, i8** %6, align 8
  %108 = load i8*, i8** %6, align 8
  %109 = icmp ne i8* %108, null
  br i1 %109, label %120, label %110

110:                                              ; preds = %101
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %113 = icmp sle i32 1, %112
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.82, i64 0, i64 0))
  br label %115

115:                                              ; preds = %114, %111
  br label %116

116:                                              ; preds = %115
  %117 = call i32 @kill(i32 0, i32 2) #1
  %118 = call i32* @__errno_location() #9
  %119 = load i32, i32* %118, align 4
  call void @exit(i32 %119) #11
  unreachable

120:                                              ; preds = %101
  %121 = load i8*, i8** %6, align 8
  %122 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %123 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %122, i32 0, i32 7
  %124 = load i8*, i8** %123, align 8
  %125 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %126 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %125, i32 0, i32 5
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %124, i64 %128, i1 false)
  %129 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %130 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %129, i32 0, i32 6
  %131 = load void (i8*)*, void (i8*)** %130, align 8
  %132 = icmp ne void (i8*)* %131, null
  br i1 %132, label %133, label %140

133:                                              ; preds = %120
  %134 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %135 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %134, i32 0, i32 6
  %136 = load void (i8*)*, void (i8*)** %135, align 8
  %137 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %138 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %137, i32 0, i32 7
  %139 = load i8*, i8** %138, align 8
  call void %136(i8* %139)
  br label %140

140:                                              ; preds = %133, %120
  %141 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %142 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %141, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %142, align 8
  br label %143

143:                                              ; preds = %140, %100
  %144 = load i64, i64* %5, align 8
  %145 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %146 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %145, i32 0, i32 4
  store i64 %144, i64* %146, align 8
  %147 = load i8*, i8** %6, align 8
  %148 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %149 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %148, i32 0, i32 7
  store i8* %147, i8** %149, align 8
  %150 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %151 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %150, i32 0, i32 7
  %152 = load i8*, i8** %151, align 8
  %153 = load i64, i64* %5, align 8
  %154 = getelementptr inbounds i8, i8* %152, i64 %153
  store i8 0, i8* %154, align 1
  %155 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %156 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %157 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %156, i32 0, i32 4
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %155, align 8
  %159 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %160 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %161 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %160, i32 0, i32 5
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %159, align 8
  %163 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %164 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %165 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %164, i32 0, i32 7
  %166 = load i8*, i8** %165, align 8
  store i8* %166, i8** %163, align 8
  br label %236

167:                                              ; preds = %46
  %168 = load i64, i64* %5, align 8
  %169 = add i64 %168, 1
  %170 = or i64 %169, 15
  store i64 %170, i64* %5, align 8
  %171 = load i64, i64* %5, align 8
  %172 = add i64 %171, 1
  %173 = call noalias i8* @fio_malloc(i64 %172)
  %174 = ptrtoint i8* %173 to i64
  %175 = and i64 %174, 15
  %176 = icmp eq i64 %175, 0
  call void @llvm.assume(i1 %176)
  store i8* %173, i8** %6, align 8
  %177 = load i8*, i8** %6, align 8
  %178 = icmp ne i8* %177, null
  br i1 %178, label %189, label %179

179:                                              ; preds = %167
  br label %180

180:                                              ; preds = %179
  %181 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %182 = icmp sle i32 1, %181
  br i1 %182, label %183, label %184

183:                                              ; preds = %180
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.83, i64 0, i64 0))
  br label %184

184:                                              ; preds = %183, %180
  br label %185

185:                                              ; preds = %184
  %186 = call i32 @kill(i32 0, i32 2) #1
  %187 = call i32* @__errno_location() #9
  %188 = load i32, i32* %187, align 4
  call void @exit(i32 %188) #11
  unreachable

189:                                              ; preds = %167
  %190 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %191 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %190, i32 0, i32 1
  %192 = load i8, i8* %191, align 4
  %193 = zext i8 %192 to i32
  %194 = ashr i32 %193, 1
  %195 = and i32 %194, 255
  %196 = sext i32 %195 to i64
  store i64 %196, i64* %7, align 8
  %197 = load i64, i64* %7, align 8
  %198 = icmp ne i64 %197, 0
  br i1 %198, label %199, label %206

199:                                              ; preds = %189
  %200 = load i8*, i8** %6, align 8
  %201 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %202 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %201, i32 0, i32 2
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  %204 = load i64, i64* %7, align 8
  %205 = add i64 %204, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %203, i64 %205, i1 false)
  br label %209

206:                                              ; preds = %189
  %207 = load i8*, i8** %6, align 8
  %208 = getelementptr inbounds i8, i8* %207, i64 0
  store i8 0, i8* %208, align 1
  br label %209

209:                                              ; preds = %206, %199
  %210 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %211 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 0
  %212 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %213 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %212, i32 0, i32 0
  %214 = load volatile i32, i32* %213, align 8
  store volatile i32 %214, i32* %211, align 8
  %215 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 1
  store i8 0, i8* %215, align 4
  %216 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 2
  store i8 0, i8* %216, align 1
  %217 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 3
  %218 = bitcast [10 x i8]* %217 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %218, i8 0, i64 10, i1 false)
  %219 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 4
  %220 = load i64, i64* %5, align 8
  store i64 %220, i64* %219, align 8
  %221 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 5
  %222 = load i64, i64* %7, align 8
  store i64 %222, i64* %221, align 8
  %223 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 6
  store void (i8*)* @fio_free, void (i8*)** %223, align 8
  %224 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %8, i32 0, i32 7
  %225 = load i8*, i8** %6, align 8
  store i8* %225, i8** %224, align 8
  %226 = bitcast %struct.fio_str_s* %210 to i8*
  %227 = bitcast %struct.fio_str_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 48, i1 true)
  %228 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 0
  %229 = load i64, i64* %5, align 8
  store i64 %229, i64* %228, align 8
  %230 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %231 = load i64, i64* %7, align 8
  store i64 %231, i64* %230, align 8
  %232 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %233 = load %struct.fio_str_s*, %struct.fio_str_s** %4, align 8
  %234 = getelementptr inbounds %struct.fio_str_s, %struct.fio_str_s* %233, i32 0, i32 7
  %235 = load i8*, i8** %234, align 8
  store i8* %235, i8** %232, align 8
  br label %236

236:                                              ; preds = %209, %143, %53, %33, %17
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_on_connect(i64, i8*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %6 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i64, i64* %3, align 8
  store i64 %7, i64* getelementptr inbounds (%struct.cluster_data_s, %struct.cluster_data_s* @cluster_data, i32 0, i32 0), align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 1))
  %8 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %8, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %9

9:                                                ; preds = %30, %2
  %10 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %11 = icmp ne %struct.fio_ch_set__ordered_s_* %10, null
  br i1 %11, label %12, label %18

12:                                               ; preds = %9
  %13 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %14 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 3), align 8
  %15 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 0, i32 2), align 8
  %16 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %14, i64 %15
  %17 = icmp ult %struct.fio_ch_set__ordered_s_* %13, %16
  br label %18

18:                                               ; preds = %12, %9
  %19 = phi i1 [ false, %9 ], [ %17, %12 ]
  br i1 %19, label %20, label %33

20:                                               ; preds = %18
  %21 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %22 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %20
  br label %30

26:                                               ; preds = %20
  %27 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %28 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %27, i32 0, i32 1
  %29 = load %struct.channel_s*, %struct.channel_s** %28, align 8
  call void @fio_cluster_inform_root_about_channel(%struct.channel_s* %29, i32 1)
  br label %30

30:                                               ; preds = %26, %25
  %31 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %5, align 8
  %32 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %31, i32 1
  store %struct.fio_ch_set__ordered_s_* %32, %struct.fio_ch_set__ordered_s_** %5, align 8
  br label %9

33:                                               ; preds = %18
  %34 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1, i32 1))
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  %35 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  store %struct.fio_ch_set__ordered_s_* %35, %struct.fio_ch_set__ordered_s_** %6, align 8
  br label %36

36:                                               ; preds = %57, %33
  %37 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %38 = icmp ne %struct.fio_ch_set__ordered_s_* %37, null
  br i1 %38, label %39, label %45

39:                                               ; preds = %36
  %40 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %41 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 3), align 8
  %42 = load i64, i64* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 0, i32 2), align 8
  %43 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %41, i64 %42
  %44 = icmp ult %struct.fio_ch_set__ordered_s_* %40, %43
  br label %45

45:                                               ; preds = %39, %36
  %46 = phi i1 [ false, %36 ], [ %44, %39 ]
  br i1 %46, label %47, label %60

47:                                               ; preds = %45
  %48 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %49 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %47
  br label %57

53:                                               ; preds = %47
  %54 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %55 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %54, i32 0, i32 1
  %56 = load %struct.channel_s*, %struct.channel_s** %55, align 8
  call void @fio_cluster_inform_root_about_channel(%struct.channel_s* %56, i32 1)
  br label %57

57:                                               ; preds = %53, %52
  %58 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %59 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %58, i32 1
  store %struct.fio_ch_set__ordered_s_* %59, %struct.fio_ch_set__ordered_s_** %6, align 8
  br label %36

60:                                               ; preds = %45
  %61 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 2, i32 1))
  %62 = load i64, i64* %3, align 8
  %63 = load i64, i64* %3, align 8
  %64 = call %struct.fio_protocol_s* @fio_cluster_protocol_alloc(i64 %63, void (%struct.cluster_pr_s*)* @fio_cluster_client_handler, void (i8*, i64)* @fio_cluster_client_sender)
  call void @fio_attach(i64 %62, %struct.fio_protocol_s* %64)
  %65 = load i8*, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_on_fail(i64, i8*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  br label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %7 = icmp sle i32 1, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.85, i64 0, i64 0))
  br label %9

9:                                                ; preds = %8, %5
  br label %10

10:                                               ; preds = %9
  call void @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.86, i64 0, i64 0))
  %11 = call i32 @fio_parent_pid()
  %12 = call i32 @kill(i32 %11, i32 2) #1
  call void @fio_stop()
  %13 = load i8*, i8** %4, align 8
  %14 = load i64, i64* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_cluster_client_handler(%struct.cluster_pr_s*) #0 {
  %2 = alloca %struct.cluster_pr_s*, align 8
  store %struct.cluster_pr_s* %0, %struct.cluster_pr_s** %2, align 8
  %3 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %4 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %3, i32 0, i32 9
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %13 [
    i32 0, label %6
    i32 1, label %6
    i32 8, label %11
    i32 9, label %12
    i32 10, label %12
    i32 2, label %12
    i32 3, label %12
    i32 4, label %12
    i32 5, label %12
    i32 6, label %12
    i32 7, label %12
  ]

6:                                                ; preds = %1, %1
  %7 = load %struct.cluster_pr_s*, %struct.cluster_pr_s** %2, align 8
  %8 = getelementptr inbounds %struct.cluster_pr_s, %struct.cluster_pr_s* %7, i32 0, i32 1
  %9 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %8, align 8
  %10 = call %struct.fio_msg_internal_s* @fio_msg_internal_dup(%struct.fio_msg_internal_s* %9)
  call void @fio_publish2process(%struct.fio_msg_internal_s* %10)
  br label %14

11:                                               ; preds = %1
  call void @fio_stop()
  br label %12

12:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %11
  br label %13

13:                                               ; preds = %1, %12
  br label %14

14:                                               ; preds = %13, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_ch_set_count(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %3 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_ch_set_last(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.channel_s*, align 8
  %3 = alloca %struct.fio_ch_set_s*, align 8
  %4 = alloca %struct.channel_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %3, align 8
  %5 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %3, align 8
  %6 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %5, i32 0, i32 3
  %7 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %6, align 8
  %8 = icmp ne %struct.fio_ch_set__ordered_s_* %7, null
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %3, align 8
  %11 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %9, %1
  %15 = bitcast %struct.channel_s** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 8, i1 false)
  %16 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  store %struct.channel_s* %16, %struct.channel_s** %2, align 8
  br label %28

17:                                               ; preds = %9
  %18 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %3, align 8
  %19 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %19, align 8
  %21 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %3, align 8
  %22 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %21, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, 1
  %25 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %20, i64 %24
  %26 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %25, i32 0, i32 1
  %27 = load %struct.channel_s*, %struct.channel_s** %26, align 8
  store %struct.channel_s* %27, %struct.channel_s** %2, align 8
  br label %28

28:                                               ; preds = %17, %14
  %29 = load %struct.channel_s*, %struct.channel_s** %2, align 8
  ret %struct.channel_s* %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ch_set_pop(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %3 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %3, i32 0, i32 3
  %5 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %6 = icmp ne %struct.fio_ch_set__ordered_s_* %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %9 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %8, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7, %1
  br label %61

13:                                               ; preds = %7
  %14 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %15 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %14, i32 0, i32 3
  %16 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %15, align 8
  %17 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %18 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %17, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, 1
  %21 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %16, i64 %20
  %22 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %21, i32 0, i32 1
  %23 = load %struct.channel_s*, %struct.channel_s** %22, align 8
  call void @fio_channel_free(%struct.channel_s* %23)
  %24 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %24, i32 0, i32 3
  %26 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %25, align 8
  %27 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %28 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %27, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %29, 1
  %31 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %26, i64 %30
  %32 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %31, i32 0, i32 0
  store i64 0, i64* %32, align 8
  %33 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %34 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, -1
  store i64 %36, i64* %34, align 8
  br label %37

37:                                               ; preds = %59, %13
  %38 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %39 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %38, i32 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, -1
  store i64 %41, i64* %39, align 8
  br label %42

42:                                               ; preds = %37
  %43 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %43, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %42
  %48 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %49 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %48, i32 0, i32 3
  %50 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %49, align 8
  %51 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %52 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %51, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %53, 1
  %55 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %50, i64 %54
  %56 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %55, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br label %59

59:                                               ; preds = %47, %42
  %60 = phi i1 [ false, %42 ], [ %58, %47 ]
  br i1 %60, label %37, label %61

61:                                               ; preds = %12, %59
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_ch_set_free(%struct.fio_ch_set_s*) #0 {
  %2 = alloca %struct.fio_ch_set_s*, align 8
  %3 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_ch_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_ch_set_s, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %2, align 8
  %6 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %6, i32 0, i32 3
  %8 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %7, align 8
  %9 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %8, i64 %11
  store %struct.fio_ch_set__ordered_s_* %12, %struct.fio_ch_set__ordered_s_** %3, align 8
  %13 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %13, i32 0, i32 3
  %15 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %14, align 8
  %16 = icmp ne %struct.fio_ch_set__ordered_s_* %15, null
  br i1 %16, label %17, label %45

17:                                               ; preds = %1
  %18 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %19, align 8
  %21 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %22 = icmp ne %struct.fio_ch_set__ordered_s_* %20, %21
  br i1 %22, label %23, label %45

23:                                               ; preds = %17
  %24 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %24, i32 0, i32 3
  %26 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %25, align 8
  store %struct.fio_ch_set__ordered_s_* %26, %struct.fio_ch_set__ordered_s_** %4, align 8
  br label %27

27:                                               ; preds = %41, %23
  %28 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %29 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %3, align 8
  %30 = icmp ult %struct.fio_ch_set__ordered_s_* %28, %29
  br i1 %30, label %31, label %44

31:                                               ; preds = %27
  %32 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %33 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 0, %34
  br i1 %35, label %40, label %36

36:                                               ; preds = %31
  %37 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %38 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %37, i32 0, i32 1
  %39 = load %struct.channel_s*, %struct.channel_s** %38, align 8
  call void @fio_channel_free(%struct.channel_s* %39)
  br label %40

40:                                               ; preds = %36, %31
  br label %41

41:                                               ; preds = %40
  %42 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %4, align 8
  %43 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %42, i32 1
  store %struct.fio_ch_set__ordered_s_* %43, %struct.fio_ch_set__ordered_s_** %4, align 8
  br label %27

44:                                               ; preds = %27
  br label %45

45:                                               ; preds = %44, %17, %1
  %46 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %47 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %46, i32 0, i32 4
  %48 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %47, align 8
  %49 = bitcast %struct.fio_ch_set__map_s_* %48 to i8*
  call void @free(i8* %49) #1
  %50 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %51 = getelementptr inbounds %struct.fio_ch_set_s, %struct.fio_ch_set_s* %50, i32 0, i32 3
  %52 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %51, align 8
  %53 = bitcast %struct.fio_ch_set__ordered_s_* %52 to i8*
  call void @free(i8* %53) #1
  %54 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %2, align 8
  %55 = bitcast %struct.fio_ch_set_s* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 48, i1 false)
  %56 = bitcast %struct.fio_ch_set_s* %54 to i8*
  %57 = bitcast %struct.fio_ch_set_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @fio_engine_set_count(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %3 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.fio_pubsub_engine_s* @fio_engine_set_last(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_pubsub_engine_s*, align 8
  %3 = alloca %struct.fio_engine_set_s*, align 8
  %4 = alloca %struct.fio_pubsub_engine_s*, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %3, align 8
  %5 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %3, align 8
  %6 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %5, i32 0, i32 3
  %7 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %6, align 8
  %8 = icmp ne %struct.fio_engine_set__ordered_s_* %7, null
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %3, align 8
  %11 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %9, %1
  %15 = bitcast %struct.fio_pubsub_engine_s** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 8, i1 false)
  %16 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %4, align 8
  store %struct.fio_pubsub_engine_s* %16, %struct.fio_pubsub_engine_s** %2, align 8
  br label %28

17:                                               ; preds = %9
  %18 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %3, align 8
  %19 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %19, align 8
  %21 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %3, align 8
  %22 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %21, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, 1
  %25 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %20, i64 %24
  %26 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %25, i32 0, i32 1
  %27 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %26, align 8
  store %struct.fio_pubsub_engine_s* %27, %struct.fio_pubsub_engine_s** %2, align 8
  br label %28

28:                                               ; preds = %17, %14
  %29 = load %struct.fio_pubsub_engine_s*, %struct.fio_pubsub_engine_s** %2, align 8
  ret %struct.fio_pubsub_engine_s* %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_engine_set_free(%struct.fio_engine_set_s*) #0 {
  %2 = alloca %struct.fio_engine_set_s*, align 8
  %3 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %4 = alloca %struct.fio_engine_set__ordered_s_*, align 8
  %5 = alloca %struct.fio_engine_set_s, align 8
  store %struct.fio_engine_set_s* %0, %struct.fio_engine_set_s** %2, align 8
  %6 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %7 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %6, i32 0, i32 3
  %8 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %7, align 8
  %9 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %9, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %8, i64 %11
  store %struct.fio_engine_set__ordered_s_* %12, %struct.fio_engine_set__ordered_s_** %3, align 8
  %13 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %13, i32 0, i32 3
  %15 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %14, align 8
  %16 = icmp ne %struct.fio_engine_set__ordered_s_* %15, null
  br i1 %16, label %17, label %42

17:                                               ; preds = %1
  %18 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %19 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %18, i32 0, i32 3
  %20 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %19, align 8
  %21 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %22 = icmp ne %struct.fio_engine_set__ordered_s_* %20, %21
  br i1 %22, label %23, label %42

23:                                               ; preds = %17
  %24 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %25 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %24, i32 0, i32 3
  %26 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %25, align 8
  store %struct.fio_engine_set__ordered_s_* %26, %struct.fio_engine_set__ordered_s_** %4, align 8
  br label %27

27:                                               ; preds = %38, %23
  %28 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %29 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %3, align 8
  %30 = icmp ult %struct.fio_engine_set__ordered_s_* %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %33 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 0, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %31
  br label %37

37:                                               ; preds = %36, %31
  br label %38

38:                                               ; preds = %37
  %39 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %4, align 8
  %40 = getelementptr inbounds %struct.fio_engine_set__ordered_s_, %struct.fio_engine_set__ordered_s_* %39, i32 1
  store %struct.fio_engine_set__ordered_s_* %40, %struct.fio_engine_set__ordered_s_** %4, align 8
  br label %27

41:                                               ; preds = %27
  br label %42

42:                                               ; preds = %41, %17, %1
  %43 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %44 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %43, i32 0, i32 4
  %45 = load %struct.fio_engine_set__map_s_*, %struct.fio_engine_set__map_s_** %44, align 8
  %46 = bitcast %struct.fio_engine_set__map_s_* %45 to i8*
  call void @free(i8* %46) #1
  %47 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %48 = getelementptr inbounds %struct.fio_engine_set_s, %struct.fio_engine_set_s* %47, i32 0, i32 3
  %49 = load %struct.fio_engine_set__ordered_s_*, %struct.fio_engine_set__ordered_s_** %48, align 8
  %50 = bitcast %struct.fio_engine_set__ordered_s_* %49 to i8*
  call void @free(i8* %50) #1
  %51 = load %struct.fio_engine_set_s*, %struct.fio_engine_set_s** %2, align 8
  %52 = bitcast %struct.fio_engine_set_s* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 48, i1 false)
  %53 = bitcast %struct.fio_engine_set_s* %51 to i8*
  %54 = bitcast %struct.fio_engine_set_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_msg_internal_finalize(%struct.fio_msg_internal_s*) #0 {
  %2 = alloca %struct.fio_msg_internal_s*, align 8
  store %struct.fio_msg_internal_s* %0, %struct.fio_msg_internal_s** %2, align 8
  %3 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %4 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %3, i32 0, i32 0
  %5 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %10 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %10, i32 0, i32 2
  store i8* null, i8** %11, align 8
  br label %12

12:                                               ; preds = %8, %1
  %13 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %14 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %14, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %2, align 8
  %20 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %20, i32 0, i32 2
  store i8* null, i8** %21, align 8
  br label %22

22:                                               ; preds = %18, %12
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_filter_find_dup(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.channel_s, align 8
  %4 = alloca %struct.channel_s*, align 8
  store i32 %0, i32* %2, align 4
  %5 = bitcast %struct.channel_s* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 64, i1 false)
  %6 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 0
  store i64 4, i64* %6, align 8
  %7 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %3, i32 0, i32 1
  %8 = bitcast i32* %2 to i8*
  store i8* %8, i8** %7, align 8
  %9 = load i32, i32* %2, align 4
  %10 = zext i32 %9 to i64
  %11 = call %struct.channel_s* @fio_channel_find_dup_internal(%struct.channel_s* %3, i64 %10, %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 0))
  store %struct.channel_s* %11, %struct.channel_s** %4, align 8
  %12 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_channel_find_dup(%struct.fio_str_info_s* byval(%struct.fio_str_info_s) align 8) #0 {
  %2 = alloca %struct.channel_s, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.channel_s*, align 8
  %5 = bitcast %struct.channel_s* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 64, i1 false)
  %6 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 0
  %7 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %2, i32 0, i32 1
  %10 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  store i8* %11, i8** %9, align 8
  %12 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.fio_str_info_s, %struct.fio_str_info_s* %0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = call i64 @fio_siphash13(i8* %13, i64 %15, i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64), i64 ptrtoint (%struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1) to i64))
  store i64 %16, i64* %3, align 8
  %17 = load i64, i64* %3, align 8
  %18 = call %struct.channel_s* @fio_channel_find_dup_internal(%struct.channel_s* %2, i64 %17, %struct.fio_collection_s* getelementptr inbounds (%struct.anon.13, %struct.anon.13* @fio_postoffice, i32 0, i32 1))
  store %struct.channel_s* %18, %struct.channel_s** %4, align 8
  %19 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_publish2channel_task(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.channel_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.channel_s*
  store %struct.channel_s* %8, %struct.channel_s** %5, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  br label %37

12:                                               ; preds = %2
  %13 = load i8*, i8** %4, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  br label %35

16:                                               ; preds = %12
  %17 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %18 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %17, i32 0, i32 6
  %19 = call i32 @fio_trylock(i8* %18)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @fio_publish2channel_task, void (i8*, i8*)** %22, align 8
  %23 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %24 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %25 = bitcast %struct.channel_s* %24 to i8*
  store i8* %25, i8** %23, align 8
  %26 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  %27 = load i8*, i8** %4, align 8
  store i8* %27, i8** %26, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_urgent)
  br label %37

28:                                               ; preds = %16
  %29 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %30 = load i8*, i8** %4, align 8
  %31 = bitcast i8* %30 to %struct.fio_msg_internal_s*
  call void @fio_publish2channel(%struct.channel_s* %29, %struct.fio_msg_internal_s* %31)
  %32 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %33 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %32, i32 0, i32 6
  %34 = call i32 @fio_unlock(i8* %33)
  br label %35

35:                                               ; preds = %28, %15
  %36 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  call void @fio_channel_free(%struct.channel_s* %36)
  br label %37

37:                                               ; preds = %35, %21, %11
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_channel_find_dup_internal(%struct.channel_s*, i64, %struct.fio_collection_s*) #0 {
  %4 = alloca %struct.channel_s*, align 8
  %5 = alloca %struct.channel_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.fio_collection_s*, align 8
  %8 = alloca %struct.channel_s*, align 8
  store %struct.channel_s* %0, %struct.channel_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store %struct.fio_collection_s* %2, %struct.fio_collection_s** %7, align 8
  %9 = load %struct.fio_collection_s*, %struct.fio_collection_s** %7, align 8
  %10 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %9, i32 0, i32 1
  call void @fio_lock(i8* %10)
  %11 = load %struct.fio_collection_s*, %struct.fio_collection_s** %7, align 8
  %12 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %11, i32 0, i32 0
  %13 = load i64, i64* %6, align 8
  %14 = load %struct.channel_s*, %struct.channel_s** %5, align 8
  %15 = call %struct.channel_s* @fio_ch_set_find(%struct.fio_ch_set_s* %12, i64 %13, %struct.channel_s* %14)
  store %struct.channel_s* %15, %struct.channel_s** %8, align 8
  %16 = load %struct.channel_s*, %struct.channel_s** %8, align 8
  %17 = icmp ne %struct.channel_s* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %3
  %19 = load %struct.fio_collection_s*, %struct.fio_collection_s** %7, align 8
  %20 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %19, i32 0, i32 1
  %21 = call i32 @fio_unlock(i8* %20)
  store %struct.channel_s* null, %struct.channel_s** %4, align 8
  br label %28

22:                                               ; preds = %3
  %23 = load %struct.channel_s*, %struct.channel_s** %8, align 8
  call void @fio_channel_dup(%struct.channel_s* %23)
  %24 = load %struct.fio_collection_s*, %struct.fio_collection_s** %7, align 8
  %25 = getelementptr inbounds %struct.fio_collection_s, %struct.fio_collection_s* %24, i32 0, i32 1
  %26 = call i32 @fio_unlock(i8* %25)
  %27 = load %struct.channel_s*, %struct.channel_s** %8, align 8
  store %struct.channel_s* %27, %struct.channel_s** %4, align 8
  br label %28

28:                                               ; preds = %22, %18
  %29 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.channel_s* @fio_ch_set_find(%struct.fio_ch_set_s*, i64, %struct.channel_s*) #0 {
  %4 = alloca %struct.channel_s*, align 8
  %5 = alloca %struct.fio_ch_set_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.channel_s*, align 8
  %8 = alloca %struct.fio_ch_set__map_s_*, align 8
  %9 = alloca %struct.channel_s*, align 8
  store %struct.fio_ch_set_s* %0, %struct.fio_ch_set_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store %struct.channel_s* %2, %struct.channel_s** %7, align 8
  %10 = load %struct.fio_ch_set_s*, %struct.fio_ch_set_s** %5, align 8
  %11 = load i64, i64* %6, align 8
  %12 = load %struct.channel_s*, %struct.channel_s** %7, align 8
  %13 = call %struct.fio_ch_set__map_s_* @fio_ch_set__find_map_pos_(%struct.fio_ch_set_s* %10, i64 %11, %struct.channel_s* %12)
  store %struct.fio_ch_set__map_s_* %13, %struct.fio_ch_set__map_s_** %8, align 8
  %14 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %8, align 8
  %15 = icmp ne %struct.fio_ch_set__map_s_* %14, null
  br i1 %15, label %16, label %21

16:                                               ; preds = %3
  %17 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %8, align 8
  %18 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %17, i32 0, i32 1
  %19 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %18, align 8
  %20 = icmp ne %struct.fio_ch_set__ordered_s_* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %16, %3
  %22 = bitcast %struct.channel_s** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 8, i1 false)
  %23 = load %struct.channel_s*, %struct.channel_s** %9, align 8
  store %struct.channel_s* %23, %struct.channel_s** %4, align 8
  br label %30

24:                                               ; preds = %16
  %25 = load %struct.fio_ch_set__map_s_*, %struct.fio_ch_set__map_s_** %8, align 8
  %26 = getelementptr inbounds %struct.fio_ch_set__map_s_, %struct.fio_ch_set__map_s_* %25, i32 0, i32 1
  %27 = load %struct.fio_ch_set__ordered_s_*, %struct.fio_ch_set__ordered_s_** %26, align 8
  %28 = getelementptr inbounds %struct.fio_ch_set__ordered_s_, %struct.fio_ch_set__ordered_s_* %27, i32 0, i32 1
  %29 = load %struct.channel_s*, %struct.channel_s** %28, align 8
  store %struct.channel_s* %29, %struct.channel_s** %4, align 8
  br label %30

30:                                               ; preds = %24, %21
  %31 = load %struct.channel_s*, %struct.channel_s** %4, align 8
  ret %struct.channel_s* %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_publish2channel(%struct.channel_s*, %struct.fio_msg_internal_s*) #0 {
  %3 = alloca %struct.channel_s*, align 8
  %4 = alloca %struct.fio_msg_internal_s*, align 8
  %5 = alloca %struct.fio_ls_embd_s*, align 8
  %6 = alloca %struct.subscription_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.fio_defer_task_s, align 8
  store %struct.channel_s* %0, %struct.channel_s** %3, align 8
  store %struct.fio_msg_internal_s* %1, %struct.fio_msg_internal_s** %4, align 8
  %12 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %13 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %12, i32 0, i32 3
  %14 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %13, i32 0, i32 1
  %15 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %14, align 8
  store %struct.fio_ls_embd_s* %15, %struct.fio_ls_embd_s** %5, align 8
  br label %16

16:                                               ; preds = %56, %2
  %17 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %5, align 8
  %18 = load %struct.channel_s*, %struct.channel_s** %3, align 8
  %19 = getelementptr inbounds %struct.channel_s, %struct.channel_s* %18, i32 0, i32 3
  %20 = icmp ne %struct.fio_ls_embd_s* %17, %19
  br i1 %20, label %21, label %60

21:                                               ; preds = %16
  %22 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %5, align 8
  %23 = ptrtoint %struct.fio_ls_embd_s* %22 to i64
  %24 = sub i64 %23, 0
  %25 = inttoptr i64 %24 to %struct.subscription_s*
  store %struct.subscription_s* %25, %struct.subscription_s** %6, align 8
  %26 = load %struct.subscription_s*, %struct.subscription_s** %6, align 8
  %27 = icmp ne %struct.subscription_s* %26, null
  br i1 %27, label %28, label %33

28:                                               ; preds = %21
  %29 = load %struct.subscription_s*, %struct.subscription_s** %6, align 8
  %30 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %29, i32 0, i32 2
  %31 = load void (%struct.fio_msg_s*)*, void (%struct.fio_msg_s*)** %30, align 8
  %32 = icmp eq void (%struct.fio_msg_s*)* %31, @fio_mock_on_message
  br i1 %32, label %33, label %34

33:                                               ; preds = %28, %21
  br label %56

34:                                               ; preds = %28
  %35 = load %struct.subscription_s*, %struct.subscription_s** %6, align 8
  %36 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %35, i32 0, i32 6
  store i64 1, i64* %7, align 8
  %37 = load i64, i64* %7, align 8
  %38 = atomicrmw volatile add i64* %36, i64 %37 seq_cst
  %39 = add i64 %38, %37
  store i64 %39, i64* %8, align 8
  %40 = load i64, i64* %8, align 8
  %41 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %42 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %41, i32 0, i32 2
  store i64 1, i64* %9, align 8
  %43 = load i64, i64* %9, align 8
  %44 = atomicrmw add i64* %42, i64 %43 seq_cst
  %45 = add i64 %44, %43
  store i64 %45, i64* %10, align 8
  %46 = load i64, i64* %10, align 8
  br label %47

47:                                               ; preds = %34
  %48 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 0
  store void (i8*, i8*)* @fio_perform_subscription_callback, void (i8*, i8*)** %48, align 8
  %49 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 1
  %50 = load %struct.subscription_s*, %struct.subscription_s** %6, align 8
  %51 = bitcast %struct.subscription_s* %50 to i8*
  store i8* %51, i8** %49, align 8
  %52 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %11, i32 0, i32 2
  %53 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  %54 = bitcast %struct.fio_msg_internal_s* %53 to i8*
  store i8* %54, i8** %52, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %11, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %55

55:                                               ; preds = %47
  br label %56

56:                                               ; preds = %55, %33
  %57 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %5, align 8
  %58 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %57, i32 0, i32 1
  %59 = load %struct.fio_ls_embd_s*, %struct.fio_ls_embd_s** %58, align 8
  store %struct.fio_ls_embd_s* %59, %struct.fio_ls_embd_s** %5, align 8
  br label %16

60:                                               ; preds = %16
  %61 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %4, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %61)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fio_perform_subscription_callback(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.subscription_s*, align 8
  %6 = alloca %struct.fio_defer_task_s, align 8
  %7 = alloca %struct.fio_msg_internal_s*, align 8
  %8 = alloca %struct.fio_msg_client_s, align 8
  %9 = alloca %struct.fio_defer_task_s, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = bitcast i8* %10 to %struct.subscription_s*
  store %struct.subscription_s* %11, %struct.subscription_s** %5, align 8
  %12 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %13 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %12, i32 0, i32 7
  %14 = call i32 @fio_trylock(i8* %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %2
  br label %17

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 0
  store void (i8*, i8*)* @fio_perform_subscription_callback, void (i8*, i8*)** %18, align 8
  %19 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 1
  %20 = load i8*, i8** %3, align 8
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %6, i32 0, i32 2
  %22 = load i8*, i8** %4, align 8
  store i8* %22, i8** %21, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %6, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %23

23:                                               ; preds = %17
  br label %87

24:                                               ; preds = %2
  %25 = load i8*, i8** %4, align 8
  %26 = bitcast i8* %25 to %struct.fio_msg_internal_s*
  store %struct.fio_msg_internal_s* %26, %struct.fio_msg_internal_s** %7, align 8
  %27 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 0
  %28 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 0
  %29 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  %30 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %29, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %28, align 8
  %32 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 1
  %33 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  %34 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %33, i32 0, i32 0
  %35 = bitcast %struct.fio_str_info_s* %32 to i8*
  %36 = bitcast %struct.fio_str_info_s* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false)
  %37 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 2
  %38 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  %39 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %38, i32 0, i32 1
  %40 = bitcast %struct.fio_str_info_s* %37 to i8*
  %41 = bitcast %struct.fio_str_info_s* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false)
  %42 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 3
  %43 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %44 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %43, i32 0, i32 4
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %42, align 8
  %46 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 4
  %47 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %48 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %47, i32 0, i32 5
  %49 = load i8*, i8** %48, align 8
  store i8* %49, i8** %46, align 8
  %50 = getelementptr inbounds %struct.fio_msg_s, %struct.fio_msg_s* %27, i32 0, i32 5
  store i8 0, i8* %50, align 8
  %51 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 1
  store i64 0, i64* %51, align 8
  %52 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 2
  %53 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  %54 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %53, i32 0, i32 5
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %52, align 8
  %56 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 3
  %57 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  %58 = getelementptr inbounds %struct.fio_msg_internal_s, %struct.fio_msg_internal_s* %57, i32 0, i32 6
  %59 = getelementptr inbounds [0 x %struct.fio_msg_metadata_s], [0 x %struct.fio_msg_metadata_s]* %58, i64 0, i64 0
  store %struct.fio_msg_metadata_s* %59, %struct.fio_msg_metadata_s** %56, align 8
  %60 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %61 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %60, i32 0, i32 2
  %62 = load void (%struct.fio_msg_s*)*, void (%struct.fio_msg_s*)** %61, align 8
  %63 = icmp ne void (%struct.fio_msg_s*)* %62, null
  br i1 %63, label %64, label %69

64:                                               ; preds = %24
  %65 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %66 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %65, i32 0, i32 2
  %67 = load void (%struct.fio_msg_s*)*, void (%struct.fio_msg_s*)** %66, align 8
  %68 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 0
  call void %67(%struct.fio_msg_s* %68)
  br label %69

69:                                               ; preds = %64, %24
  %70 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  %71 = getelementptr inbounds %struct.subscription_s, %struct.subscription_s* %70, i32 0, i32 7
  %72 = call i32 @fio_unlock(i8* %71)
  %73 = getelementptr inbounds %struct.fio_msg_client_s, %struct.fio_msg_client_s* %8, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %76, label %84

76:                                               ; preds = %69
  br label %77

77:                                               ; preds = %76
  %78 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 0
  store void (i8*, i8*)* @fio_perform_subscription_callback, void (i8*, i8*)** %78, align 8
  %79 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 1
  %80 = load i8*, i8** %3, align 8
  store i8* %80, i8** %79, align 8
  %81 = getelementptr inbounds %struct.fio_defer_task_s, %struct.fio_defer_task_s* %9, i32 0, i32 2
  %82 = load i8*, i8** %4, align 8
  store i8* %82, i8** %81, align 8
  call void @fio_defer_push_task_fn(%struct.fio_defer_task_s* byval(%struct.fio_defer_task_s) align 8 %9, %struct.fio_task_queue_s* @task_queue_normal)
  call void @fio_defer_thread_signal()
  br label %83

83:                                               ; preds = %77
  br label %87

84:                                               ; preds = %69
  %85 = load %struct.fio_msg_internal_s*, %struct.fio_msg_internal_s** %7, align 8
  call void @fio_msg_internal_free(%struct.fio_msg_internal_s* %85)
  %86 = load %struct.subscription_s*, %struct.subscription_s** %5, align 8
  call void @fio_subscription_free(%struct.subscription_s* %86)
  br label %87

87:                                               ; preds = %84, %83, %23
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @block_free(%struct.block_s*) #0 {
  %2 = alloca %struct.block_s*, align 8
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i64, align 8
  %8 = alloca %struct.block_node_s*, align 8
  store %struct.block_s* %0, %struct.block_s** %2, align 8
  %9 = load %struct.block_s*, %struct.block_s** %2, align 8
  %10 = getelementptr inbounds %struct.block_s, %struct.block_s* %9, i32 0, i32 1
  store i16 1, i16* %3, align 2
  %11 = load i16, i16* %3, align 2
  %12 = atomicrmw sub i16* %10, i16 %11 seq_cst
  %13 = sub i16 %12, %11
  store i16 %13, i16* %4, align 2
  %14 = load i16, i16* %4, align 2
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %1
  br label %64

17:                                               ; preds = %1
  %18 = load %struct.block_s*, %struct.block_s** %2, align 8
  %19 = getelementptr inbounds %struct.block_s, %struct.block_s* %18, i64 1
  %20 = bitcast %struct.block_s* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 32752, i1 false)
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  %21 = load %struct.block_s*, %struct.block_s** %2, align 8
  %22 = bitcast %struct.block_s* %21 to %struct.block_node_s*
  %23 = getelementptr inbounds %struct.block_node_s, %struct.block_node_s* %22, i32 0, i32 1
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0), %struct.fio_ls_embd_s* %23)
  %24 = load %struct.block_s*, %struct.block_s** %2, align 8
  %25 = getelementptr inbounds %struct.block_s, %struct.block_s* %24, i32 0, i32 0
  %26 = load %struct.block_s*, %struct.block_s** %25, align 8
  store %struct.block_s* %26, %struct.block_s** %2, align 8
  %27 = load %struct.block_s*, %struct.block_s** %2, align 8
  %28 = getelementptr inbounds %struct.block_s, %struct.block_s* %27, i32 0, i32 4
  store i16 1, i16* %5, align 2
  %29 = load i16, i16* %5, align 2
  %30 = atomicrmw sub i16* %28, i16 %29 seq_cst
  %31 = sub i16 %30, %29
  store i16 %31, i16* %6, align 2
  %32 = load i16, i16* %6, align 2
  %33 = icmp ne i16 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %17
  %35 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  br label %64

36:                                               ; preds = %17
  store i64 0, i64* %7, align 8
  br label %37

37:                                               ; preds = %50, %36
  %38 = load i64, i64* %7, align 8
  %39 = icmp ult i64 %38, 256
  br i1 %39, label %40, label %53

40:                                               ; preds = %37
  %41 = load %struct.block_s*, %struct.block_s** %2, align 8
  %42 = ptrtoint %struct.block_s* %41 to i64
  %43 = load i64, i64* %7, align 8
  %44 = mul i64 %43, 32768
  %45 = add i64 %42, %44
  %46 = inttoptr i64 %45 to %struct.block_node_s*
  store %struct.block_node_s* %46, %struct.block_node_s** %8, align 8
  %47 = load %struct.block_node_s*, %struct.block_node_s** %8, align 8
  %48 = getelementptr inbounds %struct.block_node_s, %struct.block_node_s* %47, i32 0, i32 1
  %49 = call %struct.fio_ls_embd_s* @fio_ls_embd_remove(%struct.fio_ls_embd_s* %48)
  br label %50

50:                                               ; preds = %40
  %51 = load i64, i64* %7, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %7, align 8
  br label %37

53:                                               ; preds = %37
  %54 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  %55 = load %struct.block_s*, %struct.block_s** %2, align 8
  %56 = bitcast %struct.block_s* %55 to i8*
  call void @sys_free(i8* %56, i64 8388608)
  br label %57

57:                                               ; preds = %53
  %58 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %59 = icmp sle i32 5, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = load %struct.block_s*, %struct.block_s** %2, align 8
  %62 = bitcast %struct.block_s* %61 to i8*
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.90, i64 0, i64 0), i8* %62)
  br label %63

63:                                               ; preds = %60, %57
  br label %64

64:                                               ; preds = %16, %34, %63
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.block_s* @block_new() #0 {
  %1 = alloca %struct.block_s*, align 8
  %2 = alloca %struct.block_s*, align 8
  %3 = alloca %struct.block_node_s*, align 8
  %4 = alloca i32, align 4
  store %struct.block_s* null, %struct.block_s** %2, align 8
  call void @fio_lock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  %5 = call %struct.fio_ls_embd_s* @fio_ls_embd_pop(%struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0))
  %6 = bitcast %struct.fio_ls_embd_s* %5 to %struct.block_s*
  store %struct.block_s* %6, %struct.block_s** %2, align 8
  %7 = load %struct.block_s*, %struct.block_s** %2, align 8
  %8 = icmp ne %struct.block_s* %7, null
  br i1 %8, label %9, label %30

9:                                                ; preds = %0
  %10 = load %struct.block_s*, %struct.block_s** %2, align 8
  %11 = ptrtoint %struct.block_s* %10 to i64
  %12 = sub i64 %11, ptrtoint (%struct.fio_ls_embd_s* getelementptr inbounds (%struct.block_node_s, %struct.block_node_s* null, i32 0, i32 1) to i64)
  %13 = inttoptr i64 %12 to %struct.block_node_s*
  %14 = bitcast %struct.block_node_s* %13 to %struct.block_s*
  store %struct.block_s* %14, %struct.block_s** %2, align 8
  %15 = load %struct.block_s*, %struct.block_s** %2, align 8
  %16 = ptrtoint %struct.block_s* %15 to i64
  %17 = and i64 %16, 32767
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %9
  br label %20

20:                                               ; preds = %19
  %21 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %22 = icmp sle i32 1, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.91, i64 0, i64 0))
  br label %24

24:                                               ; preds = %23, %20
  br label %25

25:                                               ; preds = %24
  call void @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i64 0, i64 0))
  call void @exit(i32 -1) #11
  unreachable

26:                                               ; preds = %9
  %27 = load %struct.block_s*, %struct.block_s** %2, align 8
  call void @block_init(%struct.block_s* %27)
  %28 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  %29 = load %struct.block_s*, %struct.block_s** %2, align 8
  store %struct.block_s* %29, %struct.block_s** %1, align 8
  br label %69

30:                                               ; preds = %0
  %31 = call i8* @sys_alloc(i64 8388608, i8 zeroext 0)
  %32 = bitcast i8* %31 to %struct.block_s*
  store %struct.block_s* %32, %struct.block_s** %2, align 8
  %33 = load %struct.block_s*, %struct.block_s** %2, align 8
  %34 = icmp ne %struct.block_s* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %30
  %36 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  store %struct.block_s* null, %struct.block_s** %1, align 8
  br label %69

37:                                               ; preds = %30
  br label %38

38:                                               ; preds = %37
  %39 = load i32, i32* @FIO_LOG_LEVEL, align 4
  %40 = icmp sle i32 5, %39
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  %42 = load %struct.block_s*, %struct.block_s** %2, align 8
  %43 = bitcast %struct.block_s* %42 to i8*
  call void (i8*, ...) @FIO_LOG2STDERR(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.93, i64 0, i64 0), i8* %43)
  br label %44

44:                                               ; preds = %41, %38
  br label %45

45:                                               ; preds = %44
  %46 = load %struct.block_s*, %struct.block_s** %2, align 8
  %47 = load %struct.block_s*, %struct.block_s** %2, align 8
  call void @block_init_root(%struct.block_s* %46, %struct.block_s* %47)
  %48 = load %struct.block_s*, %struct.block_s** %2, align 8
  %49 = bitcast %struct.block_s* %48 to %struct.block_node_s*
  store %struct.block_node_s* %49, %struct.block_node_s** %3, align 8
  store i32 1, i32* %4, align 4
  br label %50

50:                                               ; preds = %63, %45
  %51 = load i32, i32* %4, align 4
  %52 = icmp slt i32 %51, 256
  br i1 %52, label %53, label %66

53:                                               ; preds = %50
  %54 = load %struct.block_node_s*, %struct.block_node_s** %3, align 8
  %55 = ptrtoint %struct.block_node_s* %54 to i64
  %56 = add i64 %55, 32768
  %57 = inttoptr i64 %56 to %struct.block_node_s*
  store %struct.block_node_s* %57, %struct.block_node_s** %3, align 8
  %58 = load %struct.block_node_s*, %struct.block_node_s** %3, align 8
  %59 = bitcast %struct.block_node_s* %58 to %struct.block_s*
  %60 = load %struct.block_s*, %struct.block_s** %2, align 8
  call void @block_init_root(%struct.block_s* %59, %struct.block_s* %60)
  %61 = load %struct.block_node_s*, %struct.block_node_s** %3, align 8
  %62 = getelementptr inbounds %struct.block_node_s, %struct.block_node_s* %61, i32 0, i32 1
  call void @fio_ls_embd_push(%struct.fio_ls_embd_s* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 0), %struct.fio_ls_embd_s* %62)
  br label %63

63:                                               ; preds = %53
  %64 = load i32, i32* %4, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %4, align 4
  br label %50

66:                                               ; preds = %50
  %67 = call i32 @fio_unlock(i8* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 2))
  %68 = load %struct.block_s*, %struct.block_s** %2, align 8
  store %struct.block_s* %68, %struct.block_s** %1, align 8
  br label %69

69:                                               ; preds = %66, %35, %26
  %70 = load %struct.block_s*, %struct.block_s** %1, align 8
  ret %struct.block_s* %70
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_atfork(void ()*, void ()*, void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sys_free(i8*, i64) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call i32 @munmap(i8* %5, i64 %6) #1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @munmap(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @block_init(%struct.block_s*) #0 {
  %2 = alloca %struct.block_s*, align 8
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  store %struct.block_s* %0, %struct.block_s** %2, align 8
  %5 = load %struct.block_s*, %struct.block_s** %2, align 8
  %6 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 1
  store i16 1, i16* %6, align 8
  %7 = load %struct.block_s*, %struct.block_s** %2, align 8
  %8 = getelementptr inbounds %struct.block_s, %struct.block_s* %7, i32 0, i32 2
  store i16 2, i16* %8, align 2
  %9 = load %struct.block_s*, %struct.block_s** %2, align 8
  %10 = bitcast %struct.block_s* %9 to %struct.block_node_s*
  %11 = getelementptr inbounds %struct.block_node_s, %struct.block_node_s* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %11, i32 0, i32 1
  store %struct.fio_ls_embd_s* null, %struct.fio_ls_embd_s** %12, align 8
  %13 = load %struct.block_s*, %struct.block_s** %2, align 8
  %14 = bitcast %struct.block_s* %13 to %struct.block_node_s*
  %15 = getelementptr inbounds %struct.block_node_s, %struct.block_node_s* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.fio_ls_embd_s, %struct.fio_ls_embd_s* %15, i32 0, i32 0
  store %struct.fio_ls_embd_s* null, %struct.fio_ls_embd_s** %16, align 8
  %17 = load %struct.block_s*, %struct.block_s** %2, align 8
  %18 = getelementptr inbounds %struct.block_s, %struct.block_s* %17, i32 0, i32 0
  %19 = load %struct.block_s*, %struct.block_s** %18, align 8
  %20 = getelementptr inbounds %struct.block_s, %struct.block_s* %19, i32 0, i32 4
  store i16 1, i16* %3, align 2
  %21 = load i16, i16* %3, align 2
  %22 = atomicrmw add i16* %20, i16 %21 seq_cst
  %23 = add i16 %22, %21
  store i16 %23, i16* %4, align 2
  %24 = load i16, i16* %4, align 2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @sys_alloc(i64, i8 zeroext) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i8 %1, i8* %5, align 1
  %8 = load i8*, i8** @sys_alloc.next_alloc, align 8
  %9 = load i64, i64* %4, align 8
  %10 = call i8* @mmap(i8* %8, i64 %9, i32 3, i32 34, i32 -1, i64 0) #1
  store i8* %10, i8** %6, align 8
  %11 = load i8*, i8** %6, align 8
  %12 = icmp eq i8* %11, inttoptr (i64 -1 to i8*)
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %73

14:                                               ; preds = %2
  %15 = load i8*, i8** %6, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 32767
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %54

19:                                               ; preds = %14
  %20 = load i8*, i8** %6, align 8
  %21 = load i64, i64* %4, align 8
  %22 = call i32 @munmap(i8* %20, i64 %21) #1
  %23 = load i64, i64* %4, align 8
  %24 = add i64 %23, 32768
  %25 = call i8* @mmap(i8* null, i64 %24, i32 3, i32 34, i32 -1, i64 0) #1
  store i8* %25, i8** %6, align 8
  %26 = load i8*, i8** %6, align 8
  %27 = icmp eq i8* %26, inttoptr (i64 -1 to i8*)
  br i1 %27, label %28, label %29

28:                                               ; preds = %19
  store i8* null, i8** %3, align 8
  br label %73

29:                                               ; preds = %19
  %30 = load i8*, i8** %6, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 32767
  %33 = sub i64 32768, %32
  store i64 %33, i64* %7, align 8
  %34 = load i64, i64* %7, align 8
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %45

36:                                               ; preds = %29
  %37 = load i8*, i8** %6, align 8
  %38 = load i64, i64* %7, align 8
  %39 = call i32 @munmap(i8* %37, i64 %38) #1
  %40 = load i8*, i8** %6, align 8
  %41 = ptrtoint i8* %40 to i64
  %42 = load i64, i64* %7, align 8
  %43 = add i64 %41, %42
  %44 = inttoptr i64 %43 to i8*
  store i8* %44, i8** %6, align 8
  br label %45

45:                                               ; preds = %36, %29
  %46 = load i8*, i8** %6, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = load i64, i64* %4, align 8
  %49 = add i64 %47, %48
  %50 = inttoptr i64 %49 to i8*
  %51 = load i64, i64* %7, align 8
  %52 = sub i64 32768, %51
  %53 = call i32 @munmap(i8* %50, i64 %52) #1
  br label %54

54:                                               ; preds = %45, %14
  %55 = load i8, i8* %5, align 1
  %56 = zext i8 %55 to i32
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %54
  %59 = load i8*, i8** %6, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = add i64 %60, 8388608
  %62 = inttoptr i64 %61 to i8*
  store i8* %62, i8** @sys_alloc.next_alloc, align 8
  br label %71

63:                                               ; preds = %54
  %64 = load i8*, i8** %6, align 8
  %65 = ptrtoint i8* %64 to i64
  %66 = load i8, i8* %5, align 1
  %67 = zext i8 %66 to i64
  %68 = mul i64 %67, 1073741824
  %69 = add i64 %65, %68
  %70 = inttoptr i64 %69 to i8*
  store i8* %70, i8** @sys_alloc.next_alloc, align 8
  br label %71

71:                                               ; preds = %63, %58
  %72 = load i8*, i8** %6, align 8
  store i8* %72, i8** %3, align 8
  br label %73

73:                                               ; preds = %71, %28, %13
  %74 = load i8*, i8** %3, align 8
  ret i8* %74
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @block_init_root(%struct.block_s*, %struct.block_s*) #0 {
  %3 = alloca %struct.block_s*, align 8
  %4 = alloca %struct.block_s*, align 8
  %5 = alloca %struct.block_s, align 8
  store %struct.block_s* %0, %struct.block_s** %3, align 8
  store %struct.block_s* %1, %struct.block_s** %4, align 8
  %6 = load %struct.block_s*, %struct.block_s** %3, align 8
  %7 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 0
  %8 = load %struct.block_s*, %struct.block_s** %4, align 8
  store %struct.block_s* %8, %struct.block_s** %7, align 8
  %9 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 1
  store i16 1, i16* %9, align 8
  %10 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 2
  store i16 2, i16* %10, align 2
  %11 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 3
  store i16 0, i16* %11, align 4
  %12 = getelementptr inbounds %struct.block_s, %struct.block_s* %5, i32 0, i32 4
  store i16 1, i16* %12, align 2
  %13 = bitcast %struct.block_s* %6 to i8*
  %14 = bitcast %struct.block_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @mmap(i8*, i64, i32, i32, i32, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @sys_round_size(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4096
  %5 = load i64, i64* %2, align 8
  %6 = and i64 %5, 4095
  %7 = icmp ne i64 %6, 0
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = mul nsw i32 4096, %10
  %12 = sext i32 %11 to i64
  %13 = add i64 %4, %12
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.arena_s* @arena_lock(%struct.arena_s*) #0 {
  %2 = alloca %struct.arena_s*, align 8
  %3 = alloca %struct.arena_s*, align 8
  %4 = alloca %struct.arena_s*, align 8
  %5 = alloca i64, align 8
  store %struct.arena_s* %0, %struct.arena_s** %3, align 8
  %6 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  %7 = icmp ne %struct.arena_s* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  store %struct.arena_s* %9, %struct.arena_s** %3, align 8
  br label %10

10:                                               ; preds = %8, %1
  %11 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  %12 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %11, i32 0, i32 1
  %13 = call i32 @fio_trylock(i8* %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  store %struct.arena_s* %16, %struct.arena_s** %2, align 8
  br label %59

17:                                               ; preds = %10
  br label %18

18:                                               ; preds = %58, %17
  %19 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  store %struct.arena_s* %19, %struct.arena_s** %4, align 8
  %20 = load %struct.arena_s*, %struct.arena_s** %4, align 8
  %21 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %22 = ptrtoint %struct.arena_s* %20 to i64
  %23 = ptrtoint %struct.arena_s* %21 to i64
  %24 = sub i64 %22, %23
  %25 = sdiv exact i64 %24, 16
  store i64 %25, i64* %5, align 8
  br label %26

26:                                               ; preds = %48, %18
  %27 = load i64, i64* %5, align 8
  %28 = load i64, i64* getelementptr inbounds (%struct.anon.16, %struct.anon.16* @memory, i32 0, i32 1), align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %51

30:                                               ; preds = %26
  %31 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  %32 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %33 = icmp eq %struct.arena_s* %31, %32
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = load %struct.arena_s*, %struct.arena_s** %4, align 8
  %36 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  %37 = icmp ne %struct.arena_s* %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %34, %30
  %39 = load %struct.arena_s*, %struct.arena_s** %4, align 8
  %40 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %39, i32 0, i32 1
  %41 = call i32 @fio_trylock(i8* %40)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %38
  %44 = load %struct.arena_s*, %struct.arena_s** %4, align 8
  store %struct.arena_s* %44, %struct.arena_s** %2, align 8
  br label %59

45:                                               ; preds = %38, %34
  %46 = load %struct.arena_s*, %struct.arena_s** %4, align 8
  %47 = getelementptr inbounds %struct.arena_s, %struct.arena_s* %46, i32 1
  store %struct.arena_s* %47, %struct.arena_s** %4, align 8
  br label %48

48:                                               ; preds = %45
  %49 = load i64, i64* %5, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %5, align 8
  br label %26

51:                                               ; preds = %26
  %52 = load %struct.arena_s*, %struct.arena_s** %3, align 8
  %53 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  %54 = icmp eq %struct.arena_s* %52, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %51
  call void @fio_reschedule_thread()
  br label %56

56:                                               ; preds = %55, %51
  %57 = load %struct.arena_s*, %struct.arena_s** @arenas, align 8
  store %struct.arena_s* %57, %struct.arena_s** %3, align 8
  br label %58

58:                                               ; preds = %56
  br i1 true, label %18, label %59

59:                                               ; preds = %15, %43, %58
  %60 = load %struct.arena_s*, %struct.arena_s** %2, align 8
  ret %struct.arena_s* %60
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @sys_realloc(i8*, i64, i64) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %6, align 8
  %11 = icmp ugt i64 %9, %10
  br i1 %11, label %12, label %61

12:                                               ; preds = %3
  %13 = load i8*, i8** %5, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %7, align 8
  %16 = call i8* (i8*, i64, i64, i32, ...) @mremap(i8* %13, i64 %14, i64 %15, i32 0) #1
  store i8* %16, i8** %8, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = icmp ne i8* %17, inttoptr (i64 -1 to i8*)
  br i1 %18, label %19, label %21

19:                                               ; preds = %12
  %20 = load i8*, i8** %8, align 8
  store i8* %20, i8** %4, align 8
  br label %78

21:                                               ; preds = %12
  %22 = load i8*, i8** %5, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = load i64, i64* %6, align 8
  %25 = add i64 %23, %24
  %26 = inttoptr i64 %25 to i8*
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %6, align 8
  %29 = sub i64 %27, %28
  %30 = call i8* @mmap(i8* %26, i64 %29, i32 3, i32 34, i32 -1, i64 0) #1
  store i8* %30, i8** %8, align 8
  %31 = load i8*, i8** %8, align 8
  %32 = load i8*, i8** %5, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = load i64, i64* %6, align 8
  %35 = add i64 %33, %34
  %36 = inttoptr i64 %35 to i8*
  %37 = icmp eq i8* %31, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %21
  %39 = load i8*, i8** %5, align 8
  store i8* %39, i8** %8, align 8
  br label %59

40:                                               ; preds = %21
  %41 = load i8*, i8** %8, align 8
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %6, align 8
  %44 = sub i64 %42, %43
  %45 = call i32 @munmap(i8* %41, i64 %44) #1
  %46 = load i64, i64* %7, align 8
  %47 = call i8* @sys_alloc(i64 %46, i8 zeroext 1)
  store i8* %47, i8** %8, align 8
  %48 = load i8*, i8** %8, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %40
  store i8* null, i8** %4, align 8
  br label %78

51:                                               ; preds = %40
  %52 = load i8*, i8** %8, align 8
  %53 = load i8*, i8** %5, align 8
  %54 = load i64, i64* %6, align 8
  %55 = lshr i64 %54, 4
  call void @fio_memcpy(i8* %52, i8* %53, i64 %55)
  %56 = load i8*, i8** %5, align 8
  %57 = load i64, i64* %6, align 8
  %58 = call i32 @munmap(i8* %56, i64 %57) #1
  br label %59

59:                                               ; preds = %51, %38
  %60 = load i8*, i8** %8, align 8
  store i8* %60, i8** %4, align 8
  br label %78

61:                                               ; preds = %3
  %62 = load i64, i64* %7, align 8
  %63 = add i64 %62, 4096
  %64 = load i64, i64* %6, align 8
  %65 = icmp ult i64 %63, %64
  br i1 %65, label %66, label %76

66:                                               ; preds = %61
  %67 = load i8*, i8** %5, align 8
  %68 = ptrtoint i8* %67 to i64
  %69 = load i64, i64* %7, align 8
  %70 = add i64 %68, %69
  %71 = inttoptr i64 %70 to i8*
  %72 = load i64, i64* %6, align 8
  %73 = load i64, i64* %7, align 8
  %74 = sub i64 %72, %73
  %75 = call i32 @munmap(i8* %71, i64 %74) #1
  br label %76

76:                                               ; preds = %66, %61
  %77 = load i8*, i8** %5, align 8
  store i8* %77, i8** %4, align 8
  br label %78

78:                                               ; preds = %76, %59, %50, %19
  %79 = load i8*, i8** %4, align 8
  ret i8* %79
}

; Function Attrs: nounwind
declare dso_local i8* @mremap(i8*, i64, i64, i32, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.1-12 "}
!2 = !{i32 458570}
!3 = !{!4}
!4 = !{i64 2, i64 3, i1 false}
!5 = !{i32 458214}
!6 = !{i32 458299}
